#<AdxTL>@(#)0.0.0.0 $Revision$Class Documentation
# Supervisor
## CRUD-CLASSE ## ADOCUMENT
# 2018-08-27 13:01:05 269


############################################################################################
### Subprog AUPDATE
############################################################################################
Subprog AUPDATE(ADOCUMENT,ASTATUS)
Variable Instance ADOCUMENT Using R_ADOCUMENT
Variable Integer ASTATUS

If ADOCUMENT = null : End : Endif

Gosub AVARIABLES From WMR00ADOCUMENT
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If fmet ADOCUMENT.ACTX.AGETAFCRIGHT(ADOCUMENT,"GESADO",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AUPDATE_END : Endif
If fmet ADOCUMENT.ACTX.AGETAFCRIGHTU(ADOCUMENT,"GESADO",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AUPDATE_END
Endif

Gosub AREPCONTROL_AUPDATE
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If !adxlog
 Gosub AUPDATE_TR_ADOCUMENT
Else
 Gosub AUPDATE_ADOCUMENT
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_END : Return : Endif

Gosub _AUPDATE_AFTER
[L]A_I = ADOCUMENT.freeSnapshot
ADOCUMENT.snapshotEnabled = 1
$AUPDATE_END
End

#-----------------------------------------------------#
$AREPCONTROL_AUPDATE
ADOCUMENT.ASTALIN = [V]CST_AUPD
ADOCUMENT.ADO.ASTALIN = [V]CST_AUPD
[L]A_ASTALIN = ADOCUMENT.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AUPDATE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = ADOCUMENT.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AUPDATE_CONTROL
Gosub _AUPDATE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet ADOCUMENT._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet ADOCUMENT._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet ADOCUMENT._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AUPDATE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_BEFORE
If ADOCUMENT.ADO.ASTALIN = [V]CST_ANEWDEL : Return : Endif
ADOCUMENT.ADO.ASTALIN = [V]CST_AUPD
If [V]CST_ASTALIN(ADOCUMENT.ADO.ASTALIN)<>""
 [L]A_ASTALIN = ADOCUMENT.ADO.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ADO.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
A_N2=1
If ADOCUMENT.ADO.ADH(A_N2) <> null
& and ADOCUMENT.ADO.ADH(A_N2).ASTALIN<>[V]CST_ANEWDEL
 If ADOCUMENT.ADO.ADH(A_N2).ASTALIN<>[V]CST_ANEW & ADOCUMENT.ADO.ASTALIN=[V]CST_ADEL
  ADOCUMENT.ADO.ADH(A_N2).ASTALIN = [V]CST_ADEL
 Endif
 If ADOCUMENT.ADO.ADH(A_N2).ASTALIN=[V]CST_ANEW & find(ADOCUMENT.ADO.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL)>0
  ADOCUMENT.ADO.ADH(A_N2).ASTALIN = [V]CST_ANEWDEL
 Endif
 If [V]CST_ASTALIN(ADOCUMENT.ADO.ADH(A_N2).ASTALIN)<>""
  [L]A_ASTALIN = ADOCUMENT.ADO.ADH(A_N2).ASTALIN
  [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ADO.ADH(A_N2).ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_AFTER
A_N2=1
If ADOCUMENT.ADO.ADH(A_N2) <> null
& and ADOCUMENT.ADO.ADH(A_N2).ASTALIN<>[V]CST_ANEWDEL
 If [V]CST_ASTALIN(ADOCUMENT.ADO.ADH(A_N2).ASTALIN)<>""
  [L]A_ASTALIN = ADOCUMENT.ADO.ADH(A_N2).ASTALIN
  [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ADO.ADH(A_N2).ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

If [V]CST_ASTALIN(ADOCUMENT.ADO.ASTALIN)<>""
 [L]A_ASTALIN = ADOCUMENT.ADO.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ADO.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
Return

#-----------------------------------------------------#
$AUPDATE_TR_ADOCUMENT
Trbegin [F:ADO]
 Gosub AUPDATE_ADOCUMENT
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AUPDATE_AFTER
If find(ADOCUMENT.ADO.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 ADOCUMENT.ADO.ASTALIN = [V]CST_ALL
Endif
Local Integer ASTATUS2
A_N2=1
If ADOCUMENT.ADO.ADH(A_N2) <> null
 If ADOCUMENT.ADO.ADH(A_N2).ASTALIN=[V]CST_ADEL or ADOCUMENT.ADO.ADH(A_N2).ASTALIN=[V]CST_ANEWDEL
  FreeInstance ADOCUMENT.ADO.ADH(A_N2)
  ADOCUMENT.ADO.ADH(A_N2) = null
 Elsif ADOCUMENT.ADO.ADH(A_N2).ASTALIN <> [V]CST_ALL
  ADOCUMENT.ADO.ADH(A_N2).ASTALIN = [V]CST_ALL
 Endif
 [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
Endif
Return

#-----------------------------------------------------#
$AUPDATE_ADOCUMENT
[L]A_ASTALIN = ADOCUMENT.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ADO._AUPDATE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = ADOCUMENT.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AUPDATE_ABORT
Rollback
$_AUPDATE_ABORT
If ADOCUMENT.snapshotEnabled=1
 [L]A_RETIK = ADOCUMENT.revertUpdTick
Endif
Local Integer ASTATUS2
A_N2=1
If ADOCUMENT.ADO.ADH(A_N2) <> null
 If ADOCUMENT.ADO.ADH(A_N2).ASTALIN=[V]CST_ANEWDEL
  ADOCUMENT.ADO.ADH(A_N2).ASTALIN = [V]CST_ANEW
 Endif
 [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
Endif

[L]ASTATUS = max(fmet ADOCUMENT.ACTION("AUPDATE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



