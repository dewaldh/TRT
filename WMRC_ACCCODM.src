#<AdxTL>@(#)0.0.0.0 $Revision$Class Access codes
# Supervisor
## CRUD-CLASSE ## ACCCODM
# 2018-08-27 13:00:26 878


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(ACCCODM,ASTATUS)
Variable Instance ACCCODM Using R_ACCCODM
Variable Integer ASTATUS

If ACCCODM = null : End : Endif

Gosub AVARIABLES From WMR00ACCCODM
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If fmet ACCCODM.ACTX.AGETAFCRIGHT(ACCCODM,"GESACS",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END : Endif
If fmet ACCCODM.ACTX.AGETAFCRIGHTC(ACCCODM,"GESACS",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END
Endif

Gosub AREPCONTROL_AINSERT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_ACCCODM
Else
 Gosub AINSERT_ACCCODM
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = ACCCODM.freeSnapshot
ACCCODM.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
ACCCODM.ASTALIN = [V]CST_ANEW
ACCCODM.ACS.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet ACCCODM.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ACCCODM.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet ACCCODM._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet ACCCODM._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet ACCCODM._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If ACCCODM.ACS.ASTALIN = [V]CST_ANEWDEL : Return : Endif
ACCCODM.ACS.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet ACCCODM.ACS.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet ACCCODM.ACS.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_ACCCODM
Trbegin [F:ACS]
 Gosub AINSERT_ACCCODM
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(ACCCODM.ACS.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 ACCCODM.ACS.ASTALIN = [V]CST_ALL
Endif
Return

#-----------------------------------------------------#
$AINSERT_ACCCODM
[L]ASTATUS = max([L]ASTATUS,fmet ACCCODM.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ACCCODM.ACS._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ACCCODM.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If ACCCODM.snapshotEnabled=1
 [L]A_RETIK = ACCCODM.revertUpdTick
Endif
[L]ASTATUS = max(fmet ACCCODM.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



