#<AdxTL>@(#)0.0.0.0 $Revision$Class Locations
# Supervisor
## CRUD-CLASSE ## STOLOC
# 2018-08-27 12:50:08 252

Gosub TEST From WMCR_STOLOC : End

############################################################################################
## C : Subprog AINSERT(INSTANCE)
## R : Subprog AREAD(INSTANCE,STOFCY,LOC)
## U : Subprog AUPDATE(INSTANCE)
############################################################################################
# STOLOC : STOLOC
# STOLOCAFF : STOLOC STOLOCAFF
# STOCK : STOLOC STOCK
############################################################################################

############################################################################################
### AVARIABLES
############################################################################################
$AVARIABLES
[L]ASTATUS =max([L]ASTATUS,fmet STOLOC._ADELERRORS([V]CST_ALLERRORS))
$_AVARIABLES
Local    Integer     A_LEVEL,A_I,A_NEWCOL,A_N1,A_N2,A_S2,A_N3,A_S3
Local    Integer    ASTATUS,A_RETIK,A_TYPMAJ,A_ASTALIN
Local    Char        A_STRSITE(GLONFCY),A_STRACC(GLONACS),CURPRO(50),A_PARENT(50),A_PATH(200),A_ABR(GLONABR),A_ERROR(250)
Local    Uuident    A_UUID

[L]A_LEVEL    = STOLOC.ACTX.LEVWML
[L]ASTATUS  = 0

Onerrgo ERR_OPENTAB
If find(STOLOC.ACTX.AFOLDER,nomap,"")>0
 Local File STOLOC [STC]
 Local File STOLOCAFF [STF]
 Local File STOCK [STO]
Else
 Local File =STOLOC.ACTX.AFOLDER+".STOLOC" [STC]
 Local File =STOLOC.ACTX.AFOLDER+".STOLOCAFF" [STF]
 Local File =STOLOC.ACTX.AFOLDER+".STOCK" [STO]
Endif
Onerrgo
Return

$ERR_OPENTAB
[L]ASTATUS = max([L]ASTATUS,fmet STOLOC.ASETERROR("",errp+"("+num$(errl)+")"-mess(6,123,1)-num$(errn)-errmes$(errn)-errm,[V]CST_AERROR))
Resume

############################################################################################
### Link
############################################################################################
$AOPEN_LINK
Gosub AVARIABLES
Link [STC] With
& [STF]STF0 = [F:STC]STOFCY;[F:STC]LOC,
& [STO]STO4 = [F:STC]STOFCY;[F:STC]LOC
& As [LNK_]
Return

############################################################################################
### STOLOC(WSTC)
############################################################################################
Funprog  _MAJSQL_STOLOC(WSTC)
Variable Instance WSTC Using C_STOLOC
Local Integer ASTATUS,A_I,A_J
Default File [F:STC]
If WSTC.ASTALIN=[V]CST_ANEW
 Call INICRE(WSTC) From ASYRSUB
 SetInstance [F:STC] With WSTC
 Write [F:STC]
 If fstat
  Call FSTA("STC",WSTC,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WSTC.updTick = [F:STC]updTick
Elsif WSTC.ASTALIN=[V]CST_ALL or WSTC.ASTALIN=[V]CST_AUPD
 Call INIUPD(WSTC) From ASYRSUB
 SetInstance [F:STC] With WSTC
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WSTC,"STOLOC")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:STC]STC0 = [F:STC]STOFCY;[F:STC]LOC
 If fstat
  Call FSTA("STC",WSTC,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WSTC.updTick = [F:STC]updTick
Elsif WSTC.ASTALIN=[V]CST_ADEL
 SetInstance [F:STC] With WSTC
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WSTC,"STOLOC")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:STC]STC0 = [F:STC]STOFCY;[F:STC]LOC
 If fstat
  Call FSTA("STC",WSTC,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### STOLOCAFF(WSTF)
############################################################################################
Funprog  _MAJSQL_STOLOCAFF(WSTF)
Variable Instance WSTF Using C_STOLOCAFF
Local Integer ASTATUS,A_I,A_J
Default File [F:STF]
If WSTF.ASTALIN=[V]CST_ANEW
 Call INICRE(WSTF) From ASYRSUB
 SetInstance [F:STF] With WSTF
 Write [F:STF]
 If fstat
  Call FSTA("STF",WSTF,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WSTF.updTick = [F:STF]updTick
Elsif WSTF.ASTALIN=[V]CST_ALL or WSTF.ASTALIN=[V]CST_AUPD
 Call INIUPD(WSTF) From ASYRSUB
 SetInstance [F:STF] With WSTF
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WSTF,"STOLOCAFF")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:STF]STF0 = [F:STF]STOFCY;[F:STF]LOC;[F:STF]ITMREF
 If fstat
  Call FSTA("STF",WSTF,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WSTF.updTick = [F:STF]updTick
Elsif WSTF.ASTALIN=[V]CST_ADEL
 SetInstance [F:STF] With WSTF
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WSTF,"STOLOCAFF")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:STF]STF0 = [F:STF]STOFCY;[F:STF]LOC;[F:STF]ITMREF
 If fstat
  Call FSTA("STF",WSTF,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### STOCK(WSTO)
############################################################################################
Funprog  _MAJSQL_STOCK(WSTO)
Variable Instance WSTO Using C_STOCK
Local Integer ASTATUS,A_I,A_J
Default File [F:STO]
If WSTO.ASTALIN=[V]CST_ANEW
 Call INICRE(WSTO) From ASYRSUB
 SetInstance [F:STO] With WSTO
 Write [F:STO]
 If fstat
  Call FSTA("STO",WSTO,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WSTO.updTick = [F:STO]updTick
Elsif WSTO.ASTALIN=[V]CST_ALL or WSTO.ASTALIN=[V]CST_AUPD
 Call INIUPD(WSTO) From ASYRSUB
 SetInstance [F:STO] With WSTO
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WSTO,"STOCK")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:STO]STO4 = [F:STO]STOFCY;[F:STO]LOC
 If fstat
  Call FSTA("STO",WSTO,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WSTO.updTick = [F:STO]updTick
Elsif WSTO.ASTALIN=[V]CST_ADEL
 SetInstance [F:STO] With WSTO
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WSTO,"STOCK")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:STO]STO4 = [F:STO]STOFCY;[F:STO]LOC
 If fstat
  Call FSTA("STO",WSTO,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK



