#<AdxTL>@(#)0.0.0.0 $Revision$Class Standard cost
# Supervisor
## CRUD-CLASSE ## ITMCOSTD
# 2018-08-27 12:34:57 607


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ITMCOST [ITC_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ITMCOSTD") From ASYRCOM : Endif
Local Instance ITMCOSTD Using C_ITMCOSTD

If !SILENCE : Call TRACE("3 --> New Instance C_ITMCOSTD") From ASYRCOM : Endif
ITMCOSTD = NewInstance C_ITMCOSTD AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ITC_]ITC0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ITMCOSTD") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.AREAD([ITC_]STOFCY,[ITC_]ITMREF,[ITC_]CSTTYP,[ITC_]ITCSEQ,[ITC_]UID))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ITMCOSTD.STOFCY ="-num$(ITMCOSTD.STOFCY)) From ASYRCOM
 Call TRACE("ITMCOSTD.ITMREF ="-num$(ITMCOSTD.ITMREF)) From ASYRCOM
 Call TRACE("ITMCOSTD.CSTTYP ="-num$(ITMCOSTD.CSTTYP)) From ASYRCOM
 Call TRACE("ITMCOSTD.ITCSEQ ="-num$(ITMCOSTD.ITCSEQ)) From ASYRCOM
 Call TRACE("ITMCOSTD.UID ="-num$(ITMCOSTD.UID)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ITMCOSTD.AKEYS)
  Call TRACE("-"-num$(I)-":"-ITMCOSTD.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ITC_]
FreeGroup ITMCOSTD
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ITMCOSTD,ACLE,ASTATUS,_ETAG)
Variable Instance ITMCOSTD Using C_ITMCOSTD
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _STOFCY(5)
Local Char _ITMREF(20)
Local Tinyint _CSTTYP
Local Integer _ITCSEQ
Local Integer _UID
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_STOFCY = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_ITMREF = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_CSTTYP = val([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_ITCSEQ = val([L]CLE(4)) : Endif
If [L]CLE(5)<>"" : [L]_UID = val([L]CLE(5)) : Endif
Raz [L]_ETAG
Local File ITMCOST [ITC]
Default File [F:ITC]
Read [F:ITC]ITC0 = [L]_STOFCY;[L]_ITMREF;[L]_CSTTYP;[L]_ITCSEQ;[L]_UID
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ITC]UPDTICK)>0
 [L]_ETAG = num$([F:ITC]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ITMCOSTD,ACLE,ASTATUS)
Variable Instance ITMCOSTD Using C_ITMCOSTD
Value Char ACLE
Variable Integer ASTATUS
Local Char _STOFCY(5)
Local Char _ITMREF(20)
Local Tinyint _CSTTYP
Local Integer _ITCSEQ
Local Integer _UID
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_STOFCY = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_ITMREF = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_CSTTYP = val([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_ITCSEQ = val([L]CLE(4)) : Endif
If [L]CLE(5)<>"" : [L]_UID = val([L]CLE(5)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.AREAD([L]_STOFCY,[L]_ITMREF,[L]_CSTTYP,[L]_ITCSEQ,[L]_UID))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ITMCOSTD,_STOFCY,_ITMREF,_CSTTYP,_ITCSEQ,_UID,ASTATUS)
Variable Instance ITMCOSTD Using C_ITMCOSTD
Value Char _STOFCY
Value Char _ITMREF
Value Tinyint _CSTTYP
Value Integer _ITCSEQ
Value Integer _UID
Variable Integer ASTATUS

If ITMCOSTD = null : End : Endif

Gosub AVARIABLES From WMC00ITMCOSTD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ITMCOSTD.APARENT=null
 [L]A_I = ITMCOSTD.freeSnapshot
 ITMCOSTD.snapshotEnabled = 0
 ITMCOSTD.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ITMCOSTD.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ITMCOSTD.APARENT=null
 ITMCOSTD.snapshotEnabled = 1
 ITMCOSTD.setAccessorEnabled = 1
Endif
LogicClose File [ITC] ,[ITM] ,[ITF]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD._ACTION_PARAM("AREAD_BEFORE",[L]_STOFCY,[L]_ITMREF,[L]_CSTTYP,[L]_ITCSEQ,[L]_UID))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:ITC]
Read [F:ITC]ITC0 = [L]_STOFCY;[L]_ITMREF;[L]_CSTTYP;[L]_ITCSEQ;[L]_UID
If fstat
[L]A_ERROR = [L]_STOFCY+"~"+[L]_ITMREF+"~"+num$([L]_CSTTYP)+"~"+num$([L]_ITCSEQ)+"~"+num$([L]_UID)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ITMCOSTD,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
If ([F:ITC]CSTTYP=1)=0
[L]A_ERROR = [L]_STOFCY+"~"+[L]_ITMREF+"~"+num$([L]_CSTTYP)+"~"+num$([L]_ITCSEQ)+"~"+num$([L]_UID)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ITMCOSTD,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:ITC]STOFCY
[L]A_STRACC = ""
If dim([F:ITC]AUUID)>0 & [F:ITC]AUUID=NullUuid
 [F:ITC]AUUID = getUuid
Endif
SetInstance ITMCOSTD With [F:ITC]
ITMCOSTD.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:ITM]
 [L]A_N2=1
 Read [F:ITM]ITM0 = [F:ITC]ITMREF
 If !fstat
  Callmet ITMCOSTD.ITM(A_N2).AREAD([F:ITM]ITMREF)
  ITMCOSTD.ITM(A_N2).ASTALIN = [V]CST_ALL
  [L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.ITM(A_N2).ASETATTRIBUTE("ITMREF","$isDisabled","true"))
 Elsif fstat
  [L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.ITM(A_N2).ASETERROR("",func ASYRFNC.MES1(mess(00112,00143,1),"ITM")+" : "+num$([F:ITC]ITMREF)
&  -":"-func ASYRFNC.MES1(mess(93,140,1),"ITMMASTER"),[V]CST_AWARNING))
 Endif
Endif
#-----------------------------------------------------#

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:ITF]
 [L]A_N2=1
 Read [F:ITF]ITF0 = [F:ITC]ITMREF;[F:ITC]STOFCY
 If !fstat
  Callmet ITMCOSTD.ITF(A_N2).AREAD([F:ITF]ITMREF,[F:ITF]STOFCY)
  ITMCOSTD.ITF(A_N2).ASTALIN = [V]CST_ALL
  [L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.ITF(A_N2).ASETATTRIBUTE("ITMREF","$isDisabled","true"))
  [L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.ITF(A_N2).ASETATTRIBUTE("STOFCY","$isDisabled","true"))
 Elsif fstat
  [L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.ITF(A_N2).ASETERROR("",func ASYRFNC.MES1(mess(00112,00143,1),"ITF")+" : "+num$([F:ITC]ITMREF)
&  +"~"+num$([F:ITC]STOFCY)
&  -":"-func ASYRFNC.MES1(mess(93,140,1),"ITMFACILIT"),[V]CST_AWARNING))
 Endif
Endif
#-----------------------------------------------------#

[L]A_NEWCOL = 0
For [L]A_I=1 To 15
 [L]A_NEWCOL += 1
 ITMCOSTD.L_LABCST(A_NEWCOL) = NewInstance  C_ITMCOSTD_L_LABCST(ITMCOSTD.ACTX,NullUuid,[L]A_I,ITMCOSTD,"L_LABCST") AllocGroup ITMCOSTD
 ITMCOSTD.L_LABCST(A_NEWCOL).LABCST = [F:ITC]LABCST([L]A_I-1)
 ITMCOSTD.L_LABCST(A_NEWCOL).FXDLABCST = [F:ITC]FXDLABCST([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.L_LABCST(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 15
 [L]A_NEWCOL += 1
 ITMCOSTD.L_LABLEVCST(A_NEWCOL) = NewInstance  C_ITMCOSTD_L_LABLEVCST(ITMCOSTD.ACTX,NullUuid,[L]A_I,ITMCOSTD,"L_LABLEVCST") AllocGroup ITMCOSTD
 ITMCOSTD.L_LABLEVCST(A_NEWCOL).LABLEVCST = [F:ITC]LABLEVCST([L]A_I-1)
 ITMCOSTD.L_LABLEVCST(A_NEWCOL).FXDLABLEV = [F:ITC]FXDLABLEV([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.L_LABLEVCST(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 15
 [L]A_NEWCOL += 1
 ITMCOSTD.L_MACCST(A_NEWCOL) = NewInstance  C_ITMCOSTD_L_MACCST(ITMCOSTD.ACTX,NullUuid,[L]A_I,ITMCOSTD,"L_MACCST") AllocGroup ITMCOSTD
 ITMCOSTD.L_MACCST(A_NEWCOL).MACCST = [F:ITC]MACCST([L]A_I-1)
 ITMCOSTD.L_MACCST(A_NEWCOL).FXDMACCST = [F:ITC]FXDMACCST([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.L_MACCST(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 15
 [L]A_NEWCOL += 1
 ITMCOSTD.L_MACLEVCST(A_NEWCOL) = NewInstance  C_ITMCOSTD_L_MACLEVCST(ITMCOSTD.ACTX,NullUuid,[L]A_I,ITMCOSTD,"L_MACLEVCST") AllocGroup ITMCOSTD
 ITMCOSTD.L_MACLEVCST(A_NEWCOL).MACLEVCST = [F:ITC]MACLEVCST([L]A_I-1)
 ITMCOSTD.L_MACLEVCST(A_NEWCOL).FXDMACLEV = [F:ITC]FXDMACLEV([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.L_MACLEVCST(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 20
 [L]A_NEWCOL += 1
 ITMCOSTD.L_MATCST(A_NEWCOL) = NewInstance  C_ITMCOSTD_L_MATCST(ITMCOSTD.ACTX,NullUuid,[L]A_I,ITMCOSTD,"L_MATCST") AllocGroup ITMCOSTD
 ITMCOSTD.L_MATCST(A_NEWCOL).MATCST = [F:ITC]MATCST([L]A_I-1)
 ITMCOSTD.L_MATCST(A_NEWCOL).FXDMATCST = [F:ITC]FXDMATCST([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.L_MATCST(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 20
 [L]A_NEWCOL += 1
 ITMCOSTD.L_MATLEVCST(A_NEWCOL) = NewInstance  C_ITMCOSTD_L_MATLEVCST(ITMCOSTD.ACTX,NullUuid,[L]A_I,ITMCOSTD,"L_MATLEVCST") AllocGroup ITMCOSTD
 ITMCOSTD.L_MATLEVCST(A_NEWCOL).MATLEVCST = [F:ITC]MATLEVCST([L]A_I-1)
 ITMCOSTD.L_MATLEVCST(A_NEWCOL).FXDMATLEV = [F:ITC]FXDMATLEV([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.L_MATLEVCST(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet ITMCOSTD.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



