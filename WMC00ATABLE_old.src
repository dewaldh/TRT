#<AdxTL>@(#)0.0.0.0 $Revision$Class Table dictionary
# Sage X3 supervisor
## CRUD-CLASSE ## ATABLE
# 2018-06-20 06:34:25 971

Gosub TEST From WMCR_ATABLE : End

############################################################################################
## C : Subprog AINSERT(INSTANCE)
## D : Subprog ADELETE(INSTANCE)
## R : Subprog AREAD(INSTANCE,CODFIC)
## U : Subprog AUPDATE(INSTANCE)
############################################################################################
# ATABLE : ATABLE
# ATABZON : ATABLE ATABZON
# ATABIND : ATABLE ATABIND
# ATABAUD : ATABLE ATABAUD
# AMSKPAR : ATABZON AMSKPAR
############################################################################################

############################################################################################
### AVARIABLES
############################################################################################
$AVARIABLES
[L]ASTATUS =max([L]ASTATUS,fmet ATABLE._ADELERRORS([V]CST_ALLERRORS))
$_AVARIABLES
Local    Integer     A_LEVEL,A_I,A_NEWCOL,A_N1,A_N2,A_S2,A_N3,A_S3,A_N4,A_S4,A_N5,A_S5
Local    Integer    ASTATUS,A_RETIK,A_TYPMAJ,A_ASTALIN
Local    Char        A_STRSITE(GLONFCY),A_STRACC(GLONACS),CURPRO(50),A_PARENT(50),A_PATH(200),A_ABR(GLONABR),A_ERROR(250)
Local    Uuident    A_UUID

[L]A_LEVEL    = ATABLE.ACTX.LEVWML
[L]ASTATUS  = 0

Onerrgo ERR_OPENTAB
If find(ATABLE.ACTX.AFOLDER,nomap,"")>0
 Local File ATABLE [ATB]
 Local File ATABZON [ATZ]
 Local File ATABIND [ATI]
 Local File ATABAUD [ATA]
 Local File AMSKPAR [AMP]
 Local File ATEXTE [ATX]
Else
 Local File =ATABLE.ACTX.AFOLDER+".ATABLE" [ATB]
 Local File =ATABLE.ACTX.AFOLDER+".ATABZON" [ATZ]
 Local File =ATABLE.ACTX.AFOLDER+".ATABIND" [ATI]
 Local File =ATABLE.ACTX.AFOLDER+".ATABAUD" [ATA]
 Local File =ATABLE.ACTX.AFOLDER+".AMSKPAR" [AMP]
 Local File =ATABLE.ACTX.AFOLDER+".ATEXTE" [ATX]
Endif
Onerrgo
Return

$ERR_OPENTAB
[L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ASETERROR("",errp+"("+num$(errl)+")"-mess(6,123,1)-num$(errn)-errmes$(errn)-errm,[V]CST_AERROR))
Resume

############################################################################################
### Link
############################################################################################
$AOPEN_LINK
Gosub AVARIABLES
Link [ATB] With
& [ATZ]CODZONE ~= [F:ATB]CODFIC,
& [ATI]CODIND ~= [F:ATB]CODFIC,
& [ATA]ATA0 = [F:ATB]CODFIC,
& [AMP]CODPAR = 2;[F:ATZ]CODFIC;[F:ATZ]CODZONE
& As [LNK_]
Return

############################################################################################
### ATABLE(WATB)
############################################################################################
Funprog  _MAJSQL_ATABLE(WATB)
Variable Instance WATB Using C_ATABLE
Local Integer ASTATUS,A_I,A_J
Default File [F:ATB]
If WATB.ASTALIN=[V]CST_ANEW
 Call INICRE(WATB) From ASYRSUB
 SetInstance [F:ATB] With WATB
 Call NUMBER(fmet WATB.AGETTEXT("INTITFIC"),[F:ATB]INTITFIC,WATB) From ASYRDIV
 Write [F:ATB]
 If fstat
  Call FSTA("ATB",WATB,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WATB.updTick = [F:ATB]updTick
Elsif WATB.ASTALIN=[V]CST_ALL or WATB.ASTALIN=[V]CST_AUPD
 Call INIUPD(WATB) From ASYRSUB
 SetInstance [F:ATB] With WATB
 Call NUMBER(fmet WATB.AGETTEXT("INTITFIC"),[F:ATB]INTITFIC,WATB) From ASYRDIV
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WATB,"ATABLE")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:ATB]CODFIC = [F:ATB]CODFIC
 If fstat
  Call FSTA("ATB",WATB,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WATB.updTick = [F:ATB]updTick
Elsif WATB.ASTALIN=[V]CST_ADEL
 SetInstance [F:ATB] With WATB
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WATB,"ATABLE")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:ATB]CODFIC = [F:ATB]CODFIC
 If fstat
  Call FSTA("ATB",WATB,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### ATABZON(WATZ)
############################################################################################
Funprog  _MAJSQL_ATABZON(WATZ)
Variable Instance WATZ Using C_ATABZON
Local Integer ASTATUS,A_I,A_J
Default File [F:ATZ]
If WATZ.ASTALIN=[V]CST_ANEW
 Call INICRE(WATZ) From ASYRSUB
 SetInstance [F:ATZ] With WATZ
 Call NUMBER(fmet WATZ.AGETTEXT("NOABREG"),[F:ATZ]NOABREG,WATZ) From ASYRDIV
 Call NUMBER(fmet WATZ.AGETTEXT("NOCOURT"),[F:ATZ]NOCOURT,WATZ) From ASYRDIV
 Call NUMBER(fmet WATZ.AGETTEXT("NOLONG"),[F:ATZ]NOLONG,WATZ) From ASYRDIV
 Write [F:ATZ]
 If fstat
  Call FSTA("ATZ",WATZ,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WATZ.updTick = [F:ATZ]updTick
Elsif WATZ.ASTALIN=[V]CST_ALL or WATZ.ASTALIN=[V]CST_AUPD
 Call INIUPD(WATZ) From ASYRSUB
 SetInstance [F:ATZ] With WATZ
 Call NUMBER(fmet WATZ.AGETTEXT("NOABREG"),[F:ATZ]NOABREG,WATZ) From ASYRDIV
 Call NUMBER(fmet WATZ.AGETTEXT("NOCOURT"),[F:ATZ]NOCOURT,WATZ) From ASYRDIV
 Call NUMBER(fmet WATZ.AGETTEXT("NOLONG"),[F:ATZ]NOLONG,WATZ) From ASYRDIV
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WATZ,"ATABZON")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:ATZ]CODZONE = [F:ATZ]CODFIC;[F:ATZ]CODZONE
 If fstat
  Call FSTA("ATZ",WATZ,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WATZ.updTick = [F:ATZ]updTick
Elsif WATZ.ASTALIN=[V]CST_ADEL
 SetInstance [F:ATZ] With WATZ
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WATZ,"ATABZON")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:ATZ]CODZONE = [F:ATZ]CODFIC;[F:ATZ]CODZONE
 If fstat
  Call FSTA("ATZ",WATZ,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### ATABIND(WATI)
############################################################################################
Funprog  _MAJSQL_ATABIND(WATI)
Variable Instance WATI Using C_ATABIND
Local Integer ASTATUS,A_I,A_J
Default File [F:ATI]
If WATI.ASTALIN=[V]CST_ANEW
 Call INICRE(WATI) From ASYRSUB
 SetInstance [F:ATI] With WATI
 Write [F:ATI]
 If fstat
  Call FSTA("ATI",WATI,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WATI.updTick = [F:ATI]updTick
Elsif WATI.ASTALIN=[V]CST_ALL or WATI.ASTALIN=[V]CST_AUPD
 Call INIUPD(WATI) From ASYRSUB
 SetInstance [F:ATI] With WATI
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WATI,"ATABIND")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:ATI]CODIND = [F:ATI]CODFIC;[F:ATI]CODIND
 If fstat
  Call FSTA("ATI",WATI,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WATI.updTick = [F:ATI]updTick
Elsif WATI.ASTALIN=[V]CST_ADEL
 SetInstance [F:ATI] With WATI
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WATI,"ATABIND")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:ATI]CODIND = [F:ATI]CODFIC;[F:ATI]CODIND
 If fstat
  Call FSTA("ATI",WATI,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### ATABAUD(WATA)
############################################################################################
Funprog  _MAJSQL_ATABAUD(WATA)
Variable Instance WATA Using C_ATABAUD
Local Integer ASTATUS,A_I,A_J
Default File [F:ATA]
If WATA.ASTALIN=[V]CST_ANEW
 Call INICRE(WATA) From ASYRSUB
 SetInstance [F:ATA] With WATA
 Write [F:ATA]
 If fstat
  Call FSTA("ATA",WATA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WATA.updTick = [F:ATA]updTick
Elsif WATA.ASTALIN=[V]CST_ALL or WATA.ASTALIN=[V]CST_AUPD
 Call INIUPD(WATA) From ASYRSUB
 SetInstance [F:ATA] With WATA
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WATA,"ATABAUD")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:ATA]ATA0 = [F:ATA]CODFIC;[F:ATA]NUMLIG
 If fstat
  Call FSTA("ATA",WATA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WATA.updTick = [F:ATA]updTick
Elsif WATA.ASTALIN=[V]CST_ADEL
 SetInstance [F:ATA] With WATA
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WATA,"ATABAUD")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:ATA]ATA0 = [F:ATA]CODFIC;[F:ATA]NUMLIG
 If fstat
  Call FSTA("ATA",WATA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### AMSKPAR(WAMP)
############################################################################################
Funprog  _MAJSQL_AMSKPAR(WAMP)
Variable Instance WAMP Using C_AMSKPAR
Local Integer ASTATUS,A_I,A_J
Default File [F:AMP]
If WAMP.ASTALIN=[V]CST_ANEW
 Call INICRE(WAMP) From ASYRSUB
 SetInstance [F:AMP] With WAMP
 Write [F:AMP]
 If fstat
  Call FSTA("AMP",WAMP,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WAMP.updTick = [F:AMP]updTick
Elsif WAMP.ASTALIN=[V]CST_ALL or WAMP.ASTALIN=[V]CST_AUPD
 Call INIUPD(WAMP) From ASYRSUB
 SetInstance [F:AMP] With WAMP
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WAMP,"AMSKPAR")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:AMP]CODPAR = [F:AMP]TYPAFF;[F:AMP]CODAFF;[F:AMP]CODZON;[F:AMP]CODPAR
 If fstat
  Call FSTA("AMP",WAMP,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WAMP.updTick = [F:AMP]updTick
Elsif WAMP.ASTALIN=[V]CST_ADEL
 SetInstance [F:AMP] With WAMP
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WAMP,"AMSKPAR")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:AMP]CODPAR = [F:AMP]TYPAFF;[F:AMP]CODAFF;[F:AMP]CODZON;[F:AMP]CODPAR
 If fstat
  Call FSTA("AMP",WAMP,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK



