#<AdxTL>@(#)0.0.0.0 $Revision$
######################################################################################################
# FILE NAME   : SPEYBBVAL
# DESCRIPTION : Business Batch Validation
######################################################################################################
# DATE        : 11-09-2018
# AUTHOR      : Dewald Henning
# COMPANY     : Leverage Technologies
#-----------------------------------------------------------------------------------------------------
# Epics Code  : DFCX1-27
#-----------------------------------------------------------------------------------------------------
######################################################################################################

$ACTION
  Case ACTION
    When "YBBVAL"  :  Gosub VALIDATE
  Endcase
Return

$VALIDATE
Local Char MESSAGE(255) : MESSAGE = "Validate business batch "-[M:YBB0]YBATNBR+"?"
  Call OUINON(MESSAGE,OK)  From GESECRAN
  Case OK
     When 2 : Call VAL_BUSBAT([M:YBB0]YBATNBR)

  Endcase

Return

Subprog VAL_BUSBAT(YBATNBR)
Variable Char YBATNBR()

  # DELETE ALL RECORDS IN THE SIMULATION TABLE, ERRORS TABLE and TEMP TABLE
  If clalev([F:YBBS]) = 0 : Local File YBBSIM [YBBS]        : Endif
  If clalev([F:YBBE]) = 0 : Local File YBBERR [YBBE]        : Endif
  If clalev([F:YBDT]) = 0 : Local File YBBDETAILTEM [YBDT]  : Endif
  Delete [F:YBBS]YBBS1 = YBATNBR
  Delete [F:YBBE]YBBE1 = YBATNBR
  Delete [F:YBDT]YBDT0 = YBATNBR


  #Add Lines to Temp Table
  Call ADD_DETAILTEMP()

  Local Integer COUNT : COUNT = 0
  Local Decimal NEWVATRAT, NEWGSTAMT
  Local Char NEWVAT(10)
  #Global Variables for Journal Transactions used per Line
  Global Integer JOUCALC   : JOUCALC = 0
  Global Decimal JOUTOTBAL : JOUTOTBAL = 0
  Global Decimal JOUDEB    : JOUDEB = 0
  Global Decimal JOUCRE    : JOUCRE = 0
  #Global Variables for IE Transactions as used Per Transaction No.
  Global Char IE_SITE1(5), IE_SITE2(5)
  Global Integer IE_DETLIG1, IE_DETLIG2, IE_FCYCNT

  #Create Loop for Temp Table Grouped by Transaction Number
  Local Integer CUR_TRANSNBR, CUR_DETLIG, CUR_INDEX
  Local Integer J
  J = 0
  CUR_INDEX = 0
  #Get Number of Lines per Business batch
  For J = 0 To [M:YBB1]NBLIG-1
    CUR_TRANSNBR = [M:YBB1]YTRANSNBR(CUR_INDEX)
    CUR_DETLIG = [M:YBB1]YDETLIG(CUR_INDEX)
    Infbox "CUR_DETLIG"-num$(CUR_DETLIG)
    If CUR_TRANSNBR = 0 : Break : Endif
    #Reset Globals for New Transaction
    [V]IE_SITE1 = "" : [V]IE_SITE2 = "" : IE_DETLIG1 = 0 : IE_DETLIG2 = 0 : IE_FCYCNT = 0 #-- IE
    JOUCALC = 0 : JOUTOTBAL = 0 : JOUDEB = 0 : JOUCRE = 0 #-- Journals
    #Group by Transaction Number
    Filter [F:YBDT] Where [F:YBDT]YBATNBR = YBATNBR and [F:YBDT]YTRANSNBR = CUR_TRANSNBR and [F:YBDT]YDETLIG = CUR_DETLIG
    For [F:YBDT]
      Infbox "F"-num$([F:YBDT]YDETLIG)
      COUNT += 1
    Next

      #Local Integer YDETLIG : YDETLIG = [F:YBDT]YDETLIG
      #Infbox "DETLIG"-num$(YDETLIG), "TRANSNO"-num$([F:YBDT]YTRANSNBR)
#      #Validate Lines
#      Call EXE_LINEVAL(YBATNBR)
#      #Calculate GST
#      Call EXE_GSTCALC(YBATNBR,YDETLIG,[F:YBDT]YCOA,[F:YBDT]YACC)
#      #Business Transaction Type Validation
#      If [F:YBDT]YBATTYP = 1 Then #IE
#        Call BT_IE(YBATNBR, YDETLIG)
#      Endif
#      If [F:YBDT]YBATTYP = 2 Then #Cash
#        Call BT_CASH(YBATNBR, YDETLIG)
#      Endif
#      If [F:YBDT]YBATTYP = 3 Then #Journal
#        Call BT_JOURNAL(YBATNBR, YDETLIG)
#      Endif
      #
    #Next
    Infbox(num$(COUNT))
    #Filter [F:YBDT] #clear filter
    COUNT = 0
    CUR_INDEX += 1
  Next

  If clalev([F:YBBS]) = 0 : Close Local File [F:YBBS] : Endif
  If clalev([F:YBBE]) = 0 : Close Local File [F:YBBE] : Endif
  If clalev([F:YBDT]) = 0 : Close Local File [F:YBDT] : Endif

  Affzo [M:YBB0]
  Affzo [M:YBB1]
  Affzo [M:YBB2]
  Affzo [M:YBB3]

End

#---------------------------------------------------------------------------------
# Line Validations
#---------------------------------------------------------------------------------
Subprog EXE_LINEVAL(BATNBR)
Variable Char BATNBR()

  #SITES â€“ THE NUMBER OF DISTINCT SITE VALUES WITHIN A BUSINESS TRANSACTION MUST COMPLY With THE FOLLOWING:
  #Inter-COMPANY 2 2 | #CASH  1 1 | #JOURNAL 1 1
  Local Char REQUEST(255)(0..6)
  Local Integer I : I = 0
  Local Integer YNBRLIG
  Local Char YMSG(255)
  Local Char YSRC(50)

  REQUEST(0) = "select max(YDETLIG_0),YFCY_0,YENTTYP_0,YJOU_0,YDETDES_0,YACC_0,YLIGDES_0,YTRANSNBR_0"
  REQUEST(1) -= "FROM YBBDETAILTEM"
  REQUEST(2) -= "Where YBATNBR_0 = '"+BATNBR+"' and YBATTYP_0 IN (2,3)"
  REQUEST(3) -= "GROUP BY YFCY_0,YENTTYP_0,YJOU_0,YDETDES_0,YACC_0,YLIGDES_0,YTRANSNBR_0"
  REQUEST(4) -= "HAVING COUNT(YFCY_0) = 1"
  REQUEST(5) -= "ORDER BY YTRANSNBR_0"

#REQUEST(0) = "EXEC [DEV00].[BB_VALSITE] '"+BATNBR+"', 2"

  For (Integer YDETLIG,Char YFCY,Char YENTTYP,Char YJOU,Char YDETDES,Char YACC,Char YLIGDES, Integer YTRANSNBR) From "5" Sql REQUEST As [YLNK1]
    YMSG = "Multiple sites for transaction number"-num$([F:YLNK1]YTRANSNBR)
    YSRC =  BATNBR+"-"+num$([F:YLNK1]YDETLIG)
    YNBRLIG = [F:YLNK1]YDETLIG + 1
    Call ADDLIG_ERR(BATNBR,YSRC,YNBRLIG,[F:YLNK1]YFCY,[F:YLNK1]YENTTYP,[F:YLNK1]YJOU,[F:YLNK1]YDETDES,[F:YLNK1]YACC,[F:YLNK1]YLIGDES,YMSG)
    I += 1
  Next

  Local Char REQUEST2(255)(0..6)
  I = 0

  REQUEST2(0) = "select max(YDETLIG_0),YFCY_0,YENTTYP_0,YJOU_0,YDETDES_0,YACC_0,YLIGDES_0,YTRANSNBR_0"
  REQUEST2(1) -= "FROM YBBDETAILTEM"
  REQUEST2(2) -= "Where YBATNBR_0 = '"+BATNBR+"' and YBATTYP_0 = 1"
  REQUEST2(3) -= "GROUP BY YFCY_0,YENTTYP_0,YJOU_0,YDETDES_0,YACC_0,YLIGDES_0,YTRANSNBR_0"
  REQUEST2(4) -= "HAVING COUNT(YFCY_0) = 2"
  REQUEST2(5) -= "ORDER BY YTRANSNBR_0"

  For (Integer YDETLIG,Char YFCY,Char YENTTYP,Char YJOU,Char YDETDES,Char YACC,Char YLIGDES, Integer YTRANSNBR) From "5" Sql REQUEST2 As [YLNK2]
    #If YFCY = "" : Break : Endif
    YMSG = "Multiple sites for transaction number"-num$([F:YLNK2]YTRANSNBR)
    YSRC =  BATNBR+"-"+num$([F:YLNK2]YDETLIG)
    YNBRLIG = [F:YLNK2]YDETLIG + 1
    Call ADDLIG_ERR(BATNBR,YSRC,YNBRLIG,[F:YLNK2]YFCY,[F:YLNK2]YENTTYP,[F:YLNK2]YJOU,[F:YLNK2]YDETDES,[F:YLNK2]YACC,[F:YLNK2]YLIGDES,YMSG)
    I += 1
  Next

End

#---------------------------------------------------------------------------------
# GST Calculations
#---------------------------------------------------------------------------------
Subprog EXE_GSTCALC(BATNBR,DETLIG,YCOA,YACC)
Variable Char BATNBR()
Variable Integer DETLIG()
Variable Char YCOA()
Variable Char YACC()

  If clalev([F:TAX])  = 0 : Local File TABRATVAT  [TAX]  : Endif
  If clalev([F:GAC])  = 0 : Local File GACCOUNT   [GAC]  : Endif
  If clalev([F:TVT])  = 0 : Local File TABVAT     [TVT]  : Endif
  #If clalev([F:YELA]) = 0 : Local File YENTLOAAGR [YELA] : Endif
  #If clalev([F:YBDT]) = 0 : Local File YBBDETAILTEM [YBDT]  : Endif

  #Declarations
  Local Char NEW_TAX(5)
  Local Decimal NEW_GST, NEW_VATRAT, NEW_AMT
  #Get Vat Rates
  Read [F:TVT]TVT1 = [F:YBDT]YTAX
  [F:TVT]VATRAT = NEW_VATRAT

  #Check ACCOUNT IS DEFINED As SUBJECTED
  Read [F:GAC]GAC0 = YCOA;YACC
  If [F:GAC]FLGVAT = 2 Then
    #SET TAX To null
    [L]NEW_TAX = ""
  Else
    #IE Transaction Type for GST Calc
    If [F:YBDT]YBATTYP = 1 Then
      #Declare 2 sites for the GST group [S1 and S2]
      #Refer to Pseudo code, but this is the only way I could get this to work as per the group by
      If [V]IE_SITE1 = "" Then
        [V]IE_SITE1 = [F:YBDT]YFCY
        IE_DETLIG1 = [F:YBDT]YDETLIG
        End
      Elsif [V]IE_SITE1 <> "" and [V]IE_SITE2 = "" Then
        [V]IE_SITE2 = [F:YBDT]YFCY
        IE_DETLIG2 = [F:YBDT]YDETLIG
      Endif
      If [V]IE_SITE1 <> "" and [V]IE_SITE2 <> "" and [V]IE_SITE1 = [V]IE_SITE2 Then
        #THE BUSINESS TRANSACTION ARE MEMBERS OF THE SAME GST GROUP
        [L]NEW_TAX = func AFNC.PARAM("YIEVAT","")
      Else
        Local Char MESSAGE(255) : MESSAGE = "Site not setup correctly for batch type"
        Local Char YSRC(50) : YSRC = [F:YBDT]YBATNBR+"-"+num$(DETLIG)
        Call ADDLIG_ERR(BATNBR,YSRC,DETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,
&                   [F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,MESSAGE)
        End
      Endif
    Endif
    If [F:YBDT]YBATTYP = 2 or [F:YBDT]YBATTYP = 3 Then
      If [F:TVT]VATVAC = ""
        Local Char MESSAGE(255) : MESSAGE = "Tax rule not setup"
        Local Char YSRC(50) : YSRC = [F:YBDT]YBATNBR+"-"+num$(DETLIG)
        Call ADDLIG_ERR(BATNBR,YSRC,DETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,
&                       [F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,MESSAGE)
        End
      Else
        [L]NEW_TAX = [F:TVT]VATVAC
      Endif
    Endif
  Endif
  #TAX OVERRIDE IS POPULATED
  If [L]NEW_TAX <> "" Then
    #CALCULATE THE GST and AMOUNT + TAX (As PER SECTION 6.1.17 GST CALCULATIONS)
    If [F:YBDT]YDEB <> 0 : [L]NEW_AMT = [F:YBDT]YDEB : Endif
    If [F:YBDT]YCDT <> 0 : [L]NEW_AMT = [F:YBDT]YCDT : Endif
    If [F:YBDT]YGSTINC = 2 Then #GST Inc
      #GST Amount = Amount - Round(Amount/(1+(Rate/100)))
      [L]NEW_GST = [L]NEW_AMT - (1+([L]NEW_VATRAT/100))
      [F:YBDT]YAMTTAX = [L]NEW_AMT + [L]NEW_GST
    Else #GST Ex
      #GST Amount = Amount * (Rate/100)
      [L]NEW_GST = [L]NEW_AMT * ([L]NEW_VATRAT/100)
      [F:YBDT]YAMTTAX = [L]NEW_AMT - [L]NEW_GST
    Endif
  Else
    #SET GST To ZERO
    #SET AMOUNT + TAX To DEBIT/CREDIT Value
    [F:YBDT]YAMTTAX = [L]NEW_AMT
    [L]NEW_GST = 0
  Endif
  [F:YBDT]YGSTAMT = [L]NEW_GST
  If fstat = 0
    Rewrite [F:YBDT]
  Else
    Call ADDMESSERR("Critical error occured."-[V]CST_AERROR) From AWEB
    Rollback
    End
  Endif

  If clalev([F:TAX]) = 0 : Close Local File [F:TAX] : Endif
  If clalev([F:GAC]) = 0 : Close Local File [F:GAC] : Endif
  If clalev([F:TVT]) = 0 : Close Local File [F:TVT] : Endif

End

#---------------------------------------------------------------------------------
# Cash
#---------------------------------------------------------------------------------
Subprog BT_CASH(BATNBR,DETLIG)
Variable Char BATNBR()
Variable Integer DETLIG()

Local Char YMSG(255)
Local Integer YNBLIG : YNBLIG = DETLIG + 1
Local Decimal DEB,CRED
Local Char SRCLOA(50)

If clalev([F:YBDT]) = 0  : Local File YBBDETAILTEM [YBDT]  : Endif
If clalev([F:BAN])  = 0  : Local File BANK         [BAN]   : Endif
If clalev([F:YELA]) = 0  : Local File YENTLOAAGR   [YELA]  : Endif
If clalev([F:CPY]) = 0   : Local File COMPANY      [CPY]   : Endif

  Local Integer I : I = 0
  Read [F:YBDT]YBDT1 = BATNBR;DETLIG
  If [F:YBDT]YBAN <> "" Then
    Read [F:BAN]BAN0 = [F:YBDT]YBAN
    #Principal Bank Account
    If [F:BAN]YBANPRNSTA = 2 Then
      #CREATE SIMULATION LINE For THE PRINCIPAL BANK ON THE CURRENT BUSINESS TRANSACTION LINE
      #(DR/CR OPPOSITE To THE CURRENT BUSINESS TRANSACTION LINE)
      Call ADDLIG_SIM([F:YBDT]YBATNBR,YNBLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&          [F:YBDT]YDETDES,[F:YBDT]YFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&          [F:YBDT]YBP,[F:YBDT]YDEB,[F:YBDT]YCDT,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&          [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX)
    Endif
    #Shared Bank Accounts
    If [F:BAN]YBANPRNSTA = 1 or [F:BAN]YBANPRNSTA = 0 Then
      #Get Linked ELA
      If [F:BAN]YELA = "" Then
        Local Char MESSAGE(255) : MESSAGE = "Entity Loan Agreement not setup on Bank"
        Local Char YSRC(50) : YSRC = [F:YBDT]YBATNBR+"-"+num$(DETLIG)
        Call ADDLIG_ERR([F:YBDT]YBATNBR,YSRC,YNBLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,
&                       [F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,MESSAGE)
      Else
      #CREATE SIMULATION LINE For THE RECIPIENT COMPANY (DR/CR OPPOSITE To THE CURRENT BUSINESS TRANSACTION LINE)
        Read [F:YELA]YELA0 = [F:BAN]YELA
        Read [F:CPY]CPY0 = [F:YELA]YCPYREC
        If !fstat Then
          If [F:YBDT]YDEB = 0 Then #Credit
            DEB = [F:YBDT]YCDT
            CRED = 0
          Endif
          If [F:YBDT]YCDT = 0 Then #Debit
              CRED = [F:YBDT]YDEB
              DEB = 0
          Endif
          Call ADDLIG_SIM([F:YBDT]YBATNBR,YNBLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&               [F:YBDT]YDETDES,[F:CPY]MAIFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&               [F:YBDT]YBP,DEB,CRED,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&               [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX)
          #CREATE SIMULATION LINE For THE PROVIDER COMPANY (DR/CR SAME As THE CURRENT BUSINESS TRANSACTION LINE)
          Read [F:CPY]CPY0 = [F:YELA]YCPYPRO
          Call ADDLIG_SIM([F:YBDT]YBATNBR,YNBLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&               [F:YBDT]YDETDES,[F:CPY]MAIFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&               [F:YBDT]YBP,[F:YBDT]YDEB,[F:YBDT]YCDT,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&               [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX)
          Endif
          #While THE SOURCE LOAN AGREEMENT ON THE CURRENT ELA IS POPULATED
          While [F:YELA]YSRCLONAGR <> ""
            #GET THE SOURCE LOAN AGREEMENT As THE CURRENT ELA
            SRCLOA = [F:YELA]YCPYREC
            Read [F:YELA]YELA0 = SRCLOA
            #CREATE SIMULATION LINE For THE RECIPIENT COMPANY (DR/CR OPPOSITE To THE CURRENT BUSINESS TRANSACTION LINE)
            Call ADDLIG_SIM([F:YBDT]YBATNBR,YNBLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&                 [F:YBDT]YDETDES,[F:CPY]MAIFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&                 [F:YBDT]YBP,DEB,CRED,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&                 [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX)
            #CREATE SIMULATION LINE For THE PROVIDER COMPANY (DR/CR SAME As THE CURRENT BUSINESS TRANSACTION LINE)
            Read [F:CPY]CPY0 = [F:YELA]YCPYREC
            Call ADDLIG_SIM([F:YBDT]YBATNBR,YNBLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&                 [F:YBDT]YDETDES,[F:CPY]MAIFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&                 [F:YBDT]YBP,[F:YBDT]YDEB,[F:YBDT]YCDT,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&                 [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX)
          Wend
        Endif
      Endif
  Endif
  If clalev([F:YBDT]) = 0  : Close Local File [F:YBDT]  : Endif
  If clalev([F:BAN])  = 0  : Close Local File [F:BAN]   : Endif
  If clalev([F:YELA]) = 0  : Close Local File [F:YELA]  : Endif
  If clalev([F:CPY])  = 0  : Close Local File [F:CPY]   : Endif

End

#---------------------------------------------------------------------------------
# Inter Company
#---------------------------------------------------------------------------------
Subprog BT_IE(BATNBR,DETLIG)
Variable Char BATNBR()
Variable Integer DETLIG()

  Local Char YMSG(255)
  Local Integer YNBLIG : YNBLIG = DETLIG + 1 #Used for Simulation and Error Line Numbers

  If clalev([F:YBDT1]) = 0  : Local File YBBDETAILTEM [YBDT1]  : Endif
  If clalev([F:YBDT2]) = 0  : Local File YBBDETAILTEM [YBDT2]  : Endif
  If clalev([F:YELA]) = 0   : Local File YENTLOAAGR   [YELA]   : Endif
  #DESIGNATE THE SITE ON THE First LINE OF BUSINESS BATCH As SITE 1 (S1)
  Infbox "S1"-[V]IE_SITE1
  Infbox "S2"-[V]IE_SITE2
#  If [V]IE_FCYCNT = 0 Then
#    #CREATE S1 SITE SIMULATION LINE LIST (S1SLL)
#    Read [F:YBDT1]YBDT1 = BATNBR;[V]IE_DETLIG1
#    Infbox("S1 TransNo"-num$([F:YBDT1]YTRANSNBR))
#    [V]IE_FCYCNT = 1
#    End
#  Endif
#  #DESIGNATE THE OTHER SITE WITHIN THE BUSINESS TRANSACTION As SITE 2 (S2)
#  If [V]IE_FCYCNT = 1 Then
#    #CREATE S2 SITE SIMULATION LINE LIST (S2SLL)
#    Read [F:YBDT2]YBDT1 = BATNBR;[V]IE_DETLIG2
#    Infbox("S2 TransNo"-num$([F:YBDT1]YTRANSNBR))
#  Endif
  Read [F:YBDT1]YBDT1 = BATNBR;[V]IE_DETLIG1
  Read [F:YBDT2]YBDT1 = BATNBR;[V]IE_DETLIG2

#  #If both Site1 and Site2 are not empty
#  If [V]IE_SITE1 <> "" and [V]IE_SITE2 <> "" Then
#    #If THE BALANCE For THE S1 and S2 SITE ARE not EQUAL and OPPOSITE(DR/CR)
#    #Infbox num$([F:YBDT1]YDEB),num$([F:YBDT1]YCDT),num$([F:YBDT2]YDEB),num$([F:YBDT2]YCDT)
#    If [F:YBDT1]YDEB = [F:YBDT2]YCDT or [F:YBDT1]YCDT = [F:YBDT2]YDEB Then
#      Local Char MESSAGE(255) : MESSAGE = "IE Debit and Credit not equal"
#      Local Char YSRC(50) : YSRC = [F:YBDT1]YBATNBR+"-"+num$([F:YBDT1]YDETLIG)
#      Call ADDLIG_ERR([F:YBDT1]YBATNBR,YSRC,YNBLIG,[F:YBDT1]YFCY,[F:YBDT1]YENTTYP,
#&          [F:YBDT1]YJOU,[F:YBDT1]YDETDES,[F:YBDT1]YACC,[F:YBDT1]YLIGDES,MESSAGE)
#      YSRC = [F:YBDT2]YBATNBR+"-"+num$([F:YBDT2]YDETLIG)
#      Call ADDLIG_ERR([F:YBDT2]YBATNBR,YSRC,YNBLIG,[F:YBDT2]YFCY,[F:YBDT2]YENTTYP,
#&          [F:YBDT2]YJOU,[F:YBDT2]YDETDES,[F:YBDT2]YACC,[F:YBDT2]YLIGDES,MESSAGE)
#    Endif
#    End
#  Endif
#
## If THE ELA IS POPULATED ON THE BUSINESS TRANSACTION For THE S1 SITE Then
## GET THE ELA POINTED To By THE S1 SITE BUSINESS TRANSACTION As THE CURRENT ELA
#  If [F:YBDT1]YELA <> "" Then
#    Read [F:YELA]YELA0 = [F:YBDT1]YELA
#
#  Endif
#
##    Using THE CURRENT ELA
##      CREATE SIMULATION LINE For THE ELA RECIPIENT COMPANY (DR/CR OPPOSITE To THE BALANCE For THE S1 SITE) IN THE S1SLL
##      CREATE SIMULATION LINE For THE ELA PROVIDER COMPANY (DR/CR SAME As THE BALANCE For THE S1 SITE) IN THE S1SLL
##
##    While THE SOURCE LOAN AGREEMENT ON THE CURRENT ELA IS POPULATED
##
##      GET THE SOURCE LOAN AGREEMENT As THE CURRENT ELA
##      Using THE CURRENT ELA
##        CREATE SIMULATION LINE For THE ELA RECIPIENT COMPANY (DR/CR OPPOSITE To THE BALANCE For THE S1 SITE) IN THE S1SLL
##        CREATE SIMULATION LINE For THE ELA PROVIDER COMPANY (DR/CR SAME As THE BALANCE For THE S1 SITE) IN THE S1SLL
##    ENDWHILE
##
##  Endif

  If clalev([F:YBDT1]) = 0  : Close Local File [F:YBDT1]  : Endif
  If clalev([F:YBDT2]) = 0  : Close Local File [F:YBDT2]  : Endif
  If clalev([F:YELA]) = 0   : Close Local File [F:YELA]   : Endif

End

#---------------------------------------------------------------------------------
# Journal
#---------------------------------------------------------------------------------
Subprog BT_JOURNAL(BATNBR,DETLIG)
Variable Char BATNBR()
Variable Integer DETLIG()

  Local Integer YNBLIG : YNBLIG = DETLIG + 1 #Used for Simulation and Error Line Numbers

  Local Char YMSG(255)
  If clalev([F:YBDT2]) = 0 : Local File YBBDETAILTEM [YBDT2]  : Endif
  Read [F:YBDT2]YBDT1 = BATNBR;DETLIG
  # TRACK THE BALANCE By SITE
  If [F:YBDT2]YTRANSNBR = [F:YBDT]YTRANSNBR and [F:YBDT2]YFCY = [F:YBDT]YFCY
    JOUCALC = 0
    If [F:YBDT2]YDEB = 0 : JOUCRE += [F:YBDT2]YCDT : Endif
    If [F:YBDT2]YCDT = 0 : JOUDEB += [F:YBDT2]YDEB : Endif
  Else
    JOUCALC = 1
    JOUTOTBAL = JOUCRE - JOUDEB
  Endif
  If clalev([F:YBDT2]) = 0 : Close Local File [F:YBDT2] : Endif
  #Insert to tables
  If JOUCALC = 1 and JOUTOTBAL = 0 Then
    If [F:YBDT]YGSTAMT > 0 Then #GST SIMULATION LINE If GST > 0
      #CREATE SIMULATION LINE For THE CURRENT BUSINESS TRANSACTION LINE
      #DR
      #TODO 1 : GST & TAX
      Call ADDLIG_SIM(BATNBR,YNBLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&           [F:YBDT]YDETDES,[F:BDT]YFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&           [F:YBDT]YBP,[F:YBDT]YDEB,0,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&           [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX)
      #CR
      Call ADDLIG_SIM(BATNBR,YNBLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&           [F:YBDT]YDETDES,[F:BDT]YFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&           [F:YBDT]YBP,0,[F:YBDT]YCDT,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&           [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX)
    Endif
  Elsif JOUCALC = 1 and JOUTOTBAL <> 0
    #LOG AN ERROR FOR EACH BUSINESS TRANSACTION
  Endif

End

#---------------------------------------------------------------------------------
# Add Detail Temp Line for Current Batch number
#---------------------------------------------------------------------------------
Subprog ADD_DETAILTEMP()
If clalev([F:YBDT]) = 0  : Local File YBBDETAILTEM [YBDT]  : Endif
  For I = 0 To [M:YBB1]NBLIG - 1
    nolign = I + 1
    [F:YBDT] = [M:YBB1]
    [F:YBDT]YBATNBR = [M:YBB0]YBATNBR
    [F:YBDT]YFCY = [M:YBB1]YFCY(I)
    [F:YBDT]YENTTYP = [M:YBB1]YENTTYP(I)
    [F:YBDT]YJOU = [M:YBB1]YJOU(I)
    [F:YBDT]YCPY = [M:YBB1]YCPY(I)
    [F:YBDT]YACM = [M:YBB1]YACM(I)
    [F:YBDT]YLED1 = [M:YBB1]YLED1(I)
    [F:YBDT]YELA = [M:YBB1]YELA(I)
    [F:YBDT]YCOA = [M:YBB1]YCOA(I)
    [F:YBDT]YELA = [M:YBB1]YELA(I)
    [F:YBDT]YBAN = [M:YBB1]YBAN(I)
    [F:YBDT]YACC = [M:YBB1]YACC(I)
    [F:YBDT]YLIGDES = [M:YBB1]YLIGDES(I)
    [F:YBDT]YDETDES = [M:YBB1]YDETDES(I)
    [F:YBDT]YCTRL = [M:YBB1]YCTRL(I)
    [F:YBDT]YBP = [M:YBB1]YBP(I)
    [F:YBDT]YDEB = [M:YBB1]YDEB(I)
    [F:YBDT]YCDT = [M:YBB1]YCDT(I)
    [F:YBDT]YTAX = [M:YBB1]YTAX(I)
    [F:YBDT]YGSTAMT = [M:YBB1]YGSTAMT(I)
    [F:YBDT]YAMTTAX = [M:YBB1]YAMTTAX(I)
    [F:YBDT]YREF = [M:YBB1]YREF(I)
    [F:YBDT]YPJT = [M:YBB1]YPJT(I)
    [F:YBDT]YDIE0 = [M:YBB1]YDIE0(I)
    [F:YBDT]YCCE0 = [M:YBB1]YCCE0(I)
    [F:YBDT]YDIE1 = [M:YBB1]YDIE1(I)
    [F:YBDT]YCCE1 = [M:YBB1]YCCE1(I)
    [F:YBDT]YDIE2 = [M:YBB1]YDIE2(I)
    [F:YBDT]YCCE2 = [M:YBB1]YCCE2(I)
    [F:YBDT]YDIE3 = [M:YBB1]YDIE3(I)
    [F:YBDT]YCCE3 = [M:YBB1]YCCE3(I)
    [F:YBDT]YDIE4 = [M:YBB1]YDIE4(I)
    [F:YBDT]YCCE4 = [M:YBB1]YCCE4(I)
    [F:YBDT]YBATTYP = [M:YBB1]YBATTYP(I)
    [F:YBDT]YGSTINC = [M:YBB1]YGSTINC(I)
    [F:YBDT]YDETLIG = I
     Write [F:YBDT]
  Next
  Close Local File [YBDT]
End

#---------------------------------------------------------------------------------
# Simulation Line Write
#---------------------------------------------------------------------------------
Subprog ADDLIG_SIM(YBATNBR,YDETLIG, YENTTYP,YJOU,YTRANSNBR,YDETDES,YFCY,YCOA,YACC,YLIGDES,YCTRL,YBP,YDEB,YCDT,
&                  YTAX,YREF,YPJT,YCCE0,YCCE1,YCCE2,YCCE3,YCCE4,YGSTAMT,YAMTTAX)
Variable Char YBATNBR()
Variable Integer YDETLIG()
Variable Char YENTTYP()
Variable Char YJOU()
Variable Integer YTRANSNBR()
Variable Char YDETDES()
Variable Char YFCY()
Variable Char YCOA()
Variable Char YACC()
Variable Char YLIGDES()
Variable Char YCTRL()
Variable Char YBP()
Variable Decimal YDEB()
Variable Decimal YCDT()
Variable Char YTAX()
Variable Char YREF()
Variable Char YPJT()
Variable Char YCCE0()
Variable Char YCCE1()
Variable Char YCCE2()
Variable Char YCCE3()
Variable Char YCCE4()
Variable Decimal YGSTAMT
Variable Decimal YAMTTAX

  If clalev([F:YBBS]) = 0 : Local File YBBSIM [YBBS]  : Endif
  Raz [F:YBBS]
  [F:YBBS]YBATNBR = YBATNBR
  [F:YBBS]YDETLIG = YDETLIG
  [F:YBBS]YENTTYP = YENTTYP
  [F:YBBS]YJOU = YJOU
  [F:YBBS]YTRANSNBR = YTRANSNBR
  [F:YBBS]YDETDES = YDETDES
  [F:YBBS]YFCY = YFCY
  [F:YBBS]YCOA = YCOA
  [F:YBBS]YACC = YACC
  [F:YBBS]YLIGDES = YLIGDES
  [F:YBBS]YCTRL = YCTRL
  [F:YBBS]YBP = YBP
  [F:YBBS]YDEB = YDEB
  [F:YBBS]YCDT = YCDT
  [F:YBBS]YTAX = YTAX
  [F:YBBS]YREF = YREF
  [F:YBBS]YPJT = YPJT
  [F:YBBS]YCCE0 = YCCE0
  [F:YBBS]YCCE1 = YCCE1
  [F:YBBS]YCCE2 = YCCE2
  [F:YBBS]YCCE3 = YCCE3
  [F:YBBS]YCCE4 = YCCE4
  [F:YBBS]YGSTAMT = YGSTAMT
  [F:YBBS]YAMTTAX = YAMTTAX

  Write [F:YBBS]
  Close Local File [YBBS]

End

#---------------------------------------------------------------------------------
# Error Line Write
#---------------------------------------------------------------------------------
Subprog ADDLIG_ERR(YBATNBR,YSRC,YDETLIG,YFCY,YENTTYP,YJOU,YDETDES,YACC,YLIGDES,YMESS)
Variable Char YBATNBR()
Variable Char YSRC()
Variable Integer YDETLIG()
Variable Char YFCY()
Variable Char YENTTYP()
Variable Char YJOU()
Variable Char YDETDES()
Variable Char YACC()
Variable Char YLIGDES()
Variable Char YMESS()

  If clalev([F:YBBE]) = 0 : Local File YBBERR [YBBE]  : Endif
  Raz [F:YBBE]
  [F:YBBE]YBATNBR = YBATNBR
  [F:YBBE]YSRC = YSRC
  [F:YBBE]YDETLIG = YDETLIG
  [F:YBBE]YFCY = YFCY
  [F:YBBE]YENTTYP = YENTTYP
  [F:YBBE]YJOU = YJOU
  [F:YBBE]YDETDES = YDETDES
  [F:YBBE]YACC = YACC
  [F:YBBE]YLIGDES = YLIGDES
  [F:YBBE]YMESS = YMESS
  Write [F:YBBE]
  Close Local File [YBBE]

End

