#<AdxTL>@(#)0.0.0.0 $Revision$
######################################################################################################
# FILE NAME   : SPEYBBVAL
# DESCRIPTION : Business Batch Validation
######################################################################################################
# DATE        : 11-09-2018
# AUTHOR      : Dewald Henning
# COMPANY     : Leverage Technologies
# VERSION     : 1.9
#-----------------------------------------------------------------------------------------------------
# Epics Code  : DFCX1-27
#-----------------------------------------------------------------------------------------------------
######################################################################################################

$ACTION
  Case ACTION
    When "YBBVAL"  :  Gosub VALIDATE
  Endcase
Return

$VALIDATE

  Local Char MESSAGE(255) : MESSAGE = "Validate business batch "-[M:YBB0]YBATNBR+"?"
  Call OUINON(MESSAGE,OK)  From GESECRAN
  Case OK
    When 2 : Call VAL_BUSBAT([M:YBB0]YBATNBR)
  Endcase

Return

Subprog VAL_BUSBAT(YBATNBR)
Variable Char YBATNBR()

  # DELETE ALL RECORDS IN THE SIMULATION TABLE, ERRORS TABLE and TEMP TABLE
  If clalev([F:YBBS]) = 0 : Local File YBBSIM [YBBS]        : Endif
  If clalev([F:YBBE]) = 0 : Local File YBBERR [YBBE]        : Endif
  If clalev([F:YBDT]) = 0 : Local File YBBDETAILTEM [YBDT]  : Endif
  Delete [F:YBBS]YBBS1 = YBATNBR
  Delete [F:YBBE]YBBE1 = YBATNBR
  Delete [F:YBDT]YBDT0 = YBATNBR
  If clalev([F:YBBS]) = 0 : Close Local File [F:YBBS] : Endif
  If clalev([F:YBBE]) = 0 : Close Local File [F:YBBE] : Endif
  If clalev([F:YBDT]) = 0 : Close Local File [F:YBDT] : Endif

  #Add Lines to Temp Table
  Call ADD_DETAILTEMP()

  #Balance Checks
  Call EXE_BALANCE_VAL(YBATNBR)

  #GST Calculations
  Call EXE_GSTCALC(YBATNBR)

  #Journal & Entry Type per Transaction
  Call EXE_TRAJNL_VAL(YBATNBR)

  #Site Checks
  Call EXE_FCY_VAL(YBATNBR)

  #After Validations
  # -- Journals
  Call BT_JOURNAL(YBATNBR)
  # -- IE
  Call BT_IE(YBATNBR)
  # -- Cash
  Call BT_CASH(YBATNBR)

  # -- Balance check for Simulation lines
  Call SIM_BALANCE_CHECK(YBATNBR)

  #Update Line Numbers after line insertion for indexes
  #Due to the lines being written and added, the YLIG will sometimes be out, this is to assure that all the indexes match
  #Open Tables
  If clalev([F:YBBS]) = 0 : Local File YBBSIM [YBBS] : Endif
  If clalev([F:YBBE]) = 0 : Local File YBBERR [YBBE] : Endif
  Local Integer I : I = 0
  #Simulation
  For [F:YBBS]YBBS1 Where [F:YBBS]YBATNBR =  [M:YBB0]YBATNBR
    I += 1
    [F:YBBS]YLIG = I
    [M:YBB2]YBATNBR = [F:YBBS]YBATNBR
    Rewrite [F:YBBS]
    Affzo [M:YBB2]YBATNBR
  Next
  #Error
  I = 0
  For [F:YBBE]YBBE1 Where [F:YBBE]YBATNBR =  [M:YBB0]YBATNBR
    I += 1
    [F:YBBE]YLIG = I
    [M:YBB3]YBATNBR = [F:YBBS]YBATNBR
    Rewrite [F:YBBE]
    Affzo [M:YBB3]YBATNBR
  Next
  If clalev([F:YBBS]) = 0 : Close Local File [F:YBBS] : Endif
  If clalev([F:YBBE]) = 0 : Close Local File [F:YBBE] : Endif

  #Update Status
  If clalev([F:YBBH]) = 0 : Local File YBBHEADER [YBBH]  : Endif
  If clalev([F:YBBE]) = 0 : Local File YBBERR [YBBE]     : Endif

  Read [F:YBBH]YBBH0 = YBATNBR
  # Get count of errors and update the status
  Local Integer RET : RET = 0
  For [F:YBBE] Where [F:YBBE]YBATNBR = YBATNBR
    If [F:YBBE]YBATNBR = YBATNBR : RET += 1 : Endif
  Next
  If RET > 0
    #SET THE BATCH status To “BATCH ERROR”
    [F:YBBH]YBATSTA = 3
    Call ADDMESSWARN(mess(1,6259,1)-num$(RET)) From AWEB
  Else
     #SET THE BATCH status To “VALIATED”
    [F:YBBH]YBATSTA = 2
    Call ADDMESSINF(mess(2,6259,1)) From AWEB
  Endif
  If fstat = 0 Then
    Rewrite [F:YBBH]
    [M:YBB0]YBATSTA = [F:YBBH]YBATSTA
    Affzo [M:YBB0]
  Else
    Call ADDMESSERR(mess(18,6254,1)-[V]CST_AERROR) From AWEB
    Rollback
    End
  Endif

  If clalev([F:YBBE]) = 0 : Close Local File [F:YBBE] : Endif
  If clalev([F:YBBH]) = 0 : Close Local File [F:YBBH]  : Endif

End

#---------------------------------------------------------------------------------
# Entry Type / Journal Checks
#---------------------------------------------------------------------------------
Subprog EXE_TRAJNL_VAL(BATNBR)
Variable Char BATNBR()

  If clalev([F:YBBE]) = 0 : Local File YBBERR [YBBE]        : Endif
  If clalev([F:YBDT]) = 0 : Local File YBBDETAILTEM [YBDT]  : Endif

  Local Integer I : I = 0
  Local Char QUERY(255)
  Local Char EXECSP(255)
  Local Char YMSG(255)
  Local Char YSRC(50)
  Local Integer YNBRLIG

  [L]EXECSP = "EXEC [BB_ENTRY_VALIDATIONS] '"+BATNBR+"'"
  Execsql From "5" Sql EXECSP

  QUERY = "SELECT YDETLIG_0, YRESVAL_0, YTRANSNBR_0 FROM YBBDETAILTEM WHERE YBATNBR_0 = '"+BATNBR+"'"
  For (Integer DETLIG, Char RESULT, Integer YTRANSNO) From "5" Sql QUERY As [YLNK]
    Read [F:YBDT]YBDT1 = BATNBR;[F:YLNK]DETLIG
    YNBRLIG = [F:YLNK]DETLIG
    If [F:YLNK]RESULT = "ENTVAL_ERR" Then #Error
      YMSG = mess(28,6259,1)-num$(YTRANSNO)
      YSRC =  BATNBR+"-"+num$([F:YLNK]DETLIG)
      Call ADDLIG_ERR(BATNBR,YSRC,[F:YLNK]DETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
    Endif
  Next

  If clalev([F:YBBE]) = 0 : Close Local File [F:YBBE] : Endif
  If clalev([F:YBDT]) = 0 : Close Local File [F:YBDT] : Endif

End

#---------------------------------------------------------------------------------
# Balance Checks
#---------------------------------------------------------------------------------
Subprog EXE_BALANCE_VAL(BATNBR)
Variable Char BATNBR()

  If clalev([F:YBBE]) = 0 : Local File YBBERR [YBBE]        : Endif
  If clalev([F:YBDT]) = 0 : Local File YBBDETAILTEM [YBDT]  : Endif

  Local Integer I : I = 0
  Local Char QUERY(255)
  Local Char EXECSP(255)
  Local Char YMSG(255)
  Local Char YSRC(50)
  Local Integer YNBRLIG

  [L]EXECSP = "EXEC [BB_BALANCE_VALIDATION] '"+BATNBR+"'"
  Execsql From "5" Sql EXECSP

  QUERY = "SELECT YDETLIG_0, YRESVAL_0, YTRANSNBR_0 FROM YBBDETAILTEM WHERE YBATNBR_0 = '"+BATNBR+"'"
  For (Integer DETLIG, Char RESULT, Integer YTRANSNO) From "5" Sql QUERY As [YLNK]
    Read [F:YBDT]YBDT1 = BATNBR;[F:YLNK]DETLIG
    YNBRLIG = [F:YLNK]DETLIG
    If [F:YLNK]RESULT = "BAL1" Then #Error
      YMSG = mess(6,6259,1)-num$(YTRANSNO)
      YSRC =  BATNBR+"-"+num$([F:YLNK]DETLIG)
      Call ADDLIG_ERR(BATNBR,YSRC,YNBRLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
    Endif
  Next

  If clalev([F:YBBE]) = 0 : Close Local File [F:YBBE] : Endif
  If clalev([F:YBDT]) = 0 : Close Local File [F:YBDT] : Endif

End

#---------------------------------------------------------------------------------
# GST Calculations
#---------------------------------------------------------------------------------
Subprog EXE_GSTCALC(BATNBR)
Variable Char BATNBR()

  If clalev([F:TAX])    = 0 : Local File TABRATVAT    [TAX]     : Endif
  If clalev([F:GAC])    = 0 : Local File GACCOUNT     [GAC]     : Endif
  If clalev([F:TVT])    = 0 : Local File TABVAT       [TVT]     : Endif
  If clalev([F:YELA])   = 0 : Local File YENTLOAAGR   [YELA]    : Endif
  If clalev([F:YBDT])   = 0 : Local File YBBDETAILTEM [YBDT]    : Endif
  If clalev([F:YBDT2])  = 0 : Local File YBBDETAILTEM [YBDT2]   : Endif

  # DFCX1-27 - Update - DEWALD (22/01/2019)
  # Update Details Table for GST and Tax Inc amounts
  If clalev([F:YBBD])  = 0 : Local File YBBDETAIL [YBBD]   : Endif

  #Debugging
  #Local Char BATNBR(50) : BATNBR = "BB20181100004"

  Local Char TAX_OVERRIDE(5), TAX_RULE(5)
  Local Decimal NEW_GST, NEW_VATRAT, NEW_AMT
  Local Integer I : I = 0
  # -- IE Declarations
  #Local Char (5)
  #Local Char PREVGSTGRP(5)
  Local Char CPY1(5), CPY2(5)
  Local Integer YMINTRN, YMAXTRN, YCURTRN
  Local Integer YIEMINTRN
  Local Char IEQRY(250)(0..)
  Local Char QUERY(250)(0..)
  Local Integer YIEGSTGRP


  # -- IE Calculations --
  Filter [F:YBDT] Where [F:YBDT]YBATNBR = BATNBR and [F:YBDT]YBATTYP = 1
  For [F:YBDT]
   #Get Current Transaction Number(s) and run query to get distinct IE sites
   If YIEMINTRN = 0 : YIEMINTRN = [F:YBDT]YTRANSNBR : Endif
   IEQRY(0) = "" :  IEQRY(1) = "" #Clear Values
   IEQRY(0) = "SELECT distinct top 1 YCPY_0 FROM YBBDETAILTEM"
   IEQRY(1) -= "WHERE YTRANSNBR_0 = "+num$(YIEMINTRN)+" AND YBATNBR_0 = '"+BATNBR+"'"
   For (Char YCPY1) From "5" Sql IEQRY As [SQL1]
    CPY1 = [F:SQL1]YCPY1
   Next
   IEQRY(1) = ""
   IEQRY(1) -= "WHERE YTRANSNBR_0 = "+num$(YIEMINTRN)+" AND YBATNBR_0 =  '"+BATNBR+"' AND YCPY_0 <> '"+CPY1+"'"
   For (Char YCPY2) From "5" Sql IEQRY As [SQL2]
    CPY2 = [F:SQL2]YCPY2
   Next
   #Assign Transaction number
   YIEMINTRN = [F:YBDT]YTRANSNBR
   #Infbox FCY1, FCY2
   IEQRY(0) = "" : IEQRY(1) = ""
   IEQRY(0) = "select distinct CODGSTGRP_0 from GSTGRPD Where CPY_0 in ('"+CPY1+"','"+CPY2+"')"

   For (Char YGSTGRP) From "5" Sql IEQRY As [SQL3]
    YIEGSTGRP += 1
   Next
   # THE BUSINESS TRANSACTION ARE MEMBERS OF THE SAME GST GROUP
   If YIEGSTGRP = 1 Then
    [L]TAX_OVERRIDE = func AFNC.PARAM("YIEVAT","")
    QUERY(0) = "Update YBBDETAILTEM"
    QUERY(1) -= "Set YTAX_0 = '"+[L]TAX_OVERRIDE+"'"
    QUERY(2) -= "Where YBATNBR_0 = '"+BATNBR+"' and YBATTYP_0 = 1 and YTRANSNBR_0 = '"+num$(YIEMINTRN)+"'"
    Execsql From "5" Sql QUERY
    QUERY(0) = "" : QUERY(1) = "" : QUERY(2) = ""
    # DFCX1-27 - Update - DEWALD (22/01/2019)
    QUERY(0) = "Update YBBDETAIL"
    QUERY(1) -= "Set YTAXOVER_0 = '"+[L]TAX_OVERRIDE+"'"
    QUERY(2) -= "Where YBATNBR_0 = '"+BATNBR+"' and YBATTYP_0 = 1 and YTRANSNBR_0 = '"+num$(YIEMINTRN)+"'"
    Execsql From "5" Sql QUERY
   Endif
  Next
  Filter [F:YBDT]

  # -- Tax Calculations
  For [F:YBDT] Where YBATNBR = BATNBR
    #Check GST Inc Tick
    If YMINTRN = 0 : YMINTRN = [F:YBDT]YTRANSNBR : Endif
    YMAXTRN = [F:YBDT]YTRANSNBR
    #Read new instance for update
    Read [F:YBDT2]YBDT1 = BATNBR;[F:YBDT]YDETLIG
    #Get Vat Rates
    Read [F:TVT]TVT1 = [F:YBDT2]YTAX
    NEW_VATRAT = [F:TVT]VATRAT
    TAX_RULE = [F:TVT]VATVAC
    #Check ACCOUNT IS DEFINED As SUBJECTED
    Read [F:GAC]GAC0 = [F:YBDT2]YCOA;[F:YBDT2]YACC
    If [F:GAC]FLGVAT = 2 Then #Subjected
      #SET TAX To null
      [L]TAX_OVERRIDE  = ""
      [L]TAX_RULE = ""
    Endif

    If [L]TAX_OVERRIDE = "" and [F:YBDT]YTAX <> "" and [F:YBDT]YGSTAMT <> 0
      #CALCULATE THE GST and AMOUNT + TAX (As PER SECTION 6.1.17 GST CALCULATIONS)
      If [F:YBDT2]YDEB <> 0 : [L]NEW_AMT = [F:YBDT2]YDEB : Endif
      If [F:YBDT2]YCDT <> 0 : [L]NEW_AMT = [F:YBDT2]YCDT : Endif
      If [F:YBDT2]YGSTINC = 2 Then #GST Inc
        #GST Amount = Amount - Round(Amount/(1+(Rate/100)))
        [L]NEW_GST = [L]NEW_AMT  - ([L]NEW_AMT / (1+([L]NEW_VATRAT/100)))
        [F:YBDT2]YAMTTAX = [L]NEW_AMT
        If [F:YBDT2]YDEB <> 0 : [F:YBDT2]YDEB = [F:YBDT2]YDEB - arr([L]NEW_GST,0.01) : Endif
        If [F:YBDT2]YCDT <> 0 : [F:YBDT2]YCDT = [F:YBDT2]YCDT - arr([L]NEW_GST,0.01) : Endif
      Else #GST Ex
        #GST Amount = Amount * (Rate/100)
        [L]NEW_GST = [L]NEW_AMT * ([L]NEW_VATRAT/100)
        [F:YBDT2]YAMTTAX = [L]NEW_AMT - [L]NEW_GST
      Endif
    Else
      If [F:YBDT2]YDEB <> 0 : [L]NEW_AMT = [F:YBDT2]YDEB : Endif
      If [F:YBDT2]YCDT <> 0 : [L]NEW_AMT = [F:YBDT2]YCDT : Endif
      [L]NEW_GST = 0
      [F:YBDT2]YAMTTAX = [L]NEW_AMT
    Endif
    # DFCX1-27 - Update - DEWALD (22/01/2019)
    Read [F:YBBD]YBBD0 = [F:YBDT2]YBATNBR;[F:YBDT2]YDETLIG
    If fstat = 0
      [F:YBDT2]YGSTAMT = arr([L]NEW_GST,0.01)
      Rewrite [F:YBDT2]
      # DFCX1-27 - Update - DEWALD (22/01/2019)
      [F:YBBD]YGSTAMT = arr([L]NEW_GST,0.01)
      [F:YBBD]YAMTTAX = [F:YBDT2]YAMTTAX
      Rewrite [F:YBBD]
    Else
      Call ADDMESSERR(mess(7,6259,1)-[V]CST_AERROR) From AWEB
      Rollback
      End
    Endif

  Next

  For YCURTRN = YMINTRN To YMAXTRN
    Local Char TAXQRY(250)(0..)
    Local Char YSRC(250), YMESS(250),PARAM(25)
    Local Integer PRM
    TAXQRY(0) = "SELECT count(distinct(YGSTINC_0)) FROM YBBDETAILTEM"
    TAXQRY(1) -= "WHERE YBATNBR_0 = '"+BATNBR+"' and YTRANSNBR_0 = "+num$(YCURTRN)
    For (Integer DISTGST) From "5" Sql TAXQRY As [YSQL]
      If DISTGST <> 1
        YSRC = "Transaction number:"-num$(YCURTRN)
        YMESS = "Transaction has no distinct GST Inc. value"
        Call ADDLIG_ERR(BATNBR,YSRC,PRM,PARAM,PARAM,PARAM,PARAM,PARAM,PARAM,YMESS)
      Endif
    Next
  Next

  If clalev([F:YELA]) = 0  : Close Local File [F:YELA] : Endif
  If clalev([F:YBDT]) = 0  : Close Local File [F:YBDT] : Endif
  If clalev([F:TAX])  = 0  : Close Local File [F:TAX]  : Endif
  If clalev([F:GAC])  = 0  : Close Local File [F:GAC]  : Endif
  If clalev([F:TVT])  = 0  : Close Local File [F:TVT]  : Endif
  # DFCX1-27 - Update - DEWALD (22/01/2019)
  If clalev([F:YBBD])  = 0  : Close Local File [F:YBBD]  : Endif


End

#---------------------------------------------------------------------------------
# Site Calculations
#---------------------------------------------------------------------------------
Subprog EXE_FCY_VAL(BATNBR)
Variable Char BATNBR()

  #ADDLIG_ERR(YBATNBR,YSRC,YDETLIG,YFCY,YENTTYP,YJOU,YDETDES,YACC,YLIGDES,YMESS)

  If clalev([F:YBBE]) = 0 : Local File YBBERR [YBBE]        : Endif
  If clalev([F:YBDT]) = 0 : Local File YBBDETAILTEM [YBDT]  : Endif

  Local Integer I : I = 0
  Local Char QUERY(255)(0..)
  Local Char EXECSP(255)
  Local Char YMSG(255)
  Local Char YSRC(50)
  Local Integer YNBRLIG

  EXECSP = "EXEC [BB_SITE_VALIDATION] '"+BATNBR+"'"
  Execsql From "5" Sql EXECSP

  QUERY(0) = "SELECT YTRANSNBR_0, YBATNBR_0 +'-'+CAST(YDETLIG_0 + 1 AS VARCHAR(10)),YDETLIG_0,YFCY_0,YENTTYP_0,YJOU_0,YDETDES_0,YACC_0,YLIGDES_0, YRESVAL_0"
  QUERY(1) -= "From YBBDETAILTEM"
  QUERY(2) -= "WHERE YBATNBR_0 = '"+BATNBR+"'"
  For (Integer YTRANSNO, Char YSRC, Integer YDETLIG, Char YFCY, Char YENTTYP, Char YJOU, Char YDETDES, Char YACC, Char YLIGDES, Char RESULT) From "5" Sql QUERY As [YLNK]
    Read [F:YBDT]YBDT1 = BATNBR;YDETLIG
    If [F:YLNK]RESULT = "FCY1" Then #IE
      YMSG = mess(8,6259,1)-num$([F:YLNK]YTRANSNO)
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "FCY2" Then #Cash
      YMSG = mess(10,6259,1)-num$([F:YLNK]YTRANSNO)
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "FCY3" Then #Journal
      YMSG = mess(9,6259,1)-num$([F:YLNK]YTRANSNO)
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Endif
  Next

  If clalev([F:YBBE]) = 0 : Close Local File [F:YBBE] : Endif
  If clalev([F:YBDT]) = 0 : Close Local File [F:YBDT] : Endif

End

#---------------------------------------------------------------------------------
# Journal
#---------------------------------------------------------------------------------
Subprog BT_JOURNAL(BATNBR)
Variable Char BATNBR()

#Open Tables
If clalev([F:YBDT]) = 0 : Local File YBBDETAILTEM [YBDT]  : Endif
If clalev([F:GAC]) = 0 : Local File GACCOUNT [GAC]  : Endif
If clalev([F:GTE]) = 0 : Local File GTYPACCENT [GTE]  : Endif
If clalev([F:OPP]) = 0 : Local File OPPOR [OPP]  : Endif

#Variables
Local Integer YDETLIG
Local Integer YBATTYP
Local Decimal YNEWAMT
Local Char YDETDES(250), YSRC(250), YMSG(250)
Local Char YREV(1) : YREV = "N"

For [F:YBDT] Where [F:YBDT]YBATNBR = BATNBR
  If [F:YBDT]YRESVAL = "Validating" and [F:YBDT]YBATTYP = 3 Then
    [L]YDETLIG = [F:YBDT]YDETLIG
    YERR = 0
    #DFCX1-330 - Check Entry Type Validity Dates - Start
    Read [F:GTE]GTE0 = [F:YBDT]YENTTYP
    If num$([F:GTE]VLYSTR) <> "00/00/0000" and [M:YBB0]YBATDAT <= [F:GTE]VLYSTR
      YSRC = BATNBR-num$([L]YDETLIG)
      YMSG = "Entry type validity start date not in range of Batch date"
      Call ADDLIG_ERR(BATNBR,YSRC,[L]YDETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
    Endif
    If num$([F:GTE]VLYEND) <> "00/00/0000" and [M:YBB0]YBATDAT >= [F:GTE]VLYEND
      YSRC = BATNBR-num$([L]YDETLIG)
      YMSG = "Entry type validity end date not in range of Batch date"
      Call ADDLIG_ERR(BATNBR,YSRC,[L]YDETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
    Endif
    #DFCX1-330 - Check Entry Type Validity Dates - End
    #DFCX1-318 - Project Validation Link Check - START
    If [F:YBDT]YPJT <> "" Then
      Read [F:OPP]OPP0 = [F:YBDT]YPJT
      If [F:OPP]OPPCLO = 2 Then
        YSRC = BATNBR-num$([L]YDETLIG)
        YMSG = "Associated project is marked as closed"
        Call ADDLIG_ERR(BATNBR,YSRC,[L]YDETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
      Endif
    Endif
    #DFCX1-318 - Project Validation Link Check - END
    Call ADDLIG_SIM([F:YBDT]YBATNBR,[L]YDETLIG, [F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&               [F:YBDT]YDETDES,[F:YBDT]YFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&               [F:YBDT]YBP,[F:YBDT]YDEB,[F:YBDT]YCDT,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YFREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&               [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX,[F:YBDT]YBAN,
&               [F:YBDT]YDIE0,[F:YBDT]YDIE1,[F:YBDT]YDIE2,[F:YBDT]YDIE3,[F:YBDT]YDIE4)
      Call TAX_LINE_ADD(BATNBR, [L]YDETLIG, YREV)
  Endif
  #DFCX1-329 - Account access - START
  Read [F:GAC]GAC0 = [F:YBDT]YCOA;[F:YBDT]YACC
  If [F:GAC]FCY <> ""
    If [F:GAC]FCY <> [F:YBDT]YFCY
      YSRC = BATNBR-num$([L]YDETLIG)
      YMSG = "Account is not available for selected site"
      Call ADDLIG_ERR(BATNBR,YSRC,[L]YDETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
    Endif
  Endif
  #DFCX1-329 - Account access - END
Next

#Close Tables
If clalev([F:YBDT]) = 0 : Close Local File [F:YBDT] : Endif
If clalev([F:GAC]) = 0 : Close Local File [F:GAC] : Endif
If clalev([F:GTE]) = 0 : Close Local File [F:GTE] : Endif
If clalev([F:OPP]) = 0 : Close Local File [F:OPP] : Endif


End

#---------------------------------------------------------------------------------
# Inter Company/Entity
#---------------------------------------------------------------------------------
Subprog BT_IE(BATNBR)
Variable Char BATNBR()

  Local Char YMSG(255)

  If clalev([F:YBDT]) = 0  : Local File YBBDETAILTEM [YBDT]  : Endif
  If clalev([F:YBBD]) = 0  : Local File YBBDETAIL    [YBBD]  : Endif
  If clalev([F:YELA]) = 0  : Local File YENTLOAAGR   [YELA]  : Endif
  If clalev([F:GTE]) = 0   : Local File GTYPACCENT   [GTE]   : Endif
  If clalev([F:OPP]) = 0   : Local File OPPOR [OPP]  : Endif
  If clalev([F:GAC]) = 0 : Local File GACCOUNT [GAC]  : Endif

  Local Char QUERY(255)(0..)
  Local Char ELAQRY(255)(0..)
  Local Char EXECSP(255)
  Local Char YMSG(255)
  Local Char YSRC(50)
  Local Integer YLIG, YDETLIG
  Local Decimal YDEBT, YCRED
  Local Char ELADES(255)
  Local Char PREFCY(50) : PREFCY = ""
  Local Char YREV(1) : YREV = "N"

  #DFCX1-330 - Check Entry Type Validity Dates - Start
  For [F:YBDT] Where [F:YBDT]YBATNBR = BATNBR
    If [F:YBDT]YRESVAL = "Validating" and [F:YBDT]YBATTYP = 1 Then
      [L]YDETLIG = [F:YBDT]YDETLIG
      Read [F:GTE]GTE0 = [F:YBDT]YENTTYP
      If num$([F:GTE]VLYSTR) <> "00/00/0000" and [M:YBB0]YBATDAT <= [F:GTE]VLYSTR
        YSRC = BATNBR-num$([F:YBDT]YDETLIG)
        YMSG = "Entry type validity start date not in range of Batch date"
        Call ADDLIG_ERR(BATNBR,YSRC,YDETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
      Endif
      If num$([F:GTE]VLYEND) <> "00/00/0000" and [M:YBB0]YBATDAT >= [F:GTE]VLYEND
        YSRC = BATNBR-num$([F:YBDT]YDETLIG)
        YMSG = "Entry type validity end date not in range of Batch date"
        Call ADDLIG_ERR(BATNBR,YSRC,YDETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
      Endif
    Endif
    #DFCX1-318 - Project Validation Link Check - START
    If [F:YBDT]YPJT <> "" Then
      Read [F:OPP]OPP0 = [F:YBDT]YPJT
      If [F:OPP]OPPCLO = 2 Then
        YSRC = BATNBR-num$([L]YDETLIG)
        YMSG = "Associated project is marked as closed"
        Call ADDLIG_ERR(BATNBR,YSRC,[L]YDETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
      Endif
    Endif
    #DFCX1-318 - Project Validation Link Check - END
    #DFCX1-329 - Account access - START
    Read [F:GAC]GAC0 = [F:YBDT]YCOA;[F:YBDT]YACC
    If [F:GAC]FCY <> ""
      If [F:GAC]FCY <> [F:YBDT]YFCY
        YSRC = BATNBR-num$([L]YDETLIG)
        YMSG = "Account is not available for selected site"
        Call ADDLIG_ERR(BATNBR,YSRC,[L]YDETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
      Endif
    Endif
    #DFCX1-329 - Account access - END
    #DFCX1-320 – ELA Post Validation Rule - START
    If [F:YBDT]YELA <> "" Then
      Read [F:YELA]YELA0 = [F:YBDT]YELA
      If [F:YELA]YENAFLG <> 2 Then
        YSRC = BATNBR-num$([L]YDETLIG)
        YMSG = "ELA not marked as active"
        Call ADDLIG_ERR(BATNBR,YSRC,[L]YDETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
      Endif
    Endif
    #DFCX1-320 – ELA Post Validation Rule - END

  Next
  #DFCX1-330 - Check Entry Type Validity Dates - End

  EXECSP = "EXEC [BB_IE_TRANSACTION_VALIDATION] '"+BATNBR+"'"
  Execsql From "5" Sql EXECSP

  QUERY(0) = "SELECT YTRANSNBR_0, YBATNBR_0 +'-'+CAST(YDETLIG_0 AS VARCHAR(10)),YDETLIG_0,YFCY_0,YENTTYP_0,YJOU_0,YDETDES_0,YACC_0,YLIGDES_0, YRESVAL_0"
  QUERY(1) -= "From YBBDETAILTEM"
  QUERY(2) -= "WHERE YBATNBR_0 = '"+BATNBR+"' and YBATTYP_0 = 1"
  #QUERY(3) -= "and YRESVAL_0 in ('FCY1PTH','FCY2PTH','FCY1ELA','FCY2ELA')"

  For (Integer YTRANSNO, Char YSRC, Integer YDETLIG, Char YFCY, Char YENTTYP, Char YJOU, Char YDETDES, Char YACC, Char YLIGDES, Char RESULT) From "5" Sql QUERY As [YLNK]
    Read [F:YBDT]YBDT1 = BATNBR;[F:YLNK]YDETLIG
    Read [F:YBBD]YBBD0 = BATNBR;[F:YLNK]YDETLIG
    # Error Handling --- Start
    If [F:YLNK]RESULT = "FCY1BAL0"
      YMSG = "Site ("+[F:YLNK]YFCY+") balance within business transaction " + num$([F:YLNK]YDETLIG)+ " equates to zero"
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "FCY2BAL0"
      YMSG = "Site ("+[F:YLNK]YFCY+") balance  within business transaction " + num$([F:YLNK]YDETLIG)+ " equates to zero"
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "ELAMIS"
      YMSG = "Distinct ELA to Site numbers does not match."#mess(20,6259,1)
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "FCYMIS"
      YMSG = "Distinct Site numbers does not match IE type."#mess(20,6259,1)
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "ELAGR1"
      YMSG = "ELA type mistmatch for site 1"#mess(12,6259,1)
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "ELAGR2"
      YMSG ="ELA type mistmatch for site 2"
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "PROVIDER1"
      YMSG = "Provider site not found for site 1"#mess(12,6259,1)
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "PROVIDER1"
      YMSG ="Provider site not found for site 2"
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    # Error Handling --- END
    Else #Validation Passed - Write to Simulation Line based on every ELA in the RESULT
      Call ADDLIG_SIM(BATNBR,[F:YLNK]YDETLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&             [F:YBDT]YDETDES,[F:YBDT]YFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&             [F:YBDT]YBP,[F:YBDT]YDEB,[F:YBDT]YCDT,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YFREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&             [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX,[F:YBDT]YBAN,
&             [F:YBDT]YDIE0,[F:YBDT]YDIE1,[F:YBDT]YDIE2,[F:YBDT]YDIE3,[F:YBDT]YDIE4)
      YREV = "N"
      Call TAX_LINE_ADD(BATNBR, [F:YLNK]YDETLIG,YREV)
      ELAQRY(0) = "SELECT value FROM YICELA"
      ELAQRY(1) -= "CROSS APPLY STRING_SPLIT(YELAPATH_0,',')"
      ELAQRY(2) -= "WHERE YELASTR_0 = '"+[F:YBDT]YELA+"'"
      For (Char YVAL(255)) From "5" Sql ELAQRY As [YLNK2]
      #Using THE CURRENT ELA
        Read [F:YELA]YELA0 = [F:YLNK2]YVAL
        #DFCX1-320 - Check ELA Active - Start
        If [F:YELA]YENAFLG = 1 Then
          YMSG = "ELA is not active for site"-[F:YLNK]YFCY
          Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
        Endif
        #DFCX1-320 - Check ELA Active - End
        YLIG = [F:YLNK]YDETLIG + 1
        If [F:YLNK2]YVAL <> "" Then
          ELADES = mess(13,6259,1)-[F:YLNK2]YVAL
          If [F:YBDT]YCDT = 0 : YDEBT = [F:YBBD]YDEB : YCRED = 0 : Endif
          If [F:YBDT]YDEB = 0 : YCRED = [F:YBBD]YCDT : YDEBT = 0 : Endif
          #CREATE SIMULATION LINE For THE ELA RECIPIENT COMPANY (DR/CR OPPOSITE To THE BALANCE For THE S1 SITE) IN THE S1SLL
          Call ADDLIG_SIM(BATNBR,YLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&                 [F:YBDT]YDETDES,[F:YELA]YFCYREC,[F:YELA]YCOAREC,[F:YELA]YACCREC,ELADES,[F:YBDT]YCTRL,
&                 [F:YBDT]YBP,YCRED,YDEBT,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YFREF,[F:YBDT]YPJT,[F:YELA]YRCCE0,
&                 [F:YELA]YRCCE1,[F:YELA]YRCCE2,[F:YELA]YRCCE3,[F:YELA]YRCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX,[F:YBDT]YBAN,
&                 [F:YELA]YRDIE0,[F:YELA]YRDIE1,[F:YELA]YRDIE2,[F:YELA]YRDIE3,[F:YELA]YRDIE4)
#          YREV = "Y"
#          Call TAX_LINE_ADD(BATNBR, YLIG,YREV)
          #CREATE SIMULATION LINE For THE ELA PROVIDER COMPANY (DR/CR SAME As THE BALANCE For THE S1 SITE) IN THE S1SLL
          YLIG = YLIG + 1
          ELADES = mess(14,6259,1)-[F:YLNK2]YVAL
          Call ADDLIG_SIM(BATNBR,YLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&                 [F:YBDT]YDETDES,[F:YELA]YFCYPRO,[F:YELA]YCOAPRO,[F:YELA]YACCPRO,ELADES,[F:YBDT]YCTRL,
&                 [F:YBDT]YBP,YDEBT,YCRED,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YFREF,[F:YBDT]YPJT,[F:YELA]YPCCE0,
&                 [F:YELA]YPCCE1,[F:YELA]YPCCE2,[F:YELA]YPCCE3,[F:YELA]YPCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX,[F:YBDT]YBAN,
&                 [F:YELA]YPDIE0,[F:YELA]YPDIE1,[F:YELA]YPDIE2,[F:YELA]YPDIE3,[F:YELA]YPDIE4)
#          YREV = "N"
#          Call TAX_LINE_ADD(BATNBR,YLIG,YREV)
          Endif
        Next
        ELAQRY(0) = "" : ELAQRY(1) = "" : ELAQRY(2) = ""
    Endif
  Next

  #Update From and To Site
  If clalev([F:YBBS]) = 0 : Local File YBBSIM [YBBS]  : Endif
  Local Char FCYQRY(250)(0..)
  FCYQRY(0) = "SELECT YTRANSNBR_0, YFRMFCY_0, YTOFCY_0"
  FCYQRY(1) -= "FROM YBBDETAILTEM"
  FCYQRY(2) -= "WHERE YBATNBR_0 = '"+BATNBR+"'and YBATTYP_0 = 1"
  For (Integer TRANSNO, Char FROMSITE, Char TOSITE) From "5" Sql FCYQRY As [YSQL]
    For [F:YBBS] Where [F:YBBS]YBATNBR = BATNBR and [F:YBBS]YTRANSNBR = [F:YSQL]TRANSNO
      [F:YBBS]YFRMFCY = [F:YSQL]FROMSITE
      [F:YBBS]YTOFCY = [F:YSQL]TOSITE
      Rewrite [F:YBBS]
    Next
  Next
  If clalev([F:YBBS]) = 0 : Close Local File [F:YBBS] : Endif


  If clalev([F:YBDT]) = 0 : Close Local File [F:YBDT]  : Endif
  If clalev([F:YELA]) = 0 : Close Local File [F:YELA]  : Endif
  If clalev([F:YBBD]) = 0 : Close Local File [F:YBBD]  : Endif
  If clalev([F:GTE])  = 0 : Close Local File [F:GTE]   : Endif
  If clalev([F:OPP])  = 0 : Close Local File [F:OPP]   : Endif
  If clalev([F:GAC])  = 0 : Close Local File [F:GAC]   : Endif


End

Subprog BT_CASH(BATNBR)
Variable Char BATNBR()

  If clalev([F:YBDT]) = 0  : Local File YBBDETAILTEM [YBDT]  : Endif
  If clalev([F:YBBD]) = 0  : Local File YBBDETAIL    [YBBD]  : Endif
  If clalev([F:YELA]) = 0  : Local File YENTLOAAGR   [YELA]  : Endif
  If clalev([F:GTE]) = 0   : Local File GTYPACCENT   [GTE]   : Endif
  If clalev([F:OPP]) = 0   : Local File OPPOR [OPP]  : Endif
  If clalev([F:GAC]) = 0 : Local File GACCOUNT [GAC]  : Endif

  Local Integer I : I = 0
  Local Char QUERY(255)(0..)
  Local Char EXECSP(255)
  Local Char EXELSP(255)
  Local Char YMSG(255)
  Local Char YSRC(50)
  Local Integer YLIG, YDETLIG
  Local Decimal YDEBT, YCRED
  Local Char ELAQRY(255)(0..)
  Local Char LSTELA(50)
  Local Char ELADES(250)
  Local Char YREV(1) : YREV = "N"

  #DFCX1-330 - Check Entry Type Validity Dates - Start
  For [F:YBDT] Where [F:YBDT]YBATNBR = BATNBR
    If [F:YBDT]YRESVAL = "Validating" and [F:YBDT]YBATTYP = 2 Then
      [L]YDETLIG = [F:YBDT]YDETLIG
      Read [F:GTE]GTE0 = [F:YBDT]YENTTYP
      If num$([F:GTE]VLYSTR) <> "00/00/0000" and [M:YBB0]YBATDAT <= [F:GTE]VLYSTR
        YSRC = BATNBR-num$([F:YBDT]YDETLIG)
        YMSG = "Entry type validity start date not in range of Batch date"
        Call ADDLIG_ERR(BATNBR,YSRC,YDETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
      Endif
      If num$([F:GTE]VLYEND) <> "00/00/0000" and [M:YBB0]YBATDAT >= [F:GTE]VLYEND
        YSRC = BATNBR-num$([F:YBDT]YDETLIG)
        YMSG = "Entry type validity end date not in range of Batch date"
        Call ADDLIG_ERR(BATNBR,YSRC,YDETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
      Endif
    Endif
    #DFCX1-318 - Project Validation Link Check - START
    If [F:YBDT]YPJT <> "" Then
      Read [F:OPP]OPP0 = [F:YBDT]YPJT
      If [F:OPP]OPPCLO = 2 Then
        YSRC = BATNBR-num$([L]YDETLIG)
        YMSG = "Associated project is marked as closed"
        Call ADDLIG_ERR(BATNBR,YSRC,[L]YDETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
      Endif
    Endif
    #DFCX1-318 - Project Validation Link Check - END
    #DFCX1-329 - Account access - START
    Read [F:GAC]GAC0 = [F:YBDT]YCOA;[F:YBDT]YACC
    If [F:GAC]FCY <> ""
      If [F:GAC]FCY <> [F:YBDT]YFCY
        YSRC = BATNBR-num$([L]YDETLIG)
        YMSG = "Account is not available for selected site"
        Call ADDLIG_ERR(BATNBR,YSRC,[L]YDETLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
      Endif
    Endif
    #DFCX1-329 - Account access - END
  Next
  #DFCX1-330 - Check Entry Type Validity Dates - End


  EXECSP = "EXEC [BB_CASH_TRANSACTION_VALIDATION] '"+BATNBR+"'"
  Execsql From "5" Sql EXECSP

  QUERY(0) = "SELECT YTRANSNBR_0, YBATNBR_0 +'-'+CAST(YDETLIG_0 + 1 AS VARCHAR(10)),YDETLIG_0,YFCY_0,YENTTYP_0,YJOU_0,YDETDES_0,YACC_0,YLIGDES_0, YRESVAL_0"
  QUERY(1) -= "From YBBDETAILTEM"
  QUERY(2) -= "WHERE YBATNBR_0 = '"+BATNBR+"' and YBATTYP_0 = 2"
  #QUERY(3) -= "and YRESVAL_0 in ('BCNT1','BREQ1','BACT1','BPASSPRI')"

  For (Integer YTRANSNO, Char YSRC, Integer YDETLIG, Char YFCY, Char YENTTYP, Char YJOU, Char YDETDES, Char YACC, Char YLIGDES, Char RESULT) From "5" Sql QUERY As [YLNK]
    Read [F:YBDT]YBDT1 = BATNBR;[F:YLNK]YDETLIG
    Read [F:YBBD]YBBD0 = BATNBR;[F:YLNK]YDETLIG
    If [F:YLNK]RESULT = "BCNT1" Then #More than 2 distinct bank accounts
      YMSG = mess(15,6259,1)
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "BCNT2" Then #More than 2 distinct bank accounts
      YMSG = mess(29,6259,1)
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "BREQ1" Then #Transaction line count exceeds 2
      YMSG = mess(16,6259,1)
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "BACT1" Then #Selected Bank is not active
      YMSG = mess(17,6259,1)
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "BANELA" Then #Selected Bank is not active
      YMSG = mess(18,6259,1)
      Call ADDLIG_ERR(BATNBR,[F:YLNK]YSRC,[F:YLNK]YDETLIG,[F:YLNK]YFCY,[F:YLNK]YENTTYP,[F:YLNK]YJOU,[F:YLNK]YDETDES,[F:YLNK]YACC,[F:YLNK]YLIGDES,YMSG)
    Elsif [F:YLNK]RESULT = "Validating"
      Call ADDLIG_SIM(BATNBR,[F:YLNK]YDETLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&             [F:YBDT]YDETDES,[F:YBDT]YFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&             [F:YBDT]YBP,[F:YBDT]YDEB,[F:YBDT]YCDT,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YFREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&             [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX,[F:YBDT]YBAN,
&             [F:YBDT]YDIE0,[F:YBDT]YDIE1,[F:YBDT]YDIE2,[F:YBDT]YDIE3,[F:YBDT]YDIE4)
     YREV = "N"
     Call TAX_LINE_ADD(BATNBR, [F:YLNK]YDETLIG,YREV)
    Elsif [F:YLNK]RESULT = "BPASSPRI"
      Call ADDLIG_SIM(BATNBR,[F:YLNK]YDETLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&             [F:YBDT]YDETDES,[F:YBDT]YFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&             [F:YBDT]YBP,[F:YBDT]YDEB,[F:YBDT]YCDT,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YFREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&             [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX,[F:YBDT]YBAN,
&             [F:YBDT]YDIE0,[F:YBDT]YDIE1,[F:YBDT]YDIE2,[F:YBDT]YDIE3,[F:YBDT]YDIE4)
      YREV = "N"
      Call TAX_LINE_ADD(BATNBR, [F:YLNK]YDETLIG,YREV)
    Elsif [F:YLNK]RESULT = "BPASSELA"
      Call ADDLIG_SIM(BATNBR,[F:YLNK]YDETLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&             [F:YBDT]YDETDES,[F:YBDT]YFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&             [F:YBDT]YBP,[F:YBDT]YDEB,[F:YBDT]YCDT,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YFREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&             [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX,[F:YBDT]YBAN,
&             [F:YBDT]YDIE0,[F:YBDT]YDIE1,[F:YBDT]YDIE2,[F:YBDT]YDIE3,[F:YBDT]YDIE4)
      YREV = "N"
      Call TAX_LINE_ADD(BATNBR, [F:YLNK]YDETLIG,YREV)
# opposite dr/cr
      Call ADDLIG_SIM(BATNBR,[F:YLNK]YDETLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&             [F:YBDT]YDETDES,[F:YBDT]YFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&             [F:YBDT]YBP,[F:YBDT]YCDT,[F:YBDT]YDEB,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YFREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&             [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX,[F:YBDT]YBAN,
&             [F:YBDT]YDIE0,[F:YBDT]YDIE1,[F:YBDT]YDIE2,[F:YBDT]YDIE3,[F:YBDT]YDIE4)
      YREV = "Y"
      Call TAX_LINE_ADD(BATNBR, [F:YLNK]YDETLIG,YREV)

      ELAQRY(0) = "SELECT value FROM YICELA"
      ELAQRY(1) -= "CROSS APPLY STRING_SPLIT(YELAPATH_0,',')"
      ELAQRY(2) -= "WHERE YELASTR_0 = '"+[F:YBDT]YELA+"'"

      For (Char YVAL(255)) From "5" Sql ELAQRY As [YLNK2]
        #Using THE CURRENT ELA
        Read [F:YELA]YELA0 = [F:YLNK2]YVAL
        YLIG = [F:YLNK]YDETLIG + 1
        If [F:YBDT]YCDT = 0 : YDEBT = [F:YBBD]YDEB : YCRED = 0 : Endif
        If [F:YBDT]YDEB = 0 : YCRED = [F:YBBD]YCDT : YDEBT = 0 Endif
        ELADES = mess(24,6259,1)-[F:YLNK2]YVAL-mess(25,6259,1)-[F:YELA]YFCYREC
        #CREATE SIMULATION LINE For THE ELA RECIPIENT COMPANY (DR/CR OPPOSITE To THE BALANCE For THE S1 SITE)
        Call ADDLIG_SIM(BATNBR,YLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&             ELADES,[F:YELA]YFCYREC,[F:YELA]YCOAREC,[F:YELA]YACCREC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&             [F:YBDT]YBP,YDEBT,YCRED,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YFREF,[F:YBDT]YPJT,[F:YELA]YRCCE0,
&             [F:YELA]YRCCE1,[F:YELA]YRCCE2,[F:YELA]YRCCE3,[F:YELA]YRCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX,[F:YBDT]YBAN,
&             [F:YBDT]YDIE0,[F:YBDT]YDIE1,[F:YBDT]YDIE2,[F:YBDT]YDIE3,[F:YBDT]YDIE4)
        #CREATE SIMULATION LINE For THE ELA PROVIDER COMPANY (DR/CR SAME As THE BALANCE For THE S1 SITE)
        YLIG = YLIG + 1
        ELADES = mess(24,6259,1)-[F:YLNK2]YVAL-mess(26,6259,1)-[F:YELA]YFCYREC
        Call ADDLIG_SIM(BATNBR,YLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&             ELADES,[F:YELA]YFCYPRO,[F:YELA]YCOAPRO,[F:YELA]YACCPRO,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&             [F:YBDT]YBP,[F:YBDT]YCDT,[F:YBDT]YDEB,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YFREF,[F:YBDT]YPJT,[F:YELA]YPCCE0,
&             [F:YELA]YPCCE1,[F:YELA]YPCCE2,[F:YELA]YPCCE3,[F:YELA]YPCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX,[F:YBDT]YBAN,
&             [F:YBDT]YDIE0,[F:YBDT]YDIE1,[F:YBDT]YDIE2,[F:YBDT]YDIE3,[F:YBDT]YDIE4)
        #Set last ELA
        If [F:YELA]YSRCLONAGR = '' :  LSTELA = [F:YELA]YLONAGR : Endif
      Next
      ELAQRY(0) = "" : ELAQRY(1) = "" : ELAQRY(2) = ""
      ELAQRY(0) = "SELECT YBAN_0, YBANCPY_0, YTREACC_0, YBANPRI_0 FROM [YBANELA] WHERE YELA_0 = '"+[F:YBDT]YELA+"'"
      For (Char NBAN, Char NBANCPY, Char NTREACC, Char NBANPRI) From "5" Sql ELAQRY As [YLNK3]
        If [F:YLNK3]NBAN <> "" and [F:YLNK3]NBANCPY <> "" and [F:YLNK3]NBANPRI = "2" Then
          YLIG = YLIG + 1
          Read [F:YELA]YELA0 = LSTELA
          If [F:YLNK3]NBANCPY = [F:YELA]YCPYPRO Then
            If [F:YBDT]YCDT = 0 : YDEBT = [F:YBBD]YDEB : YCRED = 0 : Endif
            If [F:YBDT]YDEB = 0 : YCRED = [F:YBBD]YCDT : YDEBT = 0 Endif
            #Get Principal Bank and Account
            ELADES = mess(21,6259,1)-[F:YLNK3]NBAN
            #OLD [F:YLNK3]NTREACC - might change again
            Call ADDLIG_SIM(BATNBR,YLIG,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&                 ELADES,[F:YELA]YFCYPRO,[F:YELA]YCOAPRO,[F:YLNK3]NTREACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&                 [F:YBDT]YBP,YDEBT,YCRED,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YFREF,[F:YBDT]YPJT,[F:YELA]YPCCE0,
&                 [F:YELA]YPCCE1,[F:YELA]YPCCE2,[F:YELA]YPCCE3,[F:YELA]YPCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX,[F:YLNK3]NBAN,
&                 [F:YBDT]YDIE0,[F:YBDT]YDIE1,[F:YBDT]YDIE2,[F:YBDT]YDIE3,[F:YBDT]YDIE4)
          Else
            YMSG = mess(19,6259,1)
            Local Char YSRC(250) : YSRC = mess(22,6259,1)
            Call ADDLIG_ERR(BATNBR,YSRC,YLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
          Endif
        Else
          YMSG = mess(23,6259,1)
          Local Char YSRC(250) : YSRC = mess(22,6259,1)
          Call ADDLIG_ERR(BATNBR,YSRC,YLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,YMSG)
        Endif
      Next
      ELAQRY(0) = ""

    Endif
  Next

  If clalev([F:YBDT1]) = 0  : Close Local File  [F:YBDT]  : Endif
  If clalev([F:YELA])  = 0  : Close Local File  [F:YELA] : Endif
  If clalev([F:YBBD]) = 0 : Close Local File [F:YBBD]  : Endif
  If clalev([F:GTE]) = 0 : Close Local File [F:GTE]  : Endif
  If clalev([F:OPP])  = 0 : Close Local File [F:OPP]   : Endif
  If clalev([F:GAC])  = 0 : Close Local File [F:GAC]   : Endif

End

#---------------------------------------------------------------------------------
# Additional Tax Line Add
#---------------------------------------------------------------------------------
Subprog TAX_LINE_ADD(BATNBR, LIGNO, REV)
Variable Char BATNBR()
Variable Integer LIGNO()
Variable Char REV()

If clalev([F:YBDT]) = 0  : Local File YBBDETAILTEM [YBDT]  : Endif
If clalev([F:GAC]) = 0   : Local File GACCOUNT [GAC]  : Endif

  Local Char VATQRY(250)(0..)
  Local Char YTAXACC(6)
  Local Integer YDETLIG : [L]YDETLIG = LIGNO + 1
  Local Decimal YDEB, YCDT

  Read [F:YBDT]YBDT1 = BATNBR;LIGNO
  If [F:YBDT]YTAX <> "" and [F:YBDT]YAMTTAX > 0 and [F:YBDT]YGSTAMT <> 0
    Read [F:GAC]GAC0 = [F:YBDT]YCOA;[F:YBDT]YACC
    # Calculate Purchase or Sales
    VATQRY(0) = "select G.ACC_0, G.ACC_1"
    VATQRY(1) -= "From TABVAT V"
    VATQRY(2) -= "INNER JOIN GACCCODE G on V.ACCCOD_0 = G.ACCCOD_0"
    VATQRY(3) -= "where TYP_0 = 10"
    VATQRY(4) -= "and V.LEG_0 = 'AUS' and G.COA_0 = '"+[F:YBDT]YCOA+"' and V.VAT_0 = '"+[F:YBDT]YTAX+"'"

    For (Char SALACC, Char PURACC) From "5" Sql VATQRY As [YSQL]
      If find([F:GAC]VATIPT,3,4,5) # Purchase
        YTAXACC = [F:YSQL]PURACC
      Else # Sales
        YTAXACC = [F:YSQL]SALACC
      Endif
    Next
    YDETDES = "Transaction line (GST) created from account"-[F:YBDT]YACC
    YDEB = 0 : YCDT = 0
    If [F:YBDT]YDEB = 0
      YCDT = [F:YBDT]YGSTAMT
    Elsif [F:YBDT]YCDT = 0
      YDEB = [F:YBDT]YGSTAMT
    Endif
    If REV = "Y" # DR/CR Opposite
    Call ADDLIG_SIM([F:YBDT]YBATNBR,[L]YDETLIG, [F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&                   YDETDES,[F:YBDT]YFCY,[F:YBDT]YCOA,YTAXACC,YDETDES,[F:YBDT]YCTRL,
&                   [F:YBDT]YBP,YCDT,YDEB,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YFREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&                   [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX,[F:YBDT]YBAN,
&                   [F:YBDT]YDIE0,[F:YBDT]YDIE1,[F:YBDT]YDIE2,[F:YBDT]YDIE3,[F:YBDT]YDIE4)
    Else
    Call ADDLIG_SIM([F:YBDT]YBATNBR,[L]YDETLIG, [F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&                   YDETDES,[F:YBDT]YFCY,[F:YBDT]YCOA,YTAXACC,YDETDES,[F:YBDT]YCTRL,
&                   [F:YBDT]YBP,YDEB,YCDT,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YFREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&                   [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4,[F:YBDT]YGSTAMT,[F:YBDT]YAMTTAX,[F:YBDT]YBAN,
&                   [F:YBDT]YDIE0,[F:YBDT]YDIE1,[F:YBDT]YDIE2,[F:YBDT]YDIE3,[F:YBDT]YDIE4)
    Endif

    If clalev([F:YBBS]) = 0 : Close Local File [F:YBBS]  : Endif

  Endif


If clalev([F:YBDT]) = 0 : Close Local File [F:YBDT] : Endif
If clalev([F:GAC]) = 0 : Close Local File [F:GAC] : Endif

End

#---------------------------------------------------------------------------------
# Simulation Balance Check
#---------------------------------------------------------------------------------
Subprog SIM_BALANCE_CHECK(BATNBR)
Variable Char BATNBR()

  If clalev([F:YBBS])   = 0 : Local File YBBSIM [YBBS]    : Endif
  Local Integer YMINTRN, YMAXTRN, YCURTRN

  For [F:YBBS] Where YBATNBR = BATNBR
    If YMINTRN = 0 : YMINTRN = [F:YBBS]YTRANSNBR : Endif
    YMAXTRN = [F:YBBS]YTRANSNBR
  Next

  For YCURTRN = YMINTRN To YMAXTRN
    Local Char QRY(250)(0..)
    Local Char YSRC(250), YMESS(250),PARAM(25)
    Local Integer PRM
    QRY(0) = "SELECT SUM(YDEB_0), SUM(YCDT_0) FROM YBBSIM"
    QRY(1) -= "WHERE YBATNBR_0 = '"+BATNBR+"' and YTRANSNBR_0 = "+num$(YCURTRN)
    For (Decimal TOTDEB, Decimal TOTCDT) From "5" Sql QRY As [YSQL]
      If [F:YSQL]TOTDEB <> [F:YSQL]TOTCDT
        YSRC = "Generated from Simulation"
        YMESS = "Balance does not match on transaction number"-num$(YCURTRN)
        Call ADDLIG_ERR(BATNBR,YSRC,PRM,PARAM,PARAM,PARAM,PARAM,PARAM,PARAM,YMESS)
      Endif
    Next
  Next
  If clalev([F:YBBS])   = 0 : Close Local File [F:YBBS]    : Endif
End

#---------------------------------------------------------------------------------
# GST INC Checks
#---------------------------------------------------------------------------------
#Subprog VAL_GSTINC(BATNBR)
#Variable Char BATNBR()
#
#If clalev([F:YBDT]) = 0  : Local File YBBDETAILTEM [YBDT]  : Endif
#
#  Local Char QUERY(250)(0..)
#  Local Integer PRETRANSNBR
#
#  For [F:YBDT] Where YBATNBR = BATNBR
#    If PRETRANSNBR = 0 : PRETRANSNBR = [F:YBDT]YTRANSNBR : Endif
#    If PRETRANSNBR = [F:YBDT]YTRANSNBR
#      QUERY(0) = "select distinct YGSTINC_0 from YBBDETAILTEM WHERE YBATNBR_0 = '"+BATNBR+"' and YTRANSNBR_0 = "+num$([F:YBDT]YTRANSNBR)
#      For (Integer DISCOUNT) From "5" Sql QUERY As [YSQL]
#      Next
#    Endif
#  Next
#
#
#If clalev([F:YBDT]) = 0 : Close Local File [F:YBDT] : Endif
#
#End

#---------------------------------------------------------------------------------
# Add Detail Temp Line for Current Batch number
#---------------------------------------------------------------------------------
Subprog ADD_DETAILTEMP()
If clalev([F:YBDT]) = 0  : Local File YBBDETAILTEM [YBDT]  : Endif
  For I = 0 To [M:YBB1]NBLIG - 1
    nolign = I
    [F:YBDT] = [M:YBB1]
    [F:YBDT]YBATNBR = [M:YBB0]YBATNBR
    [F:YBDT]YFCY = [M:YBB1]YFCY(I)
    [F:YBDT]YENTTYP = [M:YBB1]YENTTYP(I)
    [F:YBDT]YTRANSNBR = [M:YBB1]YTRANSNBR(I)
    [F:YBDT]YJOU = [M:YBB1]YJOU(I)
    [F:YBDT]YCPY = [M:YBB1]YCPY(I)
    [F:YBDT]YACM = [M:YBB1]YACM(I)
    [F:YBDT]YLED1 = [M:YBB1]YLED1(I)
    [F:YBDT]YELA = [M:YBB1]YELA(I)
    [F:YBDT]YCOA = [M:YBB1]YCOA(I)
    [F:YBDT]YELA = [M:YBB1]YELA(I)
    [F:YBDT]YBAN = [M:YBB1]YBAN(I)
    [F:YBDT]YACC = [M:YBB1]YACC(I)
    [F:YBDT]YLIGDES = [M:YBB1]YLIGDES(I)
    [F:YBDT]YDETDES = [M:YBB1]YDETDES(I)
    [F:YBDT]YCTRL = [M:YBB1]YCTRL(I)
    [F:YBDT]YBP = [M:YBB1]YBP(I)
    [F:YBDT]YDEB = [M:YBB1]YDEB(I)
    [F:YBDT]YCDT = [M:YBB1]YCDT(I)
    [F:YBDT]YTAX = [M:YBB1]YTAX(I)
    [F:YBDT]YGSTAMT = [M:YBB1]YGSTAMT(I)
    [F:YBDT]YAMTTAX = [M:YBB1]YAMTTAX(I)
    [F:YBDT]YREF = [M:YBB1]YREF(I)
    [F:YBDT]YFREF = [M:YBB1]YFREF(I)
    [F:YBDT]YPJT = [M:YBB1]YPJT(I)
    [F:YBDT]YDIE0 = [M:YBB1]YDIE0(I)
    [F:YBDT]YCCE0 = [M:YBB1]YCCE0(I)
    [F:YBDT]YDIE1 = [M:YBB1]YDIE1(I)
    [F:YBDT]YCCE1 = [M:YBB1]YCCE1(I)
    [F:YBDT]YDIE2 = [M:YBB1]YDIE2(I)
    [F:YBDT]YCCE2 = [M:YBB1]YCCE2(I)
    [F:YBDT]YDIE3 = [M:YBB1]YDIE3(I)
    [F:YBDT]YCCE3 = [M:YBB1]YCCE3(I)
    [F:YBDT]YDIE4 = [M:YBB1]YDIE4(I)
    [F:YBDT]YCCE4 = [M:YBB1]YCCE4(I)
    [F:YBDT]YBATTYP = [M:YBB1]YBATTYP(I)
    [F:YBDT]YGSTINC = [M:YBB1]YGSTINC(I)
    [F:YBDT]YDETLIG = [M:YBB1]YDETLIG(I)
    [F:YBDT]YRESVAL = "Validating"
     Write [F:YBDT]
  Next
  Close Local File [YBDT]
End

#---------------------------------------------------------------------------------
# Simulation Line Write
#---------------------------------------------------------------------------------
Subprog ADDLIG_SIM(YBATNBR,YDETLIG, YENTTYP,YJOU,YTRANSNBR,YDETDES,YFCY,YCOA,YACC,YLIGDES,YCTRL,YBP,YDEB,YCDT,
&                  YTAX,YREF,YFREF,YPJT,YCCE0,YCCE1,YCCE2,YCCE3,YCCE4,YGSTAMT,YAMTTAX,YBAN,YDIE0,YDIE1,YDIE2,YDIE3,YDIE4)
Variable Char YBATNBR()
Variable Integer YDETLIG()
Variable Char YENTTYP()
Variable Char YJOU()
Variable Integer YTRANSNBR()
Variable Char YDETDES()
Variable Char YFCY()
Variable Char YCOA()
Variable Char YACC()
Variable Char YLIGDES()
Variable Char YCTRL()
Variable Char YBP()
Variable Decimal YDEB()
Variable Decimal YCDT()
Variable Char YTAX()
Variable Char YREF()
Variable Char YFREF()
Variable Char YPJT()
Variable Char YCCE0()
Variable Char YCCE1()
Variable Char YCCE2()
Variable Char YCCE3()
Variable Char YCCE4()
Variable Decimal YGSTAMT
Variable Decimal YAMTTAX
Variable Char YBAN()
Variable Char YDIE0()
Variable Char YDIE1()
Variable Char YDIE2()
Variable Char YDIE3()
Variable Char YDIE4()

Local Integer YLIG : YLIG = YDETLIG

  If clalev([F:YBBS]) = 0 : Local File YBBSIM [YBBS]  : Endif
  Raz [F:YBBS]
  [F:YBBS]YBATNBR = YBATNBR
  [F:YBBS]YDETLIG = YDETLIG
  [F:YBBS]YENTTYP = YENTTYP
  [F:YBBS]YJOU = YJOU
  [F:YBBS]YTRANSNBR = YTRANSNBR
  [F:YBBS]YDETDES = YDETDES
  [F:YBBS]YFCY = YFCY
  [F:YBBS]YCOA = YCOA
  [F:YBBS]YACC = YACC
  [F:YBBS]YLIGDES = YLIGDES
  [F:YBBS]YCTRL = YCTRL
  [F:YBBS]YBP = YBP
  [F:YBBS]YDEB = YDEB
  [F:YBBS]YCDT = YCDT
  [F:YBBS]YTAX = YTAX
  [F:YBBS]YREF = YREF
  [F:YBBS]YFREF = YFREF
  [F:YBBS]YPJT = YPJT
  [F:YBBS]YCCE0 = YCCE0
  [F:YBBS]YCCE1 = YCCE1
  [F:YBBS]YCCE2 = YCCE2
  [F:YBBS]YCCE3 = YCCE3
  [F:YBBS]YCCE4 = YCCE4
  [F:YBBS]YGSTAMT = YGSTAMT
  [F:YBBS]YAMTTAX = YAMTTAX
  [F:YBBS]YLIG = YLIG
  [F:YBBS]YBAN = YBAN
  [F:YBBS]YDIE0 = YDIE0
  [F:YBBS]YDIE1 = YDIE1
  [F:YBBS]YDIE2 = YDIE2
  [F:YBBS]YDIE3 = YDIE3
  [F:YBBS]YDIE4 = YDIE4
  Write [F:YBBS]
  Close Local File [YBBS]

End

#---------------------------------------------------------------------------------
# Error Line Write
#---------------------------------------------------------------------------------
Subprog ADDLIG_ERR(YBATNBR,YSRC,YDETLIG,YFCY,YENTTYP,YJOU,YDETDES,YACC,YLIGDES,YMESS)
Variable Char YBATNBR()
Variable Char YSRC()
Variable Integer YDETLIG()
Variable Char YFCY()
Variable Char YENTTYP()
Variable Char YJOU()
Variable Char YDETDES()
Variable Char YACC()
Variable Char YLIGDES()
Variable Char YMESS()
Local Integer YLIG : YLIG = YDETLIG

  If clalev([F:YBBE]) = 0 : Local File YBBERR [YBBE]  : Endif
  Raz [F:YBBE]
  [F:YBBE]YBATNBR = YBATNBR
  [F:YBBE]YSRC = YSRC
  [F:YBBE]YDETLIG = YDETLIG
  [F:YBBE]YFCY = YFCY
  [F:YBBE]YENTTYP = YENTTYP
  [F:YBBE]YJOU = YJOU
  [F:YBBE]YDETDES = YDETDES
  [F:YBBE]YACC = YACC
  [F:YBBE]YLIGDES = YLIGDES
  [F:YBBE]YMESS = YMESS
  [F:YBBE]YLIG = YLIG
  Write [F:YBBE]
  Close Local File [YBBE]

End

