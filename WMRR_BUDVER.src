#<AdxTL>@(#)0.0.0.0 $Revision$Class Budget versions
# Supervisor
## CRUD-CLASSE ## BUDVER
# 2018-08-27 13:08:49 266


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File BUDVER [BUV_]

If !SILENCE : Call TRACE("2 --> Local Instance R_BUDVER") From ASYRCOM : Endif
Local Instance BUDVER Using R_BUDVER

If !SILENCE : Call TRACE("3 --> New Instance R_BUDVER") From ASYRCOM : Endif
BUDVER = NewInstance R_BUDVER AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [BUV_]BUV0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of BUDVER") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet BUDVER.AREAD([BUV_]BUD,[BUV_]VER))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("BUDVER.BUV.BUD ="-num$(BUDVER.BUV.BUD)) From ASYRCOM
 Call TRACE("BUDVER.BUV.VER ="-num$(BUDVER.BUV.VER)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(BUDVER.BUV.AKEYS)
  Call TRACE("-"-num$(I)-":"-BUDVER.BUV.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [BUV_]
FreeGroup BUDVER
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(BUDVER,ACLE,ASTATUS,_ETAG)
Variable Instance BUDVER Using R_BUDVER
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _BUD(5)
Local Char _VER(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BUD = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_VER = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File BUDVER [BUV]
Default File [F:BUV]
Read [F:BUV]BUV0 = [L]_BUD;[L]_VER
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:BUV]UPDTICK)>0
 [L]_ETAG = num$([F:BUV]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(BUDVER,ACLE,ASTATUS)
Variable Instance BUDVER Using R_BUDVER
Value Char ACLE
Variable Integer ASTATUS
Local Char _BUD(5)
Local Char _VER(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BUD = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_VER = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet BUDVER.AREAD([L]_BUD,[L]_VER))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(BUDVER,_BUD,_VER,ASTATUS)
Variable Instance BUDVER Using R_BUDVER
Value Char _BUD
Value Char _VER
Variable Integer ASTATUS

If BUDVER = null : End : Endif

Gosub AVARIABLES From WMR00BUDVER
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If BUDVER.APARENT=null
 [L]A_I = BUDVER.freeSnapshot
 BUDVER.snapshotEnabled = 0
 BUDVER.setAccessorEnabled = 0
Endif

If fmet BUDVER.ACTX.AGETAFCRIGHT(BUDVER,"GESBUV",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:BUV]
Read [F:BUV]BUV0 = [L]_BUD;[L]_VER
If fstat
[L]A_ERROR = [L]_BUD+"~"+[L]_VER
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(BUDVER,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet BUDVER.ACTX.AGETAFCRIGHTR(BUDVER,"GESBUV",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet BUDVER.ACTX.ASTACRITROLE(BUDVER,[L]_BUD+"~"+[L]_VER
& ,"BUV","BUV",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet BUDVER.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

BUDVER.BUV.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet BUDVER.BUV.AREAD([L]_BUD,[L]_VER))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet BUDVER.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & BUDVER.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet BUDVER._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If BUDVER.APARENT=null
 BUDVER.snapshotEnabled = 1
 BUDVER.setAccessorEnabled = 1
Endif
LogicClose File [BUV]
End



