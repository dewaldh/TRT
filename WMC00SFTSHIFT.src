#<AdxTL>@(#)0.0.0.0 $Revision$Class Shift code
# Supervisor
## CRUD-CLASSE ## SFTSHIFT
# 2018-08-27 12:45:36 327

Gosub TEST From WMCR_SFTSHIFT : End

############################################################################################
## C : Subprog AINSERT(INSTANCE)
## D : Subprog ADELETE(INSTANCE)
## R : Subprog AREAD(INSTANCE,SHFCOD)
## U : Subprog AUPDATE(INSTANCE)
############################################################################################
# SFTSHIFT : SFTSHIFT
############################################################################################

############################################################################################
### AVARIABLES
############################################################################################
$AVARIABLES
[L]ASTATUS =max([L]ASTATUS,fmet SFTSHIFT._ADELERRORS([V]CST_ALLERRORS))
$_AVARIABLES
Local    Integer     A_LEVEL,A_I,A_NEWCOL,A_N1
Local    Integer    ASTATUS,A_RETIK,A_TYPMAJ,A_ASTALIN
Local    Char        A_STRSITE(GLONFCY),A_STRACC(GLONACS),CURPRO(50),A_PARENT(50),A_PATH(200),A_ABR(GLONABR),A_ERROR(250)
Local    Uuident    A_UUID

[L]A_LEVEL    = SFTSHIFT.ACTX.LEVWML
[L]ASTATUS  = 0

Onerrgo ERR_OPENTAB
If find(SFTSHIFT.ACTX.AFOLDER,nomap,"")>0
 Local File SFTSHIFT [SFTS]
 Local File SFTSHIFT [AAA_]
 Local File ATEXTRA [AXX]
Else
 Local File =SFTSHIFT.ACTX.AFOLDER+".SFTSHIFT" [SFTS]
 Local File =SFTSHIFT.ACTX.AFOLDER+".SFTSHIFT" [AAA_]
 Local File =SFTSHIFT.ACTX.AFOLDER+".ATEXTRA" [AXX]
Endif
Onerrgo
Return

$ERR_OPENTAB
[L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.ASETERROR("",errp+"("+num$(errl)+")"-mess(6,123,1)-num$(errn)-errmes$(errn)-errm,[V]CST_AERROR))
Resume

############################################################################################
### Link
############################################################################################
$AOPEN_LINK
Gosub AVARIABLES
Link [SFTS] With
& [AAA_]SHF0 = SHFCOD
& As [LNK_]
Return

############################################################################################
### SFTSHIFT(WSFTS)
############################################################################################
Funprog  _MAJSQL_SFTSHIFT(WSFTS)
Variable Instance WSFTS Using C_SFTSHIFT
Local Integer ASTATUS,A_I,A_J
Default File [F:SFTS]
If WSFTS.ASTALIN=[V]CST_ANEW
 Call INICRE(WSFTS) From ASYRSUB
 SetInstance [F:SFTS] With WSFTS
 For J=1 To maxtab(WSFTS.AXX)
  If WSFTS.AXX(J)<>null & WSFTS.AXX(J).PRO= "SHFDES" & WSFTS.AXX(J).FLG>0
   Call MAJTEXTRALAN(WSFTS,WSFTS.AXX(J).TEX,"SFTSHIFT","SHFDES",WSFTS.AXX(J).LAN,WSFTS.SHFCOD,"",[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 10
  For [L]A_I=1 To maxtab(WSFTS.BREAKS)
   If WSFTS.BREAKS([L]A_I)<>null & !find(WSFTS.BREAKS([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WSFTS.BREAKS([L]A_I).AORDER=[L]A_J
    [F:SFTS]BRKCOD([L]A_J-1) = WSFTS.BREAKS([L]A_I).BRKCOD
    [F:SFTS]BRKSTR([L]A_J-1) = WSFTS.BREAKS([L]A_I).BRKSTR
    [F:SFTS]BRKEND([L]A_J-1) = WSFTS.BREAKS([L]A_I).BRKEND
    [F:SFTS]BRKDUR([L]A_J-1) = WSFTS.BREAKS([L]A_I).BRKDUR
    [F:SFTS]DURCHECKB([L]A_J-1) = WSFTS.BREAKS([L]A_I).DURCHECKB
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 Write [F:SFTS]
 If fstat
  Call FSTA("SFTS",WSFTS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WSFTS.updTick = [F:SFTS]updTick
Elsif WSFTS.ASTALIN=[V]CST_ALL or WSFTS.ASTALIN=[V]CST_AUPD
 Call INIUPD(WSFTS) From ASYRSUB
 SetInstance [F:SFTS] With WSFTS
 For J=1 To maxtab(WSFTS.AXX)
  If WSFTS.AXX(J)<>null & WSFTS.AXX(J).PRO= "SHFDES" & WSFTS.AXX(J).FLG>0
   Call MAJTEXTRALAN(WSFTS,WSFTS.AXX(J).TEX,"SFTSHIFT","SHFDES",WSFTS.AXX(J).LAN,WSFTS.SHFCOD,"",[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 10
  For [L]A_I=1 To maxtab(WSFTS.BREAKS)
   If WSFTS.BREAKS([L]A_I)<>null & !find(WSFTS.BREAKS([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WSFTS.BREAKS([L]A_I).AORDER=[L]A_J
    [F:SFTS]BRKCOD([L]A_J-1) = WSFTS.BREAKS([L]A_I).BRKCOD
    [F:SFTS]BRKSTR([L]A_J-1) = WSFTS.BREAKS([L]A_I).BRKSTR
    [F:SFTS]BRKEND([L]A_J-1) = WSFTS.BREAKS([L]A_I).BRKEND
    [F:SFTS]BRKDUR([L]A_J-1) = WSFTS.BREAKS([L]A_I).BRKDUR
    [F:SFTS]DURCHECKB([L]A_J-1) = WSFTS.BREAKS([L]A_I).DURCHECKB
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WSFTS,"SFTSHIFT")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:SFTS]SHF0 = [F:SFTS]SHFCOD
 If fstat
  Call FSTA("SFTS",WSFTS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WSFTS.updTick = [F:SFTS]updTick
Elsif WSFTS.ASTALIN=[V]CST_ADEL
 SetInstance [F:SFTS] With WSFTS
 For J=1 To maxtab(WSFTS.AXX)
  If WSFTS.AXX(J)<>null & WSFTS.AXX(J).PRO= "SHFDES"
   Call SUPTEXTRA(WSFTS,WSFTS.AXX(J).TEX,"SFTSHIFT","SHFDES",WSFTS.AXX(J).LAN,WSFTS.SHFCOD,"",[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WSFTS,"SFTSHIFT")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:SFTS]SHF0 = [F:SFTS]SHFCOD
 If fstat
  Call FSTA("SFTS",WSFTS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK



