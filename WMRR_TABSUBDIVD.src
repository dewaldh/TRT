#<AdxTL>@(#)0.0.0.0 $Revision$Class Subdivision
# Supervisor
## CRUD-CLASSE ## TABSUBDIVD
# 2018-08-27 13:39:02 475


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABSUBDIV [ATU_]

If !SILENCE : Call TRACE("2 --> Local Instance R_TABSUBDIVD") From ASYRCOM : Endif
Local Instance TABSUBDIVD Using R_TABSUBDIVD

If !SILENCE : Call TRACE("3 --> New Instance R_TABSUBDIVD") From ASYRCOM : Endif
TABSUBDIVD = NewInstance R_TABSUBDIVD AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ATU_]ATU0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TABSUBDIVD") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TABSUBDIVD.AREAD([ATU_]CRY,[ATU_]TYP,[ATU_]COD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TABSUBDIVD.ATU.CRY ="-num$(TABSUBDIVD.ATU.CRY)) From ASYRCOM
 Call TRACE("TABSUBDIVD.ATU.TYP ="-num$(TABSUBDIVD.ATU.TYP)) From ASYRCOM
 Call TRACE("TABSUBDIVD.ATU.COD ="-num$(TABSUBDIVD.ATU.COD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TABSUBDIVD.ATU.AKEYS)
  Call TRACE("-"-num$(I)-":"-TABSUBDIVD.ATU.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ATU_]
FreeGroup TABSUBDIVD
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TABSUBDIVD,ACLE,ASTATUS,_ETAG)
Variable Instance TABSUBDIVD Using R_TABSUBDIVD
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CRY(3)
Local Tinyint _TYP
Local Char _COD(35)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CRY = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_TYP = val([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_COD = num$([L]CLE(3)) : Endif
Raz [L]_ETAG
Local File TABSUBDIV [ATU]
Default File [F:ATU]
Read [F:ATU]ATU0 = [L]_CRY;[L]_TYP;[L]_COD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ATU]UPDTICK)>0
 [L]_ETAG = num$([F:ATU]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TABSUBDIVD,ACLE,ASTATUS)
Variable Instance TABSUBDIVD Using R_TABSUBDIVD
Value Char ACLE
Variable Integer ASTATUS
Local Char _CRY(3)
Local Tinyint _TYP
Local Char _COD(35)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CRY = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_TYP = val([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_COD = num$([L]CLE(3)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TABSUBDIVD.AREAD([L]_CRY,[L]_TYP,[L]_COD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TABSUBDIVD,_CRY,_TYP,_COD,ASTATUS)
Variable Instance TABSUBDIVD Using R_TABSUBDIVD
Value Char _CRY
Value Tinyint _TYP
Value Char _COD
Variable Integer ASTATUS

If TABSUBDIVD = null : End : Endif

Gosub AVARIABLES From WMR00TABSUBDIVD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TABSUBDIVD.APARENT=null
 [L]A_I = TABSUBDIVD.freeSnapshot
 TABSUBDIVD.snapshotEnabled = 0
 TABSUBDIVD.setAccessorEnabled = 0
Endif

If fmet TABSUBDIVD.ACTX.AGETAFCRIGHT(TABSUBDIVD,"GESATU",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:ATU]
Read [F:ATU]ATU0 = [L]_CRY;[L]_TYP;[L]_COD
If fstat
[L]A_ERROR = [L]_CRY+"~"+num$([L]_TYP)+"~"+[L]_COD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABSUBDIVD,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet TABSUBDIVD.ACTX.AGETAFCRIGHTR(TABSUBDIVD,"GESATU",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet TABSUBDIVD.ACTX.ASTACRITROLE(TABSUBDIVD,[L]_CRY+"~"+num$([L]_TYP)+"~"+[L]_COD
& ,"ATU","ATU",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABSUBDIVD.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

TABSUBDIVD.ATU.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet TABSUBDIVD.ATU.AREAD([L]_CRY,[L]_TYP,[L]_COD))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABSUBDIVD.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & TABSUBDIVD.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet TABSUBDIVD._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If TABSUBDIVD.APARENT=null
 TABSUBDIVD.snapshotEnabled = 1
 TABSUBDIVD.setAccessorEnabled = 1
Endif
LogicClose File [ATU]
End



