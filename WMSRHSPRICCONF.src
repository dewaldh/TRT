#<AdxTL>@(#)0.0.0.0 $Revision$Class ## ?IDENTQRY? SEARCH ##
# Supervisor
#WMSRHSPRICCONF SPRICCONF
# 2018-08-27 12:48:38 408

Funprog IS_IMPLEMENTED()
End 1
#---------------------------------------------------------------------------------------------------#
# List of tables to open
#---------------------------------------------------------------------------------------------------#
$ASEARCH_OPEN
If filinfo(filpath("FIL","SPRICCONF","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File SPRICCONF [SPC]
Local File SPRICCONF [SPC_]
Local File ATEXTRA [AXX_1]
Local Char KEY_SPC(120)(1..3)
ACTION = "ASEARCH_OPEN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to close
#---------------------------------------------------------------------------------------------------#
$ASEARCH_CLOSE
LogicClose File [SPC]
LogicClose File [SPC_]
LogicClose File [AXX_1]
ACTION = "ASEARCH_CLOSE_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to join
#---------------------------------------------------------------------------------------------------#
$ASEARCH_JOIN
Link [SPC] With
& [SPC_]SPC0=[SPC]PLI,
& [F:AXX_1]AXX0 = "SPRICCONF";"DESAXX";GACTX.LAN;[F:SPC]PLI;""
& As [LNK_]
& Where (1=1
& )
ACTION = "ASEARCH_JOIN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to join
#---------------------------------------------------------------------------------------------------#
$ASEARCH_JOIN_INC
Link [SPC] With
& [SPC_]SPC0=[SPC]PLI,
& [F:AXX_1]AXX0 = "SPRICCONF";"DESAXX";GACTX.LAN;[F:SPC]PLI;""
& As [LNK_]
& Where (UPDDATTIM > gdatetime$(QUPDDATTIM)
& )
ACTION = "ASEARCH_JOIN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# Create an instance of
#---------------------------------------------------------------------------------------------------#
$ASEARCH_CREATEINSTANCE
Local Integer ASTATUS
Local Integer FINS
#Create a new instance
INS = NewInstance C_SPRICCONF(GACTX,UIDINS,NUMLIN,null,"") AllocGroup null
INS.setaccessorEnabled = 0
Local Integer CI1
Local Integer CJ1
Local Char    SEPINS1(2) : SEPINS1=""
Local Char IS1(1)

CJ1=1
For CI1 = 0 To dim([F:SPC]ABB)-1
#Create a new instance
INS.C_FIL(CJ1) = NewInstance C_SPRICCONF_C_FIL(GACTX,UIDINS,NUMLIN,INS,"") AllocGroup INS
INS.C_FIL(CJ1).setaccessorEnabled = 0
 CJ1+=1
Next CI1
Return

#---------------------------------------------------------------------------------------------------#
# Set an instance
#---------------------------------------------------------------------------------------------------#
$ASEARCH_SETINSTANCE

SetInstance INS With [F:SPC]
FINS = 1
Call ASETTEXTRA(INS.AXX,INS.ALLOCGRP(),"DESAXX",[F:AXX_1]TEXTE,GACTX.LAN) From ASYRSUB
Local Integer ABB_MAX:ABB_MAX0
CJ1=1
For CI1 = 0 To dim([F:SPC]ABB)-1
 Break ([F:SPC]ABB(CI1)="" & [F:SPC]FIL(CI1)="" & [F:SPC]FLD(CI1)="" & [F:SPC]FLDTYP(CI1)="" & [F:SPC]FLDTYPCPL(CI1)="" & [F:SPC]CRIDIE(CI1)="" & [F:SPC]CRIDES(CI1)="")
 ABB_MAX+=1
 INS.C_FIL(CJ1).ABB=[F:SPC]ABB(CI1)
 INS.C_FIL(CJ1).FIL=[F:SPC]FIL(CI1)
 INS.C_FIL(CJ1).FLD=[F:SPC]FLD(CI1)
 INS.C_FIL(CJ1).FLDTYP=[F:SPC]FLDTYP(CI1)
 INS.C_FIL(CJ1).FLDTYPCPL=[F:SPC]FLDTYPCPL(CI1)
 INS.C_FIL(CJ1).CRIDIE=[F:SPC]CRIDIE(CI1)
 INS.C_FIL(CJ1).CRIDES=[F:SPC]CRIDES(CI1)
 CJ1+=1
Next CI1
[L]ASTATUS = fmet INS.ACTION("ASEARCH_TRANS_AFTER")
Gosub ASEARCH_TO_JSON
Return

#---------------------------------------------------------------------------------------------------#
# Serialize the entity in a JSON format
#---------------------------------------------------------------------------------------------------#
$ASEARCH_TO_JSON
If FINS=0 : Return : Endif
QCOUNT += 1
Onerrgo ERROR_VALUE
Append ASND.DATA ,SEPINS1
SEPINS1 = ','+chr$(10)
Append ASND.DATA ,'{'
Append ASND.DATA ,'"PLI":'             +'"'+escJson(INS.PLI)+'"'
Append ASND.DATA ,',"DESAXX":'         
Append ASND.DATA ,'"'
Append ASND.DATA ,escJson(func ASYRSUB.AGETTEXTRA(INS.AXX,"DESAXX",GACTX.LAN))
Append ASND.DATA ,'"'
Append ASND.DATA ,',"LANDESSHO":'      +'"'+escJson(INS.LANDESSHO)+'"'
Append ASND.DATA ,',"PLISTC":'         +'"'+escJson(INS.PLISTC)+'"'
Append ASND.DATA ,',"PLICPY":'         +'"'+escJson(INS.PLICPY)+'"'
Append ASND.DATA ,',"PRIFLD":'         +'"'+escJson(INS.PRIFLD)+'"'
Append ASND.DATA ,',"CUR":'            +'"'+escJson(INS.CUR)+'"'
Append ASND.DATA ,',"CREUSR":'         +'"'+escJson(INS.CREUSR)+'"'
Append ASND.DATA ,',"CREDAT":'          + func ASYRSRH.DATE_TO_SYR(INS.CREDAT)
Append ASND.DATA ,',"UPDUSR":'         +'"'+escJson(INS.UPDUSR)+'"'
Append ASND.DATA ,',"UPDDAT":'          + func ASYRSRH.DATE_TO_SYR(INS.UPDDAT)
IS1=""
CJ1=1
Append ASND.DATA ,',"C_FIL":['
For CI1=1 To ABB_MAX
 Append ASND.DATA ,IS1+'{'
 Append ASND.DATA ,'"ABB":'             +'"'+escJson(INS.C_FIL(CJ1).ABB)+'"'
 Append ASND.DATA ,',"FIL":'            +'"'+escJson(INS.C_FIL(CJ1).FIL)+'"'
 Append ASND.DATA ,',"FLD":'            +'"'+escJson(INS.C_FIL(CJ1).FLD)+'"'
 Append ASND.DATA ,',"FLDTYP":'         +'"'+escJson(INS.C_FIL(CJ1).FLDTYP)+'"'
 Append ASND.DATA ,',"FLDTYPCPL":'      +'"'+escJson(INS.C_FIL(CJ1).FLDTYPCPL)+'"'
 Append ASND.DATA ,',"CRIDIE":'         +'"'+escJson(INS.C_FIL(CJ1).CRIDIE)+'"'
 Append ASND.DATA ,',"CRIDES":'         +'"'+escJson(INS.C_FIL(CJ1).CRIDES)+'"'
 Append ASND.DATA ,'}'
 IS1=","
 CJ1+=1
Next CI1
Append ASND.DATA , "]"
Append ASND.DATA ,'}'
Onerrgo
FINS = 0
Return

#---------------------------------------------------------------------------------------------------#
# Errors
#---------------------------------------------------------------------------------------------------#
$ERROR_VALUE
SVALUE ='"<error'-errmes$(errn)+'>"'
Resume
#---------------------------------------------------------------------------------------------------#
# Link standard key
#---------------------------------------------------------------------------------------------------#
$AQUERY_PRIMARYKEYS
Local Char ASTDKEY(250)
ASTDKEY = ""
ASTDKEY += "[F:SPC]PLI"
ACTION = "ASEARCH_PRIMARYKEYS_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# Actions
#---------------------------------------------------------------------------------------------------#
$ASEARCH_ACTION
Local Char CURPRO(250),CURPTH(250),AMETHOD(50),AEVENT(50)
[L]AEVENT = [L]ACTION
 Gosub METHODS From SPRICCONF_CSTD
Gosub METHODS From SPRICCONF_CSTD
Return

#---------------------------------------------------------------------------------------------------#
# APPEND_PROTOTYPE
#---------------------------------------------------------------------------------------------------#
Funprog APPEND_PROTOTYPE(ACTX,WCLOB,PSYR)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Variable Clbfile   WCLOB
Variable Instance  PSYR     Using C_ASYR
Local Integer ERROR : ERROR = 0
Local Integer IND   : IND = 0
Local Char TRTNAME(80)
Local Char REPRESENTATION(80)
Local File ASHW    [ASW]
Filter [ASW] Where CODCLA="SPRICCONF" & DEFREP=2
Read [ASW]ASW0 First
If !fstat
 If  [ASW]ENAFAC(0) = 2
  REPRESENTATION = [ASW]CODREP
 Else
  WCLOB ="{}"
  End ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(62,149,1),"SPRICCONF")) 
 Endif
Endif
Close Local File [ASW]
If len(REPRESENTATION)=0
 WCLOB ="{}"
 End ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(62,149,1),"SPRICCONF")) 
Endif
Append WCLOB,'{'
Append WCLOB,'"$baseUrl":"'+PSYR.PREFIX+'"'
Append WCLOB,',"$baseType":"'+PSYR.CNTPRE+"."+nomap+'"'
Append WCLOB,',"$classTitle":"'+func GET_RES_STRING(ACTX.LAN,4008)+'"'
Append WCLOB,',"$url":"{$baseUrl}/SPRICCONF'+PSYR.URLREP+''+REPRESENTATION+'.$search"'
Append WCLOB,',"$prototype":"{$baseUrl}/$prototypes('+"'"+'{$representation}.$thumb'+"'"+')"'
Append WCLOB,',"$type":"{$baseType}.'+REPRESENTATION+'.$search"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"$resources":{'
Append WCLOB,'"$type":"application/x-array"'
Append WCLOB,',"$item":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,4008)+' {$key}"'
Append WCLOB,',"$key":"{PLI}"'
Append WCLOB,',"$url":"{$baseUrl}/SPRICCONF('+"'"+'{$key}'+"'"+')'+PSYR.URLREP+'SPRICCONF.searchItem"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"PLI":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,2652)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":6'
Append WCLOB,"}"
Append WCLOB,',"DESAXX":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,282)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":30'
Append WCLOB,"}"
Append WCLOB,',"LANDESSHO":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,13665)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"PLISTC":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,3979)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":10'
Append WCLOB,"}"
Append WCLOB,',"PLICPY":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1343)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"PRIFLD":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,2672)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"CUR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,323)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":3'
Append WCLOB,"}"
Append WCLOB,',"CREUSR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1320)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"CREDAT":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1322)+'"'
Append WCLOB,',"$type":"application/x-date"'
Append WCLOB,"}"
Append WCLOB,',"UPDUSR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1324)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"UPDDAT":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1326)+'"'
Append WCLOB,',"$type":"application/x-date"'
Append WCLOB,"}"
Append WCLOB,',"C_FIL":{'
Append WCLOB,'"$type":"application/x-array"'
Append WCLOB,',"$minItems":0'
Append WCLOB,',"$maxItems":5'
Append WCLOB,',"$item":{'
Append WCLOB,'"$type":"application/json"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"ABB":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,903)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"FIL":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1176)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":12'
Append WCLOB,"}"
Append WCLOB,',"FLD":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1261)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"FLDTYP":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,2483)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":8'
Append WCLOB,"}"
Append WCLOB,',"FLDTYPCPL":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,22255)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"CRIDIE":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,29327)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":3'
Append WCLOB,"}"
Append WCLOB,',"CRIDES":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,2487)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":30'
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,',"$links":{'
Append WCLOB,'"$search$details":{'
Append WCLOB,'"$title":"Detail"'
Append WCLOB,',"$default":true'
Append WCLOB,',"$url":"{$baseUrl}/SPRICCONF('+"'"+'{$key}'+"'"+')?representation=SPRICCONF.$details"'
Append WCLOB,',"$devices":"desktop"'
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
End ERROR
#---------------------------------------------------------------------------------------------------#
# GET_RES_STRING
#---------------------------------------------------------------------------------------------------#
Funprog GET_RES_STRING(_LAN,_ID)
Value Char _LAN
Value Integer _ID
Gosub  _GET_RES_STRING From WMSRHSPRICCONFB
End RES

#---------------------------------------------------------------------------------------------------#
# GET_RES_MENU
#---------------------------------------------------------------------------------------------------#
Funprog GET_RES_MENU(_LAN,_ID)
Value Char _LAN
Value Char _ID
Gosub  _GET_RES_MENU From WMSRHSPRICCONFB
End RES


