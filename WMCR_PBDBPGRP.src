#<AdxTL>@(#)0.0.0.0 $Revision$Class Economic reason/BP groups
# Supervisor
## CRUD-CLASSE ## PBDBPGRP
# 2018-08-27 12:37:15 471


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File PBDBPGRP [PBDBPG_]

If !SILENCE : Call TRACE("2 --> Local Instance C_PBDBPGRP") From ASYRCOM : Endif
Local Instance PBDBPGRP Using C_PBDBPGRP

If !SILENCE : Call TRACE("3 --> New Instance C_PBDBPGRP") From ASYRCOM : Endif
PBDBPGRP = NewInstance C_PBDBPGRP AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [PBDBPG_]PBDBPG0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of PBDBPGRP") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRP.AREAD([PBDBPG_]COD,[PBDBPG_]LEG))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("PBDBPGRP.COD ="-num$(PBDBPGRP.COD)) From ASYRCOM
 Call TRACE("PBDBPGRP.LEG ="-num$(PBDBPGRP.LEG)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(PBDBPGRP.AKEYS)
  Call TRACE("-"-num$(I)-":"-PBDBPGRP.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [PBDBPG_]
FreeGroup PBDBPGRP
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(PBDBPGRP,ACLE,ASTATUS,_ETAG)
Variable Instance PBDBPGRP Using C_PBDBPGRP
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _COD(10)
Local Char _LEG(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File PBDBPGRP [PBDBPG]
Default File [F:PBDBPG]
Read [F:PBDBPG]PBDBPG0 = [L]_COD;[L]_LEG
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:PBDBPG]UPDTICK)>0
 [L]_ETAG = num$([F:PBDBPG]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(PBDBPGRP,ACLE,ASTATUS)
Variable Instance PBDBPGRP Using C_PBDBPGRP
Value Char ACLE
Variable Integer ASTATUS
Local Char _COD(10)
Local Char _LEG(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRP.AREAD([L]_COD,[L]_LEG))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(PBDBPGRP,_COD,_LEG,ASTATUS)
Variable Instance PBDBPGRP Using C_PBDBPGRP
Value Char _COD
Value Char _LEG
Variable Integer ASTATUS

If PBDBPGRP = null : End : Endif

Gosub AVARIABLES From WMC00PBDBPGRP
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If PBDBPGRP.APARENT=null
 [L]A_I = PBDBPGRP.freeSnapshot
 PBDBPGRP.snapshotEnabled = 0
 PBDBPGRP.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & PBDBPGRP.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRP._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If PBDBPGRP.APARENT=null
 PBDBPGRP.snapshotEnabled = 1
 PBDBPGRP.setAccessorEnabled = 1
Endif
LogicClose File [PBDBPG] ,[PBDBPD]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRP._ACTION_PARAM("AREAD_BEFORE",[L]_COD,[L]_LEG))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:PBDBPG]
Read [F:PBDBPG]PBDBPG0 = [L]_COD;[L]_LEG
If fstat
[L]A_ERROR = [L]_COD+"~"+[L]_LEG
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PBDBPGRP,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:PBDBPG]AUUID)>0 & [F:PBDBPG]AUUID=NullUuid
 [F:PBDBPG]AUUID = getUuid
Endif
SetInstance PBDBPGRP With [F:PBDBPG]
PBDBPGRP.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:PBDBPD]
 [L]A_N2=0
 For [F:PBDBPD]PBDBPD0 Where COD=[F:PBDBPG]COD & LEG=[F:PBDBPG]LEG
  [L]A_N2 +=1
  PBDBPGRP.PBDBPGRPD(A_N2) = NewInstance  C_PBDBPGRPD(PBDBPGRP.ACTX,NullUuid,[L]A_N2,PBDBPGRP,"PBDBPGRPD") AllocGroup PBDBPGRP
  [L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRP.PBDBPGRPD(A_N2).ADDINSTANCE_BOUND)
  Callmet PBDBPGRP.PBDBPGRPD(A_N2).AREAD([F:PBDBPD]COD,[F:PBDBPD]LEG,[F:PBDBPD]BPR)
  PBDBPGRP.PBDBPGRPD(A_N2).ASTALIN = [V]CST_ALL
  [L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRP.PBDBPGRPD(A_N2).ASETATTRIBUTE("COD","$namProParent","COD"))
  [L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRP.PBDBPGRPD(A_N2).ASETATTRIBUTE("LEG","$namProParent","LEG"))
  [L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRP.PBDBPGRPD(A_N2).ASETATTRIBUTE("BPR","$isDisabled","true"))
 Next PBDBPD
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
#-----------------------------------------------------#

[L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRP.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



