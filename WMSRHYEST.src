#<AdxTL>@(#)0.0.0.0 $Revision$Class ## ?IDENTQRY? SEARCH ##
# Supervisor
#WMSRHYEST YEST
# 2018-10-09 09:45:25 830

Funprog IS_IMPLEMENTED()
End 1
#---------------------------------------------------------------------------------------------------#
# List of tables to open
#---------------------------------------------------------------------------------------------------#
$ASEARCH_OPEN
If filinfo(filpath("FIL","YESTA","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File YESTA [YEST]
If filinfo(filpath("FIL","YSTAGE","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File YSTAGE [YSTG]
If filinfo(filpath("FIL","YLNDPUR","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File YLNDPUR [YLDP]
If filinfo(filpath("FIL","YPRECINT","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File YPRECINT [YPRC]
If filinfo(filpath("FIL","YRELMAST","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File YRELMAST [YRMA]
Local File YESTA [YEST_]
Local Char KEY_YEST(120)(1..3)
Local Char KEY_YSTG(120)(1..3)
Local Char KEY_YLDP(120)(1..3)
Local Char KEY_YPRC(120)(1..3)
Local Char KEY_YRMA(120)(1..3)
#Empty keys :
KEY_YEST(3) = "0"
KEY_YSTG(3) = "0"
KEY_YLDP(3) = "0"
KEY_YPRC(3) = "0"
KEY_YRMA(3) = ""
ACTION = "ASEARCH_OPEN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to close
#---------------------------------------------------------------------------------------------------#
$ASEARCH_CLOSE
LogicClose File [YEST]
LogicClose File [YSTG]
LogicClose File [YLDP]
LogicClose File [YPRC]
LogicClose File [YRMA]
LogicClose File [YEST_]
ACTION = "ASEARCH_CLOSE_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to join
#---------------------------------------------------------------------------------------------------#
$ASEARCH_JOIN
Link [YEST] With
& [YSTG]YSTG2=[F:YEST]YESTID,
& [YLDP]YLDP2=[F:YEST]YESTID,
& [YPRC]YPRC0=[F:YEST]YESTID,
& [YRMA]YRMA0=[F:YEST]YGUID
& As [LNK_]
& Where (1=1
& )
ACTION = "ASEARCH_JOIN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to join
#---------------------------------------------------------------------------------------------------#
$ASEARCH_JOIN_INC
Link [YEST] With
& [YSTG]YSTG2=[F:YEST]YESTID,
& [YLDP]YLDP2=[F:YEST]YESTID,
& [YPRC]YPRC0=[F:YEST]YESTID,
& [YRMA]YRMA0=[F:YEST]YGUID
& As [LNK_]
& Where (UPDDATTIM > gdatetime$(QUPDDATTIM)
& )
ACTION = "ASEARCH_JOIN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# Create an instance of
#---------------------------------------------------------------------------------------------------#
$ASEARCH_CREATEINSTANCE
Local Integer ASTATUS
Local Integer FINS
Return

#---------------------------------------------------------------------------------------------------#
# Set an instance
#---------------------------------------------------------------------------------------------------#
$ASEARCH_SETINSTANCE
KEY_YEST(2) = num$([F:YEST]YESTID)
KEY_YSTG(2) = num$([F:YSTG]YESTID)
KEY_YLDP(2) = num$([F:YLDP]YESTID)
KEY_YPRC(2) = num$([F:YPRC]YESTID)
KEY_YRMA(2) = [F:YRMA]YGUID

If (KEY_YEST(2) <> KEY_YEST(3)) & (KEY_YEST(1) <> KEY_YEST(2))
 If INS <> null
  [L]ASTATUS = fmet INS.ACTION("ASEARCH_TRANS_AFTER")
  #serialize INS
  Gosub ASEARCH_TO_JSON
 Endif
#Create a new instance
INS = NewInstance C_YEST(GACTX,UIDINS,NUMLIN,null,"") AllocGroup null
INS.setaccessorEnabled = 0
SetInstance INS With [F:YEST]
FINS = 1
 KEY_YEST(1) = KEY_YEST(2)
Endif : # KEY_YEST(1) <> KEY_YEST(2)

Return

#---------------------------------------------------------------------------------------------------#
# Serialize the entity in a JSON format
#---------------------------------------------------------------------------------------------------#
$ASEARCH_TO_JSON
If FINS=0 : Return : Endif
QCOUNT += 1
Onerrgo ERROR_VALUE
Append ASND.DATA ,SEPINS1
SEPINS1 = ','+chr$(10)
Append ASND.DATA ,'{'
Append ASND.DATA ,'"YESTID":'           + num$(INS.YESTID)
Append ASND.DATA ,',"YGENMAN":'        +'"'+escJson(INS.YGENMAN)+'"'
Append ASND.DATA ,',"YSALMAN":'        +'"'+escJson(INS.YSALMAN)+'"'
Append ASND.DATA ,',"YPJTMAN":'        +'"'+escJson(INS.YPJTMAN)+'"'
Append ASND.DATA ,',"YPJTFCY":'        +'"'+escJson(INS.YPJTFCY)+'"'
Append ASND.DATA ,',"YDEVFCY":'        +'"'+escJson(INS.YDEVFCY)+'"'
Append ASND.DATA ,',"CREUSR":'         +'"'+escJson(INS.CREUSR)+'"'
Append ASND.DATA ,',"UPDUSR":'         +'"'+escJson(INS.UPDUSR)+'"'
Append ASND.DATA ,'}'
Onerrgo
Freegroup INS
INS = null
Raz KEY_YEST(1),KEY_YSTG(1),KEY_YLDP(1),KEY_YPRC(1),KEY_YRMA(1)
FINS = 0
Return

#---------------------------------------------------------------------------------------------------#
# Errors
#---------------------------------------------------------------------------------------------------#
$ERROR_VALUE
SVALUE ='"<error'-errmes$(errn)+'>"'
Resume
#---------------------------------------------------------------------------------------------------#
# Link standard key
#---------------------------------------------------------------------------------------------------#
$AQUERY_PRIMARYKEYS
Local Char ASTDKEY(250)
ASTDKEY = ""
ASTDKEY += "[F:YEST]YESTID"
ACTION = "ASEARCH_PRIMARYKEYS_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# Actions
#---------------------------------------------------------------------------------------------------#
$ASEARCH_ACTION
Local Char CURPRO(250),CURPTH(250),AMETHOD(50),AEVENT(50)
[L]AEVENT = [L]ACTION
Gosub METHODS From YEST_CSPE
Return

#---------------------------------------------------------------------------------------------------#
# APPEND_PROTOTYPE
#---------------------------------------------------------------------------------------------------#
Funprog APPEND_PROTOTYPE(ACTX,WCLOB,PSYR)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Variable Clbfile   WCLOB
Variable Instance  PSYR     Using C_ASYR
Local Integer ERROR : ERROR = 0
Local Integer IND   : IND = 0
Local Char TRTNAME(80)
Local Char REPRESENTATION(80)
Local File ASHW    [ASW]
Filter [ASW] Where CODCLA="YEST" & DEFREP=2
Read [ASW]ASW0 First
If !fstat
 If  [ASW]ENAFAC(0) = 2
  REPRESENTATION = [ASW]CODREP
 Else
  WCLOB ="{}"
  End ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(62,149,1),"YEST")) 
 Endif
Endif
Close Local File [ASW]
If len(REPRESENTATION)=0
 WCLOB ="{}"
 End ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(62,149,1),"YEST")) 
Endif
Append WCLOB,'{'
Append WCLOB,'"$baseUrl":"'+PSYR.PREFIX+'"'
Append WCLOB,',"$baseType":"'+PSYR.CNTPRE+"."+nomap+'"'
Append WCLOB,',"$classTitle":"'+func GET_RES_STRING(ACTX.LAN,100372)+'"'
Append WCLOB,',"$url":"{$baseUrl}/YEST'+PSYR.URLREP+''+REPRESENTATION+'.$search"'
Append WCLOB,',"$prototype":"{$baseUrl}/$prototypes('+"'"+'{$representation}.$thumb'+"'"+')"'
Append WCLOB,',"$type":"{$baseType}.'+REPRESENTATION+'.$search"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"$resources":{'
Append WCLOB,'"$type":"application/x-array"'
Append WCLOB,',"$item":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,100372)+' {$key}"'
Append WCLOB,',"$key":"{YESTID}"'
Append WCLOB,',"$url":"{$baseUrl}/YEST('+"'"+'{$key}'+"'"+')'+PSYR.URLREP+'YEST.searchItem"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"YESTID":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,100395)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-integer"'
Append WCLOB,',"$maxLength":3'
Append WCLOB,"}"
Append WCLOB,',"YGENMAN":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,100385)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"YSALMAN":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,100386)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"YPJTMAN":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,100387)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"YPJTFCY":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,29370)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"YDEVFCY":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,100160)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"CREUSR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,250)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"UPDUSR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,250)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,',"$links":{'
Append WCLOB,"}"
Append WCLOB,"}"
End ERROR
#---------------------------------------------------------------------------------------------------#
# GET_RES_STRING
#---------------------------------------------------------------------------------------------------#
Funprog GET_RES_STRING(_LAN,_ID)
Value Char _LAN
Value Integer _ID
Gosub  _GET_RES_STRING From WMSRHYESTB
End RES

#---------------------------------------------------------------------------------------------------#
# GET_RES_MENU
#---------------------------------------------------------------------------------------------------#
Funprog GET_RES_MENU(_LAN,_ID)
Value Char _LAN
Value Char _ID
Gosub  _GET_RES_MENU From WMSRHYESTB
End RES


