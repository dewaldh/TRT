#<AdxTL>@(#)0.0.0.0 $Revision$Class Activity code
# Supervisor
## CRUD-CLASSE ## ACTIV
# 2018-08-27 13:00:53 479


############################################################################################
### Subprog AUPDATE
############################################################################################
Subprog AUPDATE(ACTIV,ASTATUS)
Variable Instance ACTIV Using R_ACTIV
Variable Integer ASTATUS

If ACTIV = null : End : Endif

Gosub AVARIABLES From WMR00ACTIV
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If fmet ACTIV.ACTX.AGETAFCRIGHT(ACTIV,"GESACV",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AUPDATE_END : Endif
If fmet ACTIV.ACTX.AGETAFCRIGHTU(ACTIV,"GESACV",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AUPDATE_END
Endif

Gosub AREPCONTROL_AUPDATE
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If !adxlog
 Gosub AUPDATE_TR_ACTIV
Else
 Gosub AUPDATE_ACTIV
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_END : Return : Endif

Gosub _AUPDATE_AFTER
[L]A_I = ACTIV.freeSnapshot
ACTIV.snapshotEnabled = 1
$AUPDATE_END
End

#-----------------------------------------------------#
$AREPCONTROL_AUPDATE
ACTIV.ASTALIN = [V]CST_AUPD
ACTIV.ACV.ASTALIN = [V]CST_AUPD
[L]A_ASTALIN = ACTIV.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AUPDATE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = ACTIV.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AUPDATE_CONTROL
Gosub _AUPDATE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet ACTIV._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet ACTIV._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet ACTIV._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AUPDATE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_BEFORE
If ACTIV.ACV.ASTALIN = [V]CST_ANEWDEL : Return : Endif
ACTIV.ACV.ASTALIN = [V]CST_AUPD
If [V]CST_ASTALIN(ACTIV.ACV.ASTALIN)<>""
 [L]A_ASTALIN = ACTIV.ACV.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ACV.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
A_N2=1
If ACTIV.ACV.ADA(A_N2) <> null
& and ACTIV.ACV.ADA(A_N2).ASTALIN<>[V]CST_ANEWDEL
 If ACTIV.ACV.ADA(A_N2).ASTALIN<>[V]CST_ANEW & ACTIV.ACV.ASTALIN=[V]CST_ADEL
  ACTIV.ACV.ADA(A_N2).ASTALIN = [V]CST_ADEL
 Endif
 If ACTIV.ACV.ADA(A_N2).ASTALIN=[V]CST_ANEW & find(ACTIV.ACV.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL)>0
  ACTIV.ACV.ADA(A_N2).ASTALIN = [V]CST_ANEWDEL
 Endif
 If [V]CST_ASTALIN(ACTIV.ACV.ADA(A_N2).ASTALIN)<>""
  Case [V]CST_ASTALIN(ACTIV.ACV.ADA(A_N2).ASTALIN)
   When [V]CST_APRGAINSERT  : [L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ACV.ADA(A_N2)._AINSERT_CONTROL_BEFORE)
   When [V]CST_APRGAUPDATE : [L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ACV.ADA(A_N2)._AUPDATE_CONTROL_BEFORE)
   When [V]CST_APRGADELETE  : [L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ACV.ADA(A_N2)._ADELETE_CONTROL_BEFORE)
  Endcase
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
A_N2=1
If ACTIV.ACV.ADA(A_N2).ASTALIN<>[V]CST_ADEL & ACTIV.ACV.ADA(A_N2).ASTALIN<>[V]CST_ANEWDEL
 [L]A_OK1 = 1
Endif
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ACTIV.ACV,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"ADOSACT:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_AFTER
A_N2=1
If ACTIV.ACV.ADA(A_N2) <> null
& and ACTIV.ACV.ADA(A_N2).ASTALIN<>[V]CST_ANEWDEL
 If [V]CST_ASTALIN(ACTIV.ACV.ADA(A_N2).ASTALIN)<>""
  Case [V]CST_ASTALIN(ACTIV.ACV.ADA(A_N2).ASTALIN)
   When [V]CST_APRGAINSERT  : [L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ACV.ADA(A_N2)._AINSERT_CONTROL_AFTER)
   When [V]CST_APRGAUPDATE : [L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ACV.ADA(A_N2)._AUPDATE_CONTROL_AFTER)
   When [V]CST_APRGADELETE  : [L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ACV.ADA(A_N2)._ADELETE_CONTROL_AFTER)
  Endcase
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
A_N2=1
If ACTIV.ACV.ADA(A_N2).ASTALIN<>[V]CST_ADEL & ACTIV.ACV.ADA(A_N2).ASTALIN<>[V]CST_ANEWDEL
 [L]A_OK1 = 1
Endif
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ACTIV.ACV,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"ADOSACT:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

If [V]CST_ASTALIN(ACTIV.ACV.ASTALIN)<>""
 [L]A_ASTALIN = ACTIV.ACV.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ACV.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
Return

#-----------------------------------------------------#
$AUPDATE_TR_ACTIV
Trbegin [F:ACV]
 Gosub AUPDATE_ACTIV
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AUPDATE_AFTER
If find(ACTIV.ACV.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 ACTIV.ACV.ASTALIN = [V]CST_ALL
Endif
Local Integer ASTATUS2
A_N2=1
If ACTIV.ACV.ADA(A_N2) <> null
 [L]ASTATUS2 = fmet ACTIV.ACV.ADA(A_N2)._AUPDATE_AFTER
 If ACTIV.ACV.ADA(A_N2).ASTALIN=[V]CST_ADEL or ACTIV.ACV.ADA(A_N2).ASTALIN=[V]CST_ANEWDEL
  FreeInstance ACTIV.ACV.ADA(A_N2)
  ACTIV.ACV.ADA(A_N2) = null
 Endif
 [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
Endif
Return

#-----------------------------------------------------#
$AUPDATE_ACTIV
[L]A_ASTALIN = ACTIV.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ACV._AUPDATE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = ACTIV.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AUPDATE_ABORT
Rollback
$_AUPDATE_ABORT
If ACTIV.snapshotEnabled=1
 [L]A_RETIK = ACTIV.revertUpdTick
Endif
Local Integer ASTATUS2
A_N2=1
If ACTIV.ACV.ADA(A_N2) <> null
 [L]ASTATUS2 = fmet ACTIV.ACV.ADA(A_N2)._AUPDATE_ABORT
 If ACTIV.ACV.ADA(A_N2).ASTALIN=[V]CST_ADEL or ACTIV.ACV.ADA(A_N2).ASTALIN=[V]CST_ANEWDEL
  FreeInstance ACTIV.ACV.ADA(A_N2)
  ACTIV.ACV.ADA(A_N2) = null
 Endif
 [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
Endif

[L]ASTATUS = max(fmet ACTIV.ACTION("AUPDATE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



