#<AdxTL>@(#)0.0.0.0 $Revision$Class Transport incident
# Supervisor
## CRUD-CLASSE ## EVENTTRNP
# 2018-08-27 12:31:03 199


############################################################################################
### Subprog _ADELETE
############################################################################################
Subprog _ADELETE(EVENTTRNP,ASTATUS)
Variable Instance EVENTTRNP Using C_EVENTTRNP
Variable Integer ASTATUS

If EVENTTRNP = null : End : Endif

Gosub _AVARIABLES From WMC00EVENTTRNP

[L]A_STRSITE = ""
[L]A_STRACC = ""
Local Instance ALNKDELTAB Using C_ALNKDELTAB
Gosub ADELETE_EVENTTRNP

End

############################################################################################
### Subprog ADELETE
############################################################################################
Subprog ADELETE(EVENTTRNP,ASTATUS)
Variable Instance EVENTTRNP Using C_EVENTTRNP
Variable Integer ASTATUS

If EVENTTRNP = null : End : Endif

Gosub AVARIABLES From WMC00EVENTTRNP
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

Local Instance ALNKDELTAB Using C_ALNKDELTAB

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub ADELETE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

If !adxlog
 Gosub ADELETE_TR_EVENTTRNP
Else
 Gosub ADELETE_EVENTTRNP
Endif

$ADELETE_END
End


$ADELETE_CONTROL
Gosub _ADELETE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Verification delete
[L]ASTATUS = max([L]ASTATUS,func ASYRSUB.VERIFY_INSTANCE(EVENTTRNP,ALNKDELTAB))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _ADELETE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_BEFORE
If EVENTTRNP.ASTALIN = [V]CST_ANEWDEL : Return : Endif
EVENTTRNP.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet EVENTTRNP.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet EVENTTRNP.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_TR_EVENTTRNP
Trbegin [F:EVT]
 Gosub ADELETE_EVENTTRNP
 If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$ADELETE_EVENTTRNP
[L]ASTATUS = max([L]ASTATUS,fmet EVENTTRNP.ACTION("ADELETE_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = func ASYRSUB.DELETE_LINKS(EVENTTRNP,ALNKDELTAB)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00EVENTTRNP._MAJSQL_EVENTTRNP(EVENTTRNP))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet EVENTTRNP.ACTION("ADELETE_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_ABORT
Rollback
$_ADELETE_ABORT
If EVENTTRNP.snapshotEnabled=1
 [L]A_RETIK = EVENTTRNP.revertUpdTick
Endif
[L]ASTATUS = max(fmet EVENTTRNP.ACTION("ADELETE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#

#-----------------------------------------------------#
$_ADELETE_AFTER
Return



