#<AdxTL>@(#)0.0.0.0 $Revision$Class Location
# Supervisor
## CRUD-CLASSE ## PHYLCTM
# 2018-08-27 13:22:53 488


############################################################################################
### Subprog ADELETE
############################################################################################
Subprog ADELETE(PHYLCTM,ASTATUS)
Variable Instance PHYLCTM Using R_PHYLCTM
Variable Integer ASTATUS

If PHYLCTM = null : End : Endif

Gosub AVARIABLES From WMR00PHYLCTM
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

Local Instance ALNKDELTAB Using C_ALNKDELTAB

Gosub AREPCONTROL_ADELETE
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

If !adxlog
 Gosub ADELETE_TR_PHYLCTM
Else
 Gosub ADELETE_PHYLCTM
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_END : Return : Endif

$ADELETE_END
End

#-----------------------------------------------------#
$AREPCONTROL_ADELETE
PHYLCTM.ASTALIN = [V]CST_ADEL
PHYLCTM.LCT.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub ADELETE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$ADELETE_CONTROL
Gosub _ADELETE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Verification delete
[L]ASTATUS = max([L]ASTATUS,func ASYRSUB.VERIFY_INSTANCE(PHYLCTM.LCT,ALNKDELTAB))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _ADELETE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_BEFORE
If PHYLCTM.LCT.ASTALIN = [V]CST_ANEWDEL : Return : Endif
PHYLCTM.LCT.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.LCT.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.LCT.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_TR_PHYLCTM
Trbegin [F:LCT]
 Gosub ADELETE_PHYLCTM
 If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_ADELETE_AFTER
Return

#-----------------------------------------------------#
$ADELETE_PHYLCTM
[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.ACTION("ADELETE_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.LCT._ADELETE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.ACTION("ADELETE_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_ABORT
Rollback
$_ADELETE_ABORT
If PHYLCTM.snapshotEnabled=1
 [L]A_RETIK = PHYLCTM.revertUpdTick
Endif
[L]ASTATUS = max(fmet PHYLCTM.ACTION("ADELETE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



