#<AdxTL>@(#)0.0.0.0 $Revision$Class Company dimension types
# Supervisor
## CRUD-CLASSE ## CPYDIE
# 2018-08-27 12:30:34 169


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File COMPANY [CPY_]

If !SILENCE : Call TRACE("2 --> Local Instance C_CPYDIE") From ASYRCOM : Endif
Local Instance CPYDIE Using C_CPYDIE

If !SILENCE : Call TRACE("3 --> New Instance C_CPYDIE") From ASYRCOM : Endif
CPYDIE = NewInstance C_CPYDIE AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [CPY_]CPY0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of CPYDIE") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet CPYDIE.AREAD([CPY_]CPY))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("CPYDIE.CPY ="-num$(CPYDIE.CPY)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(CPYDIE.AKEYS)
  Call TRACE("-"-num$(I)-":"-CPYDIE.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [CPY_]
FreeGroup CPYDIE
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(CPYDIE,ACLE,ASTATUS,_ETAG)
Variable Instance CPYDIE Using C_CPYDIE
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CPY(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CPY = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File COMPANY [CPY]
Default File [F:CPY]
Read [F:CPY]CPY0 = [L]_CPY
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:CPY]UPDTICK)>0
 [L]_ETAG = num$([F:CPY]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(CPYDIE,ACLE,ASTATUS)
Variable Instance CPYDIE Using C_CPYDIE
Value Char ACLE
Variable Integer ASTATUS
Local Char _CPY(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CPY = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet CPYDIE.AREAD([L]_CPY))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(CPYDIE,_CPY,ASTATUS)
Variable Instance CPYDIE Using C_CPYDIE
Value Char _CPY
Variable Integer ASTATUS

If CPYDIE = null : End : Endif

Gosub AVARIABLES From WMC00CPYDIE
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If CPYDIE.APARENT=null
 [L]A_I = CPYDIE.freeSnapshot
 CPYDIE.snapshotEnabled = 0
 CPYDIE.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif


$AREAD_END
LogicClose File [CPY]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet CPYDIE._ACTION_PARAM("AREAD_BEFORE",[L]_CPY))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:CPY]
Read [F:CPY]CPY0 = [L]_CPY
If fstat
[L]A_ERROR = [L]_CPY
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(CPYDIE,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:CPY]AUUID)>0 & [F:CPY]AUUID=NullUuid
 [F:CPY]AUUID = getUuid
Endif
SetInstance CPYDIE With [F:CPY]
CPYDIE.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet CPYDIE.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



