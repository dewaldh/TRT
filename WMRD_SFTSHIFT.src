#<AdxTL>@(#)0.0.0.0 $Revision$Class Shift code
# Supervisor
## CRUD-CLASSE ## SFTSHIFT
# 2018-08-27 13:28:35 760


############################################################################################
### Subprog ADELETE
############################################################################################
Subprog ADELETE(SFTSHIFT,ASTATUS)
Variable Instance SFTSHIFT Using R_SFTSHIFT
Variable Integer ASTATUS

If SFTSHIFT = null : End : Endif

Gosub AVARIABLES From WMR00SFTSHIFT
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

Local Instance ALNKDELTAB Using C_ALNKDELTAB

If fmet SFTSHIFT.ACTX.AGETAFCRIGHT(SFTSHIFT,"GESSHFT",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto ADELETE_END : Endif
If fmet SFTSHIFT.ACTX.AGETAFCRIGHTD(SFTSHIFT,"GESSHFT",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto ADELETE_END
Endif

Gosub AREPCONTROL_ADELETE
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

If !adxlog
 Gosub ADELETE_TR_SFTSHIFT
Else
 Gosub ADELETE_SFTSHIFT
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_END : Return : Endif

$ADELETE_END
End

#-----------------------------------------------------#
$AREPCONTROL_ADELETE
SFTSHIFT.ASTALIN = [V]CST_ADEL
SFTSHIFT.SFTS.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub ADELETE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$ADELETE_CONTROL
Gosub _ADELETE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Verification delete
[L]ASTATUS = max([L]ASTATUS,func ASYRSUB.VERIFY_INSTANCE(SFTSHIFT.SFTS,ALNKDELTAB))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _ADELETE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_BEFORE
If SFTSHIFT.SFTS.ASTALIN = [V]CST_ANEWDEL : Return : Endif
SFTSHIFT.SFTS.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.SFTS.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(SFTSHIFT.SFTS.BREAKS)
 If SFTSHIFT.SFTS.BREAKS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.SFTS.BREAKS([L]A_I).ACTION("ADELETE_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_AFTER

For [L]A_I=1 To maxtab(SFTSHIFT.SFTS.BREAKS)
 If SFTSHIFT.SFTS.BREAKS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.SFTS.BREAKS([L]A_I).ACTION("ADELETE_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.SFTS.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_TR_SFTSHIFT
Trbegin [F:SFTS]
 Gosub ADELETE_SFTSHIFT
 If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_ADELETE_AFTER
Return

#-----------------------------------------------------#
$ADELETE_SFTSHIFT
[L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.ACTION("ADELETE_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.SFTS._ADELETE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.ACTION("ADELETE_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_ABORT
Rollback
$_ADELETE_ABORT
If SFTSHIFT.snapshotEnabled=1
 [L]A_RETIK = SFTSHIFT.revertUpdTick
Endif
[L]ASTATUS = max(fmet SFTSHIFT.ACTION("ADELETE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



