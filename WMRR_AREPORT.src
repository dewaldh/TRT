#<AdxTL>@(#)0.0.0.0 $Revision$Class Report
# Supervisor
## CRUD-CLASSE ## AREPORT
# 2018-08-27 13:02:35 426


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File AREPORT [ARP_]

If !SILENCE : Call TRACE("2 --> Local Instance R_AREPORT") From ASYRCOM : Endif
Local Instance AREPORT Using R_AREPORT

If !SILENCE : Call TRACE("3 --> New Instance R_AREPORT") From ASYRCOM : Endif
AREPORT = NewInstance R_AREPORT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ARP_]ARP0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of AREPORT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet AREPORT.AREAD([ARP_]RPTCOD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("AREPORT.ARP.RPTCOD ="-num$(AREPORT.ARP.RPTCOD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(AREPORT.ARP.AKEYS)
  Call TRACE("-"-num$(I)-":"-AREPORT.ARP.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ARP_]
FreeGroup AREPORT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(AREPORT,ACLE,ASTATUS,_ETAG)
Variable Instance AREPORT Using R_AREPORT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _RPTCOD(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_RPTCOD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File AREPORT [ARP]
Default File [F:ARP]
Read [F:ARP]ARP0 = [L]_RPTCOD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ARP]UPDTICK)>0
 [L]_ETAG = num$([F:ARP]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(AREPORT,ACLE,ASTATUS)
Variable Instance AREPORT Using R_AREPORT
Value Char ACLE
Variable Integer ASTATUS
Local Char _RPTCOD(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_RPTCOD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet AREPORT.AREAD([L]_RPTCOD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(AREPORT,_RPTCOD,ASTATUS)
Variable Instance AREPORT Using R_AREPORT
Value Char _RPTCOD
Variable Integer ASTATUS

If AREPORT = null : End : Endif

Gosub AVARIABLES From WMR00AREPORT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If AREPORT.APARENT=null
 [L]A_I = AREPORT.freeSnapshot
 AREPORT.snapshotEnabled = 0
 AREPORT.setAccessorEnabled = 0
Endif

If fmet AREPORT.ACTX.AGETAFCRIGHT(AREPORT,"GESARP",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:ARP]
Read [F:ARP]ARP0 = [L]_RPTCOD
If fstat
[L]A_ERROR = [L]_RPTCOD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(AREPORT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet AREPORT.ACTX.AGETAFCRIGHTR(AREPORT,"GESARP",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet AREPORT.ACTX.ASTACRITROLE(AREPORT,[L]_RPTCOD
& ,"ARP","ARP",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet AREPORT.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

AREPORT.ARP.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet AREPORT.ARP.AREAD([L]_RPTCOD))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AREPORT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & AREPORT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet AREPORT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If AREPORT.APARENT=null
 AREPORT.snapshotEnabled = 1
 AREPORT.setAccessorEnabled = 1
Endif
LogicClose File [ARP] ,[ARD]
End



