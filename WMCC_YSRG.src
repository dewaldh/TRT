#<AdxTL>@(#)0.0.0.0 $Revision$Class Stage title registration
# Supervisor
## CRUD-CLASSE ## YSRG
# 2018-10-11 04:27:48 812


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(YSRG,ASTATUS)
Variable Instance YSRG Using C_YSRG
Variable Integer ASTATUS

If YSRG = null : End : Endif

Gosub _AVARIABLES From WMC00YSRG

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_YSRG

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(YSRG,ASTATUS)
Variable Instance YSRG Using C_YSRG
Variable Integer ASTATUS

If YSRG = null : End : Endif

Gosub AVARIABLES From WMC00YSRG
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_YSRG
Else
 Gosub AINSERT_YSRG
Endif

Gosub _AINSERT_AFTER
[L]A_I = YSRG.freeSnapshot
YSRG.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet YSRG._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet YSRG._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet YSRG._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If YSRG.ASTALIN = [V]CST_ANEWDEL : Return : Endif
YSRG.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet YSRG.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet YSRG.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_YSRG
Trbegin [F:YSRG]
 Gosub AINSERT_YSRG
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_YSRG
Raz [F:YSRG]
[L]ASTATUS = max([L]ASTATUS,fmet YSRG.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00YSRG._MAJSQL_YSTAGREG(YSRG))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet YSRG.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If YSRG.snapshotEnabled=1
 [L]A_RETIK = YSRG.revertUpdTick
Endif
[L]ASTATUS = max(fmet YSRG.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(YSRG.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 YSRG.ASTALIN = [V]CST_ALL
Endif
Return



