#<AdxTL>@(#)0.0.0.0 $Revision$Class Invoicing terms
# Supervisor
## CRUD-CLASSE ## TABINVCND
# 2018-08-27 12:51:39 463

Gosub TEST From WMCR_TABINVCND : End

############################################################################################
## C : Subprog AINSERT(INSTANCE)
## D : Subprog ADELETE(INSTANCE)
## R : Subprog AREAD(INSTANCE,INVCND,LEG)
## U : Subprog AUPDATE(INSTANCE)
############################################################################################
# TABINVCND : TABINVCND
# TABINVCNDLIN : TABINVCND TABINVCNDLIN
############################################################################################

############################################################################################
### AVARIABLES
############################################################################################
$AVARIABLES
[L]ASTATUS =max([L]ASTATUS,fmet TABINVCND._ADELERRORS([V]CST_ALLERRORS))
$_AVARIABLES
Local    Integer     A_LEVEL,A_I,A_NEWCOL,A_N1,A_N2,A_S2
Local    Integer    ASTATUS,A_RETIK,A_TYPMAJ,A_ASTALIN
Local    Char        A_STRSITE(GLONFCY),A_STRACC(GLONACS),CURPRO(50),A_PARENT(50),A_PATH(200),A_ABR(GLONABR),A_ERROR(250)
Local    Uuident    A_UUID

[L]A_LEVEL    = TABINVCND.ACTX.LEVWML
[L]ASTATUS  = 0

Onerrgo ERR_OPENTAB
If find(TABINVCND.ACTX.AFOLDER,nomap,"")>0
 Local File TABINVCND [INVCND]
 Local File TABINVCNDLIN [INVCNDD]
 Local File ATEXTRA [AXX]
Else
 Local File =TABINVCND.ACTX.AFOLDER+".TABINVCND" [INVCND]
 Local File =TABINVCND.ACTX.AFOLDER+".TABINVCNDLIN" [INVCNDD]
 Local File =TABINVCND.ACTX.AFOLDER+".ATEXTRA" [AXX]
Endif
Onerrgo
Return

$ERR_OPENTAB
[L]ASTATUS = max([L]ASTATUS,fmet TABINVCND.ASETERROR("",errp+"("+num$(errl)+")"-mess(6,123,1)-num$(errn)-errmes$(errn)-errm,[V]CST_AERROR))
Resume

############################################################################################
### Link
############################################################################################
$AOPEN_LINK
Gosub AVARIABLES
Link [INVCND] With
& [INVCNDD]INVCNDD0 = [F:INVCND]INVCND;[F:INVCND]LEG
& As [LNK_]
Return

############################################################################################
### TABINVCND(WINVCND)
############################################################################################
Funprog  _MAJSQL_TABINVCND(WINVCND)
Variable Instance WINVCND Using C_TABINVCND
Local Integer ASTATUS,A_I,A_J
Default File [F:INVCND]
If WINVCND.ASTALIN=[V]CST_ANEW
 Call INICRE(WINVCND) From ASYRSUB
 SetInstance [F:INVCND] With WINVCND
 For J=1 To maxtab(WINVCND.AXX)
  If WINVCND.AXX(J)<>null & WINVCND.AXX(J).PRO= "DESAXX" & WINVCND.AXX(J).FLG>0
   Call MAJTEXTRALAN(WINVCND,WINVCND.AXX(J).TEX,"TABINVCND","DESAXX",WINVCND.AXX(J).LAN,WINVCND.INVCND,WINVCND.LEG,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For J=1 To maxtab(WINVCND.AXX)
  If WINVCND.AXX(J)<>null & WINVCND.AXX(J).PRO= "SHOAXX" & WINVCND.AXX(J).FLG>0
   Call MAJTEXTRALAN(WINVCND,WINVCND.AXX(J).TEX,"TABINVCND","SHOAXX",WINVCND.AXX(J).LAN,WINVCND.INVCND,WINVCND.LEG,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 Write [F:INVCND]
 If fstat
  Call FSTA("INVCND",WINVCND,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WINVCND.updTick = [F:INVCND]updTick
Elsif WINVCND.ASTALIN=[V]CST_ALL or WINVCND.ASTALIN=[V]CST_AUPD
 Call INIUPD(WINVCND) From ASYRSUB
 SetInstance [F:INVCND] With WINVCND
 For J=1 To maxtab(WINVCND.AXX)
  If WINVCND.AXX(J)<>null & WINVCND.AXX(J).PRO= "DESAXX" & WINVCND.AXX(J).FLG>0
   Call MAJTEXTRALAN(WINVCND,WINVCND.AXX(J).TEX,"TABINVCND","DESAXX",WINVCND.AXX(J).LAN,WINVCND.INVCND,WINVCND.LEG,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For J=1 To maxtab(WINVCND.AXX)
  If WINVCND.AXX(J)<>null & WINVCND.AXX(J).PRO= "SHOAXX" & WINVCND.AXX(J).FLG>0
   Call MAJTEXTRALAN(WINVCND,WINVCND.AXX(J).TEX,"TABINVCND","SHOAXX",WINVCND.AXX(J).LAN,WINVCND.INVCND,WINVCND.LEG,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WINVCND,"TABINVCND")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:INVCND]INVCND0 = [F:INVCND]INVCND;[F:INVCND]LEG
 If fstat
  Call FSTA("INVCND",WINVCND,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WINVCND.updTick = [F:INVCND]updTick
Elsif WINVCND.ASTALIN=[V]CST_ADEL
 SetInstance [F:INVCND] With WINVCND
 For J=1 To maxtab(WINVCND.AXX)
  If WINVCND.AXX(J)<>null & WINVCND.AXX(J).PRO= "DESAXX"
   Call SUPTEXTRA(WINVCND,WINVCND.AXX(J).TEX,"TABINVCND","DESAXX",WINVCND.AXX(J).LAN,WINVCND.INVCND,WINVCND.LEG,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For J=1 To maxtab(WINVCND.AXX)
  If WINVCND.AXX(J)<>null & WINVCND.AXX(J).PRO= "SHOAXX"
   Call SUPTEXTRA(WINVCND,WINVCND.AXX(J).TEX,"TABINVCND","SHOAXX",WINVCND.AXX(J).LAN,WINVCND.INVCND,WINVCND.LEG,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WINVCND,"TABINVCND")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:INVCND]INVCND0 = [F:INVCND]INVCND;[F:INVCND]LEG
 If fstat
  Call FSTA("INVCND",WINVCND,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### TABINVCNDLIN(WINVCNDD)
############################################################################################
Funprog  _MAJSQL_TABINVCNDLIN(WINVCNDD)
Variable Instance WINVCNDD Using C_TABINVCNDLIN
Local Integer ASTATUS,A_I,A_J
Default File [F:INVCNDD]
If WINVCNDD.ASTALIN=[V]CST_ANEW
 Call INICRE(WINVCNDD) From ASYRSUB
 SetInstance [F:INVCNDD] With WINVCNDD
 Write [F:INVCNDD]
 If fstat
  Call FSTA("INVCNDD",WINVCNDD,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WINVCNDD.updTick = [F:INVCNDD]updTick
Elsif WINVCNDD.ASTALIN=[V]CST_ALL or WINVCNDD.ASTALIN=[V]CST_AUPD
 Call INIUPD(WINVCNDD) From ASYRSUB
 SetInstance [F:INVCNDD] With WINVCNDD
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WINVCNDD,"TABINVCNDLIN")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:INVCNDD]INVCNDD0 = [F:INVCNDD]INVCND;[F:INVCNDD]LEG;[F:INVCNDD]INVCNDLIN
 If fstat
  Call FSTA("INVCNDD",WINVCNDD,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WINVCNDD.updTick = [F:INVCNDD]updTick
Elsif WINVCNDD.ASTALIN=[V]CST_ADEL
 SetInstance [F:INVCNDD] With WINVCNDD
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WINVCNDD,"TABINVCNDLIN")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:INVCNDD]INVCNDD0 = [F:INVCNDD]INVCND;[F:INVCNDD]LEG;[F:INVCNDD]INVCNDLIN
 If fstat
  Call FSTA("INVCNDD",WINVCNDD,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK



