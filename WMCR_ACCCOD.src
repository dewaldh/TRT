#<AdxTL>@(#)0.0.0.0 $Revision$Class Access codes
# Supervisor
## CRUD-CLASSE ## ACCCOD
# 2018-08-27 12:18:56 311


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ACCCOD [ACS_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ACCCOD") From ASYRCOM : Endif
Local Instance ACCCOD Using C_ACCCOD

If !SILENCE : Call TRACE("3 --> New Instance C_ACCCOD") From ASYRCOM : Endif
ACCCOD = NewInstance C_ACCCOD AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ACS_]ACS0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ACCCOD") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ACCCOD.AREAD([ACS_]CODACC))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ACCCOD.CODACC ="-num$(ACCCOD.CODACC)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ACCCOD.AKEYS)
  Call TRACE("-"-num$(I)-":"-ACCCOD.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ACS_]
FreeGroup ACCCOD
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ACCCOD,ACLE,ASTATUS,_ETAG)
Variable Instance ACCCOD Using C_ACCCOD
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CODACC(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODACC = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File ACCCOD [ACS]
Default File [F:ACS]
Read [F:ACS]ACS0 = [L]_CODACC
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ACS]UPDTICK)>0
 [L]_ETAG = num$([F:ACS]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ACCCOD,ACLE,ASTATUS)
Variable Instance ACCCOD Using C_ACCCOD
Value Char ACLE
Variable Integer ASTATUS
Local Char _CODACC(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODACC = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ACCCOD.AREAD([L]_CODACC))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ACCCOD,_CODACC,ASTATUS)
Variable Instance ACCCOD Using C_ACCCOD
Value Char _CODACC
Variable Integer ASTATUS

If ACCCOD = null : End : Endif

Gosub AVARIABLES From WMC00ACCCOD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ACCCOD.APARENT=null
 [L]A_I = ACCCOD.freeSnapshot
 ACCCOD.snapshotEnabled = 0
 ACCCOD.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ACCCOD.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ACCCOD._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ACCCOD.APARENT=null
 ACCCOD.snapshotEnabled = 1
 ACCCOD.setAccessorEnabled = 1
Endif
LogicClose File [ACS]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet ACCCOD._ACTION_PARAM("AREAD_BEFORE",[L]_CODACC))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:ACS]
Read [F:ACS]ACS0 = [L]_CODACC
If fstat
[L]A_ERROR = [L]_CODACC
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ACCCOD,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:ACS]AUUID)>0 & [F:ACS]AUUID=NullUuid
 [F:ACS]AUUID = getUuid
Endif
SetInstance ACCCOD With [F:ACS]
ACCCOD.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet ACCCOD.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="ACCCOD" & ZONE="DESACC" & IDENT1=ACCCOD.CODACC & IDENT2=""
 Call ASETTEXTRA(ACCCOD.AXX,ACCCOD.AllocGrp(),"DESACC",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 ACCCOD.AXX(maxtab(ACCCOD.AXX)).FLG = 0
Next AXX
If !len(fmet ACCCOD.AGETTEXTRA("DESACC"))
 Call ASETTEXTRA(ACCCOD.AXX,ACCCOD.AllocGrp(),"DESACC",
& fmet ACCCOD.AGETTEXTRALAN("DESACC",ACCCOD.ACTX.AFOLD.ALANGDEF),
& ACCCOD.ACTX.LAN) From ASYRSUB
Endif

Return



