#<AdxTL>@(#)0.0.0.0 $Revision$Class Patch integration monitoring
# Supervisor
## CRUD-CLASSE ## APATCHTMP
# 2018-08-27 13:02:17 596


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File APATCHTMP [APATMP_]

If !SILENCE : Call TRACE("2 --> Local Instance R_APATCHTMP") From ASYRCOM : Endif
Local Instance APATCHTMP Using R_APATCHTMP

If !SILENCE : Call TRACE("3 --> New Instance R_APATCHTMP") From ASYRCOM : Endif
APATCHTMP = NewInstance R_APATCHTMP AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [APATMP_]APATMP0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of APATCHTMP") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet APATCHTMP.AREAD([APATMP_]NUMREQ,[APATMP_]FICNAM,[APATMP_]FOLD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("APATCHTMP.APATMP.NUMREQ ="-num$(APATCHTMP.APATMP.NUMREQ)) From ASYRCOM
 Call TRACE("APATCHTMP.APATMP.FICNAM ="-num$(APATCHTMP.APATMP.FICNAM)) From ASYRCOM
 Call TRACE("APATCHTMP.APATMP.FOLD ="-num$(APATCHTMP.APATMP.FOLD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(APATCHTMP.APATMP.AKEYS)
  Call TRACE("-"-num$(I)-":"-APATCHTMP.APATMP.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [APATMP_]
FreeGroup APATCHTMP
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(APATCHTMP,ACLE,ASTATUS,_ETAG)
Variable Instance APATCHTMP Using R_APATCHTMP
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Integer _NUMREQ
Local Char _FICNAM(50)
Local Char _FOLD(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_NUMREQ = val([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_FICNAM = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_FOLD = num$([L]CLE(3)) : Endif
Raz [L]_ETAG
Local File APATCHTMP [APATMP]
Default File [F:APATMP]
Read [F:APATMP]APATMP0 = [L]_NUMREQ;[L]_FICNAM;[L]_FOLD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:APATMP]UPDTICK)>0
 [L]_ETAG = num$([F:APATMP]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(APATCHTMP,ACLE,ASTATUS)
Variable Instance APATCHTMP Using R_APATCHTMP
Value Char ACLE
Variable Integer ASTATUS
Local Integer _NUMREQ
Local Char _FICNAM(50)
Local Char _FOLD(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_NUMREQ = val([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_FICNAM = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_FOLD = num$([L]CLE(3)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet APATCHTMP.AREAD([L]_NUMREQ,[L]_FICNAM,[L]_FOLD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(APATCHTMP,_NUMREQ,_FICNAM,_FOLD,ASTATUS)
Variable Instance APATCHTMP Using R_APATCHTMP
Value Integer _NUMREQ
Value Char _FICNAM
Value Char _FOLD
Variable Integer ASTATUS

If APATCHTMP = null : End : Endif

Gosub AVARIABLES From WMR00APATCHTMP
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If APATCHTMP.APARENT=null
 [L]A_I = APATCHTMP.freeSnapshot
 APATCHTMP.snapshotEnabled = 0
 APATCHTMP.setAccessorEnabled = 0
Endif

[L]ASTATUS = max([L]ASTATUS,fmet APATCHTMP.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

APATCHTMP.APATMP.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet APATCHTMP.APATMP.AREAD([L]_NUMREQ,[L]_FICNAM,[L]_FOLD))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet APATCHTMP.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & APATCHTMP.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet APATCHTMP._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If APATCHTMP.APARENT=null
 APATCHTMP.snapshotEnabled = 1
 APATCHTMP.setAccessorEnabled = 1
Endif
LogicClose File [APATMP]
End



