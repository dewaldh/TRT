#<AdxTL>@(#)0.0.0.0 $Revision$Class Impact analysis-Work orders
# Supervisor
## CRUD-CLASSE ## CCMIMPMFGD
# 2018-08-27 12:28:58 139


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(CCMIMPMFGD,ASTATUS)
Variable Instance CCMIMPMFGD Using C_CCMIMPMFGD
Variable Integer ASTATUS

If CCMIMPMFGD = null : End : Endif

Gosub _AVARIABLES From WMC00CCMIMPMFGD

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CCMIMPMFGD

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(CCMIMPMFGD,ASTATUS)
Variable Instance CCMIMPMFGD Using C_CCMIMPMFGD
Variable Integer ASTATUS

If CCMIMPMFGD = null : End : Endif

Gosub AVARIABLES From WMC00CCMIMPMFGD
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_CCMIMPMFGD
Else
 Gosub AINSERT_CCMIMPMFGD
Endif

Gosub _AINSERT_AFTER
[L]A_I = CCMIMPMFGD.freeSnapshot
CCMIMPMFGD.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet CCMIMPMFGD._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet CCMIMPMFGD._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet CCMIMPMFGD._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If CCMIMPMFGD.ASTALIN = [V]CST_ANEWDEL : Return : Endif
CCMIMPMFGD.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPMFGD.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPMFGD.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_CCMIMPMFGD
Trbegin [F:CCMMFGD]
 Gosub AINSERT_CCMIMPMFGD
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_CCMIMPMFGD
Raz [F:CCMMFGD]
[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPMFGD.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00CCMIMPMFGD._MAJSQL_CCMIMPMFGD(CCMIMPMFGD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPMFGD.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If CCMIMPMFGD.snapshotEnabled=1
 [L]A_RETIK = CCMIMPMFGD.revertUpdTick
Endif
[L]ASTATUS = max(fmet CCMIMPMFGD.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(CCMIMPMFGD.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 CCMIMPMFGD.ASTALIN = [V]CST_ALL
Endif
Return



