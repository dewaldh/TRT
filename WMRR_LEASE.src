#<AdxTL>@(#)0.0.0.0 $Revision$Class Lease contracts
# Supervisor
## CRUD-CLASSE ## LEASE
# 2018-08-27 13:19:53 245


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File LEASE [LEA_]

If !SILENCE : Call TRACE("2 --> Local Instance R_LEASE") From ASYRCOM : Endif
Local Instance LEASE Using R_LEASE

If !SILENCE : Call TRACE("3 --> New Instance R_LEASE") From ASYRCOM : Endif
LEASE = NewInstance R_LEASE AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [LEA_]LEA0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of LEASE") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet LEASE.AREAD([LEA_]LEAREF))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("LEASE.LEA.LEAREF ="-num$(LEASE.LEA.LEAREF)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(LEASE.LEA.AKEYS)
  Call TRACE("-"-num$(I)-":"-LEASE.LEA.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [LEA_]
FreeGroup LEASE
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(LEASE,ACLE,ASTATUS,_ETAG)
Variable Instance LEASE Using R_LEASE
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _LEAREF(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_LEAREF = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File LEASE [LEA]
Default File [F:LEA]
Read [F:LEA]LEA0 = [L]_LEAREF
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:LEA]UPDTICK)>0
 [L]_ETAG = num$([F:LEA]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(LEASE,ACLE,ASTATUS)
Variable Instance LEASE Using R_LEASE
Value Char ACLE
Variable Integer ASTATUS
Local Char _LEAREF(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_LEAREF = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet LEASE.AREAD([L]_LEAREF))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(LEASE,_LEAREF,ASTATUS)
Variable Instance LEASE Using R_LEASE
Value Char _LEAREF
Variable Integer ASTATUS

If LEASE = null : End : Endif

Gosub AVARIABLES From WMR00LEASE
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If LEASE.APARENT=null
 [L]A_I = LEASE.freeSnapshot
 LEASE.snapshotEnabled = 0
 LEASE.setAccessorEnabled = 0
Endif

If fmet LEASE.ACTX.AGETAFCRIGHT(LEASE,"GESLEA",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:LEA]
Read [F:LEA]LEA0 = [L]_LEAREF
If fstat
[L]A_ERROR = [L]_LEAREF
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(LEASE,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:LEA]FCY
[L]A_STRACC = ""
If fmet LEASE.ACTX.AGETAFCRIGHTR(LEASE,"GESLEA",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet LEASE.ACTX.ASTACRITROLE(LEASE,[L]_LEAREF
& ,"LEA","LEA",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet LEASE.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

LEASE.LEA.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet LEASE.LEA.AREAD([L]_LEAREF))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet LEASE.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & LEASE.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet LEASE._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If LEASE.APARENT=null
 LEASE.snapshotEnabled = 1
 LEASE.setAccessorEnabled = 1
Endif
LogicClose File [LEA] ,[LBB]
End



