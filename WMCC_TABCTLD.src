#<AdxTL>@(#)0.0.0.0 $Revision$Class Technical sheet
# Supervisor
## CRUD-CLASSE ## TABCTLD
# 2018-08-27 12:51:10 609


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(TABCTLD,ASTATUS)
Variable Instance TABCTLD Using C_TABCTLD
Variable Integer ASTATUS

If TABCTLD = null : End : Endif

Gosub _AVARIABLES From WMC00TABCTLD

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_TABCTLD

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(TABCTLD,ASTATUS)
Variable Instance TABCTLD Using C_TABCTLD
Variable Integer ASTATUS

If TABCTLD = null : End : Endif

Gosub AVARIABLES From WMC00TABCTLD
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_TABCTLD
Else
 Gosub AINSERT_TABCTLD
Endif

Gosub _AINSERT_AFTER
[L]A_I = TABCTLD.freeSnapshot
TABCTLD.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet TABCTLD._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet TABCTLD._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet TABCTLD._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If TABCTLD.ASTALIN = [V]CST_ANEWDEL : Return : Endif
TABCTLD.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet TABCTLD.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet TABCTLD.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_TABCTLD
Trbegin [F:TCT]
 Gosub AINSERT_TABCTLD
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_TABCTLD
Raz [F:TCT]
[L]ASTATUS = max([L]ASTATUS,fmet TABCTLD.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00TABCTLD._MAJSQL_TABCTL(TABCTLD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABCTLD.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If TABCTLD.snapshotEnabled=1
 [L]A_RETIK = TABCTLD.revertUpdTick
Endif
[L]ASTATUS = max(fmet TABCTLD.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(TABCTLD.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 TABCTLD.ASTALIN = [V]CST_ALL
Endif
Return



