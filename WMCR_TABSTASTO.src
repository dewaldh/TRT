#<AdxTL>@(#)0.0.0.0 $Revision$Class Stock status report
# Supervisor
## CRUD-CLASSE ## TABSTASTO
# 2018-08-27 12:52:43 130


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABSTASTO [TST_]

If !SILENCE : Call TRACE("2 --> Local Instance C_TABSTASTO") From ASYRCOM : Endif
Local Instance TABSTASTO Using C_TABSTASTO

If !SILENCE : Call TRACE("3 --> New Instance C_TABSTASTO") From ASYRCOM : Endif
TABSTASTO = NewInstance C_TABSTASTO AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TST_]TST0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TABSTASTO") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TABSTASTO.AREAD([TST_]STASTO))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TABSTASTO.STASTO ="-num$(TABSTASTO.STASTO)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TABSTASTO.AKEYS)
  Call TRACE("-"-num$(I)-":"-TABSTASTO.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TST_]
FreeGroup TABSTASTO
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TABSTASTO,ACLE,ASTATUS,_ETAG)
Variable Instance TABSTASTO Using C_TABSTASTO
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _STASTO(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_STASTO = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File TABSTASTO [TST]
Default File [F:TST]
Read [F:TST]TST0 = [L]_STASTO
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TST]UPDTICK)>0
 [L]_ETAG = num$([F:TST]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TABSTASTO,ACLE,ASTATUS)
Variable Instance TABSTASTO Using C_TABSTASTO
Value Char ACLE
Variable Integer ASTATUS
Local Char _STASTO(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_STASTO = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TABSTASTO.AREAD([L]_STASTO))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TABSTASTO,_STASTO,ASTATUS)
Variable Instance TABSTASTO Using C_TABSTASTO
Value Char _STASTO
Variable Integer ASTATUS

If TABSTASTO = null : End : Endif

Gosub AVARIABLES From WMC00TABSTASTO
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TABSTASTO.APARENT=null
 [L]A_I = TABSTASTO.freeSnapshot
 TABSTASTO.snapshotEnabled = 0
 TABSTASTO.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & TABSTASTO.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet TABSTASTO._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If TABSTASTO.APARENT=null
 TABSTASTO.snapshotEnabled = 1
 TABSTASTO.setAccessorEnabled = 1
Endif
LogicClose File [TST]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet TABSTASTO._ACTION_PARAM("AREAD_BEFORE",[L]_STASTO))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:TST]
Read [F:TST]TST0 = [L]_STASTO
If fstat
[L]A_ERROR = [L]_STASTO
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABSTASTO,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:TST]AUUID)>0 & [F:TST]AUUID=NullUuid
 [F:TST]AUUID = getUuid
Endif
SetInstance TABSTASTO With [F:TST]
TABSTASTO.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet TABSTASTO.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="TABSTASTO" & ZONE="STAAXX" & IDENT1=TABSTASTO.STASTO & IDENT2=""
 Call ASETTEXTRA(TABSTASTO.AXX,TABSTASTO.AllocGrp(),"STAAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 TABSTASTO.AXX(maxtab(TABSTASTO.AXX)).FLG = 0
Next AXX
If !len(fmet TABSTASTO.AGETTEXTRA("STAAXX"))
 Call ASETTEXTRA(TABSTASTO.AXX,TABSTASTO.AllocGrp(),"STAAXX",
& fmet TABSTASTO.AGETTEXTRALAN("STAAXX",TABSTASTO.ACTX.AFOLD.ALANGDEF),
& TABSTASTO.ACTX.LAN) From ASYRSUB
Endif
For [AXX] Where CODFIC="TABSTASTO" & ZONE="STASHOAXX" & IDENT1=TABSTASTO.STASTO & IDENT2=""
 Call ASETTEXTRA(TABSTASTO.AXX,TABSTASTO.AllocGrp(),"STASHOAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 TABSTASTO.AXX(maxtab(TABSTASTO.AXX)).FLG = 0
Next AXX
If !len(fmet TABSTASTO.AGETTEXTRA("STASHOAXX"))
 Call ASETTEXTRA(TABSTASTO.AXX,TABSTASTO.AllocGrp(),"STASHOAXX",
& fmet TABSTASTO.AGETTEXTRALAN("STASHOAXX",TABSTASTO.ACTX.AFOLD.ALANGDEF),
& TABSTASTO.ACTX.LAN) From ASYRSUB
Endif

Return



