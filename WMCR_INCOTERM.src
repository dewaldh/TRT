#<AdxTL>@(#)0.0.0.0 $Revision$Class Incoterms
# Supervisor
## CRUD-CLASSE ## INCOTERM
# 2018-08-27 12:33:52 298


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File INCOTERM [ICTH_]

If !SILENCE : Call TRACE("2 --> Local Instance C_INCOTERM") From ASYRCOM : Endif
Local Instance INCOTERM Using C_INCOTERM

If !SILENCE : Call TRACE("3 --> New Instance C_INCOTERM") From ASYRCOM : Endif
INCOTERM = NewInstance C_INCOTERM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ICTH_]ICT0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of INCOTERM") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet INCOTERM.AREAD([ICTH_]ICTCOD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("INCOTERM.ICTCOD ="-num$(INCOTERM.ICTCOD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(INCOTERM.AKEYS)
  Call TRACE("-"-num$(I)-":"-INCOTERM.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ICTH_]
FreeGroup INCOTERM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(INCOTERM,ACLE,ASTATUS,_ETAG)
Variable Instance INCOTERM Using C_INCOTERM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _ICTCOD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ICTCOD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File INCOTERM [ICTH]
Default File [F:ICTH]
Read [F:ICTH]ICT0 = [L]_ICTCOD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ICTH]UPDTICK)>0
 [L]_ETAG = num$([F:ICTH]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(INCOTERM,ACLE,ASTATUS)
Variable Instance INCOTERM Using C_INCOTERM
Value Char ACLE
Variable Integer ASTATUS
Local Char _ICTCOD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ICTCOD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet INCOTERM.AREAD([L]_ICTCOD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(INCOTERM,_ICTCOD,ASTATUS)
Variable Instance INCOTERM Using C_INCOTERM
Value Char _ICTCOD
Variable Integer ASTATUS

If INCOTERM = null : End : Endif

Gosub AVARIABLES From WMC00INCOTERM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If INCOTERM.APARENT=null
 [L]A_I = INCOTERM.freeSnapshot
 INCOTERM.snapshotEnabled = 0
 INCOTERM.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & INCOTERM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet INCOTERM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If INCOTERM.APARENT=null
 INCOTERM.snapshotEnabled = 1
 INCOTERM.setAccessorEnabled = 1
Endif
LogicClose File [ICTH]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet INCOTERM._ACTION_PARAM("AREAD_BEFORE",[L]_ICTCOD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:ICTH]
Read [F:ICTH]ICT0 = [L]_ICTCOD
If fstat
[L]A_ERROR = [L]_ICTCOD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(INCOTERM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:ICTH]AUUID)>0 & [F:ICTH]AUUID=NullUuid
 [F:ICTH]AUUID = getUuid
Endif
SetInstance INCOTERM With [F:ICTH]
INCOTERM.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet INCOTERM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="INCOTERM" & ZONE="DES" & IDENT1=INCOTERM.ICTCOD & IDENT2=""
 Call ASETTEXTRA(INCOTERM.AXX,INCOTERM.AllocGrp(),"DES",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 INCOTERM.AXX(maxtab(INCOTERM.AXX)).FLG = 0
Next AXX
If !len(fmet INCOTERM.AGETTEXTRA("DES"))
 Call ASETTEXTRA(INCOTERM.AXX,INCOTERM.AllocGrp(),"DES",
& fmet INCOTERM.AGETTEXTRALAN("DES",INCOTERM.ACTX.AFOLD.ALANGDEF),
& INCOTERM.ACTX.LAN) From ASYRSUB
Endif

Return



