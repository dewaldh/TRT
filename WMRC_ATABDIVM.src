#<AdxTL>@(#)0.0.0.0 $Revision$Class Miscellaneous table 
# Supervisor
## CRUD-CLASSE ## ATABDIVM
# 2018-08-27 13:03:11 408


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(ATABDIVM,ASTATUS)
Variable Instance ATABDIVM Using R_ATABDIVM
Variable Integer ASTATUS

If ATABDIVM = null : End : Endif

Gosub AVARIABLES From WMR00ATABDIVM
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

Gosub AREPCONTROL_AINSERT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_ATABDIVM
Else
 Gosub AINSERT_ATABDIVM
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = ATABDIVM.freeSnapshot
ATABDIVM.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
ATABDIVM.ASTALIN = [V]CST_ANEW
ATABDIVM.ADI.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet ATABDIVM.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ATABDIVM.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet ATABDIVM._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet ATABDIVM._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet ATABDIVM._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If ATABDIVM.ADI.ASTALIN = [V]CST_ANEWDEL : Return : Endif
ATABDIVM.ADI.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet ATABDIVM.ADI.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet ATABDIVM.ADI.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_ATABDIVM
Trbegin [F:ADI]
 Gosub AINSERT_ATABDIVM
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(ATABDIVM.ADI.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 ATABDIVM.ADI.ASTALIN = [V]CST_ALL
Endif
Return

#-----------------------------------------------------#
$AINSERT_ATABDIVM
[L]ASTATUS = max([L]ASTATUS,fmet ATABDIVM.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ATABDIVM.ADI._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ATABDIVM.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If ATABDIVM.snapshotEnabled=1
 [L]A_RETIK = ATABDIVM.revertUpdTick
Endif
[L]ASTATUS = max(fmet ATABDIVM.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



