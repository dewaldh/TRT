#<AdxTL>@(#)0.0.0.0 $Revision$Class Major version
# Supervisor
## CRUD-CLASSE ## CCMECCSTA
# 2018-08-27 12:28:30 009


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ECCSTA [ECS_]

If !SILENCE : Call TRACE("2 --> Local Instance C_CCMECCSTA") From ASYRCOM : Endif
Local Instance CCMECCSTA Using C_CCMECCSTA

If !SILENCE : Call TRACE("3 --> New Instance C_CCMECCSTA") From ASYRCOM : Endif
CCMECCSTA = NewInstance C_CCMECCSTA AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ECS_]ECS0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of CCMECCSTA") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet CCMECCSTA.AREAD([ECS_]ITMREF,[ECS_]ECCVALMAJ))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("CCMECCSTA.ITMREF ="-num$(CCMECCSTA.ITMREF)) From ASYRCOM
 Call TRACE("CCMECCSTA.ECCVALMAJ ="-num$(CCMECCSTA.ECCVALMAJ)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(CCMECCSTA.AKEYS)
  Call TRACE("-"-num$(I)-":"-CCMECCSTA.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ECS_]
FreeGroup CCMECCSTA
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(CCMECCSTA,ACLE,ASTATUS,_ETAG)
Variable Instance CCMECCSTA Using C_CCMECCSTA
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _ITMREF(20)
Local Char _ECCVALMAJ(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMREF = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_ECCVALMAJ = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File ECCSTA [ECS]
Default File [F:ECS]
Read [F:ECS]ECS0 = [L]_ITMREF;[L]_ECCVALMAJ
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ECS]UPDTICK)>0
 [L]_ETAG = num$([F:ECS]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(CCMECCSTA,ACLE,ASTATUS)
Variable Instance CCMECCSTA Using C_CCMECCSTA
Value Char ACLE
Variable Integer ASTATUS
Local Char _ITMREF(20)
Local Char _ECCVALMAJ(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMREF = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_ECCVALMAJ = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet CCMECCSTA.AREAD([L]_ITMREF,[L]_ECCVALMAJ))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(CCMECCSTA,_ITMREF,_ECCVALMAJ,ASTATUS)
Variable Instance CCMECCSTA Using C_CCMECCSTA
Value Char _ITMREF
Value Char _ECCVALMAJ
Variable Integer ASTATUS

If CCMECCSTA = null : End : Endif

Gosub AVARIABLES From WMC00CCMECCSTA
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If CCMECCSTA.APARENT=null
 [L]A_I = CCMECCSTA.freeSnapshot
 CCMECCSTA.snapshotEnabled = 0
 CCMECCSTA.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & CCMECCSTA.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet CCMECCSTA._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If CCMECCSTA.APARENT=null
 CCMECCSTA.snapshotEnabled = 1
 CCMECCSTA.setAccessorEnabled = 1
Endif
LogicClose File [ECS]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet CCMECCSTA._ACTION_PARAM("AREAD_BEFORE",[L]_ITMREF,[L]_ECCVALMAJ))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:ECS]
Read [F:ECS]ECS0 = [L]_ITMREF;[L]_ECCVALMAJ
If fstat
[L]A_ERROR = [L]_ITMREF+"~"+[L]_ECCVALMAJ
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(CCMECCSTA,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:ECS]AUUID)>0 & [F:ECS]AUUID=NullUuid
 [F:ECS]AUUID = getUuid
Endif
SetInstance CCMECCSTA With [F:ECS]
CCMECCSTA.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet CCMECCSTA.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="ECCSTA" & ZONE="ECCDESAXX" & IDENT1=CCMECCSTA.ECCVALMAJ & IDENT2=""
 Call ASETTEXTRA(CCMECCSTA.AXX,CCMECCSTA.AllocGrp(),"ECCDESAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 CCMECCSTA.AXX(maxtab(CCMECCSTA.AXX)).FLG = 0
Next AXX
If !len(fmet CCMECCSTA.AGETTEXTRA("ECCDESAXX"))
 Call ASETTEXTRA(CCMECCSTA.AXX,CCMECCSTA.AllocGrp(),"ECCDESAXX",
& fmet CCMECCSTA.AGETTEXTRALAN("ECCDESAXX",CCMECCSTA.ACTX.AFOLD.ALANGDEF),
& CCMECCSTA.ACTX.LAN) From ASYRSUB
Endif
For [AXX] Where CODFIC="ECCSTA" & ZONE="ECCSHOAXX" & IDENT1=CCMECCSTA.ECCVALMAJ & IDENT2=""
 Call ASETTEXTRA(CCMECCSTA.AXX,CCMECCSTA.AllocGrp(),"ECCSHOAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 CCMECCSTA.AXX(maxtab(CCMECCSTA.AXX)).FLG = 0
Next AXX
If !len(fmet CCMECCSTA.AGETTEXTRA("ECCSHOAXX"))
 Call ASETTEXTRA(CCMECCSTA.AXX,CCMECCSTA.AllocGrp(),"ECCSHOAXX",
& fmet CCMECCSTA.AGETTEXTRALAN("ECCSHOAXX",CCMECCSTA.ACTX.AFOLD.ALANGDEF),
& CCMECCSTA.ACTX.LAN) From ASYRSUB
Endif

Return



