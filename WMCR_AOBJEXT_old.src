#<AdxTL>@(#)0.0.0.0 $Revision$Class Import/export templates
# Sage X3 supervisor
## CRUD-CLASSE ## AOBJEXT
# 2018-06-20 06:32:39 961


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File AOBJEXT [AOE_]

If !SILENCE : Call TRACE("2 --> Local Instance C_AOBJEXT") From ASYRCOM : Endif
Local Instance AOBJEXT Using C_AOBJEXT

If !SILENCE : Call TRACE("3 --> New Instance C_AOBJEXT") From ASYRCOM : Endif
AOBJEXT = NewInstance C_AOBJEXT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [AOE_]AOE0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of AOBJEXT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.AREAD([AOE_]EXT))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("AOBJEXT.EXT ="-num$(AOBJEXT.EXT)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(AOBJEXT.AKEYS)
  Call TRACE("-"-num$(I)-":"-AOBJEXT.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [AOE_]
FreeGroup AOBJEXT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(AOBJEXT,ACLE,ASTATUS,_ETAG)
Variable Instance AOBJEXT Using C_AOBJEXT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _EXT(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_EXT = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File AOBJEXT [AOE]
Default File [F:AOE]
Read [F:AOE]AOE0 = [L]_EXT
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:AOE]UPDTICK)>0
 [L]_ETAG = num$([F:AOE]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(AOBJEXT,ACLE,ASTATUS)
Variable Instance AOBJEXT Using C_AOBJEXT
Value Char ACLE
Variable Integer ASTATUS
Local Char _EXT(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_EXT = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.AREAD([L]_EXT))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(AOBJEXT,_EXT,ASTATUS)
Variable Instance AOBJEXT Using C_AOBJEXT
Value Char _EXT
Variable Integer ASTATUS

If AOBJEXT = null : End : Endif

Gosub AVARIABLES From WMC00AOBJEXT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If AOBJEXT.APARENT=null
 [L]A_I = AOBJEXT.freeSnapshot
 AOBJEXT.snapshotEnabled = 0
 AOBJEXT.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & AOBJEXT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If AOBJEXT.APARENT=null
 AOBJEXT.snapshotEnabled = 1
 AOBJEXT.setAccessorEnabled = 1
Endif
LogicClose File [AOE] ,[AOD]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT._ACTION_PARAM("AREAD_BEFORE",[L]_EXT))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:AOE]
Read [F:AOE]AOE0 = [L]_EXT
If fstat
[L]A_ERROR = [L]_EXT
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(AOBJEXT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = [F:AOE]ACS
If dim([F:AOE]AUUID)>0 & [F:AOE]AUUID=NullUuid
 [F:AOE]AUUID = getUuid
Endif
SetInstance AOBJEXT With [F:AOE]
AOBJEXT.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:AOD]
 [L]A_N2=0
 For [F:AOD]AOD0 Where EXT=[AOE]EXT
  [L]A_N2 +=1
  AOBJEXT.AOD(A_N2) = NewInstance  C_AOBJEXTD(AOBJEXT.ACTX,NullUuid,[L]A_N2,AOBJEXT,"AOD") AllocGroup AOBJEXT
  [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.AOD(A_N2).ADDINSTANCE_BOUND)
  If dim([F:AOD]AUUID)>0 & [F:AOD]AUUID=NullUuid
   [F:AOD]AUUID = getUuid
  Endif
  SetInstance AOBJEXT.AOD(A_N2) With [F:AOD]
  [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.AOD(A_N2).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  AOBJEXT.AOD(A_N2).ASTALIN = [V]CST_ALL
  For [AXX] Where CODFIC="AOBJEXTD" & ZONE="INTFLD" & IDENT1=AOBJEXT.AOD(A_N2).EXT & IDENT2=""
   Call ASETTEXTRA(AOBJEXT.AOD(A_N2).AXX,AOBJEXT.AOD(A_N2).AllocGrp(),"INTFLD",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
   AOBJEXT.AOD(A_N2).AXX(maxtab(AOBJEXT.AOD(A_N2).AXX)).FLG = 0
  Next AXX
  If !len(fmet AOBJEXT.AOD(A_N2).AGETTEXTRA("INTFLD"))
   Call ASETTEXTRA(AOBJEXT.AOD(A_N2).AXX,AOBJEXT.AOD(A_N2).AllocGrp(),"INTFLD",
& fmet AOBJEXT.AOD(A_N2).AGETTEXTRALAN("INTFLD",AOBJEXT.AOD(A_N2).ACTX.AFOLD.ALANGDEF),
& AOBJEXT.AOD(A_N2).ACTX.LAN) From ASYRSUB
  Endif
 Next AOD
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
#-----------------------------------------------------#

[L]A_NEWCOL = 0
For [L]A_I=1 To 20
 If ([F:AOE]FIL([L]A_I-1)<>"" or [F:AOE]FLGEXP([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  AOBJEXT.FILCOL(A_NEWCOL) = NewInstance  C_AOBJEXT_FILCOL(AOBJEXT.ACTX,NullUuid,[L]A_I,AOBJEXT,"FILCOL") AllocGroup AOBJEXT
  AOBJEXT.FILCOL(A_NEWCOL).FIL = [F:AOE]FIL([L]A_I-1)
  AOBJEXT.FILCOL(A_NEWCOL).FLGEXP = [F:AOE]FLGEXP([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.FILCOL(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 8
 If ([F:AOE]FLGLEV([L]A_I-1)<>0 or [F:AOE]FLGREC([L]A_I-1)<>"" or [F:AOE]FLGFIL([L]A_I-1)<>"" or [F:AOE]FLGKEY([L]A_I-1)<>""
& or [F:AOE]FLGLNK([L]A_I-1)<>"" or [F:AOE]RECLEN([L]A_I-1)<>0)
  [L]A_NEWCOL += 1
  AOBJEXT.FLGCOL(A_NEWCOL) = NewInstance  C_AOBJEXT_FLGCOL(AOBJEXT.ACTX,NullUuid,[L]A_I,AOBJEXT,"FLGCOL") AllocGroup AOBJEXT
  AOBJEXT.FLGCOL(A_NEWCOL).FLGLEV = [F:AOE]FLGLEV([L]A_I-1)
  AOBJEXT.FLGCOL(A_NEWCOL).FLGREC = [F:AOE]FLGREC([L]A_I-1)
  AOBJEXT.FLGCOL(A_NEWCOL).FLGFIL = [F:AOE]FLGFIL([L]A_I-1)
  AOBJEXT.FLGCOL(A_NEWCOL).FLGKEY = [F:AOE]FLGKEY([L]A_I-1)
  AOBJEXT.FLGCOL(A_NEWCOL).FLGLNK = [F:AOE]FLGLNK([L]A_I-1)
  AOBJEXT.FLGCOL(A_NEWCOL).RECLEN = [F:AOE]RECLEN([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.FLGCOL(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="AOBJEXT" & ZONE="INTIT" & IDENT1=AOBJEXT.EXT & IDENT2=""
 Call ASETTEXTRA(AOBJEXT.AXX,AOBJEXT.AllocGrp(),"INTIT",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 AOBJEXT.AXX(maxtab(AOBJEXT.AXX)).FLG = 0
Next AXX
If !len(fmet AOBJEXT.AGETTEXTRA("INTIT"))
 Call ASETTEXTRA(AOBJEXT.AXX,AOBJEXT.AllocGrp(),"INTIT",
& fmet AOBJEXT.AGETTEXTRALAN("INTIT",AOBJEXT.ACTX.AFOLD.ALANGDEF),
& AOBJEXT.ACTX.LAN) From ASYRSUB
Endif

Return



