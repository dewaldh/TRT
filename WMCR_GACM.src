#<AdxTL>@(#)0.0.0.0 $Revision$Class Account core model
# Supervisor
## CRUD-CLASSE ## GACM
# 2018-08-27 12:32:44 915


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File GACM [GCM_]

If !SILENCE : Call TRACE("2 --> Local Instance C_GACM") From ASYRCOM : Endif
Local Instance GACM Using C_GACM

If !SILENCE : Call TRACE("3 --> New Instance C_GACM") From ASYRCOM : Endif
GACM = NewInstance C_GACM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [GCM_]GCM0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of GACM") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet GACM.AREAD([GCM_]GCM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("GACM.GCM ="-num$(GACM.GCM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(GACM.AKEYS)
  Call TRACE("-"-num$(I)-":"-GACM.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [GCM_]
FreeGroup GACM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(GACM,ACLE,ASTATUS,_ETAG)
Variable Instance GACM Using C_GACM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _GCM(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_GCM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File GACM [GCM]
Default File [F:GCM]
Read [F:GCM]GCM0 = [L]_GCM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:GCM]UPDTICK)>0
 [L]_ETAG = num$([F:GCM]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(GACM,ACLE,ASTATUS)
Variable Instance GACM Using C_GACM
Value Char ACLE
Variable Integer ASTATUS
Local Char _GCM(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_GCM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet GACM.AREAD([L]_GCM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(GACM,_GCM,ASTATUS)
Variable Instance GACM Using C_GACM
Value Char _GCM
Variable Integer ASTATUS

If GACM = null : End : Endif

Gosub AVARIABLES From WMC00GACM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If GACM.APARENT=null
 [L]A_I = GACM.freeSnapshot
 GACM.snapshotEnabled = 0
 GACM.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & GACM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet GACM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If GACM.APARENT=null
 GACM.snapshotEnabled = 1
 GACM.setAccessorEnabled = 1
Endif
LogicClose File [GCM]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet GACM._ACTION_PARAM("AREAD_BEFORE",[L]_GCM))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:GCM]
Read [F:GCM]GCM0 = [L]_GCM
If fstat
[L]A_ERROR = [L]_GCM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(GACM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:GCM]AUUID)>0 & [F:GCM]AUUID=NullUuid
 [F:GCM]AUUID = getUuid
Endif
SetInstance GACM With [F:GCM]
GACM.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To 10
 If ([F:GCM]LED1([L]A_I-1)<>"" or [F:GCM]LED2([L]A_I-1)<>"" or [F:GCM]CTLTYP([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  GACM.CTLLED(A_NEWCOL) = NewInstance  C_GACM_CTLLED(GACM.ACTX,NullUuid,[L]A_I,GACM,"CTLLED") AllocGroup GACM
  GACM.CTLLED(A_NEWCOL).LED1 = [F:GCM]LED1([L]A_I-1)
  GACM.CTLLED(A_NEWCOL).LED2 = [F:GCM]LED2([L]A_I-1)
  GACM.CTLLED(A_NEWCOL).CTLTYP = [F:GCM]CTLTYP([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet GACM.CTLLED(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 10
 [L]A_NEWCOL += 1
 GACM.LISLED(A_NEWCOL) = NewInstance  C_GACM_LISLED(GACM.ACTX,NullUuid,[L]A_I,GACM,"LISLED") AllocGroup GACM
 GACM.LISLED(A_NEWCOL).LED = [F:GCM]LED([L]A_I-1)
 GACM.LISLED(A_NEWCOL).CFMAUT = [F:GCM]CFMAUT([L]A_I-1)
 GACM.LISLED(A_NEWCOL).ORILEDTYP = [F:GCM]ORILEDTYP([L]A_I-1)
 GACM.LISLED(A_NEWCOL).DOELED = [F:GCM]DOELED([L]A_I-1)
 GACM.LISLED(A_NEWCOL).CUR = [F:GCM]CUR([L]A_I-1)
 GACM.LISLED(A_NEWCOL).DACRAT = [F:GCM]DACRAT([L]A_I-1)
 GACM.LISLED(A_NEWCOL).FLGVCRRAT = [F:GCM]FLGVCRRAT([L]A_I-1)
 GACM.LISLED(A_NEWCOL).TYPRAT = [F:GCM]TYPRAT([L]A_I-1)
 GACM.LISLED(A_NEWCOL).RNDOPTBAL = [F:GCM]RNDOPTBAL([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet GACM.LISLED(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet GACM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="GACM" & ZONE="DESTRA" & IDENT1=GACM.GCM & IDENT2=""
 Call ASETTEXTRA(GACM.AXX,GACM.AllocGrp(),"DESTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 GACM.AXX(maxtab(GACM.AXX)).FLG = 0
Next AXX
If !len(fmet GACM.AGETTEXTRA("DESTRA"))
 Call ASETTEXTRA(GACM.AXX,GACM.AllocGrp(),"DESTRA",
& fmet GACM.AGETTEXTRALAN("DESTRA",GACM.ACTX.AFOLD.ALANGDEF),
& GACM.ACTX.LAN) From ASYRSUB
Endif
For [AXX] Where CODFIC="GACM" & ZONE="SHOTRA" & IDENT1=GACM.GCM & IDENT2=""
 Call ASETTEXTRA(GACM.AXX,GACM.AllocGrp(),"SHOTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 GACM.AXX(maxtab(GACM.AXX)).FLG = 0
Next AXX
If !len(fmet GACM.AGETTEXTRA("SHOTRA"))
 Call ASETTEXTRA(GACM.AXX,GACM.AllocGrp(),"SHOTRA",
& fmet GACM.AGETTEXTRALAN("SHOTRA",GACM.ACTX.AFOLD.ALANGDEF),
& GACM.ACTX.LAN) From ASYRSUB
Endif

Return



