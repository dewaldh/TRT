#<AdxTL>@(#)0.0.0.0 $Revision$Class Order-giver/miscellaneous BP
# Supervisor
## CRUD-CLASSE ## BPMISC
# 2018-08-27 12:26:05 427

Gosub TEST From WMCR_BPMISC : End

############################################################################################
## R : Subprog AREAD(INSTANCE,BPRTYP,BPRNUM)
## U : Subprog AUPDATE(INSTANCE)
############################################################################################
# BPMISC : BPMISC
############################################################################################

############################################################################################
### AVARIABLES
############################################################################################
$AVARIABLES
[L]ASTATUS =max([L]ASTATUS,fmet BPMISC._ADELERRORS([V]CST_ALLERRORS))
$_AVARIABLES
Local    Integer     A_LEVEL,A_I,A_NEWCOL,A_N1
Local    Integer    ASTATUS,A_RETIK,A_TYPMAJ,A_ASTALIN
Local    Char        A_STRSITE(GLONFCY),A_STRACC(GLONACS),CURPRO(50),A_PARENT(50),A_PATH(200),A_ABR(GLONABR),A_ERROR(250)
Local    Uuident    A_UUID

[L]A_LEVEL    = BPMISC.ACTX.LEVWML
[L]ASTATUS  = 0

Onerrgo ERR_OPENTAB
If find(BPMISC.ACTX.AFOLDER,nomap,"")>0
 Local File BPMISC [BPM]
 Local File BPMISC [AAA_]
Else
 Local File =BPMISC.ACTX.AFOLDER+".BPMISC" [BPM]
 Local File =BPMISC.ACTX.AFOLDER+".BPMISC" [AAA_]
Endif
Onerrgo
Return

$ERR_OPENTAB
[L]ASTATUS = max([L]ASTATUS,fmet BPMISC.ASETERROR("",errp+"("+num$(errl)+")"-mess(6,123,1)-num$(errn)-errmes$(errn)-errm,[V]CST_AERROR))
Resume

############################################################################################
### Link
############################################################################################
$AOPEN_LINK
Gosub AVARIABLES
Link [BPM] With
& [AAA_]BPM0 = BPRTYP+BPRNUM
& As [LNK_]
Return

############################################################################################
### BPMISC(WBPM)
############################################################################################
Funprog  _MAJSQL_BPMISC(WBPM)
Variable Instance WBPM Using C_BPMISC
Local Integer ASTATUS,A_I,A_J
Default File [F:BPM]
If WBPM.ASTALIN=[V]CST_ANEW
 Call INICRE(WBPM) From ASYRSUB
 SetInstance [F:BPM] With WBPM
 For [L]A_J=1 to 5
  For [L]A_I=1 To maxtab(WBPM.C_ALHX)
   If WBPM.C_ALHX([L]A_I)<>null & !find(WBPM.C_ALHX([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WBPM.C_ALHX([L]A_I).AORDER=[L]A_J
    [F:BPM]ALHX([L]A_J-1) = WBPM.C_ALHX([L]A_I).ALHX
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 5
  For [L]A_I=1 To maxtab(WBPM.C_DATX)
   If WBPM.C_DATX([L]A_I)<>null & !find(WBPM.C_DATX([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WBPM.C_DATX([L]A_I).AORDER=[L]A_J
    [F:BPM]DATX([L]A_J-1) = WBPM.C_DATX([L]A_I).DATX
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 5
  For [L]A_I=1 To maxtab(WBPM.C_DCBX)
   If WBPM.C_DCBX([L]A_I)<>null & !find(WBPM.C_DCBX([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WBPM.C_DCBX([L]A_I).AORDER=[L]A_J
    [F:BPM]DCBX([L]A_J-1) = WBPM.C_DCBX([L]A_I).DCBX
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 5
  For [L]A_I=1 To maxtab(WBPM.C_INTX)
   If WBPM.C_INTX([L]A_I)<>null & !find(WBPM.C_INTX([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WBPM.C_INTX([L]A_I).AORDER=[L]A_J
    [F:BPM]INTX([L]A_J-1) = WBPM.C_INTX([L]A_I).INTX
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 Write [F:BPM]
 If fstat
  Call FSTA("BPM",WBPM,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WBPM.updTick = [F:BPM]updTick
Elsif WBPM.ASTALIN=[V]CST_ALL or WBPM.ASTALIN=[V]CST_AUPD
 Call INIUPD(WBPM) From ASYRSUB
 SetInstance [F:BPM] With WBPM
 For [L]A_J=1 to 5
  For [L]A_I=1 To maxtab(WBPM.C_ALHX)
   If WBPM.C_ALHX([L]A_I)<>null & !find(WBPM.C_ALHX([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WBPM.C_ALHX([L]A_I).AORDER=[L]A_J
    [F:BPM]ALHX([L]A_J-1) = WBPM.C_ALHX([L]A_I).ALHX
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 5
  For [L]A_I=1 To maxtab(WBPM.C_DATX)
   If WBPM.C_DATX([L]A_I)<>null & !find(WBPM.C_DATX([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WBPM.C_DATX([L]A_I).AORDER=[L]A_J
    [F:BPM]DATX([L]A_J-1) = WBPM.C_DATX([L]A_I).DATX
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 5
  For [L]A_I=1 To maxtab(WBPM.C_DCBX)
   If WBPM.C_DCBX([L]A_I)<>null & !find(WBPM.C_DCBX([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WBPM.C_DCBX([L]A_I).AORDER=[L]A_J
    [F:BPM]DCBX([L]A_J-1) = WBPM.C_DCBX([L]A_I).DCBX
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 5
  For [L]A_I=1 To maxtab(WBPM.C_INTX)
   If WBPM.C_INTX([L]A_I)<>null & !find(WBPM.C_INTX([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WBPM.C_INTX([L]A_I).AORDER=[L]A_J
    [F:BPM]INTX([L]A_J-1) = WBPM.C_INTX([L]A_I).INTX
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WBPM,"BPMISC")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:BPM]BPM0 = [F:BPM]BPRTYP;[F:BPM]BPRNUM
 If fstat
  Call FSTA("BPM",WBPM,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WBPM.updTick = [F:BPM]updTick
Elsif WBPM.ASTALIN=[V]CST_ADEL
 SetInstance [F:BPM] With WBPM
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WBPM,"BPMISC")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:BPM]BPM0 = [F:BPM]BPRTYP;[F:BPM]BPRNUM
 If fstat
  Call FSTA("BPM",WBPM,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK



