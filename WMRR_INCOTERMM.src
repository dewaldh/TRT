#<AdxTL>@(#)0.0.0.0 $Revision$Class Incoterms
# Supervisor
## CRUD-CLASSE ## INCOTERMM
# 2018-08-27 13:17:25 268


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File INCOTERM [ICTH_]

If !SILENCE : Call TRACE("2 --> Local Instance R_INCOTERMM") From ASYRCOM : Endif
Local Instance INCOTERMM Using R_INCOTERMM

If !SILENCE : Call TRACE("3 --> New Instance R_INCOTERMM") From ASYRCOM : Endif
INCOTERMM = NewInstance R_INCOTERMM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ICTH_]ICT0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of INCOTERMH") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet INCOTERMM.AREAD([ICTH_]ICTCOD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("INCOTERMM.ICTH.ICTCOD ="-num$(INCOTERMM.ICTH.ICTCOD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(INCOTERMM.ICTH.AKEYS)
  Call TRACE("-"-num$(I)-":"-INCOTERMM.ICTH.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ICTH_]
FreeGroup INCOTERMM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(INCOTERMM,ACLE,ASTATUS,_ETAG)
Variable Instance INCOTERMM Using R_INCOTERMM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _ICTCOD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ICTCOD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File INCOTERM [ICTH]
Default File [F:ICTH]
Read [F:ICTH]ICT0 = [L]_ICTCOD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ICTH]UPDTICK)>0
 [L]_ETAG = num$([F:ICTH]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(INCOTERMM,ACLE,ASTATUS)
Variable Instance INCOTERMM Using R_INCOTERMM
Value Char ACLE
Variable Integer ASTATUS
Local Char _ICTCOD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ICTCOD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet INCOTERMM.AREAD([L]_ICTCOD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(INCOTERMM,_ICTCOD,ASTATUS)
Variable Instance INCOTERMM Using R_INCOTERMM
Value Char _ICTCOD
Variable Integer ASTATUS

If INCOTERMM = null : End : Endif

Gosub AVARIABLES From WMR00INCOTERMM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If INCOTERMM.APARENT=null
 [L]A_I = INCOTERMM.freeSnapshot
 INCOTERMM.snapshotEnabled = 0
 INCOTERMM.setAccessorEnabled = 0
Endif

If fmet INCOTERMM.ACTX.AGETAFCRIGHT(INCOTERMM,"GESICT",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:ICTH]
Read [F:ICTH]ICT0 = [L]_ICTCOD
If fstat
[L]A_ERROR = [L]_ICTCOD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(INCOTERMM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet INCOTERMM.ACTX.AGETAFCRIGHTR(INCOTERMM,"GESICT",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet INCOTERMM.ACTX.ASTACRITROLE(INCOTERMM,[L]_ICTCOD
& ,"ICT","ICTH",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet INCOTERMM.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

INCOTERMM.ICTH.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet INCOTERMM.ICTH.AREAD([L]_ICTCOD))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet INCOTERMM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & INCOTERMM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet INCOTERMM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If INCOTERMM.APARENT=null
 INCOTERMM.snapshotEnabled = 1
 INCOTERMM.setAccessorEnabled = 1
Endif
LogicClose File [ICTH] ,[ICTD]
End



