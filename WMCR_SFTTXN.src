#<AdxTL>@(#)0.0.0.0 $Revision$Class Shop floor transactions
# Sage X3 supervisor
## CRUD-CLASSE ## SFTTXN
# 2018-03-26 00:42:18 413


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File SFTTXN [SFTX_]

If !SILENCE : Call TRACE("2 --> Local Instance C_SFTTXN") From ASYRCOM : Endif
Local Instance SFTTXN Using C_SFTTXN

If !SILENCE : Call TRACE("3 --> New Instance C_SFTTXN") From ASYRCOM : Endif
SFTTXN = NewInstance C_SFTTXN AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [SFTX_]SFT0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of SFTTXN") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet SFTTXN.AREAD([SFTX_]EMPNUM,[SFTX_]SFTTYP,[SFTX_]VCRNUM,[SFTX_]SFTSEQ))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("SFTTXN.EMPNUM ="-num$(SFTTXN.EMPNUM)) From ASYRCOM
 Call TRACE("SFTTXN.SFTTYP ="-num$(SFTTXN.SFTTYP)) From ASYRCOM
 Call TRACE("SFTTXN.VCRNUM ="-num$(SFTTXN.VCRNUM)) From ASYRCOM
 Call TRACE("SFTTXN.SFTSEQ ="-num$(SFTTXN.SFTSEQ)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(SFTTXN.AKEYS)
  Call TRACE("-"-num$(I)-":"-SFTTXN.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [SFTX_]
FreeGroup SFTTXN
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(SFTTXN,ACLE,ASTATUS,_ETAG)
Variable Instance SFTTXN Using C_SFTTXN
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Shortint _EMPNUM
Local Tinyint _SFTTYP
Local Char _VCRNUM(20)
Local Integer _SFTSEQ
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_EMPNUM = val([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_SFTTYP = val([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_VCRNUM = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_SFTSEQ = val([L]CLE(4)) : Endif
Raz [L]_ETAG
Local File SFTTXN [SFTX]
Default File [F:SFTX]
Read [F:SFTX]SFT0 = [L]_EMPNUM;[L]_SFTTYP;[L]_VCRNUM;[L]_SFTSEQ
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:SFTX]UPDTICK)>0
 [L]_ETAG = num$([F:SFTX]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(SFTTXN,ACLE,ASTATUS)
Variable Instance SFTTXN Using C_SFTTXN
Value Char ACLE
Variable Integer ASTATUS
Local Shortint _EMPNUM
Local Tinyint _SFTTYP
Local Char _VCRNUM(20)
Local Integer _SFTSEQ
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_EMPNUM = val([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_SFTTYP = val([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_VCRNUM = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_SFTSEQ = val([L]CLE(4)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SFTTXN.AREAD([L]_EMPNUM,[L]_SFTTYP,[L]_VCRNUM,[L]_SFTSEQ))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(SFTTXN,_EMPNUM,_SFTTYP,_VCRNUM,_SFTSEQ,ASTATUS)
Variable Instance SFTTXN Using C_SFTTXN
Value Shortint _EMPNUM
Value Tinyint _SFTTYP
Value Char _VCRNUM
Value Integer _SFTSEQ
Variable Integer ASTATUS

If SFTTXN = null : End : Endif

Gosub AVARIABLES From WMC00SFTTXN
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If SFTTXN.APARENT=null
 [L]A_I = SFTTXN.freeSnapshot
 SFTTXN.snapshotEnabled = 0
 SFTTXN.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & SFTTXN.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet SFTTXN._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If SFTTXN.APARENT=null
 SFTTXN.snapshotEnabled = 1
 SFTTXN.setAccessorEnabled = 1
Endif
LogicClose File [SFTX]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet SFTTXN._ACTION_PARAM("AREAD_BEFORE",[L]_EMPNUM,[L]_SFTTYP,[L]_VCRNUM,[L]_SFTSEQ))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:SFTX]
Read [F:SFTX]SFT0 = [L]_EMPNUM;[L]_SFTTYP;[L]_VCRNUM;[L]_SFTSEQ
If fstat
[L]A_ERROR = num$([L]_EMPNUM)+"~"+num$([L]_SFTTYP)+"~"+[L]_VCRNUM+"~"+num$([L]_SFTSEQ)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(SFTTXN,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:SFTX]AUUID)>0 & [F:SFTX]AUUID=NullUuid
 [F:SFTX]AUUID = getUuid
Endif
SetInstance SFTTXN With [F:SFTX]
SFTTXN.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet SFTTXN.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



