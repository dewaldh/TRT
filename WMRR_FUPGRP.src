#<AdxTL>@(#)0.0.0.0 $Revision$Class Reminder groups
# Supervisor
## CRUD-CLASSE ## FUPGRP
# 2018-08-27 13:15:10 098


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File FUPGRP [FGP_]

If !SILENCE : Call TRACE("2 --> Local Instance R_FUPGRP") From ASYRCOM : Endif
Local Instance FUPGRP Using R_FUPGRP

If !SILENCE : Call TRACE("3 --> New Instance R_FUPGRP") From ASYRCOM : Endif
FUPGRP = NewInstance R_FUPGRP AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [FGP_]FGP0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of FUPGRP") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet FUPGRP.AREAD([FGP_]GRP))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("FUPGRP.FGP.GRP ="-num$(FUPGRP.FGP.GRP)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(FUPGRP.FGP.AKEYS)
  Call TRACE("-"-num$(I)-":"-FUPGRP.FGP.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [FGP_]
FreeGroup FUPGRP
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(FUPGRP,ACLE,ASTATUS,_ETAG)
Variable Instance FUPGRP Using R_FUPGRP
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _GRP(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_GRP = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File FUPGRP [FGP]
Default File [F:FGP]
Read [F:FGP]FGP0 = [L]_GRP
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:FGP]UPDTICK)>0
 [L]_ETAG = num$([F:FGP]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(FUPGRP,ACLE,ASTATUS)
Variable Instance FUPGRP Using R_FUPGRP
Value Char ACLE
Variable Integer ASTATUS
Local Char _GRP(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_GRP = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet FUPGRP.AREAD([L]_GRP))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(FUPGRP,_GRP,ASTATUS)
Variable Instance FUPGRP Using R_FUPGRP
Value Char _GRP
Variable Integer ASTATUS

If FUPGRP = null : End : Endif

Gosub AVARIABLES From WMR00FUPGRP
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If FUPGRP.APARENT=null
 [L]A_I = FUPGRP.freeSnapshot
 FUPGRP.snapshotEnabled = 0
 FUPGRP.setAccessorEnabled = 0
Endif

If fmet FUPGRP.ACTX.AGETAFCRIGHT(FUPGRP,"GESFGP",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:FGP]
Read [F:FGP]FGP0 = [L]_GRP
If fstat
[L]A_ERROR = [L]_GRP
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(FUPGRP,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet FUPGRP.ACTX.AGETAFCRIGHTR(FUPGRP,"GESFGP",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet FUPGRP.ACTX.ASTACRITROLE(FUPGRP,[L]_GRP
& ,"FGP","FGP",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet FUPGRP.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

FUPGRP.FGP.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet FUPGRP.FGP.AREAD([L]_GRP))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet FUPGRP.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & FUPGRP.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet FUPGRP._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If FUPGRP.APARENT=null
 FUPGRP.snapshotEnabled = 1
 FUPGRP.setAccessorEnabled = 1
Endif
LogicClose File [FGP]
End



