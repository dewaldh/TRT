#<AdxTL>@(#)0.0.0.0 $Revision$Class Open items
# Supervisor
## CRUD-CLASSE ## GACCDUDATE
# 2018-08-27 12:32:23 386


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File GACCDUDATE [DUD_]

If !SILENCE : Call TRACE("2 --> Local Instance C_GACCDUDATE") From ASYRCOM : Endif
Local Instance GACCDUDATE Using C_GACCDUDATE

If !SILENCE : Call TRACE("3 --> New Instance C_GACCDUDATE") From ASYRCOM : Endif
GACCDUDATE = NewInstance C_GACCDUDATE AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [DUD_]DUD0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of GACCDUDATE") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet GACCDUDATE.AREAD([DUD_]TYP,[DUD_]NUM,[DUD_]LIG,[DUD_]DUDLIG))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("GACCDUDATE.TYP ="-num$(GACCDUDATE.TYP)) From ASYRCOM
 Call TRACE("GACCDUDATE.NUM ="-num$(GACCDUDATE.NUM)) From ASYRCOM
 Call TRACE("GACCDUDATE.LIG ="-num$(GACCDUDATE.LIG)) From ASYRCOM
 Call TRACE("GACCDUDATE.DUDLIG ="-num$(GACCDUDATE.DUDLIG)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(GACCDUDATE.AKEYS)
  Call TRACE("-"-num$(I)-":"-GACCDUDATE.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [DUD_]
FreeGroup GACCDUDATE
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(GACCDUDATE,ACLE,ASTATUS,_ETAG)
Variable Instance GACCDUDATE Using C_GACCDUDATE
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _TYP(5)
Local Char _NUM(20)
Local Shortint _LIG
Local Shortint _DUDLIG
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_TYP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_NUM = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_LIG = val([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_DUDLIG = val([L]CLE(4)) : Endif
Raz [L]_ETAG
Local File GACCDUDATE [DUD]
Default File [F:DUD]
Read [F:DUD]DUD0 = [L]_TYP;[L]_NUM;[L]_LIG;[L]_DUDLIG
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:DUD]UPDTICK)>0
 [L]_ETAG = num$([F:DUD]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(GACCDUDATE,ACLE,ASTATUS)
Variable Instance GACCDUDATE Using C_GACCDUDATE
Value Char ACLE
Variable Integer ASTATUS
Local Char _TYP(5)
Local Char _NUM(20)
Local Shortint _LIG
Local Shortint _DUDLIG
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_TYP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_NUM = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_LIG = val([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_DUDLIG = val([L]CLE(4)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet GACCDUDATE.AREAD([L]_TYP,[L]_NUM,[L]_LIG,[L]_DUDLIG))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(GACCDUDATE,_TYP,_NUM,_LIG,_DUDLIG,ASTATUS)
Variable Instance GACCDUDATE Using C_GACCDUDATE
Value Char _TYP
Value Char _NUM
Value Shortint _LIG
Value Shortint _DUDLIG
Variable Integer ASTATUS

If GACCDUDATE = null : End : Endif

Gosub AVARIABLES From WMC00GACCDUDATE
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If GACCDUDATE.APARENT=null
 [L]A_I = GACCDUDATE.freeSnapshot
 GACCDUDATE.snapshotEnabled = 0
 GACCDUDATE.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & GACCDUDATE.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet GACCDUDATE._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If GACCDUDATE.APARENT=null
 GACCDUDATE.snapshotEnabled = 1
 GACCDUDATE.setAccessorEnabled = 1
Endif
LogicClose File [DUD]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet GACCDUDATE._ACTION_PARAM("AREAD_BEFORE",[L]_TYP,[L]_NUM,[L]_LIG,[L]_DUDLIG))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:DUD]
Read [F:DUD]DUD0 = [L]_TYP;[L]_NUM;[L]_LIG;[L]_DUDLIG
If fstat
[L]A_ERROR = [L]_TYP+"~"+[L]_NUM+"~"+num$([L]_LIG)+"~"+num$([L]_DUDLIG)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(GACCDUDATE,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:DUD]AUUID)>0 & [F:DUD]AUUID=NullUuid
 [F:DUD]AUUID = getUuid
Endif
SetInstance GACCDUDATE With [F:DUD]
GACCDUDATE.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet GACCDUDATE.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



