#<AdxTL>@(#)0.0.0.0 $Revision$Class Logistical tracking temp. detail
# Supervisor
## CRUD-CLASSE ## TRACKTPLD
# 2018-08-27 12:54:24 149


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TRACKTPLD [TKTD_]

If !SILENCE : Call TRACE("2 --> Local Instance C_TRACKTPLD") From ASYRCOM : Endif
Local Instance TRACKTPLD Using C_TRACKTPLD

If !SILENCE : Call TRACE("3 --> New Instance C_TRACKTPLD") From ASYRCOM : Endif
TRACKTPLD = NewInstance C_TRACKTPLD AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TKTD_]TKTD0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TRACKTPLD") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TRACKTPLD.AREAD([TKTD_]TRKNUM,[TKTD_]TRKLIN))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TRACKTPLD.TRKNUM ="-num$(TRACKTPLD.TRKNUM)) From ASYRCOM
 Call TRACE("TRACKTPLD.TRKLIN ="-num$(TRACKTPLD.TRKLIN)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TRACKTPLD.AKEYS)
  Call TRACE("-"-num$(I)-":"-TRACKTPLD.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TKTD_]
FreeGroup TRACKTPLD
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TRACKTPLD,ACLE,ASTATUS,_ETAG)
Variable Instance TRACKTPLD Using C_TRACKTPLD
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _TRKNUM(20)
Local Integer _TRKLIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_TRKNUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_TRKLIN = val([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File TRACKTPLD [TKTD]
Default File [F:TKTD]
Read [F:TKTD]TKTD0 = [L]_TRKNUM;[L]_TRKLIN
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TKTD]UPDTICK)>0
 [L]_ETAG = num$([F:TKTD]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TRACKTPLD,ACLE,ASTATUS)
Variable Instance TRACKTPLD Using C_TRACKTPLD
Value Char ACLE
Variable Integer ASTATUS
Local Char _TRKNUM(20)
Local Integer _TRKLIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_TRKNUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_TRKLIN = val([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TRACKTPLD.AREAD([L]_TRKNUM,[L]_TRKLIN))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TRACKTPLD,_TRKNUM,_TRKLIN,ASTATUS)
Variable Instance TRACKTPLD Using C_TRACKTPLD
Value Char _TRKNUM
Value Integer _TRKLIN
Variable Integer ASTATUS

If TRACKTPLD = null : End : Endif

Gosub AVARIABLES From WMC00TRACKTPLD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TRACKTPLD.APARENT=null
 [L]A_I = TRACKTPLD.freeSnapshot
 TRACKTPLD.snapshotEnabled = 0
 TRACKTPLD.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & TRACKTPLD.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet TRACKTPLD._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If TRACKTPLD.APARENT=null
 TRACKTPLD.snapshotEnabled = 1
 TRACKTPLD.setAccessorEnabled = 1
Endif
LogicClose File [TKTD]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet TRACKTPLD._ACTION_PARAM("AREAD_BEFORE",[L]_TRKNUM,[L]_TRKLIN))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:TKTD]
Read [F:TKTD]TKTD0 = [L]_TRKNUM;[L]_TRKLIN
If fstat
[L]A_ERROR = [L]_TRKNUM+"~"+num$([L]_TRKLIN)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TRACKTPLD,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:TKTD]AUUID)>0 & [F:TKTD]AUUID=NullUuid
 [F:TKTD]AUUID = getUuid
Endif
SetInstance TRACKTPLD With [F:TKTD]
TRACKTPLD.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet TRACKTPLD.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



