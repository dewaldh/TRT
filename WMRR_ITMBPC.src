#<AdxTL>@(#)0.0.0.0 $Revision$Class Customer product
# Supervisor
## CRUD-CLASSE ## ITMBPC
# 2018-08-27 13:17:28 825


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ITMBPC [ITU_]

If !SILENCE : Call TRACE("2 --> Local Instance R_ITMBPC") From ASYRCOM : Endif
Local Instance ITMBPC Using R_ITMBPC

If !SILENCE : Call TRACE("3 --> New Instance R_ITMBPC") From ASYRCOM : Endif
ITMBPC = NewInstance R_ITMBPC AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ITU_]ITU0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ITMBPC") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ITMBPC.AREAD([ITU_]ITMREF,[ITU_]BPCNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ITMBPC.ITU.ITMREF ="-num$(ITMBPC.ITU.ITMREF)) From ASYRCOM
 Call TRACE("ITMBPC.ITU.BPCNUM ="-num$(ITMBPC.ITU.BPCNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ITMBPC.ITU.AKEYS)
  Call TRACE("-"-num$(I)-":"-ITMBPC.ITU.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ITU_]
FreeGroup ITMBPC
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ITMBPC,ACLE,ASTATUS,_ETAG)
Variable Instance ITMBPC Using R_ITMBPC
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _ITMREF(20)
Local Char _BPCNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMREF = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_BPCNUM = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File ITMBPC [ITU]
Default File [F:ITU]
Read [F:ITU]ITU0 = [L]_ITMREF;[L]_BPCNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ITU]UPDTICK)>0
 [L]_ETAG = num$([F:ITU]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ITMBPC,ACLE,ASTATUS)
Variable Instance ITMBPC Using R_ITMBPC
Value Char ACLE
Variable Integer ASTATUS
Local Char _ITMREF(20)
Local Char _BPCNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMREF = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_BPCNUM = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ITMBPC.AREAD([L]_ITMREF,[L]_BPCNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ITMBPC,_ITMREF,_BPCNUM,ASTATUS)
Variable Instance ITMBPC Using R_ITMBPC
Value Char _ITMREF
Value Char _BPCNUM
Variable Integer ASTATUS

If ITMBPC = null : End : Endif

Gosub AVARIABLES From WMR00ITMBPC
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ITMBPC.APARENT=null
 [L]A_I = ITMBPC.freeSnapshot
 ITMBPC.snapshotEnabled = 0
 ITMBPC.setAccessorEnabled = 0
Endif

If fmet ITMBPC.ACTX.AGETAFCRIGHT(ITMBPC,"GESITU",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:ITU]
Read [F:ITU]ITU0 = [L]_ITMREF;[L]_BPCNUM
If fstat
[L]A_ERROR = [L]_ITMREF+"~"+[L]_BPCNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ITMBPC,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet ITMBPC.ACTX.AGETAFCRIGHTR(ITMBPC,"GESITU",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet ITMBPC.ACTX.ASTACRITROLE(ITMBPC,[L]_ITMREF+"~"+[L]_BPCNUM
& ,"ITU","ITU",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet ITMBPC.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

ITMBPC.ITU.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet ITMBPC.ITU.AREAD([L]_ITMREF,[L]_BPCNUM))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ITMBPC.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ITMBPC.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ITMBPC._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ITMBPC.APARENT=null
 ITMBPC.snapshotEnabled = 1
 ITMBPC.setAccessorEnabled = 1
Endif
LogicClose File [ITU]
End



