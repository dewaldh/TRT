#<AdxTL>@(#)0.0.0.0 $Revision$Class Tax determination table
# Supervisor
## CRUD-CLASSE ## TABVAC
# 2018-08-27 12:52:59 210


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABVAC [TVC_]

If !SILENCE : Call TRACE("2 --> Local Instance C_TABVAC") From ASYRCOM : Endif
Local Instance TABVAC Using C_TABVAC

If !SILENCE : Call TRACE("3 --> New Instance C_TABVAC") From ASYRCOM : Endif
TABVAC = NewInstance C_TABVAC AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TVC_]TVC0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TABVAC") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TABVAC.AREAD([TVC_]COD,[TVC_]LEG))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TABVAC.COD ="-num$(TABVAC.COD)) From ASYRCOM
 Call TRACE("TABVAC.LEG ="-num$(TABVAC.LEG)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TABVAC.AKEYS)
  Call TRACE("-"-num$(I)-":"-TABVAC.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TVC_]
FreeGroup TABVAC
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TABVAC,ACLE,ASTATUS,_ETAG)
Variable Instance TABVAC Using C_TABVAC
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _COD(15)
Local Char _LEG(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File TABVAC [TVC]
Default File [F:TVC]
Read [F:TVC]TVC0 = [L]_COD;[L]_LEG
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TVC]UPDTICK)>0
 [L]_ETAG = num$([F:TVC]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TABVAC,ACLE,ASTATUS)
Variable Instance TABVAC Using C_TABVAC
Value Char ACLE
Variable Integer ASTATUS
Local Char _COD(15)
Local Char _LEG(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TABVAC.AREAD([L]_COD,[L]_LEG))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TABVAC,_COD,_LEG,ASTATUS)
Variable Instance TABVAC Using C_TABVAC
Value Char _COD
Value Char _LEG
Variable Integer ASTATUS

If TABVAC = null : End : Endif

Gosub AVARIABLES From WMC00TABVAC
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TABVAC.APARENT=null
 [L]A_I = TABVAC.freeSnapshot
 TABVAC.snapshotEnabled = 0
 TABVAC.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & TABVAC.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet TABVAC._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If TABVAC.APARENT=null
 TABVAC.snapshotEnabled = 1
 TABVAC.setAccessorEnabled = 1
Endif
LogicClose File [TVC]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet TABVAC._ACTION_PARAM("AREAD_BEFORE",[L]_COD,[L]_LEG))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:TVC]
Read [F:TVC]TVC0 = [L]_COD;[L]_LEG
If fstat
[L]A_ERROR = [L]_COD+"~"+[L]_LEG
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABVAC,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:TVC]AUUID)>0 & [F:TVC]AUUID=NullUuid
 [F:TVC]AUUID = getUuid
Endif
SetInstance TABVAC With [F:TVC]
TABVAC.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To 5
 If ([F:TVC]ANDOR([L]A_I-1)<>0 or [F:TVC]FLD([L]A_I-1)<>"" or [F:TVC]OPE([L]A_I-1)<>0 or [F:TVC]VALS([L]A_I-1)<>""
& or [F:TVC]VALI([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  TABVAC.C_ANDOR(A_NEWCOL) = NewInstance  C_TABVAC_C_ANDOR(TABVAC.ACTX,NullUuid,[L]A_I,TABVAC,"C_ANDOR") AllocGroup TABVAC
  TABVAC.C_ANDOR(A_NEWCOL).ANDOR = [F:TVC]ANDOR([L]A_I-1)
  TABVAC.C_ANDOR(A_NEWCOL).FLD = [F:TVC]FLD([L]A_I-1)
  TABVAC.C_ANDOR(A_NEWCOL).OPE = [F:TVC]OPE([L]A_I-1)
  TABVAC.C_ANDOR(A_NEWCOL).VALS = [F:TVC]VALS([L]A_I-1)
  TABVAC.C_ANDOR(A_NEWCOL).VALI = [F:TVC]VALI([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet TABVAC.C_ANDOR(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet TABVAC.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="TABVAC" & ZONE="DESAXX" & IDENT1=TABVAC.COD & IDENT2=TABVAC.LEG
 Call ASETTEXTRA(TABVAC.AXX,TABVAC.AllocGrp(),"DESAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 TABVAC.AXX(maxtab(TABVAC.AXX)).FLG = 0
Next AXX
If !len(fmet TABVAC.AGETTEXTRA("DESAXX"))
 Call ASETTEXTRA(TABVAC.AXX,TABVAC.AllocGrp(),"DESAXX",
& fmet TABVAC.AGETTEXTRALAN("DESAXX",TABVAC.ACTX.AFOLD.ALANGDEF),
& TABVAC.ACTX.LAN) From ASYRSUB
Endif
For [AXX] Where CODFIC="TABVAC" & ZONE="SHOAXX" & IDENT1=TABVAC.COD & IDENT2=TABVAC.LEG
 Call ASETTEXTRA(TABVAC.AXX,TABVAC.AllocGrp(),"SHOAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 TABVAC.AXX(maxtab(TABVAC.AXX)).FLG = 0
Next AXX
If !len(fmet TABVAC.AGETTEXTRA("SHOAXX"))
 Call ASETTEXTRA(TABVAC.AXX,TABVAC.AllocGrp(),"SHOAXX",
& fmet TABVAC.AGETTEXTRALAN("SHOAXX",TABVAC.ACTX.AFOLD.ALANGDEF),
& TABVAC.ACTX.LAN) From ASYRSUB
Endif

Return



