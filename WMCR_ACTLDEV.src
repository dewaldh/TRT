#<AdxTL>@(#)0.0.0.0 $Revision$Class Reserved brackets
# Supervisor
## CRUD-CLASSE ## ACTLDEV
# 2018-08-27 12:19:29 111


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ACTLDEV [ACD_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ACTLDEV") From ASYRCOM : Endif
Local Instance ACTLDEV Using C_ACTLDEV

If !SILENCE : Call TRACE("3 --> New Instance C_ACTLDEV") From ASYRCOM : Endif
ACTLDEV = NewInstance C_ACTLDEV AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ACD_]ACD0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ACTLDEV") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ACTLDEV.AREAD([ACD_]COD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ACTLDEV.COD ="-num$(ACTLDEV.COD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ACTLDEV.AKEYS)
  Call TRACE("-"-num$(I)-":"-ACTLDEV.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ACD_]
FreeGroup ACTLDEV
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ACTLDEV,ACLE,ASTATUS,_ETAG)
Variable Instance ACTLDEV Using C_ACTLDEV
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _COD(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File ACTLDEV [ACD]
Default File [F:ACD]
Read [F:ACD]ACD0 = [L]_COD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ACD]UPDTICK)>0
 [L]_ETAG = num$([F:ACD]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ACTLDEV,ACLE,ASTATUS)
Variable Instance ACTLDEV Using C_ACTLDEV
Value Char ACLE
Variable Integer ASTATUS
Local Char _COD(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ACTLDEV.AREAD([L]_COD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ACTLDEV,_COD,ASTATUS)
Variable Instance ACTLDEV Using C_ACTLDEV
Value Char _COD
Variable Integer ASTATUS

If ACTLDEV = null : End : Endif

Gosub AVARIABLES From WMC00ACTLDEV
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ACTLDEV.APARENT=null
 [L]A_I = ACTLDEV.freeSnapshot
 ACTLDEV.snapshotEnabled = 0
 ACTLDEV.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ACTLDEV.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ACTLDEV._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ACTLDEV.APARENT=null
 ACTLDEV.snapshotEnabled = 1
 ACTLDEV.setAccessorEnabled = 1
Endif
LogicClose File [ACD]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet ACTLDEV._ACTION_PARAM("AREAD_BEFORE",[L]_COD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:ACD]
Read [F:ACD]ACD0 = [L]_COD
If fstat
[L]A_ERROR = [L]_COD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ACTLDEV,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:ACD]AUUID)>0 & [F:ACD]AUUID=NullUuid
 [F:ACD]AUUID = getUuid
Endif
SetInstance ACTLDEV With [F:ACD]
ACTLDEV.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To dim([F:ACD]TYP)
 If ([F:ACD]TYP([L]A_I-1)<>0 or [F:ACD]RAN([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  ACTLDEV.COLACD(A_NEWCOL) = NewInstance  C_ACTLDEV_COLACD(ACTLDEV.ACTX,NullUuid,[L]A_I,ACTLDEV,"COLACD") AllocGroup ACTLDEV
  ACTLDEV.COLACD(A_NEWCOL).TYP = [F:ACD]TYP([L]A_I-1)
  ACTLDEV.COLACD(A_NEWCOL).RAN = [F:ACD]RAN([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet ACTLDEV.COLACD(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
  For [AXX] Where CODFIC="ACTLDEV" & ZONE="INTRAN" & IDENT1=ACTLDEV.COLACD(A_NEWCOL).APARENT.COD & IDENT2=num$(ACTLDEV.COLACD(A_NEWCOL).INTRANIDX)
   Call ASETTEXTRA(ACTLDEV.COLACD(A_NEWCOL).AXX,ACTLDEV.COLACD(A_NEWCOL).AllocGrp(),"INTRAN",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
   ACTLDEV.COLACD(A_NEWCOL).AXX(maxtab(ACTLDEV.COLACD(A_NEWCOL).AXX)).FLG = 0
  Next AXX
  If !len(fmet ACTLDEV.COLACD(A_NEWCOL).AGETTEXTRA("INTRAN"))
   Call ASETTEXTRA(ACTLDEV.COLACD(A_NEWCOL).AXX,ACTLDEV.COLACD(A_NEWCOL).AllocGrp(),"INTRAN",
& fmet ACTLDEV.COLACD(A_NEWCOL).AGETTEXTRALAN("INTRAN",ACTLDEV.COLACD(A_NEWCOL).ACTX.AFOLD.ALANGDEF),
& ACTLDEV.COLACD(A_NEWCOL).ACTX.LAN) From ASYRSUB
  Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet ACTLDEV.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="ACTLDEV" & ZONE="INTCOD" & IDENT1=ACTLDEV.COD & IDENT2=AVOID.ACHAR
 Call ASETTEXTRA(ACTLDEV.AXX,ACTLDEV.AllocGrp(),"INTCOD",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 ACTLDEV.AXX(maxtab(ACTLDEV.AXX)).FLG = 0
Next AXX
If !len(fmet ACTLDEV.AGETTEXTRA("INTCOD"))
 Call ASETTEXTRA(ACTLDEV.AXX,ACTLDEV.AllocGrp(),"INTCOD",
& fmet ACTLDEV.AGETTEXTRALAN("INTCOD",ACTLDEV.ACTX.AFOLD.ALANGDEF),
& ACTLDEV.ACTX.LAN) From ASYRSUB
Endif

Return



