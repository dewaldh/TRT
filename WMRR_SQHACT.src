#<AdxTL>@(#)0.0.0.0 $Revision$Class Active quotes
# Supervisor
## CRUD-CLASSE ## SQHACT
# 2018-08-27 13:33:16 815


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File SQUOTE [SQH_]

If !SILENCE : Call TRACE("2 --> Local Instance R_SQHACT") From ASYRCOM : Endif
Local Instance SQHACT Using R_SQHACT

If !SILENCE : Call TRACE("3 --> New Instance R_SQHACT") From ASYRCOM : Endif
SQHACT = NewInstance R_SQHACT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [SQH_]SQH0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of SQUOTE") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet SQHACT.AREAD([SQH_]SQHNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("SQHACT.SQH.SQHNUM ="-num$(SQHACT.SQH.SQHNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(SQHACT.SQH.AKEYS)
  Call TRACE("-"-num$(I)-":"-SQHACT.SQH.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [SQH_]
FreeGroup SQHACT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(SQHACT,ACLE,ASTATUS,_ETAG)
Variable Instance SQHACT Using R_SQHACT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _SQHNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SQHNUM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File SQUOTE [SQH]
Default File [F:SQH]
Read [F:SQH]SQH0 = [L]_SQHNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:SQH]UPDTICK)>0
 [L]_ETAG = num$([F:SQH]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(SQHACT,ACLE,ASTATUS)
Variable Instance SQHACT Using R_SQHACT
Value Char ACLE
Variable Integer ASTATUS
Local Char _SQHNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SQHNUM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SQHACT.AREAD([L]_SQHNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(SQHACT,_SQHNUM,ASTATUS)
Variable Instance SQHACT Using R_SQHACT
Value Char _SQHNUM
Variable Integer ASTATUS

If SQHACT = null : End : Endif

Gosub AVARIABLES From WMR00SQHACT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If SQHACT.APARENT=null
 [L]A_I = SQHACT.freeSnapshot
 SQHACT.snapshotEnabled = 0
 SQHACT.setAccessorEnabled = 0
Endif

If fmet SQHACT.ACTX.AGETAFCRIGHT(SQHACT,"GESSQH",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:SQH]
Read [F:SQH]SQH0 = [L]_SQHNUM
If fstat
[L]A_ERROR = [L]_SQHNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(SQHACT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:SQH]SALFCY
[L]A_STRACC = ""
If fmet SQHACT.ACTX.AGETAFCRIGHTR(SQHACT,"GESSQH",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet SQHACT.ACTX.ASTACRITROLE(SQHACT,[L]_SQHNUM
& ,"SQH","SQH",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet SQHACT.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

SQHACT.SQH.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet SQHACT.SQH.AREAD([L]_SQHNUM))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet SQHACT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & SQHACT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet SQHACT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If SQHACT.APARENT=null
 SQHACT.snapshotEnabled = 1
 SQHACT.setAccessorEnabled = 1
Endif
LogicClose File [SQH] ,[SQD] ,[SVV] ,[SVF] ,[CALSQD] ,[CALSVF]
End



