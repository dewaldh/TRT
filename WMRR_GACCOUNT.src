#<AdxTL>@(#)0.0.0.0 $Revision$Class Accounts
# Supervisor
## CRUD-CLASSE ## GACCOUNT
# 2018-08-27 13:16:29 020


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File GACCOUNT [GAC_]

If !SILENCE : Call TRACE("2 --> Local Instance R_GACCOUNT") From ASYRCOM : Endif
Local Instance GACCOUNT Using R_GACCOUNT

If !SILENCE : Call TRACE("3 --> New Instance R_GACCOUNT") From ASYRCOM : Endif
GACCOUNT = NewInstance R_GACCOUNT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [GAC_]GAC0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of GACCOUNT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet GACCOUNT.AREAD([GAC_]COA,[GAC_]ACC))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("GACCOUNT.GAC.COA ="-num$(GACCOUNT.GAC.COA)) From ASYRCOM
 Call TRACE("GACCOUNT.GAC.ACC ="-num$(GACCOUNT.GAC.ACC)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(GACCOUNT.GAC.AKEYS)
  Call TRACE("-"-num$(I)-":"-GACCOUNT.GAC.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [GAC_]
FreeGroup GACCOUNT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(GACCOUNT,ACLE,ASTATUS,_ETAG)
Variable Instance GACCOUNT Using R_GACCOUNT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _COA(3)
Local Char _ACC(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COA = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_ACC = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File GACCOUNT [GAC]
Default File [F:GAC]
Read [F:GAC]GAC0 = [L]_COA;[L]_ACC
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:GAC]UPDTICK)>0
 [L]_ETAG = num$([F:GAC]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(GACCOUNT,ACLE,ASTATUS)
Variable Instance GACCOUNT Using R_GACCOUNT
Value Char ACLE
Variable Integer ASTATUS
Local Char _COA(3)
Local Char _ACC(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COA = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_ACC = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet GACCOUNT.AREAD([L]_COA,[L]_ACC))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(GACCOUNT,_COA,_ACC,ASTATUS)
Variable Instance GACCOUNT Using R_GACCOUNT
Value Char _COA
Value Char _ACC
Variable Integer ASTATUS

If GACCOUNT = null : End : Endif

Gosub AVARIABLES From WMR00GACCOUNT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If GACCOUNT.APARENT=null
 [L]A_I = GACCOUNT.freeSnapshot
 GACCOUNT.snapshotEnabled = 0
 GACCOUNT.setAccessorEnabled = 0
Endif

If fmet GACCOUNT.ACTX.AGETAFCRIGHT(GACCOUNT,"GESGAC",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:GAC]
Read [F:GAC]GAC0 = [L]_COA;[L]_ACC
If fstat
[L]A_ERROR = [L]_COA+"~"+[L]_ACC
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(GACCOUNT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = [F:GAC]ACS
If fmet GACCOUNT.ACTX.AGETAFCRIGHTR(GACCOUNT,"GESGAC",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet GACCOUNT.ACTX.AGETACSRIGHTC(GACCOUNT,[L]A_STRACC,[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR
 Goto AREAD_END
  Endif
If fmet GACCOUNT.ACTX.ASTACRITROLE(GACCOUNT,[L]_COA+"~"+[L]_ACC
& ,"GAC","GAC",[V]CST_ATRUE)>=[V]CST_AERROR
   [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
  Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet GACCOUNT.ACTION("AREAD_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  GACCOUNT.GAC.setAccessorEnabled = 0
  [L]ASTATUS = max([L]ASTATUS,fmet GACCOUNT.GAC.AREAD([L]_COA,[L]_ACC))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet GACCOUNT.ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  If [L]ASTATUS<[V]CST_AERROR & GACCOUNT.APARENT=null
   # Load Link
   [L]ASTATUS = max([L]ASTATUS,fmet GACCOUNT._ALNKPRO)
   If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  Endif
  
  $AREAD_END
  If GACCOUNT.APARENT=null
   GACCOUNT.snapshotEnabled = 1
   GACCOUNT.setAccessorEnabled = 1
  Endif
  LogicClose File [GAC]
  End
  


