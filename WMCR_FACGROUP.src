#<AdxTL>@(#)0.0.0.0 $Revision$Class Site grouping
# Supervisor
## CRUD-CLASSE ## FACGROUP
# 2018-08-27 12:31:19 547


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File FACGROUP [FGR_]

If !SILENCE : Call TRACE("2 --> Local Instance C_FACGROUP") From ASYRCOM : Endif
Local Instance FACGROUP Using C_FACGROUP

If !SILENCE : Call TRACE("3 --> New Instance C_FACGROUP") From ASYRCOM : Endif
FACGROUP = NewInstance C_FACGROUP AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [FGR_]FGR0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of FACGROUP") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet FACGROUP.AREAD([FGR_]CPY,[FGR_]FCY))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("FACGROUP.CPY ="-num$(FACGROUP.CPY)) From ASYRCOM
 Call TRACE("FACGROUP.FCY ="-num$(FACGROUP.FCY)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(FACGROUP.AKEYS)
  Call TRACE("-"-num$(I)-":"-FACGROUP.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [FGR_]
FreeGroup FACGROUP
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(FACGROUP,ACLE,ASTATUS,_ETAG)
Variable Instance FACGROUP Using C_FACGROUP
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CPY(5)
Local Char _FCY(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CPY = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_FCY = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File FACGROUP [FGR]
Default File [F:FGR]
Read [F:FGR]FGR0 = [L]_CPY;[L]_FCY
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:FGR]UPDTICK)>0
 [L]_ETAG = num$([F:FGR]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(FACGROUP,ACLE,ASTATUS)
Variable Instance FACGROUP Using C_FACGROUP
Value Char ACLE
Variable Integer ASTATUS
Local Char _CPY(5)
Local Char _FCY(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CPY = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_FCY = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet FACGROUP.AREAD([L]_CPY,[L]_FCY))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(FACGROUP,_CPY,_FCY,ASTATUS)
Variable Instance FACGROUP Using C_FACGROUP
Value Char _CPY
Value Char _FCY
Variable Integer ASTATUS

If FACGROUP = null : End : Endif

Gosub AVARIABLES From WMC00FACGROUP
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If FACGROUP.APARENT=null
 [L]A_I = FACGROUP.freeSnapshot
 FACGROUP.snapshotEnabled = 0
 FACGROUP.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & FACGROUP.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet FACGROUP._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If FACGROUP.APARENT=null
 FACGROUP.snapshotEnabled = 1
 FACGROUP.setAccessorEnabled = 1
Endif
LogicClose File [FGR]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet FACGROUP._ACTION_PARAM("AREAD_BEFORE",[L]_CPY,[L]_FCY))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:FGR]
Read [F:FGR]FGR0 = [L]_CPY;[L]_FCY
If fstat
[L]A_ERROR = [L]_CPY+"~"+[L]_FCY
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(FACGROUP,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:FGR]AUUID)>0 & [F:FGR]AUUID=NullUuid
 [F:FGR]AUUID = getUuid
Endif
SetInstance FACGROUP With [F:FGR]
FACGROUP.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet FACGROUP.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



