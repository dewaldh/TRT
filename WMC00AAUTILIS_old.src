#<AdxTL>@(#)0.0.0.0 $Revision$Class Users
# Sage X3 supervisor
## CRUD-CLASSE ## AAUTILIS
# 2018-06-20 06:29:51 733

Gosub TEST From WMCR_AAUTILIS : End

############################################################################################
## C : Subprog AINSERT(INSTANCE)
## D : Subprog ADELETE(INSTANCE)
## R : Subprog AREAD(INSTANCE,USR)
## U : Subprog AUPDATE(INSTANCE)
############################################################################################
# AAUTILIS : AUTILIS
# BPADDRESS : AUTILIS BPADDRESS
# BID : AUTILIS BID
############################################################################################

############################################################################################
### AVARIABLES
############################################################################################
$AVARIABLES
[L]ASTATUS =max([L]ASTATUS,fmet AAUTILIS._ADELERRORS([V]CST_ALLERRORS))
$_AVARIABLES
Local    Integer     A_LEVEL,A_I,A_NEWCOL,A_N1,A_N2,A_S2,A_N3,A_S3
Local    Integer    ASTATUS,A_RETIK,A_TYPMAJ,A_ASTALIN
Local    Char        A_STRSITE(GLONFCY),A_STRACC(GLONACS),CURPRO(50),A_PARENT(50),A_PATH(200),A_ABR(GLONABR),A_ERROR(250)
Local    Uuident    A_UUID

[L]A_LEVEL    = AAUTILIS.ACTX.LEVWML
[L]ASTATUS  = 0

Onerrgo ERR_OPENTAB
If find(AAUTILIS.ACTX.AFOLDER,nomap,"")>0
 Local File AUTILIS [AUS]
 Local File BPADDRESS [BPA]
 Local File BID [BID]
 Local File ATEXTRA [AXX]
Else
 Local File =AAUTILIS.ACTX.AFOLDER+".AUTILIS" [AUS]
 Local File =AAUTILIS.ACTX.AFOLDER+".BPADDRESS" [BPA]
 Local File =AAUTILIS.ACTX.AFOLDER+".BID" [BID]
 Local File =AAUTILIS.ACTX.AFOLDER+".ATEXTRA" [AXX]
Endif
Onerrgo
Return

$ERR_OPENTAB
[L]ASTATUS = max([L]ASTATUS,fmet AAUTILIS.ASETERROR("",errp+"("+num$(errl)+")"-mess(6,123,1)-num$(errn)-errmes$(errn)-errm,[V]CST_AERROR))
Resume

############################################################################################
### Link
############################################################################################
$AOPEN_LINK
Gosub AVARIABLES
Link [AUS] With
& [BPA]BPA0 = 4;[F:AUS]USR;[F:AUS]BPAADD,
& [BID]BID0 = 4;[F:AUS]USR;[F:AUS]BPAADD
& As [LNK_]
Return

############################################################################################
### AUTILIS(WAUS)
############################################################################################
Funprog  _MAJSQL_AUTILIS(WAUS)
Variable Instance WAUS Using C_AAUTILIS
Local Integer ASTATUS,A_I,A_J
Default File [F:AUS]
If WAUS.ASTALIN=[V]CST_ANEW
 Call INICRE(WAUS) From ASYRSUB
 SetInstance [F:AUS] With WAUS
 For J=1 To maxtab(WAUS.AXX)
  If WAUS.AXX(J)<>null & WAUS.AXX(J).PRO= "INTUSR" & WAUS.AXX(J).FLG>0
   Call MAJTEXTRALAN(WAUS,WAUS.AXX(J).TEX,"AUTILIS","INTUSR",WAUS.AXX(J).LAN,WAUS.USR,"",[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 Write [F:AUS]
 If fstat
  Call FSTA("AUS",WAUS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WAUS.updTick = [F:AUS]updTick
Elsif WAUS.ASTALIN=[V]CST_ALL or WAUS.ASTALIN=[V]CST_AUPD
 Call INIUPD(WAUS) From ASYRSUB
 SetInstance [F:AUS] With WAUS
 For J=1 To maxtab(WAUS.AXX)
  If WAUS.AXX(J)<>null & WAUS.AXX(J).PRO= "INTUSR" & WAUS.AXX(J).FLG>0
   Call MAJTEXTRALAN(WAUS,WAUS.AXX(J).TEX,"AUTILIS","INTUSR",WAUS.AXX(J).LAN,WAUS.USR,"",[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WAUS,"AUTILIS")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:AUS]CODUSR = [F:AUS]USR
 If fstat
  Call FSTA("AUS",WAUS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WAUS.updTick = [F:AUS]updTick
Elsif WAUS.ASTALIN=[V]CST_ADEL
 SetInstance [F:AUS] With WAUS
 For J=1 To maxtab(WAUS.AXX)
  If WAUS.AXX(J)<>null & WAUS.AXX(J).PRO= "INTUSR"
   Call SUPTEXTRA(WAUS,WAUS.AXX(J).TEX,"AUTILIS","INTUSR",WAUS.AXX(J).LAN,WAUS.USR,"",[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WAUS,"AUTILIS")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:AUS]CODUSR = [F:AUS]USR
 If fstat
  Call FSTA("AUS",WAUS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### BPADDRESS(WBPA)
############################################################################################
Funprog  _MAJSQL_BPADDRESS(WBPA)
Variable Instance WBPA Using C_BPADDRESS
Local Integer ASTATUS,A_I,A_J
Default File [F:BPA]
If WBPA.ASTALIN=[V]CST_ANEW
 Call INICRE(WBPA) From ASYRSUB
 SetInstance [F:BPA] With WBPA
 For [L]A_J=1 to 5
  For [L]A_I=1 To maxtab(WBPA.COLTEL)
   If WBPA.COLTEL([L]A_I)<>null & !find(WBPA.COLTEL([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WBPA.COLTEL([L]A_I).AORDER=[L]A_J
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 5
  For [L]A_I=1 To maxtab(WBPA.COLWEB)
   If WBPA.COLWEB([L]A_I)<>null & !find(WBPA.COLWEB([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WBPA.COLWEB([L]A_I).AORDER=[L]A_J
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 Write [F:BPA]
 If fstat
  Call FSTA("BPA",WBPA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WBPA.updTick = [F:BPA]updTick
Elsif WBPA.ASTALIN=[V]CST_ALL or WBPA.ASTALIN=[V]CST_AUPD
 Call INIUPD(WBPA) From ASYRSUB
 SetInstance [F:BPA] With WBPA
 For [L]A_J=1 to 5
  For [L]A_I=1 To maxtab(WBPA.COLTEL)
   If WBPA.COLTEL([L]A_I)<>null & !find(WBPA.COLTEL([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WBPA.COLTEL([L]A_I).AORDER=[L]A_J
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 5
  For [L]A_I=1 To maxtab(WBPA.COLWEB)
   If WBPA.COLWEB([L]A_I)<>null & !find(WBPA.COLWEB([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WBPA.COLWEB([L]A_I).AORDER=[L]A_J
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WBPA,"BPADDRESS")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:BPA]BPA0 = [F:BPA]BPATYP;[F:BPA]BPANUM;[F:BPA]BPAADD
 If fstat
  Call FSTA("BPA",WBPA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WBPA.updTick = [F:BPA]updTick
Elsif WBPA.ASTALIN=[V]CST_ADEL
 SetInstance [F:BPA] With WBPA
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WBPA,"BPADDRESS")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:BPA]BPA0 = [F:BPA]BPATYP;[F:BPA]BPANUM;[F:BPA]BPAADD
 If fstat
  Call FSTA("BPA",WBPA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### BID(WBID)
############################################################################################
Funprog  _MAJSQL_BID(WBID)
Variable Instance WBID Using C_BID
Local Integer ASTATUS,A_I,A_J
Default File [F:BID]
If WBID.ASTALIN=[V]CST_ANEW
 Call INICRE(WBID) From ASYRSUB
 SetInstance [F:BID] With WBID
 Write [F:BID]
 If fstat
  Call FSTA("BID",WBID,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WBID.updTick = [F:BID]updTick
Elsif WBID.ASTALIN=[V]CST_ALL or WBID.ASTALIN=[V]CST_AUPD
 Call INIUPD(WBID) From ASYRSUB
 SetInstance [F:BID] With WBID
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WBID,"BID")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:BID]BID0 = [F:BID]BPATYP;[F:BID]BPANUM;[F:BID]BIDNUM;[F:BID]BPAADD
 If fstat
  Call FSTA("BID",WBID,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WBID.updTick = [F:BID]updTick
Elsif WBID.ASTALIN=[V]CST_ADEL
 SetInstance [F:BID] With WBID
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WBID,"BID")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:BID]BID0 = [F:BID]BPATYP;[F:BID]BPANUM;[F:BID]BIDNUM;[F:BID]BPAADD
 If fstat
  Call FSTA("BID",WBID,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

Funprog  _MAJSQL_AAUTILIS_AUSPIC(WAUS,AUSPIC)
Variable Instance WAUS Using C_AAUTILIS
Value Blbfile AUSPIC
Local Blbfile WEMPTY
Local Char WCNT(100),WATYP(GLONATYP)
Local Integer ASTATUS
Local File ABLOB [F:ABB]
If WAUS.ASTALIN=[V]CST_ANEW & [L]WEMPTY<>[L]AUSPIC
 Raz [ABB]
 Call INICRE(WAUS) From ASYRSUB
 [F:ABB]CODBLB = "AUSPIC"
 [F:ABB]IDENT1 = WAUS.USR
 [F:ABB]IDENT2 = ""
 [F:ABB]IDENT3 = ""
 [F:ABB]BLOB = [L]AUSPIC
 [L]WATYP = 'ATYPE9-1'
 [L]WCNT = 'image'
 [F:ABB]CNTTYP = [L]WATYP
 [F:ABB]TYPBLB = func ASYRLOB.F_CNTTYP_TO_AML7806([L]WCNT)
 Write [F:ABB]
 If fstat
  Call FSTA("AUS",WAUS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Elsif WAUS.ASTALIN=[V]CST_ADEL
 Read [F:ABB]ABB0 ="AUSPIC";WAUS.USR;"";""
 If !fstat
  Delete [F:ABB]
  If fstat
   Call FSTA("AUS",WAUS,[L]ASTATUS) From ASYRSUB
   End [L]ASTATUS
  Endif
 Endif
Elsif WAUS.ASTALIN=[V]CST_ALL or WAUS.ASTALIN=[V]CST_AUPD
 If fmet WAUS.AGETATTRIBUTE("AUSPIC","$isLoaded")="true"
  Read [F:ABB]ABB0 ="AUSPIC";WAUS.USR;"";""
  If !fstat & [L]WEMPTY<>[L]AUSPIC
   Call INIUPD(WAUS) From ASYRSUB
   [F:ABB]BLOB = [L]AUSPIC
   [L]WATYP = 'ATYPE9-1'
   [L]WCNT = 'image'
   [F:ABB]CNTTYP = [L]WATYP
   [F:ABB]TYPBLB = func ASYRLOB.F_CNTTYP_TO_AML7806([L]WCNT)
   Rewrite [F:ABB]
   If fstat
    Call FSTA("AUS",WAUS,[L]ASTATUS) From ASYRSUB
    End [L]ASTATUS
   Endif
  Elsif !fstat & [L]WEMPTY=[L]AUSPIC
   Delete [F:ABB]
   If fstat
    Call FSTA("AUS",WAUS,[L]ASTATUS) From ASYRSUB
    End [L]ASTATUS
   Endif
  Elsif fstat & [L]WEMPTY<>[L]AUSPIC
   Raz [ABB]
   Call INICRE(WAUS) From ASYRSUB
   [ABB]CODBLB = "AUSPIC"
   [ABB]IDENT1 = WAUS.USR
   [ABB]IDENT2 = ""
   [ABB]IDENT3 = ""
   [F:ABB]BLOB = [L]AUSPIC
   [L]WATYP = 'ATYPE9-1'
   [L]WCNT = 'image'
   [F:ABB]CNTTYP = [L]WATYP
   [F:ABB]TYPBLB = func ASYRLOB.F_CNTTYP_TO_AML7806([L]WCNT)
   Write [F:ABB]
   If fstat
    Call FSTA("AUS",WAUS,[L]ASTATUS) From ASYRSUB
    End [L]ASTATUS
   Endif
  Endif
 Endif : #isLoaded
Endif : #[V]CST_AUPD 
Close Local File [F:ABB]
End 0



