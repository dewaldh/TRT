#<AdxTL>@(#)0.0.0.0 $Revision$Class Postal codes - Mobile
# Supervisor
## CRUD-CLASSE ## POSCODM
# 2018-08-27 13:25:09 868


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File POSCOD [POS_]

If !SILENCE : Call TRACE("2 --> Local Instance R_POSCODM") From ASYRCOM : Endif
Local Instance POSCODM Using R_POSCODM

If !SILENCE : Call TRACE("3 --> New Instance R_POSCODM") From ASYRCOM : Endif
POSCODM = NewInstance R_POSCODM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [POS_]POS0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of POSCOD") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet POSCODM.AREAD([POS_]CRY,[POS_]POSCOD,[POS_]POSCTY,[POS_]POSCTYCOD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("POSCODM.POS.CRY ="-num$(POSCODM.POS.CRY)) From ASYRCOM
 Call TRACE("POSCODM.POS.POSCOD ="-num$(POSCODM.POS.POSCOD)) From ASYRCOM
 Call TRACE("POSCODM.POS.POSCTY ="-num$(POSCODM.POS.POSCTY)) From ASYRCOM
 Call TRACE("POSCODM.POS.POSCTYCOD ="-num$(POSCODM.POS.POSCTYCOD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(POSCODM.POS.AKEYS)
  Call TRACE("-"-num$(I)-":"-POSCODM.POS.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [POS_]
FreeGroup POSCODM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(POSCODM,ACLE,ASTATUS,_ETAG)
Variable Instance POSCODM Using R_POSCODM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CRY(3)
Local Char _POSCOD(10)
Local Char _POSCTY(40)
Local Char _POSCTYCOD(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CRY = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_POSCOD = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_POSCTY = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_POSCTYCOD = num$([L]CLE(4)) : Endif
Raz [L]_ETAG
Local File POSCOD [POS]
Default File [F:POS]
Read [F:POS]POS0 = [L]_CRY;[L]_POSCOD;[L]_POSCTY;[L]_POSCTYCOD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:POS]UPDTICK)>0
 [L]_ETAG = num$([F:POS]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(POSCODM,ACLE,ASTATUS)
Variable Instance POSCODM Using R_POSCODM
Value Char ACLE
Variable Integer ASTATUS
Local Char _CRY(3)
Local Char _POSCOD(10)
Local Char _POSCTY(40)
Local Char _POSCTYCOD(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CRY = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_POSCOD = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_POSCTY = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_POSCTYCOD = num$([L]CLE(4)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet POSCODM.AREAD([L]_CRY,[L]_POSCOD,[L]_POSCTY,[L]_POSCTYCOD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(POSCODM,_CRY,_POSCOD,_POSCTY,_POSCTYCOD,ASTATUS)
Variable Instance POSCODM Using R_POSCODM
Value Char _CRY
Value Char _POSCOD
Value Char _POSCTY
Value Char _POSCTYCOD
Variable Integer ASTATUS

If POSCODM = null : End : Endif

Gosub AVARIABLES From WMR00POSCODM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If POSCODM.APARENT=null
 [L]A_I = POSCODM.freeSnapshot
 POSCODM.snapshotEnabled = 0
 POSCODM.setAccessorEnabled = 0
Endif

If fmet POSCODM.ACTX.AGETAFCRIGHT(POSCODM,"GESPOS",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:POS]
Read [F:POS]POS0 = [L]_CRY;[L]_POSCOD;[L]_POSCTY;[L]_POSCTYCOD
If fstat
[L]A_ERROR = [L]_CRY+"~"+[L]_POSCOD+"~"+[L]_POSCTY+"~"+[L]_POSCTYCOD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(POSCODM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet POSCODM.ACTX.AGETAFCRIGHTR(POSCODM,"GESPOS",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet POSCODM.ACTX.ASTACRITROLE(POSCODM,[L]_CRY+"~"+[L]_POSCOD+"~"+[L]_POSCTY+"~"+[L]_POSCTYCOD
& ,"POS","POS",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet POSCODM.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

POSCODM.POS.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet POSCODM.POS.AREAD([L]_CRY,[L]_POSCOD,[L]_POSCTY,[L]_POSCTYCOD))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet POSCODM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & POSCODM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet POSCODM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If POSCODM.APARENT=null
 POSCODM.snapshotEnabled = 1
 POSCODM.setAccessorEnabled = 1
Endif
LogicClose File [POS]
End



