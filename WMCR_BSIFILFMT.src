#<AdxTL>@(#)0.0.0.0 $Revision$Class Bank import format definition
# Supervisor
## CRUD-CLASSE ## BSIFILFMT
# 2018-08-27 12:26:48 131


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File BSIFILFMT [BSIFFM_]

If !SILENCE : Call TRACE("2 --> Local Instance C_BSIFILFMT") From ASYRCOM : Endif
Local Instance BSIFILFMT Using C_BSIFILFMT

If !SILENCE : Call TRACE("3 --> New Instance C_BSIFILFMT") From ASYRCOM : Endif
BSIFILFMT = NewInstance C_BSIFILFMT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [BSIFFM_]BSIFFM0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of BSIFILFMT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet BSIFILFMT.AREAD([BSIFFM_]CODBFF))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("BSIFILFMT.CODBFF ="-num$(BSIFILFMT.CODBFF)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(BSIFILFMT.AKEYS)
  Call TRACE("-"-num$(I)-":"-BSIFILFMT.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [BSIFFM_]
FreeGroup BSIFILFMT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(BSIFILFMT,ACLE,ASTATUS,_ETAG)
Variable Instance BSIFILFMT Using C_BSIFILFMT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CODBFF(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODBFF = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File BSIFILFMT [BSIFFM]
Default File [F:BSIFFM]
Read [F:BSIFFM]BSIFFM0 = [L]_CODBFF
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:BSIFFM]UPDTICK)>0
 [L]_ETAG = num$([F:BSIFFM]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(BSIFILFMT,ACLE,ASTATUS)
Variable Instance BSIFILFMT Using C_BSIFILFMT
Value Char ACLE
Variable Integer ASTATUS
Local Char _CODBFF(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODBFF = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet BSIFILFMT.AREAD([L]_CODBFF))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(BSIFILFMT,_CODBFF,ASTATUS)
Variable Instance BSIFILFMT Using C_BSIFILFMT
Value Char _CODBFF
Variable Integer ASTATUS

If BSIFILFMT = null : End : Endif

Gosub AVARIABLES From WMC00BSIFILFMT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If BSIFILFMT.APARENT=null
 [L]A_I = BSIFILFMT.freeSnapshot
 BSIFILFMT.snapshotEnabled = 0
 BSIFILFMT.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & BSIFILFMT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet BSIFILFMT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If BSIFILFMT.APARENT=null
 BSIFILFMT.snapshotEnabled = 1
 BSIFILFMT.setAccessorEnabled = 1
Endif
LogicClose File [BSIFFM] ,[BSIFFD]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet BSIFILFMT._ACTION_PARAM("AREAD_BEFORE",[L]_CODBFF))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:BSIFFM]
Read [F:BSIFFM]BSIFFM0 = [L]_CODBFF
If fstat
[L]A_ERROR = [L]_CODBFF
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(BSIFILFMT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:BSIFFM]AUUID)>0 & [F:BSIFFM]AUUID=NullUuid
 [F:BSIFFM]AUUID = getUuid
Endif
SetInstance BSIFILFMT With [F:BSIFFM]
BSIFILFMT.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:BSIFFD]
 [L]A_N2=0
 For [F:BSIFFD]BSIFFD0 Where CODBFF=[BSIFFM]CODBFF
  [L]A_N2 +=1
  BSIFILFMT.LINES(A_N2) = NewInstance  C_BSIFILFMTD(BSIFILFMT.ACTX,NullUuid,[L]A_N2,BSIFILFMT,"LINES") AllocGroup BSIFILFMT
  [L]ASTATUS = max([L]ASTATUS,fmet BSIFILFMT.LINES(A_N2).ADDINSTANCE_BOUND)
  If dim([F:BSIFFD]AUUID)>0 & [F:BSIFFD]AUUID=NullUuid
   [F:BSIFFD]AUUID = getUuid
  Endif
  SetInstance BSIFILFMT.LINES(A_N2) With [F:BSIFFD]
  [L]ASTATUS = max([L]ASTATUS,fmet BSIFILFMT.LINES(A_N2).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  BSIFILFMT.LINES(A_N2).ASTALIN = [V]CST_ALL
  [L]ASTATUS = max([L]ASTATUS,fmet BSIFILFMT.LINES(A_N2).ASETATTRIBUTE("CODBFF","$namProParent","CODBFF"))
 Next BSIFFD
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
#-----------------------------------------------------#

[L]ASTATUS = max([L]ASTATUS,fmet BSIFILFMT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="BSIFILFMT" & ZONE="DESAXX" & IDENT1=BSIFILFMT.CODBFF & IDENT2=""
 Call ASETTEXTRA(BSIFILFMT.AXX,BSIFILFMT.AllocGrp(),"DESAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 BSIFILFMT.AXX(maxtab(BSIFILFMT.AXX)).FLG = 0
Next AXX
If !len(fmet BSIFILFMT.AGETTEXTRA("DESAXX"))
 Call ASETTEXTRA(BSIFILFMT.AXX,BSIFILFMT.AllocGrp(),"DESAXX",
& fmet BSIFILFMT.AGETTEXTRALAN("DESAXX",BSIFILFMT.ACTX.AFOLD.ALANGDEF),
& BSIFILFMT.ACTX.LAN) From ASYRSUB
Endif

Return



