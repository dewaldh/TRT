#<AdxTL>@(#)0.0.0.0 $Revision$Class GST reporting periods
# Supervisor
## CRUD-CLASSE ## GSTPER
# 2018-08-27 12:33:40 360


############################################################################################
### Subprog _AUPDATE
############################################################################################
Subprog _AUPDATE(GSTPER,ASTATUS)
Variable Instance GSTPER Using C_GSTPER
Variable Integer ASTATUS

If GSTPER = null : End : Endif

Gosub _AVARIABLES From WMC00GSTPER

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AUPDATE_GSTPER

End

#-----------------------------------------------------#

############################################################################################
### Subprog AUPDATE
############################################################################################
Subprog AUPDATE(GSTPER,ASTATUS)
Variable Instance GSTPER Using C_GSTPER
Variable Integer ASTATUS

If GSTPER = null : End : Endif

Gosub AVARIABLES From WMC00GSTPER
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = ""
GSTPER.ASTALIN = [V]CST_AUPD
Gosub AUPDATE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If !adxlog
 Gosub AUPDATE_TR_GSTPER
Else
 Gosub AUPDATE_GSTPER
Endif
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

Gosub _AUPDATE_AFTER
[L]A_I = GSTPER.freeSnapshot
GSTPER.snapshotEnabled = 1
$AUPDATE_END
End


$AUPDATE_CONTROL
Gosub _AUPDATE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet GSTPER._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet GSTPER._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet GSTPER._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AUPDATE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_BEFORE
If GSTPER.ASTALIN = [V]CST_ANEWDEL : Return : Endif
GSTPER.ASTALIN = [V]CST_AUPD
If [V]CST_ASTALIN(GSTPER.ASTALIN)<>""
 [L]A_ASTALIN = GSTPER.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
For A_N2=1 To maxtab(GSTPER.LINES) : # GSTPERD -- 2
 If GSTPER.LINES(A_N2) <> null
& and GSTPER.LINES(A_N2).ASTALIN<>[V]CST_ANEWDEL
  If GSTPER.LINES(A_N2).ASTALIN<>[V]CST_ANEW & GSTPER.ASTALIN=[V]CST_ADEL
   GSTPER.LINES(A_N2).ASTALIN = [V]CST_ADEL
  Endif
  If GSTPER.LINES(A_N2).ASTALIN=[V]CST_ANEW & find(GSTPER.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL)>0
   GSTPER.LINES(A_N2).ASTALIN = [V]CST_ANEWDEL
  Endif
  If [V]CST_ASTALIN(GSTPER.LINES(A_N2).ASTALIN)<>""
   Case [V]CST_ASTALIN(GSTPER.LINES(A_N2).ASTALIN)
    When [V]CST_APRGAINSERT  : [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.LINES(A_N2)._AINSERT_CONTROL_BEFORE)
    When [V]CST_APRGAUPDATE : [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.LINES(A_N2)._AUPDATE_CONTROL_BEFORE)
    When [V]CST_APRGADELETE  : [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.LINES(A_N2)._ADELETE_CONTROL_BEFORE)
   Endcase
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(GSTPER.LINES)
 If GSTPER.LINES(A_N2)<>null
  If GSTPER.LINES(A_N2).ASTALIN<>[V]CST_ADEL & GSTPER.LINES(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(GSTPER,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"GSTPERD:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_AFTER
For A_N2=1 To maxtab(GSTPER.LINES) : # GSTPERD -- 2
 If GSTPER.LINES(A_N2) <> null
& and GSTPER.LINES(A_N2).ASTALIN<>[V]CST_ANEWDEL
  If [V]CST_ASTALIN(GSTPER.LINES(A_N2).ASTALIN)<>""
   Case [V]CST_ASTALIN(GSTPER.LINES(A_N2).ASTALIN)
    When [V]CST_APRGAINSERT  : [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.LINES(A_N2)._AINSERT_CONTROL_AFTER)
    When [V]CST_APRGAUPDATE : [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.LINES(A_N2)._AUPDATE_CONTROL_AFTER)
    When [V]CST_APRGADELETE  : [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.LINES(A_N2)._ADELETE_CONTROL_AFTER)
   Endcase
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(GSTPER.LINES)
 If GSTPER.LINES(A_N2)<>null
  If GSTPER.LINES(A_N2).ASTALIN<>[V]CST_ADEL & GSTPER.LINES(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(GSTPER,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"GSTPERD:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

If [V]CST_ASTALIN(GSTPER.ASTALIN)<>""
 [L]A_ASTALIN = GSTPER.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
Return

#-----------------------------------------------------#
$AUPDATE_TR_GSTPER
Trbegin [F:GSTPH]
 Gosub AUPDATE_GSTPER
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AUPDATE_GSTPER
[L]A_ASTALIN = GSTPER.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet GSTPER.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00GSTPER._MAJSQL_GSTPER(GSTPER))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [L]A_TYPMAJ=[V]CST_ADEL,[V]CST_AUPD,[V]CST_ANEW
 #-----------------------#
 For A_N2=1 To maxtab(GSTPER.LINES)
  If GSTPER.LINES(A_N2) <> null and
& (GSTPER.LINES(A_N2).ASTALIN=[L]A_TYPMAJ or
& GSTPER.LINES(A_N2).ASTALIN=[V]CST_ALL)
   If GSTPER.LINES(A_N2).ASTALIN=[L]A_TYPMAJ
    Case GSTPER.LINES(A_N2).ASTALIN
     When [V]CST_AUPD  : [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.LINES(A_N2)._AUPDATE)
     When [V]CST_ANEW : [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.LINES(A_N2)._AINSERT)
     When [V]CST_ADEL  : [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.LINES(A_N2)._ADELETE)
    Endcase
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Endif
  If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
 Next A_N2
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 #-----------------------#
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = GSTPER.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet GSTPER.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AUPDATE_ABORT
Rollback
$_AUPDATE_ABORT
If GSTPER.snapshotEnabled=1
 [L]A_RETIK = GSTPER.revertUpdTick
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(GSTPER.LINES)
 If GSTPER.LINES(A_N2) <> null
  [L]ASTATUS2 = fmet GSTPER.LINES(A_N2)._AUPDATE_ABORT
  If GSTPER.LINES(A_N2).ASTALIN=[V]CST_ADEL or GSTPER.LINES(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance GSTPER.LINES(A_N2)
   GSTPER.LINES(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2

[L]ASTATUS = max(fmet GSTPER.ACTION("AUPDATE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AUPDATE_AFTER
If find(GSTPER.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 GSTPER.ASTALIN = [V]CST_ALL
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(GSTPER.LINES)
 If GSTPER.LINES(A_N2) <> null
  [L]ASTATUS2 = fmet GSTPER.LINES(A_N2)._AUPDATE_AFTER
  If GSTPER.LINES(A_N2).ASTALIN=[V]CST_ADEL or GSTPER.LINES(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance GSTPER.LINES(A_N2)
   GSTPER.LINES(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Return



