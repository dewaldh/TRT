#<AdxTL>@(#)0.0.0.0 $Revision$Class User profile menu
# Supervisor
## CRUD-CLASSE ## AMENU
# 2018-08-27 12:21:10 652


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File AMENUSER [AMU_]

If !SILENCE : Call TRACE("2 --> Local Instance C_AMENU") From ASYRCOM : Endif
Local Instance AMENU Using C_AMENU

If !SILENCE : Call TRACE("3 --> New Instance C_AMENU") From ASYRCOM : Endif
AMENU = NewInstance C_AMENU AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [AMU_]CODMEN First
If !fstat
 If !SILENCE : Call TRACE("Call program read of AMENU") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet AMENU.AREAD([AMU_]CODPRF,[AMU_]NUMLIG))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("AMENU.CODPRF ="-num$(AMENU.CODPRF)) From ASYRCOM
 Call TRACE("AMENU.NUMLIG ="-num$(AMENU.NUMLIG)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(AMENU.AKEYS)
  Call TRACE("-"-num$(I)-":"-AMENU.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [AMU_]
FreeGroup AMENU
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(AMENU,ACLE,ASTATUS,_ETAG)
Variable Instance AMENU Using C_AMENU
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CODPRF(5)
Local Shortint _NUMLIG
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODPRF = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_NUMLIG = val([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File AMENUSER [AMU]
Default File [F:AMU]
Read [F:AMU]CODMEN = [L]_CODPRF;[L]_NUMLIG
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:AMU]UPDTICK)>0
 [L]_ETAG = num$([F:AMU]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(AMENU,ACLE,ASTATUS)
Variable Instance AMENU Using C_AMENU
Value Char ACLE
Variable Integer ASTATUS
Local Char _CODPRF(5)
Local Shortint _NUMLIG
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODPRF = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_NUMLIG = val([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet AMENU.AREAD([L]_CODPRF,[L]_NUMLIG))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(AMENU,_CODPRF,_NUMLIG,ASTATUS)
Variable Instance AMENU Using C_AMENU
Value Char _CODPRF
Value Shortint _NUMLIG
Variable Integer ASTATUS

If AMENU = null : End : Endif

Gosub AVARIABLES From WMC00AMENU
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If AMENU.APARENT=null
 [L]A_I = AMENU.freeSnapshot
 AMENU.snapshotEnabled = 0
 AMENU.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & AMENU.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet AMENU._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If AMENU.APARENT=null
 AMENU.snapshotEnabled = 1
 AMENU.setAccessorEnabled = 1
Endif
LogicClose File [AMU]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet AMENU._ACTION_PARAM("AREAD_BEFORE",[L]_CODPRF,[L]_NUMLIG))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:AMU]
Read [F:AMU]CODMEN = [L]_CODPRF;[L]_NUMLIG
If fstat
[L]A_ERROR = [L]_CODPRF+"~"+num$([L]_NUMLIG)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(AMENU,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:AMU]AUUID)>0 & [F:AMU]AUUID=NullUuid
 [F:AMU]AUUID = getUuid
Endif
SetInstance AMENU With [F:AMU]
AMENU.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet AMENU.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [ATX] Where NUMERO=[F:AMU]LIBMENU
 Call ASETTEXT(AMENU.ATX,AMENU.AllocGrp,"LIBMENU",[F:ATX]TEXTE,[F:ATX]LAN,[F:ATX]NUMERO) From ASYRSUB
Next ATX

Return



