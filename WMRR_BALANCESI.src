#<AdxTL>@(#)0.0.0.0 $Revision$Class Actuals financial
# Supervisor
## CRUD-CLASSE ## BALANCESI
# 2018-08-27 13:04:28 710


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File BALANCE [BAL_]

If !SILENCE : Call TRACE("2 --> Local Instance R_BALANCESI") From ASYRCOM : Endif
Local Instance BALANCESI Using R_BALANCESI

If !SILENCE : Call TRACE("3 --> New Instance R_BALANCESI") From ASYRCOM : Endif
BALANCESI = NewInstance R_BALANCESI AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [BAL_]BAL0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of BALANCESI") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet BALANCESI.AREAD([BAL_]LEDTYP,[BAL_]CPY,[BAL_]FCY,[BAL_]FIY,[BAL_]ACC,[BAL_]BPR,[BAL_]CUR))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("BALANCESI.BAL.LEDTYP ="-num$(BALANCESI.BAL.LEDTYP)) From ASYRCOM
 Call TRACE("BALANCESI.BAL.CPY ="-num$(BALANCESI.BAL.CPY)) From ASYRCOM
 Call TRACE("BALANCESI.BAL.FCY ="-num$(BALANCESI.BAL.FCY)) From ASYRCOM
 Call TRACE("BALANCESI.BAL.FIY ="-num$(BALANCESI.BAL.FIY)) From ASYRCOM
 Call TRACE("BALANCESI.BAL.ACC ="-num$(BALANCESI.BAL.ACC)) From ASYRCOM
 Call TRACE("BALANCESI.BAL.BPR ="-num$(BALANCESI.BAL.BPR)) From ASYRCOM
 Call TRACE("BALANCESI.BAL.CUR ="-num$(BALANCESI.BAL.CUR)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(BALANCESI.BAL.AKEYS)
  Call TRACE("-"-num$(I)-":"-BALANCESI.BAL.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [BAL_]
FreeGroup BALANCESI
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(BALANCESI,ACLE,ASTATUS,_ETAG)
Variable Instance BALANCESI Using R_BALANCESI
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Tinyint _LEDTYP
Local Char _CPY(5)
Local Char _FCY(5)
Local Shortint _FIY
Local Char _ACC(15)
Local Char _BPR(15)
Local Char _CUR(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_LEDTYP = val([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CPY = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_FCY = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_FIY = val([L]CLE(4)) : Endif
If [L]CLE(5)<>"" : [L]_ACC = num$([L]CLE(5)) : Endif
If [L]CLE(6)<>"" : [L]_BPR = num$([L]CLE(6)) : Endif
If [L]CLE(7)<>"" : [L]_CUR = num$([L]CLE(7)) : Endif
Raz [L]_ETAG
Local File BALANCE [BAL]
Default File [F:BAL]
Read [F:BAL]BAL0 = [L]_LEDTYP;[L]_CPY;[L]_FCY;[L]_FIY;[L]_ACC;[L]_BPR;[L]_CUR
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:BAL]UPDTICK)>0
 [L]_ETAG = num$([F:BAL]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(BALANCESI,ACLE,ASTATUS)
Variable Instance BALANCESI Using R_BALANCESI
Value Char ACLE
Variable Integer ASTATUS
Local Tinyint _LEDTYP
Local Char _CPY(5)
Local Char _FCY(5)
Local Shortint _FIY
Local Char _ACC(15)
Local Char _BPR(15)
Local Char _CUR(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_LEDTYP = val([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CPY = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_FCY = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_FIY = val([L]CLE(4)) : Endif
If [L]CLE(5)<>"" : [L]_ACC = num$([L]CLE(5)) : Endif
If [L]CLE(6)<>"" : [L]_BPR = num$([L]CLE(6)) : Endif
If [L]CLE(7)<>"" : [L]_CUR = num$([L]CLE(7)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet BALANCESI.AREAD([L]_LEDTYP,[L]_CPY,[L]_FCY,[L]_FIY,[L]_ACC,[L]_BPR,[L]_CUR))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(BALANCESI,_LEDTYP,_CPY,_FCY,_FIY,_ACC,_BPR,_CUR,ASTATUS)
Variable Instance BALANCESI Using R_BALANCESI
Value Tinyint _LEDTYP
Value Char _CPY
Value Char _FCY
Value Shortint _FIY
Value Char _ACC
Value Char _BPR
Value Char _CUR
Variable Integer ASTATUS

If BALANCESI = null : End : Endif

Gosub AVARIABLES From WMR00BALANCESI
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If BALANCESI.APARENT=null
 [L]A_I = BALANCESI.freeSnapshot
 BALANCESI.snapshotEnabled = 0
 BALANCESI.setAccessorEnabled = 0
Endif

If fmet BALANCESI.ACTX.AGETAFCRIGHT(BALANCESI,"CONSBAL",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:BAL]
Read [F:BAL]BAL0 = [L]_LEDTYP;[L]_CPY;[L]_FCY;[L]_FIY;[L]_ACC;[L]_BPR;[L]_CUR
If fstat
 [L]A_ERROR = num$([L]_LEDTYP)+"~"+[L]_CPY+"~"+[L]_FCY+"~"+num$([L]_FIY)+"~"+[L]_ACC+"~"+[L]_BPR+"~"+[L]_CUR
& 
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(BALANCESI,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:BAL]FCY
[L]A_STRACC = ""
If fmet BALANCESI.ACTX.AGETAFCRIGHTR(BALANCESI,"CONSBAL",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif

[L]ASTATUS = max([L]ASTATUS,fmet BALANCESI.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

BALANCESI.BAL.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet BALANCESI.BAL.AREAD([L]_LEDTYP,[L]_CPY,[L]_FCY,[L]_FIY,[L]_ACC,[L]_BPR,[L]_CUR))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet BALANCESI.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & BALANCESI.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet BALANCESI._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If BALANCESI.APARENT=null
 BALANCESI.snapshotEnabled = 1
 BALANCESI.setAccessorEnabled = 1
Endif
LogicClose File [BAL] ,[FIY]
End



