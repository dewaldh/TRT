#<AdxTL>@(#)0.0.0.0 $Revision$Class Users
# Supervisor
## CRUD-CLASSE ## AUTILIS
# 2018-08-27 12:23:55 220


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(AUTILIS,ASTATUS)
Variable Instance AUTILIS Using C_AUTILIS
Variable Integer ASTATUS

If AUTILIS = null : End : Endif

Gosub _AVARIABLES From WMC00AUTILIS

[L]A_STRSITE = ""
[L]A_STRACC = AUTILIS.ACSUSR
Gosub AINSERT_AUTILIS

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(AUTILIS,ASTATUS)
Variable Instance AUTILIS Using C_AUTILIS
Variable Integer ASTATUS

If AUTILIS = null : End : Endif

Gosub AVARIABLES From WMC00AUTILIS
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = AUTILIS.ACSUSR
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_AUTILIS
Else
 Gosub AINSERT_AUTILIS
Endif

Gosub _AINSERT_AFTER
[L]A_I = AUTILIS.freeSnapshot
AUTILIS.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet AUTILIS._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet AUTILIS._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet AUTILIS._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If AUTILIS.ASTALIN = [V]CST_ANEWDEL : Return : Endif
AUTILIS.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet AUTILIS.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(AUTILIS.FNCCOL)
 If AUTILIS.FNCCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet AUTILIS.FNCCOL([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
A_N2=1
If AUTILIS.BPA(A_N2) <> null
& and !find(AUTILIS.BPA(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(AUTILIS.BID) : # BID -- 3
 If AUTILIS.BID(A_N2) <> null
& and !find(AUTILIS.BID(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER
A_N2=1
If AUTILIS.BPA(A_N2) <> null
& and !find(AUTILIS.BPA(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(AUTILIS.BID) : # BID -- 3
 If AUTILIS.BID(A_N2) <> null
& and !find(AUTILIS.BID(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [L]A_I=1 To maxtab(AUTILIS.FNCCOL)
 If AUTILIS.FNCCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet AUTILIS.FNCCOL([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]ASTATUS = max([L]ASTATUS,fmet AUTILIS.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_AUTILIS
Trbegin [F:AUS]
 Gosub AINSERT_AUTILIS
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_AUTILIS
Raz [F:AUS]
[L]ASTATUS = max([L]ASTATUS,fmet AUTILIS.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

If find( AUTILIS.ASTALIN,[V]CST_ANEW,[V]CST_ADEL) | 
& (find( AUTILIS.ASTALIN,[V]CST_AUPD) & 
& fmet AUTILIS.AGETATTRIBUTE("AUSPIC","$isLoaded")="true")
[L]ASTATUS = func WMC00AUTILIS._MAJSQL_AUTILIS_AUSPIC(AUTILIS,AUTILIS.AUSPIC)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
[L]ASTATUS = max([L]ASTATUS,func WMC00AUTILIS._MAJSQL_AUTILIS(AUTILIS))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]A_TYPMAJ=[V]CST_ANEW

#-----------------------------------------------------#
A_N2=1
If AUTILIS.BPA(A_N2) <> null and 
& AUTILIS.BPA(A_N2).ASTALIN=[V]CST_ALL
AUTILIS.BPA(A_N2).ASTALIN = [V]CST_AUPD
Endif
#-----------------------------------------------------#

#-----------------------------------------------------#
For A_N2=1 To maxtab(AUTILIS.BID)
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

[L]ASTATUS = max([L]ASTATUS,fmet AUTILIS.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If AUTILIS.snapshotEnabled=1
 [L]A_RETIK = AUTILIS.revertUpdTick
Endif
[L]ASTATUS = max(fmet AUTILIS.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(AUTILIS.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 AUTILIS.ASTALIN = [V]CST_ALL
Endif
For [L]A_I=1 To maxtab(AUTILIS.FNCCOL)
 If AUTILIS.FNCCOL([L]A_I)<>null
  If AUTILIS.FNCCOL([L]A_I).ASTALIN=[V]CST_ADEL or AUTILIS.FNCCOL([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance AUTILIS.FNCCOL([L]A_I)
   AUTILIS.FNCCOL([L]A_I) = null
  Elsif AUTILIS.FNCCOL([L]A_I).ASTALIN <> [V]CST_ALL
   AUTILIS.FNCCOL([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
Local Integer ASTATUS2
A_N2=1
If AUTILIS.BPA(A_N2) <> null
 If AUTILIS.BPA(A_N2).ASTALIN=[V]CST_ADEL or AUTILIS.BPA(A_N2).ASTALIN=[V]CST_ANEWDEL
  FreeInstance AUTILIS.BPA(A_N2)
  AUTILIS.BPA(A_N2) = null
 Elsif AUTILIS.BPA(A_N2).ASTALIN <> [V]CST_ALL
  AUTILIS.BPA(A_N2).ASTALIN = [V]CST_ALL
  For [L]A_I=1 To maxtab(AUTILIS.BPA(A_N2).COLTEL)
   If AUTILIS.BPA(A_N2).COLTEL([L]A_I)<>null
    If AUTILIS.BPA(A_N2).COLTEL([L]A_I).ASTALIN=[V]CST_ADEL or AUTILIS.BPA(A_N2).COLTEL([L]A_I).ASTALIN=[V]CST_ANEWDEL
     FreeInstance AUTILIS.BPA(A_N2).COLTEL([L]A_I)
     AUTILIS.BPA(A_N2).COLTEL([L]A_I) = null
    Elsif AUTILIS.BPA(A_N2).COLTEL([L]A_I).ASTALIN <> [V]CST_ALL
     AUTILIS.BPA(A_N2).COLTEL([L]A_I).ASTALIN = [V]CST_ALL
    Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
  For [L]A_I=1 To maxtab(AUTILIS.BPA(A_N2).COLWEB)
   If AUTILIS.BPA(A_N2).COLWEB([L]A_I)<>null
    If AUTILIS.BPA(A_N2).COLWEB([L]A_I).ASTALIN=[V]CST_ADEL or AUTILIS.BPA(A_N2).COLWEB([L]A_I).ASTALIN=[V]CST_ANEWDEL
     FreeInstance AUTILIS.BPA(A_N2).COLWEB([L]A_I)
     AUTILIS.BPA(A_N2).COLWEB([L]A_I) = null
    Elsif AUTILIS.BPA(A_N2).COLWEB([L]A_I).ASTALIN <> [V]CST_ALL
     AUTILIS.BPA(A_N2).COLWEB([L]A_I).ASTALIN = [V]CST_ALL
    Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
 Endif
 [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(AUTILIS.BID)
 If AUTILIS.BID(A_N2) <> null
  [L]ASTATUS2 = fmet AUTILIS.BID(A_N2)._AINSERT_AFTER
  If AUTILIS.BID(A_N2).ASTALIN=[V]CST_ADEL or AUTILIS.BID(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance AUTILIS.BID(A_N2)
   AUTILIS.BID(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Return



