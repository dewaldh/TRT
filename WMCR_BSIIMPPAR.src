#<AdxTL>@(#)0.0.0.0 $Revision$Class Bank import settings
# Supervisor
## CRUD-CLASSE ## BSIIMPPAR
# 2018-08-27 12:27:05 929


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File BSIIMPPAR [BSIIP_]

If !SILENCE : Call TRACE("2 --> Local Instance C_BSIIMPPAR") From ASYRCOM : Endif
Local Instance BSIIMPPAR Using C_BSIIMPPAR

If !SILENCE : Call TRACE("3 --> New Instance C_BSIIMPPAR") From ASYRCOM : Endif
BSIIMPPAR = NewInstance C_BSIIMPPAR AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [BSIIP_]BSIIP0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of BSIIMPPAR") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet BSIIMPPAR.AREAD([BSIIP_]CODIMPPAR))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("BSIIMPPAR.CODIMPPAR ="-num$(BSIIMPPAR.CODIMPPAR)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(BSIIMPPAR.AKEYS)
  Call TRACE("-"-num$(I)-":"-BSIIMPPAR.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [BSIIP_]
FreeGroup BSIIMPPAR
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(BSIIMPPAR,ACLE,ASTATUS,_ETAG)
Variable Instance BSIIMPPAR Using C_BSIIMPPAR
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CODIMPPAR(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODIMPPAR = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File BSIIMPPAR [BSIIP]
Default File [F:BSIIP]
Read [F:BSIIP]BSIIP0 = [L]_CODIMPPAR
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:BSIIP]UPDTICK)>0
 [L]_ETAG = num$([F:BSIIP]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(BSIIMPPAR,ACLE,ASTATUS)
Variable Instance BSIIMPPAR Using C_BSIIMPPAR
Value Char ACLE
Variable Integer ASTATUS
Local Char _CODIMPPAR(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODIMPPAR = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet BSIIMPPAR.AREAD([L]_CODIMPPAR))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(BSIIMPPAR,_CODIMPPAR,ASTATUS)
Variable Instance BSIIMPPAR Using C_BSIIMPPAR
Value Char _CODIMPPAR
Variable Integer ASTATUS

If BSIIMPPAR = null : End : Endif

Gosub AVARIABLES From WMC00BSIIMPPAR
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If BSIIMPPAR.APARENT=null
 [L]A_I = BSIIMPPAR.freeSnapshot
 BSIIMPPAR.snapshotEnabled = 0
 BSIIMPPAR.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & BSIIMPPAR.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet BSIIMPPAR._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If BSIIMPPAR.APARENT=null
 BSIIMPPAR.snapshotEnabled = 1
 BSIIMPPAR.setAccessorEnabled = 1
Endif
LogicClose File [BSIIP]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet BSIIMPPAR._ACTION_PARAM("AREAD_BEFORE",[L]_CODIMPPAR))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:BSIIP]
Read [F:BSIIP]BSIIP0 = [L]_CODIMPPAR
If fstat
[L]A_ERROR = [L]_CODIMPPAR
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(BSIIMPPAR,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:BSIIP]AUUID)>0 & [F:BSIIP]AUUID=NullUuid
 [F:BSIIP]AUUID = getUuid
Endif
SetInstance BSIIMPPAR With [F:BSIIP]
BSIIMPPAR.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet BSIIMPPAR.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="BSIIMPPAR" & ZONE="DESAXX" & IDENT1=BSIIMPPAR.CODIMPPAR & IDENT2=""
 Call ASETTEXTRA(BSIIMPPAR.AXX,BSIIMPPAR.AllocGrp(),"DESAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 BSIIMPPAR.AXX(maxtab(BSIIMPPAR.AXX)).FLG = 0
Next AXX
If !len(fmet BSIIMPPAR.AGETTEXTRA("DESAXX"))
 Call ASETTEXTRA(BSIIMPPAR.AXX,BSIIMPPAR.AllocGrp(),"DESAXX",
& fmet BSIIMPPAR.AGETTEXTRALAN("DESAXX",BSIIMPPAR.ACTX.AFOLD.ALANGDEF),
& BSIIMPPAR.ACTX.LAN) From ASYRSUB
Endif

Return



