#<AdxTL>@(#)0.0.0.0 $Revision$Class Impact analysis-Stock
# Supervisor
## CRUD-CLASSE ## CCMIMPITM
# 2018-08-27 12:28:52 643


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(CCMIMPITM,ASTATUS)
Variable Instance CCMIMPITM Using C_CCMIMPITM
Variable Integer ASTATUS

If CCMIMPITM = null : End : Endif

Gosub _AVARIABLES From WMC00CCMIMPITM

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CCMIMPITM

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(CCMIMPITM,ASTATUS)
Variable Instance CCMIMPITM Using C_CCMIMPITM
Variable Integer ASTATUS

If CCMIMPITM = null : End : Endif

Gosub AVARIABLES From WMC00CCMIMPITM
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_CCMIMPITM
Else
 Gosub AINSERT_CCMIMPITM
Endif

Gosub _AINSERT_AFTER
[L]A_I = CCMIMPITM.freeSnapshot
CCMIMPITM.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet CCMIMPITM._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet CCMIMPITM._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet CCMIMPITM._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If CCMIMPITM.ASTALIN = [V]CST_ANEWDEL : Return : Endif
CCMIMPITM.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPITM.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPITM.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_CCMIMPITM
Trbegin [F:CCMIITM]
 Gosub AINSERT_CCMIMPITM
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_CCMIMPITM
Raz [F:CCMIITM]
[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPITM.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00CCMIMPITM._MAJSQL_CCMIMPITM(CCMIMPITM))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPITM.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If CCMIMPITM.snapshotEnabled=1
 [L]A_RETIK = CCMIMPITM.revertUpdTick
Endif
[L]ASTATUS = max(fmet CCMIMPITM.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(CCMIMPITM.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 CCMIMPITM.ASTALIN = [V]CST_ALL
Endif
Return



