#<AdxTL>@(#)0.0.0.0 $Revision$Class Translatable texts
# Supervisor
## CRUD-CLASSE ## ATEXTRA
# 2018-08-27 12:23:17 425


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ATEXTRA [AXX_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ATEXTRA") From ASYRCOM : Endif
Local Instance ATEXTRA Using C_ATEXTRA

If !SILENCE : Call TRACE("3 --> New Instance C_ATEXTRA") From ASYRCOM : Endif
ATEXTRA = NewInstance C_ATEXTRA AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [AXX_]AXX0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ATEXTRA") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ATEXTRA.AREAD([AXX_]CODFIC,[AXX_]ZONE,[AXX_]LANGUE,[AXX_]IDENT1,[AXX_]IDENT2))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ATEXTRA.CODFIC ="-num$(ATEXTRA.CODFIC)) From ASYRCOM
 Call TRACE("ATEXTRA.ZONE ="-num$(ATEXTRA.ZONE)) From ASYRCOM
 Call TRACE("ATEXTRA.LANGUE ="-num$(ATEXTRA.LANGUE)) From ASYRCOM
 Call TRACE("ATEXTRA.IDENT1 ="-num$(ATEXTRA.IDENT1)) From ASYRCOM
 Call TRACE("ATEXTRA.IDENT2 ="-num$(ATEXTRA.IDENT2)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ATEXTRA.AKEYS)
  Call TRACE("-"-num$(I)-":"-ATEXTRA.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [AXX_]
FreeGroup ATEXTRA
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ATEXTRA,ACLE,ASTATUS,_ETAG)
Variable Instance ATEXTRA Using C_ATEXTRA
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CODFIC(12)
Local Char _ZONE(12)
Local Char _LANGUE(3)
Local Char _IDENT1(80)
Local Char _IDENT2(80)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODFIC = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_ZONE = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_LANGUE = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_IDENT1 = num$([L]CLE(4)) : Endif
If [L]CLE(5)<>"" : [L]_IDENT2 = num$([L]CLE(5)) : Endif
Raz [L]_ETAG
Local File ATEXTRA [AXX]
Default File [F:AXX]
Read [F:AXX]AXX0 = [L]_CODFIC;[L]_ZONE;[L]_LANGUE;[L]_IDENT1;[L]_IDENT2
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:AXX]UPDTICK)>0
 [L]_ETAG = num$([F:AXX]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ATEXTRA,ACLE,ASTATUS)
Variable Instance ATEXTRA Using C_ATEXTRA
Value Char ACLE
Variable Integer ASTATUS
Local Char _CODFIC(12)
Local Char _ZONE(12)
Local Char _LANGUE(3)
Local Char _IDENT1(80)
Local Char _IDENT2(80)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODFIC = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_ZONE = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_LANGUE = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_IDENT1 = num$([L]CLE(4)) : Endif
If [L]CLE(5)<>"" : [L]_IDENT2 = num$([L]CLE(5)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ATEXTRA.AREAD([L]_CODFIC,[L]_ZONE,[L]_LANGUE,[L]_IDENT1,[L]_IDENT2))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ATEXTRA,_CODFIC,_ZONE,_LANGUE,_IDENT1,_IDENT2,ASTATUS)
Variable Instance ATEXTRA Using C_ATEXTRA
Value Char _CODFIC
Value Char _ZONE
Value Char _LANGUE
Value Char _IDENT1
Value Char _IDENT2
Variable Integer ASTATUS

If ATEXTRA = null : End : Endif

Gosub AVARIABLES From WMC00ATEXTRA
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ATEXTRA.APARENT=null
 [L]A_I = ATEXTRA.freeSnapshot
 ATEXTRA.snapshotEnabled = 0
 ATEXTRA.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ATEXTRA.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ATEXTRA._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ATEXTRA.APARENT=null
 ATEXTRA.snapshotEnabled = 1
 ATEXTRA.setAccessorEnabled = 1
Endif
LogicClose File [AXX]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet ATEXTRA._ACTION_PARAM("AREAD_BEFORE",[L]_CODFIC,[L]_ZONE,[L]_LANGUE,[L]_IDENT1,[L]_IDENT2))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:AXX]
Read [F:AXX]AXX0 = [L]_CODFIC;[L]_ZONE;[L]_LANGUE;[L]_IDENT1;[L]_IDENT2
If fstat
[L]A_ERROR = [L]_CODFIC+"~"+[L]_ZONE+"~"+[L]_LANGUE+"~"+[L]_IDENT1+"~"+[L]_IDENT2
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ATEXTRA,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:AXX]AUUID)>0 & [F:AXX]AUUID=NullUuid
 [F:AXX]AUUID = getUuid
Endif
SetInstance ATEXTRA With [F:AXX]
ATEXTRA.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet ATEXTRA.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



