#<AdxTL>@(#)0.0.0.0 $Revision$
#<AdxTL>@(#)0.0.0.0 $Revision$
#ELA VALIDATIONS
# - Active ELA
# - Check SOURCE ELA
#2 BUSINESS TRANSACTION HEADER Field RULES MUST BE VALID BEFORE A BUSINESS BATCH CAN BE CREATED or SAVED.
#3 BUSINESS TRANSACTION LINE Field RULES MUST BE VALID BEFORE A BUSINESS BATCH CAN BE CREATED or SAVED.
#4 ADDITIONAL BUSINESS TRANSACTION type RULES MUST BE VALID BEFORE A BUSINESS BATCH CAN BE CREATED or SAVED.

#6 THE ACCOUNTING PERIOD For WHICH JOURNALS ARE BEING CREATED MUST BE OPEN For THE BUSINESS BATCH.
#7 For CASH BUSINESS TRANSACTION TYPES, THE OWNER OF THE RESULTANT PRINCIPAL BANK ACCOUNT MUST End At THE SAME SITE As THE PATH FOLLOWED From THE ELA THE BANK ACCOUNT IS LINKED To.
#8 THE BALANCE OF THE From and To SITES MUST BALANCE For AN Inter-ENTITY type BUSINESS TRANSACTION.
#9 THE SITE At THE End OF THE PATH FOLLOWED From THE From SITE ELA and THE SITE At THE End OF THE PATH FOLLOWED THE To SITE ELA MUST BE THE SAME.
#10  THE RESULTANT JOURNALS CREATED MUST BALANCE: At A SITE LEVEL, BUSINESS HEADER TRANSACTION LEVEL and BUSINESS BATCH LEVEL.
#11  THE SELECTED DIMENSIONS MUST BE VALID ACCORDING To THE ACCOUNT/DIMENSION RULES As PER SECTION 5.2.3 OF THE FINANCIAL FRAMEWORK DESIGN SPECIFICATION.
#THE DIMENSION VALUES SELECTED MUST BE ACTIVE.
#12  SELECTED SHARED BANK ACCOUNTS MUST BE ACTIVE.


Subprog VAL_ACTIVE_ELA
#Active ELA
Local Integer I
Local Char REQUEST(255)
Local Char BATNBR(25)

BATNBR = ""

I=0

REQUEST = "Declare @RETVAL as varchar(255)"
REQUEST -= "EXEC VAL_ELA '"+BATNBR+"', @RETVAL = @RETVAL OUTPUT"
REQUEST -= "SELECT @RETVAL as RETVAL"

For (Char REVAL(25)) From "5" Sql REQUEST As [YLNK]
  I += 1
  Infbox(REVAL)
Next
NBTEX=I

End

Subprog VAL_IC_ENGINE
Local Integer I
Local Char REQUEST(255)
Local Char BATNBR(25)

BATNBR = ""

I=0

REQUEST = "Declare @RETVAL as varchar(255)"
REQUEST -= "EXEC IC_ENGINE '"+BATNBR+"', @RETVAL = @RETVAL OUTPUT"
REQUEST -= "SELECT @RETVAL as RETVAL"

For (Char REVAL(25)) From "5" Sql REQUEST As [YLNK]
  I += 1
  Infbox(REVAL)
Next
NBTEX=I
End

Subprog EXEC_IC_ENGINE
#Create Entry Rules
End

#Subprog VALID(NUM)
#Value Char NUM()
#
#If clalev([F:ICF])=0   : Local File INTCOFLO  [ICF] : Endif
#If clalev([F:HAE])=0   : Local File GACCENTRY [HAE] : Endif
#If clalev([F:HA2])=0   : Local File GACCENTRY [HA2] : Endif
#
#Local Integer I, OK, STAT
#Local Integer NBJOU
#Local Char    MESSA(250), IDENT(30), CODGAU(GLONGAU)
#Local Char    TZONE(10)(1..6)
#Local Char    TVAL(30)(1..6)
#Local Char    TJOUCPY(GLONCPY)(1..99), TJOUNUM(30)(1..99)
#
#IDENT = NUM
#
#If adxtrans
# Gosub TRANSAC
#Else
# Call DEBTRANS From GLOCK
# Gosub TR1
#Endif
#End
#
#$TR1
#GOK = 1
#Trbegin [GIC]
# Gosub TRANSAC
# If   GOK<0 : Call ROLL From GLOCK
# Elsif !GOK : Rollback
# Endif
#Commit
#Return

