#<AdxTL>@(#)0.0.0.0 $Revision$Class Miscellaneous tables
# Supervisor
## CRUD-CLASSE ## ATABTAB
# 2018-08-27 12:23:10 729

Gosub TEST From WMCR_ATABTAB : End

############################################################################################
## C : Subprog AINSERT(INSTANCE)
## D : Subprog ADELETE(INSTANCE)
## R : Subprog AREAD(INSTANCE,NUMTAB)
## U : Subprog AUPDATE(INSTANCE)
############################################################################################
# ATABTAB : ATABTAB
############################################################################################

############################################################################################
### AVARIABLES
############################################################################################
$AVARIABLES
[L]ASTATUS =max([L]ASTATUS,fmet ATABTAB._ADELERRORS([V]CST_ALLERRORS))
$_AVARIABLES
Local    Integer     A_LEVEL,A_I,A_NEWCOL,A_N1
Local    Integer    ASTATUS,A_RETIK,A_TYPMAJ,A_ASTALIN
Local    Char        A_STRSITE(GLONFCY),A_STRACC(GLONACS),CURPRO(50),A_PARENT(50),A_PATH(200),A_ABR(GLONABR),A_ERROR(250)
Local    Uuident    A_UUID

[L]A_LEVEL    = ATABTAB.ACTX.LEVWML
[L]ASTATUS  = 0

Onerrgo ERR_OPENTAB
If find(ATABTAB.ACTX.AFOLDER,nomap,"")>0
 Local File ATABTAB [ADV]
 Local File ATABTAB [AAA_]
 Local File ATEXTRA [AXX]
Else
 Local File =ATABTAB.ACTX.AFOLDER+".ATABTAB" [ADV]
 Local File =ATABTAB.ACTX.AFOLDER+".ATABTAB" [AAA_]
 Local File =ATABTAB.ACTX.AFOLDER+".ATEXTRA" [AXX]
Endif
Onerrgo
Return

$ERR_OPENTAB
[L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ASETERROR("",errp+"("+num$(errl)+")"-mess(6,123,1)-num$(errn)-errmes$(errn)-errm,[V]CST_AERROR))
Resume

############################################################################################
### Link
############################################################################################
$AOPEN_LINK
Gosub AVARIABLES
Link [ADV] With
& [AAA_]CODE = NUMTAB
& As [LNK_]
Return

############################################################################################
### ATABTAB(WADV)
############################################################################################
Funprog  _MAJSQL_ATABTAB(WADV)
Variable Instance WADV Using C_ATABTAB
Local Integer ASTATUS,A_I,A_J
Default File [F:ADV]
If WADV.ASTALIN=[V]CST_ANEW
 Call INICRE(WADV) From ASYRSUB
 SetInstance [F:ADV] With WADV
 For J=1 To maxtab(WADV.AXX)
  If WADV.AXX(J)<>null & WADV.AXX(J).PRO= "LNGDES" & WADV.AXX(J).FLG>0
   Call MAJTEXTRALAN(WADV,WADV.AXX(J).TEX,"ATABTAB","LNGDES",WADV.AXX(J).LAN,WADV.NUMCAR,AVOID.ACHAR,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For J=1 To maxtab(WADV.AXX)
  If WADV.AXX(J)<>null & WADV.AXX(J).PRO= "SHODES" & WADV.AXX(J).FLG>0
   Call MAJTEXTRALAN(WADV,WADV.AXX(J).TEX,"ATABTAB","SHODES",WADV.AXX(J).LAN,WADV.NUMCAR,AVOID.ACHAR,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 15
  For [L]A_I=1 To maxtab(WADV.ACOLALP)
   If WADV.ACOLALP([L]A_I)<>null & !find(WADV.ACOLALP([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WADV.ACOLALP([L]A_I).AORDER=[L]A_J
    [F:ADV]COLALPTYP([L]A_J-1) = WADV.ACOLALP([L]A_I).COLALPTYP
    [F:ADV]COLALPSUP([L]A_J-1) = WADV.ACOLALP([L]A_I).COLALPSUP
    For J=1 To maxtab(WADV.ACOLALP([L]A_I).AXX)
     If WADV.ACOLALP([L]A_I).AXX(J)<>null & WADV.ACOLALP([L]A_I).AXX(J).PRO= "COLALPDES" & WADV.ACOLALP([L]A_I).AXX(J).FLG>0
      Call MAJTEXTRALAN(WADV.ACOLALP([L]A_I),WADV.ACOLALP([L]A_I).AXX(J).TEX,"ATABTAB","COLALPDES",WADV.ACOLALP([L]A_I).AXX(J).LAN,WADV.ACOLALP([L]A_I).APARENT.NUMCAR,num$(WADV.ACOLALP([L]A_I).COLALPNUM),[L]ASTATUS) From ASYRSUB
      If [L]ASTATUS>=[V]CST_AERROR : Break 3 : Endif
     Endif
    Next J
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 15
  For [L]A_I=1 To maxtab(WADV.ACOLNUM)
   If WADV.ACOLNUM([L]A_I)<>null & !find(WADV.ACOLNUM([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WADV.ACOLNUM([L]A_I).AORDER=[L]A_J
    [F:ADV]COLNUMTYP([L]A_J-1) = WADV.ACOLNUM([L]A_I).COLNUMTYP
    [F:ADV]COLNUMSUP([L]A_J-1) = WADV.ACOLNUM([L]A_I).COLNUMSUP
    For J=1 To maxtab(WADV.ACOLNUM([L]A_I).AXX)
     If WADV.ACOLNUM([L]A_I).AXX(J)<>null & WADV.ACOLNUM([L]A_I).AXX(J).PRO= "COLNUMDES" & WADV.ACOLNUM([L]A_I).AXX(J).FLG>0
      Call MAJTEXTRALAN(WADV.ACOLNUM([L]A_I),WADV.ACOLNUM([L]A_I).AXX(J).TEX,"ATABTAB","COLNUMDES",WADV.ACOLNUM([L]A_I).AXX(J).LAN,WADV.ACOLNUM([L]A_I).APARENT.NUMCAR,num$(WADV.ACOLNUM([L]A_I).COLNUMNUM),[L]ASTATUS) From ASYRSUB
      If [L]ASTATUS>=[V]CST_AERROR : Break 3 : Endif
     Endif
    Next J
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 Write [F:ADV]
 If fstat
  Call FSTA("ADV",WADV,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WADV.updTick = [F:ADV]updTick
Elsif WADV.ASTALIN=[V]CST_ALL or WADV.ASTALIN=[V]CST_AUPD
 Call INIUPD(WADV) From ASYRSUB
 SetInstance [F:ADV] With WADV
 For J=1 To maxtab(WADV.AXX)
  If WADV.AXX(J)<>null & WADV.AXX(J).PRO= "LNGDES" & WADV.AXX(J).FLG>0
   Call MAJTEXTRALAN(WADV,WADV.AXX(J).TEX,"ATABTAB","LNGDES",WADV.AXX(J).LAN,WADV.NUMCAR,AVOID.ACHAR,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For J=1 To maxtab(WADV.AXX)
  If WADV.AXX(J)<>null & WADV.AXX(J).PRO= "SHODES" & WADV.AXX(J).FLG>0
   Call MAJTEXTRALAN(WADV,WADV.AXX(J).TEX,"ATABTAB","SHODES",WADV.AXX(J).LAN,WADV.NUMCAR,AVOID.ACHAR,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 15
  For [L]A_I=1 To maxtab(WADV.ACOLALP)
   If WADV.ACOLALP([L]A_I)<>null & !find(WADV.ACOLALP([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WADV.ACOLALP([L]A_I).AORDER=[L]A_J
    [F:ADV]COLALPTYP([L]A_J-1) = WADV.ACOLALP([L]A_I).COLALPTYP
    [F:ADV]COLALPSUP([L]A_J-1) = WADV.ACOLALP([L]A_I).COLALPSUP
    For J=1 To maxtab(WADV.ACOLALP([L]A_I).AXX)
     If WADV.ACOLALP([L]A_I).AXX(J)<>null & WADV.ACOLALP([L]A_I).AXX(J).PRO= "COLALPDES" & WADV.ACOLALP([L]A_I).AXX(J).FLG>0
      Call MAJTEXTRALAN(WADV.ACOLALP([L]A_I),WADV.ACOLALP([L]A_I).AXX(J).TEX,"ATABTAB","COLALPDES",WADV.ACOLALP([L]A_I).AXX(J).LAN,WADV.ACOLALP([L]A_I).APARENT.NUMCAR,num$(WADV.ACOLALP([L]A_I).COLALPNUM),[L]ASTATUS) From ASYRSUB
      If [L]ASTATUS>=[V]CST_AERROR : Break 3 : Endif
     Endif
    Next J
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 15
  For [L]A_I=1 To maxtab(WADV.ACOLNUM)
   If WADV.ACOLNUM([L]A_I)<>null & !find(WADV.ACOLNUM([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WADV.ACOLNUM([L]A_I).AORDER=[L]A_J
    [F:ADV]COLNUMTYP([L]A_J-1) = WADV.ACOLNUM([L]A_I).COLNUMTYP
    [F:ADV]COLNUMSUP([L]A_J-1) = WADV.ACOLNUM([L]A_I).COLNUMSUP
    For J=1 To maxtab(WADV.ACOLNUM([L]A_I).AXX)
     If WADV.ACOLNUM([L]A_I).AXX(J)<>null & WADV.ACOLNUM([L]A_I).AXX(J).PRO= "COLNUMDES" & WADV.ACOLNUM([L]A_I).AXX(J).FLG>0
      Call MAJTEXTRALAN(WADV.ACOLNUM([L]A_I),WADV.ACOLNUM([L]A_I).AXX(J).TEX,"ATABTAB","COLNUMDES",WADV.ACOLNUM([L]A_I).AXX(J).LAN,WADV.ACOLNUM([L]A_I).APARENT.NUMCAR,num$(WADV.ACOLNUM([L]A_I).COLNUMNUM),[L]ASTATUS) From ASYRSUB
      If [L]ASTATUS>=[V]CST_AERROR : Break 3 : Endif
     Endif
    Next J
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WADV,"ATABTAB")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:ADV]CODE = [F:ADV]NUMTAB
 If fstat
  Call FSTA("ADV",WADV,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WADV.updTick = [F:ADV]updTick
Elsif WADV.ASTALIN=[V]CST_ADEL
 SetInstance [F:ADV] With WADV
 For J=1 To maxtab(WADV.AXX)
  If WADV.AXX(J)<>null & WADV.AXX(J).PRO= "LNGDES"
   Call SUPTEXTRA(WADV,WADV.AXX(J).TEX,"ATABTAB","LNGDES",WADV.AXX(J).LAN,WADV.NUMCAR,AVOID.ACHAR,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For J=1 To maxtab(WADV.AXX)
  If WADV.AXX(J)<>null & WADV.AXX(J).PRO= "SHODES"
   Call SUPTEXTRA(WADV,WADV.AXX(J).TEX,"ATABTAB","SHODES",WADV.AXX(J).LAN,WADV.NUMCAR,AVOID.ACHAR,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WADV,"ATABTAB")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:ADV]CODE = [F:ADV]NUMTAB
 If fstat
  Call FSTA("ADV",WADV,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK



