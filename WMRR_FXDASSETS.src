#<AdxTL>@(#)0.0.0.0 $Revision$Class Asset
# Supervisor
## CRUD-CLASSE ## FXDASSETS
# 2018-08-27 13:15:26 048


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File FXDASSETS [FAS_]

If !SILENCE : Call TRACE("2 --> Local Instance R_FXDASSETS") From ASYRCOM : Endif
Local Instance FXDASSETS Using R_FXDASSETS

If !SILENCE : Call TRACE("3 --> New Instance R_FXDASSETS") From ASYRCOM : Endif
FXDASSETS = NewInstance R_FXDASSETS AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [FAS_]FAS0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of FXDASSETS") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet FXDASSETS.AREAD([FAS_]AASREF))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("FXDASSETS.FAS.AASREF ="-num$(FXDASSETS.FAS.AASREF)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(FXDASSETS.FAS.AKEYS)
  Call TRACE("-"-num$(I)-":"-FXDASSETS.FAS.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [FAS_]
FreeGroup FXDASSETS
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(FXDASSETS,ACLE,ASTATUS,_ETAG)
Variable Instance FXDASSETS Using R_FXDASSETS
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _AASREF(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_AASREF = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File FXDASSETS [FAS]
Default File [F:FAS]
Read [F:FAS]FAS0 = [L]_AASREF
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:FAS]UPDTICK)>0
 [L]_ETAG = num$([F:FAS]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(FXDASSETS,ACLE,ASTATUS)
Variable Instance FXDASSETS Using R_FXDASSETS
Value Char ACLE
Variable Integer ASTATUS
Local Char _AASREF(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_AASREF = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet FXDASSETS.AREAD([L]_AASREF))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(FXDASSETS,_AASREF,ASTATUS)
Variable Instance FXDASSETS Using R_FXDASSETS
Value Char _AASREF
Variable Integer ASTATUS

If FXDASSETS = null : End : Endif

Gosub AVARIABLES From WMR00FXDASSETS
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If FXDASSETS.APARENT=null
 [L]A_I = FXDASSETS.freeSnapshot
 FXDASSETS.snapshotEnabled = 0
 FXDASSETS.setAccessorEnabled = 0
Endif

If fmet FXDASSETS.ACTX.AGETAFCRIGHT(FXDASSETS,"GESFAS",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:FAS]
Read [F:FAS]FAS0 = [L]_AASREF
If fstat
[L]A_ERROR = [L]_AASREF
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(FXDASSETS,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:FAS]FCY
[L]A_STRACC = ""
If fmet FXDASSETS.ACTX.AGETAFCRIGHTR(FXDASSETS,"GESFAS",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet FXDASSETS.ACTX.ASTACRITROLE(FXDASSETS,[L]_AASREF
& ,"FAS","FAS",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet FXDASSETS.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

FXDASSETS.FAS.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet FXDASSETS.FAS.AREAD([L]_AASREF))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet FXDASSETS.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & FXDASSETS.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet FXDASSETS._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If FXDASSETS.APARENT=null
 FXDASSETS.snapshotEnabled = 1
 FXDASSETS.setAccessorEnabled = 1
Endif
LogicClose File [FAS] ,[DEP]
End



