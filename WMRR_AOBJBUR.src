#<AdxTL>@(#)0.0.0.0 $Revision$Class Office documents
# Supervisor
## CRUD-CLASSE ## AOBJBUR
# 2018-08-27 13:01:54 097


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File AOBJBUR [AOA_]

If !SILENCE : Call TRACE("2 --> Local Instance R_AOBJBUR") From ASYRCOM : Endif
Local Instance AOBJBUR Using R_AOBJBUR

If !SILENCE : Call TRACE("3 --> New Instance R_AOBJBUR") From ASYRCOM : Endif
AOBJBUR = NewInstance R_AOBJBUR AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [AOA_]AOA0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of AOBJBUR") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet AOBJBUR.AREAD([AOA_]ABREV,[AOA_]IDENT1,[AOA_]IDENT2,[AOA_]IDENT3))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("AOBJBUR.AOA.ABREV ="-num$(AOBJBUR.AOA.ABREV)) From ASYRCOM
 Call TRACE("AOBJBUR.AOA.IDENT1 ="-num$(AOBJBUR.AOA.IDENT1)) From ASYRCOM
 Call TRACE("AOBJBUR.AOA.IDENT2 ="-num$(AOBJBUR.AOA.IDENT2)) From ASYRCOM
 Call TRACE("AOBJBUR.AOA.IDENT3 ="-num$(AOBJBUR.AOA.IDENT3)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(AOBJBUR.AOA.AKEYS)
  Call TRACE("-"-num$(I)-":"-AOBJBUR.AOA.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [AOA_]
FreeGroup AOBJBUR
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(AOBJBUR,ACLE,ASTATUS,_ETAG)
Variable Instance AOBJBUR Using R_AOBJBUR
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _ABREV(10)
Local Char _IDENT1(80)
Local Char _IDENT2(80)
Local Char _IDENT3(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ABREV = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_IDENT1 = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_IDENT2 = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_IDENT3 = num$([L]CLE(4)) : Endif
Raz [L]_ETAG
Local File AOBJBUR [AOA]
Default File [F:AOA]
Read [F:AOA]AOA0 = [L]_ABREV;[L]_IDENT1;[L]_IDENT2;[L]_IDENT3
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:AOA]UPDTICK)>0
 [L]_ETAG = num$([F:AOA]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(AOBJBUR,ACLE,ASTATUS)
Variable Instance AOBJBUR Using R_AOBJBUR
Value Char ACLE
Variable Integer ASTATUS
Local Char _ABREV(10)
Local Char _IDENT1(80)
Local Char _IDENT2(80)
Local Char _IDENT3(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ABREV = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_IDENT1 = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_IDENT2 = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_IDENT3 = num$([L]CLE(4)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet AOBJBUR.AREAD([L]_ABREV,[L]_IDENT1,[L]_IDENT2,[L]_IDENT3))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(AOBJBUR,_ABREV,_IDENT1,_IDENT2,_IDENT3,ASTATUS)
Variable Instance AOBJBUR Using R_AOBJBUR
Value Char _ABREV
Value Char _IDENT1
Value Char _IDENT2
Value Char _IDENT3
Variable Integer ASTATUS

If AOBJBUR = null : End : Endif

Gosub AVARIABLES From WMR00AOBJBUR
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If AOBJBUR.APARENT=null
 [L]A_I = AOBJBUR.freeSnapshot
 AOBJBUR.snapshotEnabled = 0
 AOBJBUR.setAccessorEnabled = 0
Endif

[L]ASTATUS = max([L]ASTATUS,fmet AOBJBUR.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

AOBJBUR.AOA.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet AOBJBUR.AOA.AREAD([L]_ABREV,[L]_IDENT1,[L]_IDENT2,[L]_IDENT3))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AOBJBUR.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & AOBJBUR.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet AOBJBUR._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If AOBJBUR.APARENT=null
 AOBJBUR.snapshotEnabled = 1
 AOBJBUR.setAccessorEnabled = 1
Endif
LogicClose File [AOA]
End



