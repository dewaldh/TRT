#<AdxTL>@(#)0.0.0.0 $Revision$Class Sales reps
# Supervisor
## CRUD-CLASSE ## SALESREPM
# 2018-08-27 13:27:45 485


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File SALESREP [REP_]

If !SILENCE : Call TRACE("2 --> Local Instance R_SALESREPM") From ASYRCOM : Endif
Local Instance SALESREPM Using R_SALESREPM

If !SILENCE : Call TRACE("3 --> New Instance R_SALESREPM") From ASYRCOM : Endif
SALESREPM = NewInstance R_SALESREPM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [REP_]REP0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of SALESREP") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet SALESREPM.AREAD([REP_]REPNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("SALESREPM.REP.REPNUM ="-num$(SALESREPM.REP.REPNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(SALESREPM.REP.AKEYS)
  Call TRACE("-"-num$(I)-":"-SALESREPM.REP.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [REP_]
FreeGroup SALESREPM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(SALESREPM,ACLE,ASTATUS,_ETAG)
Variable Instance SALESREPM Using R_SALESREPM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _REPNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_REPNUM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File SALESREP [REP]
Default File [F:REP]
Read [F:REP]REP0 = [L]_REPNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:REP]UPDTICK)>0
 [L]_ETAG = num$([F:REP]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(SALESREPM,ACLE,ASTATUS)
Variable Instance SALESREPM Using R_SALESREPM
Value Char ACLE
Variable Integer ASTATUS
Local Char _REPNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_REPNUM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SALESREPM.AREAD([L]_REPNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(SALESREPM,_REPNUM,ASTATUS)
Variable Instance SALESREPM Using R_SALESREPM
Value Char _REPNUM
Variable Integer ASTATUS

If SALESREPM = null : End : Endif

Gosub AVARIABLES From WMR00SALESREPM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If SALESREPM.APARENT=null
 [L]A_I = SALESREPM.freeSnapshot
 SALESREPM.snapshotEnabled = 0
 SALESREPM.setAccessorEnabled = 0
Endif

If fmet SALESREPM.ACTX.AGETAFCRIGHT(SALESREPM,"GESREP",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:REP]
Read [F:REP]REP0 = [L]_REPNUM
If fstat
[L]A_ERROR = [L]_REPNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(SALESREPM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet SALESREPM.ACTX.AGETAFCRIGHTR(SALESREPM,"GESREP",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet SALESREPM.ACTX.ASTACRITROLE(SALESREPM,[L]_REPNUM
& ,"REP","REP",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet SALESREPM.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

SALESREPM.REP.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet SALESREPM.REP.AREAD([L]_REPNUM))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet SALESREPM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & SALESREPM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet SALESREPM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If SALESREPM.APARENT=null
 SALESREPM.snapshotEnabled = 1
 SALESREPM.setAccessorEnabled = 1
Endif
LogicClose File [REP] ,[BPR]
End



