#<AdxTL>@(#)0.0.0.0 $Revision$Class Change to daylight saving time
# Supervisor
## CRUD-CLASSE ## TIMETRANS
# 2018-08-27 13:45:48 745


############################################################################################
### Subprog AUPDATE
############################################################################################
Subprog AUPDATE(TIMETRANS,ASTATUS)
Variable Instance TIMETRANS Using R_TIMETRANS
Variable Integer ASTATUS

If TIMETRANS = null : End : Endif

Gosub AVARIABLES From WMR00TIMETRANS
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

Gosub AREPCONTROL_AUPDATE
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If !adxlog
 Gosub AUPDATE_TR_TIMETRANS
Else
 Gosub AUPDATE_TIMETRANS
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_END : Return : Endif

Gosub _AUPDATE_AFTER
[L]A_I = TIMETRANS.freeSnapshot
TIMETRANS.snapshotEnabled = 1
$AUPDATE_END
End

#-----------------------------------------------------#
$AREPCONTROL_AUPDATE
TIMETRANS.ASTALIN = [V]CST_AUPD
TIMETRANS.TTR.ASTALIN = [V]CST_AUPD
[L]A_ASTALIN = TIMETRANS.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet TIMETRANS.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AUPDATE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = TIMETRANS.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet TIMETRANS.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AUPDATE_CONTROL
Gosub _AUPDATE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet TIMETRANS._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet TIMETRANS._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet TIMETRANS._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AUPDATE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_BEFORE
If TIMETRANS.TTR.ASTALIN = [V]CST_ANEWDEL : Return : Endif
TIMETRANS.TTR.ASTALIN = [V]CST_AUPD
If [V]CST_ASTALIN(TIMETRANS.TTR.ASTALIN)<>""
 [L]A_ASTALIN = TIMETRANS.TTR.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet TIMETRANS.TTR.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_AFTER

If [V]CST_ASTALIN(TIMETRANS.TTR.ASTALIN)<>""
 [L]A_ASTALIN = TIMETRANS.TTR.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet TIMETRANS.TTR.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
Return

#-----------------------------------------------------#
$AUPDATE_TR_TIMETRANS
Trbegin [F:TTR]
 Gosub AUPDATE_TIMETRANS
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AUPDATE_AFTER
If find(TIMETRANS.TTR.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 TIMETRANS.TTR.ASTALIN = [V]CST_ALL
Endif
Return

#-----------------------------------------------------#
$AUPDATE_TIMETRANS
[L]A_ASTALIN = TIMETRANS.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet TIMETRANS.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TIMETRANS.TTR._AUPDATE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = TIMETRANS.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet TIMETRANS.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AUPDATE_ABORT
Rollback
$_AUPDATE_ABORT
If TIMETRANS.snapshotEnabled=1
 [L]A_RETIK = TIMETRANS.revertUpdTick
Endif

[L]ASTATUS = max(fmet TIMETRANS.ACTION("AUPDATE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



