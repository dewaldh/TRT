#<AdxTL>@(#)0.0.0.0 $Revision$Class Assignment rules
# Supervisor
## CRUD-CLASSE ## PARMTO
# 2018-08-27 13:20:39 728


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File PARMTO [PTO_]

If !SILENCE : Call TRACE("2 --> Local Instance R_PARMTO") From ASYRCOM : Endif
Local Instance PARMTO Using R_PARMTO

If !SILENCE : Call TRACE("3 --> New Instance R_PARMTO") From ASYRCOM : Endif
PARMTO = NewInstance R_PARMTO AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [PTO_]PTO0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of PARMTO") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet PARMTO.AREAD([PTO_]PTOCOD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("PARMTO.PTO.PTOCOD ="-num$(PARMTO.PTO.PTOCOD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(PARMTO.PTO.AKEYS)
  Call TRACE("-"-num$(I)-":"-PARMTO.PTO.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [PTO_]
FreeGroup PARMTO
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(PARMTO,ACLE,ASTATUS,_ETAG)
Variable Instance PARMTO Using R_PARMTO
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _PTOCOD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PTOCOD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File PARMTO [PTO]
Default File [F:PTO]
Read [F:PTO]PTO0 = [L]_PTOCOD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:PTO]UPDTICK)>0
 [L]_ETAG = num$([F:PTO]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(PARMTO,ACLE,ASTATUS)
Variable Instance PARMTO Using R_PARMTO
Value Char ACLE
Variable Integer ASTATUS
Local Char _PTOCOD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PTOCOD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PARMTO.AREAD([L]_PTOCOD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(PARMTO,_PTOCOD,ASTATUS)
Variable Instance PARMTO Using R_PARMTO
Value Char _PTOCOD
Variable Integer ASTATUS

If PARMTO = null : End : Endif

Gosub AVARIABLES From WMR00PARMTO
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If PARMTO.APARENT=null
 [L]A_I = PARMTO.freeSnapshot
 PARMTO.snapshotEnabled = 0
 PARMTO.setAccessorEnabled = 0
Endif

If fmet PARMTO.ACTX.AGETAFCRIGHT(PARMTO,"GESPTO",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:PTO]
Read [F:PTO]PTO0 = [L]_PTOCOD
If fstat
[L]A_ERROR = [L]_PTOCOD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PARMTO,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet PARMTO.ACTX.AGETAFCRIGHTR(PARMTO,"GESPTO",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet PARMTO.ACTX.ASTACRITROLE(PARMTO,[L]_PTOCOD
& ,"PTO","PTO",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet PARMTO.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

PARMTO.PTO.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet PARMTO.PTO.AREAD([L]_PTOCOD))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PARMTO.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & PARMTO.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet PARMTO._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If PARMTO.APARENT=null
 PARMTO.snapshotEnabled = 1
 PARMTO.setAccessorEnabled = 1
Endif
LogicClose File [PTO]
End



