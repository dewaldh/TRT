#<AdxTL>@(#)0.0.0.0 $Revision$Class Ledger
# Supervisor
## CRUD-CLASSE ## GLED
# 2018-08-27 12:33:16 832


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File GLED [LED_]

If !SILENCE : Call TRACE("2 --> Local Instance C_GLED") From ASYRCOM : Endif
Local Instance GLED Using C_GLED

If !SILENCE : Call TRACE("3 --> New Instance C_GLED") From ASYRCOM : Endif
GLED = NewInstance C_GLED AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [LED_]LED0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of GLED") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet GLED.AREAD([LED_]LED))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("GLED.LED ="-num$(GLED.LED)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(GLED.AKEYS)
  Call TRACE("-"-num$(I)-":"-GLED.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [LED_]
FreeGroup GLED
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(GLED,ACLE,ASTATUS,_ETAG)
Variable Instance GLED Using C_GLED
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _LED(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_LED = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File GLED [LED]
Default File [F:LED]
Read [F:LED]LED0 = [L]_LED
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:LED]UPDTICK)>0
 [L]_ETAG = num$([F:LED]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(GLED,ACLE,ASTATUS)
Variable Instance GLED Using C_GLED
Value Char ACLE
Variable Integer ASTATUS
Local Char _LED(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_LED = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet GLED.AREAD([L]_LED))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(GLED,_LED,ASTATUS)
Variable Instance GLED Using C_GLED
Value Char _LED
Variable Integer ASTATUS

If GLED = null : End : Endif

Gosub AVARIABLES From WMC00GLED
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If GLED.APARENT=null
 [L]A_I = GLED.freeSnapshot
 GLED.snapshotEnabled = 0
 GLED.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & GLED.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet GLED._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If GLED.APARENT=null
 GLED.snapshotEnabled = 1
 GLED.setAccessorEnabled = 1
Endif
LogicClose File [LED]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet GLED._ACTION_PARAM("AREAD_BEFORE",[L]_LED))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:LED]
Read [F:LED]LED0 = [L]_LED
If fstat
[L]A_ERROR = [L]_LED
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(GLED,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:LED]AUUID)>0 & [F:LED]AUUID=NullUuid
 [F:LED]AUUID = getUuid
Endif
SetInstance GLED With [F:LED]
GLED.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To 9
 [L]A_NEWCOL += 1
 GLED.LISDIE(A_NEWCOL) = NewInstance  C_GLED_LISDIE(GLED.ACTX,NullUuid,[L]A_I,GLED,"LISDIE") AllocGroup GLED
 GLED.LISDIE(A_NEWCOL).DIE = [F:LED]DIE([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet GLED.LISDIE(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet GLED.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="GLED" & ZONE="DESTRA" & IDENT1=GLED.LED & IDENT2=""
 Call ASETTEXTRA(GLED.AXX,GLED.AllocGrp(),"DESTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 GLED.AXX(maxtab(GLED.AXX)).FLG = 0
Next AXX
If !len(fmet GLED.AGETTEXTRA("DESTRA"))
 Call ASETTEXTRA(GLED.AXX,GLED.AllocGrp(),"DESTRA",
& fmet GLED.AGETTEXTRALAN("DESTRA",GLED.ACTX.AFOLD.ALANGDEF),
& GLED.ACTX.LAN) From ASYRSUB
Endif
For [AXX] Where CODFIC="GLED" & ZONE="SHOTRA" & IDENT1=GLED.LED & IDENT2=""
 Call ASETTEXTRA(GLED.AXX,GLED.AllocGrp(),"SHOTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 GLED.AXX(maxtab(GLED.AXX)).FLG = 0
Next AXX
If !len(fmet GLED.AGETTEXTRA("SHOTRA"))
 Call ASETTEXTRA(GLED.AXX,GLED.AllocGrp(),"SHOTRA",
& fmet GLED.AGETTEXTRALAN("SHOTRA",GLED.ACTX.AFOLD.ALANGDEF),
& GLED.ACTX.LAN) From ASYRSUB
Endif

Return



