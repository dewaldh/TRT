#<AdxTL>@(#)0.0.0.0 $Revision$Class Payment balance declaration
# Supervisor
## CRUD-CLASSE ## PBDGEN
# 2018-08-27 13:21:16 217


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File PBDGEN [PBDGEN_]

If !SILENCE : Call TRACE("2 --> Local Instance R_PBDGEN") From ASYRCOM : Endif
Local Instance PBDGEN Using R_PBDGEN

If !SILENCE : Call TRACE("3 --> New Instance R_PBDGEN") From ASYRCOM : Endif
PBDGEN = NewInstance R_PBDGEN AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [PBDGEN_]PBDGEN0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of PBDGEN") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet PBDGEN.AREAD([PBDGEN_]CODE))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("PBDGEN.PBDGEN.CODE ="-num$(PBDGEN.PBDGEN.CODE)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(PBDGEN.PBDGEN.AKEYS)
  Call TRACE("-"-num$(I)-":"-PBDGEN.PBDGEN.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [PBDGEN_]
FreeGroup PBDGEN
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(PBDGEN,ACLE,ASTATUS,_ETAG)
Variable Instance PBDGEN Using R_PBDGEN
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CODE(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODE = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File PBDGEN [PBDGEN]
Default File [F:PBDGEN]
Read [F:PBDGEN]PBDGEN0 = [L]_CODE
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:PBDGEN]UPDTICK)>0
 [L]_ETAG = num$([F:PBDGEN]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(PBDGEN,ACLE,ASTATUS)
Variable Instance PBDGEN Using R_PBDGEN
Value Char ACLE
Variable Integer ASTATUS
Local Char _CODE(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODE = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PBDGEN.AREAD([L]_CODE))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(PBDGEN,_CODE,ASTATUS)
Variable Instance PBDGEN Using R_PBDGEN
Value Char _CODE
Variable Integer ASTATUS

If PBDGEN = null : End : Endif

Gosub AVARIABLES From WMR00PBDGEN
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If PBDGEN.APARENT=null
 [L]A_I = PBDGEN.freeSnapshot
 PBDGEN.snapshotEnabled = 0
 PBDGEN.setAccessorEnabled = 0
Endif

If fmet PBDGEN.ACTX.AGETAFCRIGHT(PBDGEN,"GESPBDECO",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:PBDGEN]
Read [F:PBDGEN]PBDGEN0 = [L]_CODE
If fstat
[L]A_ERROR = [L]_CODE
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PBDGEN,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet PBDGEN.ACTX.AGETAFCRIGHTR(PBDGEN,"GESPBDECO",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet PBDGEN.ACTX.ASTACRITROLE(PBDGEN,[L]_CODE
& ,"PBDECO","PBDGEN",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet PBDGEN.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

PBDGEN.PBDGEN.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet PBDGEN.PBDGEN.AREAD([L]_CODE))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PBDGEN.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & PBDGEN.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet PBDGEN._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If PBDGEN.APARENT=null
 PBDGEN.snapshotEnabled = 1
 PBDGEN.setAccessorEnabled = 1
Endif
LogicClose File [PBDGEN]
End



