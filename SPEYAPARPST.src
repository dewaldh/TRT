#<AdxTL>@(#)0.0.0.0 $Revision$
######################################################################################################
# FILE NAME   : SPEYAPARPST
# DESCRIPTION : Posting of AP / AR Jourlans with Validations from Payments
######################################################################################################
# DATE        : 17-12-2018
# AUTHOR      : Dewald Henning
# COMPANY     : Leverage Technologies
# VERSION     : 1.0.5
#-----------------------------------------------------------------------------------------------------
# Test script from YPAYPST
#-----------------------------------------------------------------------------------------------------
######################################################################################################

#----------------------------------------
# AP/AR Validations
#----------------------------------------
$APAR_SIMULATION

  #Open Tables
  If clalev([F:YPSIM]) = 0 : Local File YPAYMSIM [YPSIM]  : Endif
  If clalev([F:PYH]) = 0 : Local File PAYMENTH [PYH] : Endif
  If clalev([F:YELA]) = 0  : Local File YENTLOAAGR [YELA]  : Endif

  #Variables
  Local Char PQUERY(250)(0..) #Payment Query
  Local Char CQUERY(250)(0..) #Cheque Query
  Local Char ELAQRY(250)(0..) #ELA Query
  Local Char EXECSP(250)
  Local Integer YLIG
  Local Integer YTRANSNBR

#SELECT DISTINCT FRMNUM From PATMENTH Where FRMNUM <> ‘’ and FRMFLG <> 0 and YSTA = 1 and SHARED BANK ACCOUNT TRUE

  #Statements and Insert to Simulation tables
  PQUERY(0) = "SELECT PAY.NUM_0,PAY.FRMNUM_0, PAY.BAN_0, SUM(PAY.AMTBAN_0), BAN.YELA_0, PAY.SNS_0, PAY.BPRSAC_0, PAY.BPR_0, PAY.FRMFLG_0"
  PQUERY(1) -= "FROM PAYMENTH PAY"
  PQUERY(2) -= "INNER JOIN BANK BAN ON PAY.BAN_0 = BAN.BAN_0"
  PQUERY(3) -= "WHERE PAY.STA_0 = 9 AND PAY.FRMNUM_0 <> '' or PAY.FRMNUM_0 = '' and BAN.YBANPRNSTA_0 = 1 and PAY.YPSTSTA_0 not in (2,4)"
  PQUERY(4) -= "GROUP BY  FRMNUM_0, PAY.BAN_0, BAN.YELA_0,  PAY.NUM_0, PAY.SNS_0, PAY.BPRSAC_0, PAY.BPR_0, PAY.FRMFLG_0"

  For (Char YNUM, Char YFRMNUM, Char YBAN, Decimal SUMAMT, Char YELA, Integer YSNS, Char YBPSAC, Char YBP, Integer YFRMFLG) From "5" Sql PQUERY As [YLNK]
    #Execute Path for ELA
    If [F:YLNK]YFRMNUM <> ""
      EXECSP = "EXEC [BB_ELA_PATH_VALIDATION] '"+[F:YLNK]YELA+"'"
      Execsql From "5" Sql EXECSP

      #Execute Bank ELA Validations
      EXECSP = "EXEC [BB_ELA_BANK_VALIDATION] '"+[F:YLNK]YBAN+"', '"+[F:YLNK]YELA+"'"
      Execsql From "5" Sql EXECSP

      #Clear Query values so that it does not concat strings
      ELAQRY(0) = "" : ELAQRY(1) = "" : ELAQRY(2) = ""
      ELAQRY(0) = "SELECT value FROM YICELA"
      ELAQRY(1) -= "CROSS APPLY STRING_SPLIT(YELAPATH_0,',')"
      ELAQRY(2) -= "WHERE YELASTR_0 = '"+[F:YLNK]YELA+"'"

      For (Char YVAL(250)) From "5" Sql ELAQRY As [YLNKELA]
        If [F:YLNKELA]YVAL <> ""
          YLIG += 1
          #Using THE CURRENT ELA - Provider
          Read [F:YELA]YELA0 = [F:YLNK2]YVAL
          [F:YPSIM]YNUM = [F:YLNK]YNUM
          [F:YPSIM]YFRMNUM = [F:YLNK]YNUM
          [F:YPSIM]YJOU = func AFNC.PARAM("YDFCJOU","")
          [F:YPSIM]YENTTYP = func AFNC.PARAM("YDFCGTE","")
          [F:YPSIM]YDES = "System generated from Payment Entry"-[F:YLNK]YNUM
          [F:YPSIM]YFCY = [F:YELA]YFCYPRO
          [F:YPSIM]YCOA = [F:YELA]YCOAPRO
          [F:YPSIM]YACC = [F:YELA]YACCPRO
          [F:YPSIM]YLIGDES = "Entry Line"-num$(YLIG)
          [F:YPSIM]YCTRL = [F:YLNK]YBPSAC
          [F:YPSIM]YBP = [F:YLNK]YBP
          [F:YPSIM]YSNS = [F:YLNK]YSNS
          If [F:YLNK]YSNS = 1 : [F:YPSIM]YDEB = [F:YLNK]SUMAMT : [F:YPSIM]YCDT = 0: Endif
          If [F:YLNK]YSNS = 2 : [F:YPSIM]YCDT = [F:YLNK]SUMAMT : [F:YPSIM]YDEB = 0: Endif
          [F:YPSIM]YDIE0 = [F:YELA]YPDIE0
          [F:YPSIM]YDIE1 = [F:YELA]YPDIE1
          [F:YPSIM]YDIE2 = [F:YELA]YPDIE2
          [F:YPSIM]YDIE3 = [F:YELA]YPDIE3
          [F:YPSIM]YDIE4 = [F:YELA]YPDIE4
          [F:YPSIM]YCCE0 = [F:YELA]YPCCE0
          [F:YPSIM]YCCE1 = [F:YELA]YPCCE1
          [F:YPSIM]YCCE2 = [F:YELA]YPCCE2
          [F:YPSIM]YCCE3 = [F:YELA]YPCCE3
          [F:YPSIM]YCCE4 = [F:YELA]YPCCE4
          [F:YPSIM]YTRANSNBR = YTRANSNBR
          [F:YPSIM]YMESS = "Validated"
          [F:YPSIM]YFRMFCY = [F:YELA]YFCYPRO
          [F:YPSIM]YTOFCY = [F:YELA]YFCYREC
          Write [F:YPSIM]
        Endif
      Next
    Endif
    #Update Payment
    Read [F:PYH]PYH0 = [F:YLNK]YNUM
    [F:PYH]YPSTSTA = 2
    Rewrite [F:PYH]
  Next

#  #AP insert to simulations
#  PQUERY(0) = "SELECT PAY.NUM_0,PAY.FRMNUM_0, PAY.BAN_0, SUM(PAY.AMTBAN_0), BAN.YELA_0, PAY.SNS_0, PAY.BPRSAC_0, PAY.BPR_0"
#  PQUERY(1) -= "FROM PAYMENTH PAY"
#  PQUERY(2) -= "INNER JOIN BANK BAN ON PAY.BAN_0 = BAN.BAN_0"
#  PQUERY(3) -= "WHERE PAY.STA_0 = 9 AND PAY.FRMNUM_0 = '' and BAN.YBANPRNSTA_0 = 1"
#  PQUERY(4) -= "GROUP BY  FRMNUM_0, PAY.BAN_0, BAN.YELA_0,  PAY.NUM_0, PAY.SNS_0, PAY.BPRSAC_0, PAY.BPR_0"

  #Close Tables
  If clalev([F:YPSIM]) = 0 : Close Local File [F:YPSIM] : Endif
  If clalev([F:PYH]) = 0   : Close Local File [F:PYH]   : Endif

End

Return

#--------------------------------------
# Post Business Batch
#--------------------------------------
$APAR_POST
#Open Tables
If clalev([F:YBBS])= 0  : Local File YBBSIM     [YBBS] : Endif
If clalev([F:YBPS]) = 0 : Local File YBBPSIM    [YBPS]  : Endif
If clalev([F:YJOU]) = 0 : Local File GJOURNAL   [YJOU]  : Endif

  #Set Batch Number
  #Local Char YBATNBR(50) : [L]YBATNBR = [M:YBB0]YBATNBR
  Local Char NAME(255)   #: [L]NAME =  [L]YBATNBR+"_"+format$("D:YYMMDDhhmmss",date$)
  Local Char TRACE(255)
  Local Char XMSG(250)(99)
  Local Char XMOT(250)
  Local Integer XCONTA : XCONTA = 0
  Local Char YCUR(3) : [L]YCUR = "AUD"

  #Start Trace
  Call OUVRE_TRACE("AP/AR Post") From LECFIC
  Call ECR_TRACE("Start Date: " + num$(datetime$),0) From GESECRAN

  NAME = "APAR" + format$("D:YYMMDDhhmmss",date$)

  #OPEN File To Write GL DATA For IMPORTING
  Openo filpath('tmp',NAME,'DAT'),-1 Using [ZGL]

  Iomode adxium 50 Using [ZGL]
  Iomode adxirs chr$(13)+ chr$(10) Using [ZGL]
  Iomode adxifs ',' Using [ZGL]

  #--- Write File Start ---#

  Local Integer YPRE_TRANSNBR
  Local Char YSNS(3)
  Local Char YLEDTYP(3) : [L]YLEDTYP = "1"
  Local Char YDACDIA(5) : [L]YDACDIA = "STDCO"
  Local Decimal YAMTCUR
  Local Char YBATDAT(10) : [L]YBATDAT = num$(format$("D:YYYYMMDD", [M:YBB0]YBATDAT))
  Local Char YSTA(1) : YSTA = "1" #Temp Status ALWAYS
  Local Char YCAT(1)
  If [M:YBB0]YBATCAT = 1 : YCAT = "1" : Endif #Actual
  If [M:YBB0]YBATCAT = 2 : YCAT = "5" : Endif #Template

  #--- Write File Start ---#
  Local Integer DI, SI
  Local Char QUERY(255)(0..)

  QUERY(0) =  "SELECT YNUM_0, YENTTYP_0, YJOU_0, YTRANSNBR_0, YDES_0, YFCY_0, YCOA_0, YACC_0, YLIGDES_0, YCTRL_0, YBP_0, YDEB_0, YCDT_0, YREF_0,"
  QUERY(1) -=  "YDIE0_0, YCCE0_0,YDIE1_0, YCCE1_0,YDIE2_0, YCCE2_0,YDIE3_0, YCCE3_0,YDIE4_0, YCCE4_0,YLIG_0, YBAN_0, YFRMFCY_0, YTOFCY_0"
  QUERY(2) -=  "From YPAYMSIM"
  QUERY(3) -=  "Where YMESS = 'Validated'" #TODO: Update the where clause
  QUERY(4) -=  "GROUP By YFCY_0, YNUM_0, YENTTYP_0, YJOU_0, YTRANSNBR_0, YDES_0, YCOA_0, YACC_0, YLIGDES_0, YCTRL_0, YBP_0, YDEB_0, YCDT_0, YREF_0, YDIE0_0, YCCE0_0,YDIE1_0, YCCE1_0,"
  QUERY(5) -=  "YDIE2_0, YCCE2_0,YDIE3_0, YCCE3_0,YDIE4_0, YCCE4_0, YLIG_0, YBAN_0, YFRMFCY_0, YTOFCY_0"
  QUERY(6) -=  "Order By YTRANSNBR_0 Asc"


  For (Char YNUM, Char YENTTYP, Char YJOU, Integer YTRANSNBR, Char YDETDES, Char YFCY,
&     Char YCOA, Char YACC, Char YLIGDES, Char YCTRL, Char YBP, Decimal YDEB, Decimal YCDT,
&     Char YTAX, Char YREF, Char YPJT, Char YDIE0, Char YCCE0,Char YDIE1, Char YCCE1,
&     Char YDIE2, Char YCCE2, Char YDIE3, Char YCCE3, Char YDIE4, Char YCCE4,
&     Decimal YGSTAMT, Decimal YAMTTAX, Integer YLIG, Char YBAN, Char YFRMFCY, Char YTOFCY)
&     From "5" Sql QUERY As [YGLD]
    SI += 1
    #Get Batch Type from Journal -- We need this for the IE transaction type
    Read [F:YJOU]JOU0 = [F:YGLD]YJOU

    If [L]YPRE_TRANSNBR = 0 : [L]YPRE_TRANSNBR = [F:YGLD]YTRANSNBR : Endif #Set First Transaction Number for IE type
    #Infbox "PREFCY"-num$(YPRE_IEFCY),"TABFCY"-num$([F:YGLD]YFCY),"PRETRANS"-num$(YPRE_TRANSNBR), "TABTRANS"-num$([F:YGLD]YTRANSNBR)
    If [L]YPRE_TRANSNBR <> [F:YGLD]YTRANSNBR
    [L]YPRE_TRANSNBR = [F:YGLD]YTRANSNBR
    #Create Header
    Local Char YNAM(4) : YNAM = format$("D:mmss",date$)
    Call CREATE_GL_HEADER([F:YGLD]YFCY, [F:YGLD]YENTTYP, [F:YGLD]YNUM+"-"+num$(YTRANSNBR)+"-"+[F:YGLD]YFCY, [M:YBB0]YBATDES, YBATDAT, [F:YGLD]YJOU, YCAT, YSTA, "AUD", YDACDIA,[L]YNUM)
    YPRE_TRANSNBR = [F:YGLD]YTRANSNBR
    [L]DI = 0
    Endif


    If [F:YGLD]YDEB = 0 : [L]YAMTCUR = [F:YGLD]YCDT : [L]YSNS = "-1"   : Endif
    If [F:YGLD]YCDT = 0 : [L]YAMTCUR = [F:YGLD]YDEB : [L]YSNS = "1"  : Endif
    [L]DI += 1
    Call CREATE_GL_DETAIL(num$([L]DI), num$([L]DI), [F:YGLD]YFCY, [L]YLEDTYP, [F:YGLD]YCTRL,[F:YGLD]YACC,
&                       [F:YGLD]YBP, num$([L]YAMTCUR), [L]YSNS, [F:YGLD]YLIGDES, [F:YGLD]YREF, [F:YGLD]YTAX,
&                       [F:YGLD]YPJT,[F:YGLD]YFRMFCY, [F:YGLD]YTOFCY )

    #Check for Analytical Lines
    If [F:YGLD]YCCE0 <> "" or [F:YGLD]YCCE1 <> "" or [F:YGLD]YCCE2 <> ""  or [F:YGLD]YCCE3 <> ""  or [F:YGLD]YCCE4 <> "" Then
      Local Char YQTY(1) : YQTY = "1"
      [L]DI += 1
      Call CREATE_GL_ADETAIL(num$([L]DI), [F:YGLD]YDIE0, [F:YGLD]YCCE0, [F:YGLD]YDIE1, [F:YGLD]YCCE1,
&                            [F:YGLD]YDIE2, [F:YGLD]YCCE2, [F:YGLD]YDIE3, [F:YGLD]YCCE3, [F:YGLD]YDIE4,
&                            [F:YGLD]YCCE4, YQTY, num$([L]YAMTCUR))
    Endif

  #--- Write File End ---#
  Next

  #Close file before import
  Openo  Using [ZGL]

  Gosub OUVRE From GIMPOBJ

  Call IMPORTSIL("YGASTEMP", filpath('tmp',NAME,'DAT')) From GIMPOBJ
  #Log messages and error handling
  #https://sagecity.na.sage.com/support_communities/sage_erp_x3/f/sage-x3-general-discussion-forum/104136/importsil---capture-log-messages

  Call ECR_TRACE("End Date: " + num$(datetime$),0) From GESECRAN

  TRACE = GTRACE
  Raz XMSG

  Call FERME_TRACE() From LECFIC
  Call LEC_TRACE From LECFIC

  Local Integer ICR, INC
  Local Char GLCREATED(50)(1..)

  If filinfo(filpath("TRA",TRACE,"tra",0),7) > 0

    Openi filpath("TRA",TRACE,"tra",0) Using [XLL]

    Repeat
     Rdseq XMOT Using [XLL]

      If left$(XMOT,11)="Creation of"
        ICR += 1
        GLCREATED(ICR) = right$(XMOT,19)
      Endif

      #TODO : Update Errors
      If left$(XMOT,5)="<0001"
        INC += 1
#        Read [F:YBPS]YBBPS0 = [L]YBATNBR
#        [F:YBPS]YSTA = right$(XMOT,6)
#        Rewrite [F:YBPS]
      Endif

      #If seg$(XMOT ,1,1) = "<"
      #  XMSG(XCONTA) = XMOT + chr$(10)
      #  XCONTA += 1
      #Endif

    Until fstat <> 0
    Openi Using [XLL]

  Endif

#Close Tables
If clalev([F:YBPS])= 0  : Close Local File [F:YBPS] : Endif
If clalev([F:YJOU]) = 0 : Close Local File [F:YJOU]  : Endif

Return


#------------------
# GL Header
#------------------
Subprog CREATE_GL_HEADER(FCY,TYP,NUM,DESVCR,ACCDAT,JOU,CAT,STA,CUR,DACDIA,BPRVCR)
Value Char FCY
Value Char TYP
Value Char NUM
Value Char DESVCR
Value Char ACCDAT
Value Char JOU
Value Char CAT
Value Char STA
Value Char CUR
Value Char DACDIA
Value Char BPRVCR

Local Char ORIGIN(1) : ORIGIN = "3"  #-- Origin 3 = Import

  Wrseq 'G,'+
&       FCY + ','+
&       TYP + ','+
&       NUM + ','+
&       DESVCR + ','+
&       ACCDAT + ','+
&       JOU + ','+
&       CAT + ','+
&       STA + ','+
&       CUR + ','+
&       DACDIA + ','+
&       ORIGIN + ','+
&       BPRVCR
& Using [ZGL]

End

#------------------
# GL Detail
#------------------
Subprog CREATE_GL_DETAIL(LIN,IDTLIN,FCYLIN,LEDTYP,SAC,ACC,BPR,AMTCUR,SNS,DES,FREREF,TAX,PJTLIN,YFRMFCY,YTOFCY)

Value Char   LIN
Value Char   IDTLIN
Value Char   FCYLIN
Value Char   LEDTYP
Value Char   SAC
Value Char   ACC
Value Char   BPR
Value Char   AMTCUR
Value Char   SNS
Value Char   DES
Value Char   FREREF
Value Char   TAX
Value Char   PJTLIN
Value Char   YFRMFCY
Value Char   YTOFCY

  Wrseq 'D,'+
&       LIN + ','+
&       IDTLIN + ','+
&       FCYLIN + ','+
&       LEDTYP + ','+
&       SAC + ','+
&       ACC + ','+
&       BPR + ','+
&       AMTCUR + ','+
&       SNS + ','+
&       DES + ','+
&       FREREF + ','+
&       TAX + ','+
&       PJTLIN + ','+
&       YFRMFCY + ','+
&       YTOFCY
& Using [ZGL]

End

#------------------
# GL Analytical
#------------------
Subprog CREATE_GL_ADETAIL(ANALIN,DIE0,CCE0,DIE1,CCE1,DIE2,CCE2,DIE3,CCE3,DIE4,CCE4,QTY,AMTCUR)

#Dimentions
Value Char     ANALIN
Value Char     DIE0
Value Char     CCE0
Value Char     DIE1
Value Char     CCE1
Value Char     DIE2
Value Char     CCE2
Value Char     DIE3
Value Char     CCE3
Value Char     DIE4
Value Char     CCE4
Value Char     QTY
Value Char     AMTCUR

  Wrseq 'A,'+
&       ANALIN + ','+
&       DIE0 + ','+
&       CCE0 + ','+
&       DIE1 + ','+
&       CCE1 + ','+
&       DIE2 + ','+
&       CCE2 + ','+
&       DIE3 + ','+
&       CCE3 + ','+
&       DIE4 + ','+
&       CCE4 + ','+
&       QTY + ','+
&       AMTCUR
& Using [ZGL]


End

