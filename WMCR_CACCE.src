#<AdxTL>@(#)0.0.0.0 $Revision$Class Analytical dimensions
# Supervisor
## CRUD-CLASSE ## CACCE
# 2018-08-27 12:27:57 711


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File CACCE [CCE_]

If !SILENCE : Call TRACE("2 --> Local Instance C_CACCE") From ASYRCOM : Endif
Local Instance CACCE Using C_CACCE

If !SILENCE : Call TRACE("3 --> New Instance C_CACCE") From ASYRCOM : Endif
CACCE = NewInstance C_CACCE AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [CCE_]CCE0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of CACCE") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet CACCE.AREAD([CCE_]DIE,[CCE_]CCE))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("CACCE.DIE ="-num$(CACCE.DIE)) From ASYRCOM
 Call TRACE("CACCE.CCE ="-num$(CACCE.CCE)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(CACCE.AKEYS)
  Call TRACE("-"-num$(I)-":"-CACCE.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [CCE_]
FreeGroup CACCE
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(CACCE,ACLE,ASTATUS,_ETAG)
Variable Instance CACCE Using C_CACCE
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _DIE(3)
Local Char _CCE(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_DIE = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CCE = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File CACCE [CCE]
Default File [F:CCE]
Read [F:CCE]CCE0 = [L]_DIE;[L]_CCE
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:CCE]UPDTICK)>0
 [L]_ETAG = num$([F:CCE]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(CACCE,ACLE,ASTATUS)
Variable Instance CACCE Using C_CACCE
Value Char ACLE
Variable Integer ASTATUS
Local Char _DIE(3)
Local Char _CCE(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_DIE = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CCE = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet CACCE.AREAD([L]_DIE,[L]_CCE))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(CACCE,_DIE,_CCE,ASTATUS)
Variable Instance CACCE Using C_CACCE
Value Char _DIE
Value Char _CCE
Variable Integer ASTATUS

If CACCE = null : End : Endif

Gosub AVARIABLES From WMC00CACCE
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If CACCE.APARENT=null
 [L]A_I = CACCE.freeSnapshot
 CACCE.snapshotEnabled = 0
 CACCE.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & CACCE.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet CACCE._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If CACCE.APARENT=null
 CACCE.snapshotEnabled = 1
 CACCE.setAccessorEnabled = 1
Endif
LogicClose File [CCE]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet CACCE._ACTION_PARAM("AREAD_BEFORE",[L]_DIE,[L]_CCE))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:CCE]
Read [F:CCE]CCE0 = [L]_DIE;[L]_CCE
If fstat
[L]A_ERROR = [L]_DIE+"~"+[L]_CCE
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(CACCE,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = [F:CCE]ACS
If dim([F:CCE]AUUID)>0 & [F:CCE]AUUID=NullUuid
 [F:CCE]AUUID = getUuid
Endif
SetInstance CACCE With [F:CCE]
CACCE.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To 20
 If ([F:CCE]OTHDIE([L]A_I-1)<>"" or [F:CCE]DEFCCE([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  CACCE.DIEOTH(A_NEWCOL) = NewInstance  C_CACCE_DIEOTH(CACCE.ACTX,NullUuid,[L]A_I,CACCE,"DIEOTH") AllocGroup CACCE
  CACCE.DIEOTH(A_NEWCOL).OTHDIE = [F:CCE]OTHDIE([L]A_I-1)
  CACCE.DIEOTH(A_NEWCOL).DEFCCE = [F:CCE]DEFCCE([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet CACCE.DIEOTH(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 20
 If ([F:CCE]UOM([L]A_I-1)<>"" or [F:CCE]QTY([L]A_I-1)<>0)
  [L]A_NEWCOL += 1
  CACCE.DISUOM(A_NEWCOL) = NewInstance  C_CACCE_DISUOM(CACCE.ACTX,NullUuid,[L]A_I,CACCE,"DISUOM") AllocGroup CACCE
  CACCE.DISUOM(A_NEWCOL).UOM = [F:CCE]UOM([L]A_I-1)
  CACCE.DISUOM(A_NEWCOL).QTY = [F:CCE]QTY([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet CACCE.DISUOM(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet CACCE.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="CACCE" & ZONE="DESTRA" & IDENT1=CACCE.DIE & IDENT2=CACCE.CCE
 Call ASETTEXTRA(CACCE.AXX,CACCE.AllocGrp(),"DESTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 CACCE.AXX(maxtab(CACCE.AXX)).FLG = 0
Next AXX
If !len(fmet CACCE.AGETTEXTRA("DESTRA"))
 Call ASETTEXTRA(CACCE.AXX,CACCE.AllocGrp(),"DESTRA",
& fmet CACCE.AGETTEXTRALAN("DESTRA",CACCE.ACTX.AFOLD.ALANGDEF),
& CACCE.ACTX.LAN) From ASYRSUB
Endif
For [AXX] Where CODFIC="CACCE" & ZONE="SHOTRA" & IDENT1=CACCE.DIE & IDENT2=CACCE.CCE
 Call ASETTEXTRA(CACCE.AXX,CACCE.AllocGrp(),"SHOTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 CACCE.AXX(maxtab(CACCE.AXX)).FLG = 0
Next AXX
If !len(fmet CACCE.AGETTEXTRA("SHOTRA"))
 Call ASETTEXTRA(CACCE.AXX,CACCE.AllocGrp(),"SHOTRA",
& fmet CACCE.AGETTEXTRALAN("SHOTRA",CACCE.ACTX.AFOLD.ALANGDEF),
& CACCE.ACTX.LAN) From ASYRSUB
Endif

Return



