#<AdxTL>@(#)0.0.0.0 $Revision$Class Technical sheet
# Supervisor
## CRUD-CLASSE ## TABCTLD
# 2018-08-27 12:51:10 803


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABCTL [TCT_]

If !SILENCE : Call TRACE("2 --> Local Instance C_TABCTLD") From ASYRCOM : Endif
Local Instance TABCTLD Using C_TABCTLD

If !SILENCE : Call TRACE("3 --> New Instance C_TABCTLD") From ASYRCOM : Endif
TABCTLD = NewInstance C_TABCTLD AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TCT_]TCT0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TABCTLD") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TABCTLD.AREAD([TCT_]TCT,[TCT_]TCTLIN))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TABCTLD.TCT ="-num$(TABCTLD.TCT)) From ASYRCOM
 Call TRACE("TABCTLD.TCTLIN ="-num$(TABCTLD.TCTLIN)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TABCTLD.AKEYS)
  Call TRACE("-"-num$(I)-":"-TABCTLD.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TCT_]
FreeGroup TABCTLD
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TABCTLD,ACLE,ASTATUS,_ETAG)
Variable Instance TABCTLD Using C_TABCTLD
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _TCT(3)
Local Shortint _TCTLIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_TCT = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_TCTLIN = val([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File TABCTL [TCT]
Default File [F:TCT]
Read [F:TCT]TCT0 = [L]_TCT;[L]_TCTLIN
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TCT]UPDTICK)>0
 [L]_ETAG = num$([F:TCT]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TABCTLD,ACLE,ASTATUS)
Variable Instance TABCTLD Using C_TABCTLD
Value Char ACLE
Variable Integer ASTATUS
Local Char _TCT(3)
Local Shortint _TCTLIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_TCT = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_TCTLIN = val([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TABCTLD.AREAD([L]_TCT,[L]_TCTLIN))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TABCTLD,_TCT,_TCTLIN,ASTATUS)
Variable Instance TABCTLD Using C_TABCTLD
Value Char _TCT
Value Shortint _TCTLIN
Variable Integer ASTATUS

If TABCTLD = null : End : Endif

Gosub AVARIABLES From WMC00TABCTLD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TABCTLD.APARENT=null
 [L]A_I = TABCTLD.freeSnapshot
 TABCTLD.snapshotEnabled = 0
 TABCTLD.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & TABCTLD.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet TABCTLD._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If TABCTLD.APARENT=null
 TABCTLD.snapshotEnabled = 1
 TABCTLD.setAccessorEnabled = 1
Endif
LogicClose File [TCT]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet TABCTLD._ACTION_PARAM("AREAD_BEFORE",[L]_TCT,[L]_TCTLIN))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:TCT]
Read [F:TCT]TCT0 = [L]_TCT;[L]_TCTLIN
If fstat
[L]A_ERROR = [L]_TCT+"~"+num$([L]_TCTLIN)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABCTLD,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:TCT]AUUID)>0 & [F:TCT]AUUID=NullUuid
 [F:TCT]AUUID = getUuid
Endif
SetInstance TABCTLD With [F:TCT]
TABCTLD.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet TABCTLD.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="TABCTL" & ZONE="TCTDESAXX" & IDENT1=TABCTLD.TCT & IDENT2=""
 Call ASETTEXTRA(TABCTLD.AXX,TABCTLD.AllocGrp(),"TCTDESAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 TABCTLD.AXX(maxtab(TABCTLD.AXX)).FLG = 0
Next AXX
If !len(fmet TABCTLD.AGETTEXTRA("TCTDESAXX"))
 Call ASETTEXTRA(TABCTLD.AXX,TABCTLD.AllocGrp(),"TCTDESAXX",
& fmet TABCTLD.AGETTEXTRALAN("TCTDESAXX",TABCTLD.ACTX.AFOLD.ALANGDEF),
& TABCTLD.ACTX.LAN) From ASYRSUB
Endif

Return



