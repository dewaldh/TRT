#<AdxTL>@(#)0.0.0.0 $Revision$
######################################################################################################################
# Script            : SUBYHOU                                                                                        #
# Creation date     : 16/07/2018                                                                                     #
# Version           : 1.0.0                                                                                          #
# Authors (Company) : JR (Leverage)                                                                                  #
# Module            : Housing Jobs                                                                                   #
# -------------------------------------------------------------------------------------------------------------------#
# Epic              : https://jira.leveragetech.com.au/browse/DDP-21                                                 #
# Description       : DFCX1-69 Housing Job Object and Screens                                                        #
#--------------------------------------------------------------------------------------------------------------------#
# Evolutions        :                                                                                                #
######################################################################################################################
$ACTION

  If func AFNC.ACTIV("YINT")
    Gosub ACTION From YSYSEVENTS
  Endif

Case ACTION
  When "OUVRE"        : Gosub OUVRE
  When "LIENS"        : Gosub LIENS
  When "FERME"        : Gosub FERME
  When "RAZCRE"       : Gosub RAZCRE
  When "CREATION"     : Gosub CREATION
  When "APRES_CRE"    : Gosub APRES_CRE
  When "VERIF_CRE"    : Gosub VERIF_CRE
  When "VERIF_MOD"    : Gosub VERIF_MOD
  When "MODIF"        : Gosub MODIF
  When "APRES_MOD"    : Gosub APRES_MOD
  When "AV_ANNULE"    : Gosub AV_ANNULE
  When "ANNULE"       : Gosub ANNULE
  When "SETBOUT"      : Gosub SETBOUT
  When "EXEBOUT"      : Gosub EXEBOUT
  When Default
Endcase
Return
#------------------------------------------------------------------------------------#
#Open screen
#------------------------------------------------------------------------------------#
$OUVRE
  Global Instance GZINSYHOU Using C_YHOU
  ANOWRITE = 1
  Local Integer ILOADYHOU
  ILOADYHOU = [V]CST_AYES

  If GWEBSERV = 1
    If clalev([F:TCY]) = 0 Local File TABCOUNTRY[TCY] : Endif
  Endif

Return
#------------------------------------------------------------------------------------#
#Close screen
#------------------------------------------------------------------------------------#
$FERME
  If GZINSYHOU <> null Then
    FreeGroup GZINSYHOU
  Endif
  Kill GZINSYHOU
Return
#------------------------------------------------------------------------------------#
#Before Create
#------------------------------------------------------------------------------------#
$RAZCRE

  If (GZINSYHOU <> null) : FreeGroup GZINSYHOU : Endif
  GZINSYHOU = NewInstance C_YHOU AllocGroup null

  Local Integer MY_STATUS
  [L]MY_STATUS = fmet GZINSYHOU.AINIT()
  If ([L]MY_STATUS >= [V]CST_AERROR)

    ILOADYHOU = [V]CST_ANO

    Call RECOVERS_ERROR_IN_CLASSIC(GZINSYHOU)
    If GMESSAGE = AVOID.ACHAR Then
      GMESSAGE = mess(28,6251,1)
    Endif
    If [L]MY_STATUS <> [V]CST_AWARNING Then
      OK = 0
      Return
    Endif
  Endif

  ILOADYHOU = [V]CST_AYES

  #We only need to set instance for this one class as it has an INIT method
  SetInstance [F:YHJD] With GZINSYHOU
  [M:YHOU]=[F:YHJD]

  Affzo [M:YHOU]

  Gosub FORMAT_LEASED_FIELDS From SPEYHOU_RSPE

Return
#------------------------------------------------------------------------------------#
#Create record
#------------------------------------------------------------------------------------#
$CREATION

  #First you have to clean your collection. This handles the case were you got an error during a first attempt,
  #and you fixed it before trying again. If you don't clean the collection all of lines will be duplicated in the collection.
  Local Integer I
  For I=1 To maxtab(GZINSYHOU.YHDH)
    If (fmet GZINSYHOU.ADELLINE("YHDH", GZINSYHOU.YHDH(I).AORDER) <> [V]CST_AOK)
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
      GOK = 0
      GERR = 1
      Return
    Endif
  Next

  Local Integer I
  For I=1 To maxtab(GZINSYHOU.YHJC)
    If (fmet GZINSYHOU.ADELLINE("YHJC", GZINSYHOU.YHJC(I).AORDER) <> [V]CST_AOK)
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
      GOK = 0
      GERR = 1
      Return
    Endif
  Next

  Local Integer I
  For I=1 To maxtab(GZINSYHOU.YHJF)
    If (fmet GZINSYHOU.ADELLINE("YHJF", GZINSYHOU.YHJF(I).AORDER) <> [V]CST_AOK)
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
      GOK = 0
      GERR = 1
      Return
    Endif
  Next

  Local Integer I
  For I=1 To maxtab(GZINSYHOU.YHJP)
    If (fmet GZINSYHOU.ADELLINE("YHJP", GZINSYHOU.YHJP(I).AORDER) <> [V]CST_AOK)
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
      GOK = 0
      GERR = 1
      Return
    Endif
  Next

  Local Integer I
  For I=1 To maxtab(GZINSYHOU.YHJS)
    If (fmet GZINSYHOU.ADELLINE("YHJS", GZINSYHOU.YHJS(I).AORDER) <> [V]CST_AOK)
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
      GOK = 0
      GERR = 1
      Return
    Endif
  Next

  Local Integer I
  For I=1 To maxtab(GZINSYHOU.YHJV)
    If (fmet GZINSYHOU.ADELLINE("YHJV", GZINSYHOU.YHJV(I).AORDER) <> [V]CST_AOK)
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
      GOK = 0
      GERR = 1
      Return
    Endif
  Next

  Local Integer I
  For I=1 To maxtab(GZINSYHOU.YRMA)
    If (fmet GZINSYHOU.ADELLINE("YRMA", GZINSYHOU.YRMA(I).AORDER) <> [V]CST_AOK)
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
      GOK = 0
      GERR = 1
      Return
    Endif
  Next

  #You can use the instruction SetInstance which will set propertie's values from field's values for propertie's names that are identical to a field's name of the [F] file.
  SetInstance GZINSYHOU With [F:YHJD]

  #Then before invoking the AINSERT method you have to create lines in the collection from lines in the screen
  Local Integer INDEX
  INDEX = fmet GZINSYHOU.ADDLINE("YHDH", [V]CST_ALASTPOS)
  If (INDEX = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
    GOK = 0
    GERR = 1
    Return
  Endif

  # Need to use [F] because it is impossible to set a class from [M]
  [F:YHDH] = [M:YHOU5]
  [F:YHDH]YJBNR = GZINSYHOU.YJBNR

  # Use the SetInstance
  SetInstance GZINSYHOU.YHDH(INDEX) With [F:YHDH]
  If (GERR = 1) : Return : Endif

  Local Integer INDEX
  INDEX = fmet GZINSYHOU.ADDLINE("YHJC", [V]CST_ALASTPOS)
  If (INDEX = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
    GOK = 0
    GERR = 1
    Return
  Endif

  # Need to use [F] because it is impossible to set a class from [M]
  [F:YHJC] = [M:YHOU2]
  [F:YHJC]YJBNR = GZINSYHOU.YJBNR

  # Use the SetInstance
  SetInstance GZINSYHOU.YHJC(INDEX) With [F:YHJC]
  If (GERR = 1) : Return : Endif

  Local Integer INDEX
  INDEX = fmet GZINSYHOU.ADDLINE("YHJF", [V]CST_ALASTPOS)
  If (INDEX = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
    GOK = 0
    GERR = 1
    Return
  Endif

  # Need to use [F] because it is impossible to set a class from [M]
  [F:YHJF] = [M:YHOU1]
  [F:YHJF]YJBNR = GZINSYHOU.YJBNR

  # Use the SetInstance
  SetInstance GZINSYHOU.YHJF(INDEX) With [F:YHJF]
  If (GERR = 1) : Return : Endif

  Local Integer INDEX
  INDEX = fmet GZINSYHOU.ADDLINE("YHJP", [V]CST_ALASTPOS)
  If (INDEX = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
    GOK = 0
    GERR = 1
    Return
  Endif

  # Need to use [F] because it is impossible to set a class from [M]
  [F:YHJP] = [M:YHOU4]
  [F:YHJP]YJBNR = GZINSYHOU.YJBNR

  # Use the SetInstance
  SetInstance GZINSYHOU.YHJP(INDEX) With [F:YHJP]
  If (GERR = 1) : Return : Endif

  Local Integer I, INDEX
  For I = 0 To [M:YHOU3]NBSTA - 1
    INDEX = fmet GZINSYHOU.ADDLINE("YHJS", [V]CST_ALASTPOS)
    If (INDEX = [V]CST_ANOTDEFINED)
      # Error management
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
      GOK = 0
      GERR = 1
      Return
    Endif

    nolign = I + 1
    # Need to use [F] because it is impossible to set a class from [M]
    [F:YHJS] = [M:YHOU3]
    [F:YHJS]YJBNR = GZINSYHOU.YJBNR

    # Use the SetInstance
    SetInstance GZINSYHOU.YHJS(INDEX) With [F:YHJS]
  Next
  If (GERR = 1) : Return : Endif

  Local Integer I, INDEX
  For I = 0 To [M:YHOU3]NBVAR - 1
    INDEX = fmet GZINSYHOU.ADDLINE("YHJV", [V]CST_ALASTPOS)
    If (INDEX = [V]CST_ANOTDEFINED)
      # Error management
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
      GOK = 0
      GERR = 1
      Return
    Endif

    nolign = I + 1
    # Need to use [F] because it is impossible to set a class from [M]
    [F:YHJV] = [M:YHOU3]
    [F:YHJV]YJBNR = GZINSYHOU.YJBNR

    # Use the SetInstance
    SetInstance GZINSYHOU.YHJV(INDEX) With [F:YHJV]
  Next
  If (GERR = 1) : Return : Endif

  Local Integer I, INDEX
  For I = 0 To [M:YHOU6]NBLIG - 1
    INDEX = fmet GZINSYHOU.ADDLINE("YRMA", [V]CST_ALASTPOS)
    If (INDEX = [V]CST_ANOTDEFINED)
      # Error management
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
      GOK = 0
      GERR = 1
      Return
    Endif

    nolign = I + 1
    # Need to use [F] because it is impossible to set a class from [M]
    [F:YRMA] = [M:YHOU6]
    [F:YRMA]YGUID = GZINSYHOU.YGUID

    # Use the SetInstance
    SetInstance GZINSYHOU.YRMA(INDEX) With [F:YRMA]
  Next
  If (GERR = 1) : Return : Endif

  #Properties have been set, it is time to invoke the creation method of the class
  Local Integer MY_STATUS
  [L]MY_STATUS = fmet GZINSYHOU.AINSERT()
  If ([L]MY_STATUS >= [V]CST_AERROR)
    Call RECOVERS_ERROR_IN_CLASSIC(GZINSYHOU)
    If GMESSAGE = AVOID.ACHAR Then
      GMESSAGE = mess(27,6251,1)
    Endif
  Endif

  #After a successful insert, refresh the [F] file because the key may be generated in the AINSERT method.
  SetInstance [F:YHJD] With GZINSYHOU

Return
#------------------------------------------------------------------------------------#
#Handle Classic Errors from Class
#------------------------------------------------------------------------------------#
Subprog RECOVERS_ERROR_IN_CLASSIC(GZINSPJM)

  Variable Instance GZINSPJM Using C_YHOU

  Local Integer NI
  Local Char SMESSAGE(type(GMESSAGE)-10)
  Local Integer MY_STATUS
  Local Integer IMESSAGE

  IMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_UPPER_MESSAGE(GZINSPJM, SMESSAGE)
  If IMESSAGE = [V]CST_AWARNING Then
    GMESSAGE = SMESSAGE
    GERR = 2
  Elsif IMESSAGE = [V]CST_AERROR or IMESSAGE = [V]CST_AFATAL Then
    GMESSAGE = SMESSAGE
    GOK = 0
    GERR = 1
  Endif

  [L]MY_STATUS = [V]CST_AOK
End

#------------------------------------------------------------------------------------#
#Before create record
#------------------------------------------------------------------------------------#
$VERIF_CRE

  #Validate Stage % for non ZDIS - TBC
  Local Integer VALIDATE_STAGES : VALIDATE_STAGES = 2 #Yes

  If !clalev ([F:MSC]) : Local File ATABDIV [F:MSC] : Endif

  #Read record
  Filter [F:MSC] Where [F:MSC]NUMTAB = 6008 and [F:MSC]CODE = [M:YHOU]YJBTYP
  For [F:MSC]
    If [F:MSC]CODE = 'ZDIS'
      VALIDATE_STAGES = 1 #No
    Endif
    Break
  Next
  Filter [F:MSC] #Reset filter

  If clalev([F:MSC]) : Close Local File [F:MSC] : Endif

  If VALIDATE_STAGES = 2 #Yes

    Local Integer I, INDEX
    Local Decimal STAGEPERC : STAGEPERC = 0
    For I = 0 To [M:YHOU3]NBSTA-1
      STAGEPERC += [M:YHOU3]YSTAGEPERC(I)
    Next

    If STAGEPERC <> 100
      Call ERREURT(mess(45,6251,1), 1) From GESECRAN
      OK=0
      GOK=0
      GERR=1
      Return
    Endif

  Endif

  #If Leased from Customer, monthly amount cannot be zero
  If [M:YHOU5]YMONACC = 0 and [M:YHOU5]YLSDCUST = 2
    zonsui = [M:YHOU5]YMONACC
    Call ERREURT(mess(7,6251,1), 1) From GESECRAN
    OK=0
    GOK=0
    GERR=1
    Return
  Endif

  OK=1
  GOK=1
  GERR=0

  If GOK = 1
    Gosub CREATE_DIMENSION From SPEYHOU_CSPE
    If GOK = 1
      Gosub CREATE_PROJECT From SPEYHOU_CSPE
    Endif
  Endif

Return
#------------------------------------------------------------------------------------#
#After create record
#------------------------------------------------------------------------------------#
$APRES_CRE
  Gosub RELIT From GOBJSUB
Return
#------------------------------------------------------------------------------------#
#Before modify record
#------------------------------------------------------------------------------------#
$VERIF_MOD

  #Validate Stage % for non ZDIS - TBC
  Local Integer VALIDATE_STAGES : VALIDATE_STAGES = 2 #Yes

  If !clalev ([F:MSC]) : Local File ATABDIV [F:MSC] : Endif

  #Read record
  Filter [F:MSC] Where [F:MSC]NUMTAB = 6008 and [F:MSC]CODE = [M:YHOU]YJBTYP
  For [F:MSC]
    If [F:MSC]CODE = 'ZDIS'
      VALIDATE_STAGES = 1 #No
    Endif
    Break
  Next
  Filter [F:MSC] #Reset filter

  If clalev([F:MSC]) : Close Local File [F:MSC] : Endif

  If VALIDATE_STAGES = 2 #Yes

    Local Integer I, INDEX
    Local Decimal STAGEPERC : STAGEPERC = 0
    For I = 0 To [M:YHOU3]NBSTA-1
      STAGEPERC += [M:YHOU3]YSTAGEPERC(I)
    Next

    If STAGEPERC <> 100
      Call ERREURT(mess(45,6251,1), 1) From GESECRAN
      OK=0
      GOK=0
      GERR=1
      Return
    Endif

  Endif

  #If Leased from Customer, monthly amount cannot be zero
  If [M:YHOU5]YMONACC = 0 and [M:YHOU5]YLSDCUST = 2
    zonsui = "[M:YHOU5]YMONACC"
    Call ERREURT(mess(7,6251,1), 1) From GESECRAN
    OK=0
    GOK=0
    GERR=1
    Return
  Endif

Return
#------------------------------------------------------------------------------------#
#Modify record
#------------------------------------------------------------------------------------#
$MODIF

  SetInstance GZINSYHOU With [F:YHJD]

  #Display Homes
  Raz [F:YHDH]
  [F:YHDH] = [M:YHOU]
  [F:YHDH] = [M:YHOU5]
  SetInstance GZINSYHOU.YHDH With [F:YHDH]

  #Contracts
  Raz [F:YHJC]
  [F:YHJC] = [M:YHOU]
  [F:YHJC] = [M:YHOU2]
  SetInstance GZINSYHOU.YHJC With [F:YHJC]

  #Financials
  Raz [F:YHJF]
  [F:YHJF] = [M:YHOU]
  [F:YHJF] = [M:YHOU1]
  SetInstance GZINSYHOU.YHJF With [F:YHJF]

  #People
  Raz [F:YHJP]
  [F:YHJP] = [M:YHOU]
  [F:YHJP] = [M:YHOU4]
  SetInstance GZINSYHOU.YHJP With [F:YHJP]

  #Stages
  Local Integer I, INDEX
  For I = 0 To [M:YHOU3]NBSTA - 1
    nolign = I + 1
    Raz [F:YHJS]

    # Retrieve the element using the screen's AUUID. If AUUID is blank, then its a new row
    INDEX=0
    If [M:YHOU3]AUUIDS(I) <> ""
      [F:YHJS]AUUID = toUuid([M:YHOU3]AUUIDS(I))
      INDEX = find(toUuid([M:YHOU3]AUUIDS(I)), GZINSYHOU.YHJS(1..maxtab(GZINSYHOU.YHJS)).AUUID)
    Endif
    If (INDEX = 0)
      # We did not find the element matching with the array line, we add a line.
      INDEX = fmet GZINSYHOU.ADDLINE("YHJS", [V]CST_ALASTPOS)
      If (INDEX = [V]CST_ANOTDEFINED)
        # Error management
        GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
        GOK = 0
        GERR = 1
        Break
      Endif
    Endif

    # Need to use [F] because it's not possible to set a class from [M]
    [F:YHJS] = [M:YHOU]
    [F:YHJS] = [M:YHOU3]

    # Use the SetInstance
    SetInstance GZINSYHOU.YHJS(INDEX) With [F:YHJS]
  Next
  If (GERR = 1) : Return : Endif

  # Now, all elements that don't have the status Updated or Created must be deleted, because it means they don't match with lines in the array
  For I = 1 To maxtab(GZINSYHOU.YHJS)
    If GZINSYHOU.YHJS(I) <> null and find(GZINSYHOU.YHJS(I).ASTALIN, [V]CST_ANEW, [V]CST_AUPD) = 0
      If (fmet GZINSYHOU.ADELLINE("YHJS", GZINSYHOU.YHJS(I).AORDER) <> [V]CST_AOK)
        # Error management
        GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
        GOK = 0
        GERR = 1
        Return
      Endif
    Endif
  Next
  If (GERR = 1) : Return : Endif

  #Variations
  Local Integer I, INDEX
  For I = 0 To [M:YHOU3]NBVAR - 1
    nolign = I + 1
    Raz [F:YHJV]

    # Retrieve the element using the screen's AUUID. If AUUID is blank, then its a new row
    INDEX=0
    If [M:YHOU3]AUUIDV(I) <> ""
      [F:YHJV]AUUID = toUuid([M:YHOU3]AUUIDV(I))
      INDEX = find(toUuid([M:YHOU3]AUUIDV(I)), GZINSYHOU.YHJV(1..maxtab(GZINSYHOU.YHJV)).AUUID)
    Endif
    If (INDEX = 0)
      # We did not find the element matching with the array line, we add a line.
      INDEX = fmet GZINSYHOU.ADDLINE("YHJV", [V]CST_ALASTPOS)
      If (INDEX = [V]CST_ANOTDEFINED)
        # Error management
        GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
        GOK = 0
        GERR = 1
        Return
      Endif
    Endif

    # Need to use [F] because it's not possible to set a class from [M]
    [F:YHJV] = [M:YHOU]
    [F:YHJV] = [M:YHOU3]

    # Use the SetInstance
    SetInstance GZINSYHOU.YHJV(INDEX) With [F:YHJV]
  Next
  If (GERR = 1) : Return : Endif

  # Now, all elements that don't have the status Updated or Created must be deleted, because it means they don't match with lines in the array
  For I = 1 To maxtab(GZINSYHOU.YHJV)
    If !(find(GZINSYHOU.YHJV(I).ASTALIN, [V]CST_ANEW, [V]CST_AUPD))
      If (fmet GZINSYHOU.ADELLINE("YHJV", GZINSYHOU.YHJV(I).AORDER) <> [V]CST_AOK)
        # Error management
        GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
        GOK = 0
        GERR = 1
        Return
      Endif
    Endif
  Next
  If (GERR = 1) : Return : Endif

  #Related
  Local Integer I, INDEX
  For I = 0 To [M:YHOU6]NBLIG - 1
    nolign = I + 1
    Raz [F:YRMA]

    # Retrieve the element using the screen's AUUID. If AUUID is blank, then its a new row
    INDEX=0
    If [M:YHOU6]AUUID(I) <> ""
      [F:YRMA]AUUID = toUuid([M:YHOU6]AUUID(I))
      INDEX = find(toUuid([M:YHOU6]AUUID(I)), GZINSYHOU.YRMA(1..maxtab(GZINSYHOU.YRMA)).AUUID)
    Endif
    If (INDEX = 0)
      # We did not find the element matching with the array line, we add a line.
      INDEX = fmet GZINSYHOU.ADDLINE("YRMA", [V]CST_ALASTPOS)
      If (INDEX = [V]CST_ANOTDEFINED)
        # Error management
        GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
        GOK = 0
        GERR = 1
        Break
      Endif
    Endif

    # Need to use [F] because it's not possible to set a class from [M]
    [F:YRMA] = [M:YHOU]
    [F:YRMA] = [M:YHOU6]

    # Use the SetInstance
    SetInstance GZINSYHOU.YRMA(INDEX) With [F:YRMA]
  Next
  If (GERR = 1) : Return : Endif

  # Now, all elements that don't have the status Updated or Created must be deleted, because it means they don't match with lines in the array
  For I = 1 To maxtab(GZINSYHOU.YRMA)
    If GZINSYHOU.YRMA(I) <> null and find(GZINSYHOU.YRMA(I).ASTALIN, [V]CST_ANEW, [V]CST_AUPD) = 0
      If (fmet GZINSYHOU.ADELLINE("YRMA", GZINSYHOU.YRMA(I).AORDER) <> [V]CST_AOK)
        # Error management
        GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSYHOU)
        GOK = 0
        GERR = 1
        Return
      Endif
    Endif
  Next
  If (GERR = 1) : Return : Endif

  Local Integer MY_STATUS
  [L]MY_STATUS = fmet GZINSYHOU.AUPDATE()
  If ([L]MY_STATUS >= [V]CST_AERROR)
    # Error management
    Call RECOVERS_ERROR_IN_CLASSIC(GZINSYHOU)
    If GMESSAGE = AVOID.ACHAR Then
      GMESSAGE = mess(29,6251,1)
    Endif
    If [L]MY_STATUS <> [V]CST_AWARNING Then
      Return
    Endif
  Endif

Return
#------------------------------------------------------------------------------------#
#After modify record
#------------------------------------------------------------------------------------#
$APRES_MOD
  Gosub RELIT From GOBJSUB
Return
#------------------------------------------------------------------------------------#
#Begin delete record
#------------------------------------------------------------------------------------#
$AV_ANNULE
  Local Integer ANOWRITE
  ANOWRITE = 1
Return
#------------------------------------------------------------------------------------#
#Delete record
#------------------------------------------------------------------------------------#
$ANNULE
  Local Integer MY_STATUS
  [L]MY_STATUS = fmet GZINSYHOU.ADELETE()
  If ([L]MY_STATUS >= [V]CST_AERROR)
    # Error management
    Call RECOVERS_ERROR_IN_CLASSIC(GZINSPJM)
    If GMESSAGE = AVOID.ACHAR Then
      GMESSAGE = mess(30,6251,1)
    Endif
    If [L]MY_STATUS <> [V]CST_AWARNING Then
      Return
    Endif
  Endif
Return
#------------------------------------------------------------------------------------#
#Read record
#------------------------------------------------------------------------------------#
$LIENS

  If (GZINSYHOU <> null) : FreeGroup GZINSYHOU : Endif
  GZINSYHOU = NewInstance C_YHOU AllocGroup null

  Local Integer MY_STATUS
  [L]MY_STATUS = fmet GZINSYHOU.AREAD([M:YHOU]YJBNR)

  If [L]MY_STATUS >= [V]CST_AERROR Then
    ILOADYHOU = [V]CST_ANO
    Call RECOVERS_ERROR_IN_CLASSIC(GZINSYHOU)
    If GMESSAGE = AVOID.ACHAR Then
      GMESSAGE = mess(31,6251,1)
    Endif
    If [L]MY_STATUS <> [V]CST_AWARNING Then
      Return
    Endif
  Endif

  #Refresh the Construction Status from Class
  [M:YHOU]YCONSTA = GZINSYHOU.YCONSTA

  ILOADYHOU = [V]CST_AYES

  Gosub REFRESH_JOB_STATUS From SPEYHOU_RSPE
  Gosub FORMAT_CONTRACT_FIELDS From SPEYHOU_RSPE

  #YOU HAVE To SET THE ARRAY BLOCKS From THE SUBFILES

  #Housing Job Financial Summary - transfer File to Screen
  SetInstance [F:YHJF] With GZINSYHOU.YHJF
  [M:YHOU1] = [F:YHJF]

  Gosub REFRESH_FINANCIAL_SUMMARY_FIELDS From SPEYHOU_CSPE

  #Housing Job Contract - transfer File to Screen
  SetInstance [F:YHJC] With GZINSYHOU.YHJC
  [M:YHOU2] = [F:YHJC]

  #Read Housing Job Stages and transfer File to Screen
  nolign = 1
  For [F:YHJS]YHJS0 Where [F:YHJS]YJBNR = [F:YHJD]YJBNR
    [M:YHOU3] = [F:YHJS]
    [M:YHOU3]AUUIDS(nolign-1) = num$([F:YHJS]AUUID)
    nolign += 1
  Next
  [M:YHOU3]NBSTA = nolign - 1

  #Read Housing Job Variations and transfer File to Screen
  nolign = 1
  For [F:YHJV]YHJV0 Where [F:YHJV]YJBNR = [F:YHJD]YJBNR
    [M:YHOU3] = [F:YHJV]
    [M:YHOU3]AUUIDV(nolign-1) = num$([F:YHJV]AUUID)
    nolign += 1
  Next
  [M:YHOU3]NBVAR = nolign - 1

  #Read Housing Job Receipts and transfer File to Screen
  nolign = 1
  For [F:YHJR]YHJR0 Where [F:YHJR]BPCNUM = [F:YHJD]YCUSNO
    [M:YHOU3] = [F:YHJR]
    nolign += 1
  Next
  [M:YHOU3]NBREC = nolign - 1

  #Read Housing Job Related and transfer File to Screen
  nolign = 1
  For [F:YRMA]YRMA0 Where [F:YRMA]YGUID = [F:YHJD]YGUID
    [M:YHOU6] = [F:YRMA]
    nolign += 1
  Next
  [M:YHOU6]NBLIG = nolign - 1

  Gosub REFRESH_FINANCIAL_PROFILE_FIELDS From SPEYHOU_RSPE

  #Housing Job People - transfer File to Screen
  SetInstance [F:YHJP] With GZINSYHOU.YHJP
  [M:YHOU4] = [F:YHJP]

  #Housing Job Display - transfer File to Screen
  SetInstance [F:YHDH] With GZINSYHOU.YHDH
  [M:YHOU5] = [F:YHDH]

  Gosub FORMAT_LEASED_FIELDS From SPEYHOU_RSPE

  #Format Stage fields
  For NI = 0 To [M:YHOU3]NBSTA-1
    Diszo [M:YHOU3]YSTAGENAM(NI)
    Diszo [M:YHOU3]YVNCOD(NI)

    #Disable Stage Number for existing rows
    If [M:YHOU3]YSTANBR(NI) > 0
      Diszo [M:YHOU3]YSTANBR(NI)
    Endif
    #Disable fields for billed rows
    If [M:YHOU3]YINVNUM(NI)<> ""
      Diszo [M:YHOU3]YESTCMPDAT(NI)
      Diszo [M:YHOU3]YACTCMPDAT(NI)
      Diszo [M:YHOU3]YINVSTAGE(NI)
      Diszo [M:YHOU3]YSTAGEPERC(NI)
      Diszo [M:YHOU3]YAMTINCGST(NI)
      Diszo [M:YHOU3]YRECGPREC(NI)
    Else
      Actzo [M:YHOU3]YESTCMPDAT(NI)
      Actzo [M:YHOU3]YACTCMPDAT(NI)
      Actzo [M:YHOU3]YINVSTAGE(NI)
      Actzo [M:YHOU3]YSTAGEPERC(NI)
      Actzo [M:YHOU3]YAMTINCGST(NI)
      Actzo [M:YHOU3]YRECGPREC(NI)
    Endif
  Next

  #Format Variation fields
  For NI = 0 To [M:YHOU3]NBVAR-1
    #Disable Variation Number for existing rows
    If [M:YHOU3]YVARNUM(NI) <> ""
      Diszo [M:YHOU3]YVARNUM(NI)
    Endif
    #Disable fields for billed rows
    If [M:YHOU3]YVINVNUM(NI) <> ""
      Diszo [M:YHOU3]YSTA(NI)
      Diszo [M:YHOU3]YSTAGEDUE(NI)
      Diszo [M:YHOU3]YAMTINC(NI)
    Else
      Actzo [M:YHOU3]YSTA(NI)
      Actzo [M:YHOU3]YSTAGEDUE(NI)
      Actzo [M:YHOU3]YAMTINC(NI)
    Endif
  Next

  #Disable Issued price inc GST
  Diszo [M:YHOU1]YISSPRCINC

Return
#------------------------------------------------------------------------------------#
#Set Buttons
#------------------------------------------------------------------------------------#
$SETBOUT

  #Disable Save and Delete if no record is loaded
  If ILOADYHOU = [V]CST_ANO
    Call VIREBOUT(CHAINE,"A") From GOBJET
    Call VIREBOUT(CHAINE,"M") From GOBJET
  Endif

  #Disable Delete if Stages have been invoiced
  For NI = 0 To [M:YHOU3]NBSTA-1
    If [M:YHOU3]YINVNUM(NI) <> ""
      Call VIREBOUT(CHAINE,"A") From GOBJET
      Break
    Endif
  Next

  #Disable Delete if Variations have been invoiced
  For NI = 0 To [M:YHOU3]NBVAR-1
    If [M:YHOU3]YVINVNUM(NI) <> ""
      Call VIREBOUT(CHAINE,"A") From GOBJET
      Break
    Endif
  Next

  #Disable Duplication
  Call VIREBOUT(CHAINE,"D") From GOBJET

  #Enable Project Create button if its existing Job with no / valid Project (Job Code)
  If GREP <> "C" and [M:YHOU]YJBNR <> "" and [M:YHOU]YCPY <> ""
    If !clalev ([F:YPJM])   : Local File OPPORPJM  [F:YPJM]   : Endif

    Read [F:YPJM]OPPPJM0 = [M:YHOU]YJBCOD

    If fstat=0
      Call VIREBOUT(CHAINE,"4") From GOBJET
    Endif

    If clalev([F:YPJM])     : Close Local File [F:YPJM]       : Endif
  Else
    Call VIREBOUT(CHAINE,"4") From GOBJET
  Endif

  If mkstat=4 and GREP=""
    REP="M"
  Endif

Return
#------------------------------------------------------------------------------------#
#Execute Buttons
#------------------------------------------------------------------------------------#
$EXEBOUT
  #Activate / De-activate Job (Dimension)
  If BOUT = "1"
    Gosub UPDATE_JOB_STATUS From SPEYHOU_CSPE
  Endif
  #Print Statement
  If BOUT = "2"
    Gosub PRINT_STATEMENT
  Endif
  #Print Settlement
  If BOUT = "3"
    Gosub PRINT_SETTLEMENT
  Endif
  #Create Dimension and Project
  If BOUT = "4"

    #Open table
    If !clalev ([F:CCE]) : Local File CACCE [F:CCE] : Endif

    #Check if dimension exists
    Read [F:CCE]CCE0 = "HJB";[M:YHOU]YJBNR

    If fstat = 5
      Gosub CREATE_DIMENSION From SPEYHOU_CSPE
    Endif

    #Close table
    If clalev([F:CCE]) : Close Local File [F:CCE] : Endif

    Gosub CREATE_PROJECT From SPEYHOU_CSPE

  Endif
Return
#------------------------------------------------------------------------------------#
#Print Stage Invoice Document
#------------------------------------------------------------------------------------#
$PRINT_STAGE_INVOICE_DOC

  If !clalev ([F:YSIN])   : Local File SINVOICE   [F:YSIN]  : Endif

  Read [F:YSIN]SIH0 = [M:YHOU3]YINVNUM(nolign-1)

  If fstat = 0

    Local Integer NBPAR_MAX : NBPAR_MAX = 11

    Local Char TBPAR(20)(1..NBPAR_MAX)
    Local Char TBVAL(250)(1..NBPAR_MAX)

    Local Char PRINTDEST(10) : PRINTDEST = "" #Need one Printer Destination (APRINTER) or report fails

    TBPAR(1)  = "JOBNBR"       : TBVAL(1)  = [M:YHOU]YJBNR #Job number
    TBPAR(2)  = "STAGENO"      : TBVAL(2)  = num$([M:YHOU3]YSTANBR(nolign-1)) #Stage number

#    TBPAR(1)  = "societe"       : TBVAL(1)  = [M:YHOU]YCPY #Company
#    TBPAR(2)  = "datedeb"       : TBVAL(2)  = "" #Date range
#    TBPAR(3)  = "datefin"       : TBVAL(3)  = "" #Date range
#    TBPAR(4)  = "numdeb"        : TBVAL(4)  = [M:YHOU3]YINVNUM(nolign-1) #Invoices range
#    TBPAR(5)  = "numfin"        : TBVAL(5)  = [M:YHOU3]YINVNUM(nolign-1) #Invoices range
#    TBPAR(6)  = "sitedeb"       : TBVAL(6)  = "" #Site range
#    TBPAR(7)  = "sitefin"       : TBVAL(7)  = "" #Site range
#    TBPAR(8)  = "duplicata"     : TBVAL(8)  = "1" #Duplicate
#    TBPAR(9)  = "impselections" : TBVAL(9)  = "1" #Print selections
#    TBPAR(10) = "traystd"       : TBVAL(10) = "1" #Standard paper tray
#    TBPAR(11) = "traybvr"       : TBVAL(11) = "1" #ISR paper tray

    Call ETAT("YHOUINV",PRINTDEST,"",0,"",TBPAR,TBVAL) From AIMP3

  Else
    GMESSAGE = func AFNC.MES1(mess(6,6251,1), "Invoice")
  Endif

  If clalev([F:YSIN])  : Close Local File [F:YSIN]  : Endif

Return
#------------------------------------------------------------------------------------#
# Print Housing Job Statement
#------------------------------------------------------------------------------------#
$PRINT_STATEMENT

  Local Char NPARAMS(250)(1..1)
  Local Char NVALUES(250)(1..1)

  NPARAMS(1) = "JOBNBR"
  NVALUES(1) = [M:YHOU]YJBNR

  Call ETAT("YHOUSTAT","YHJOBSTAT","",0,"",NPARAMS,NVALUES) From AIMP3

Return
#------------------------------------------------------------------------------------#
# Print Housing Job Draft Settlement
#------------------------------------------------------------------------------------#
$PRINT_SETTLEMENT

  Local Char NPARAMS(250)(1..1)
  Local Char NVALUES(250)(1..1)

  NPARAMS(1) = "JOBNBR"
  NVALUES(1) = [M:YHOU]YJBNR

  Call ETAT("YHOUDRAFT","YHJOBDRAFT","",0,"",NPARAMS,NVALUES) From AIMP3

Return
#------------------------------------------------------------------------------------#
#Open Stage Document
#------------------------------------------------------------------------------------#
$OPEN_STAGE_INVCRN_DOC

  If !clalev ([F:YSIN])   : Local File SINVOICE   [F:YSIN]  : Endif

  Read [F:YSIN]SIH0 = [M:YHOU3]YINVNUM(nolign-1)

  If fstat = 0

    Local Char PARBOUT(250)(1..20)

    PARBOUT(1) = [M:YHOU3]YINVNUM(nolign-1)
    PARBOUT(2) = "BIC"
    PARBOUT(3) = ""
    GACTION = "GOBJETC1"
    GFONCTION = "GESBIC"

    Call OBJET_CHAR(PARBOUT(1),PARBOUT(2) ,PARBOUT(3)) From GOBJET

  Else
    GMESSAGE = func AFNC.MES1(mess(6,6251,1), "Document")
  Endif

  If clalev([F:YSIN])  : Close Local File [F:YSIN]  : Endif

Return
#------------------------------------------------------------------------------------#
#Delete Stage Document
#------------------------------------------------------------------------------------#
$DELETE_STAGE_INVCRN_DOC

  Local Integer LINENO
  Local Char INVNO(20)

  LINENO = nolign-1
  INVNO = [M:YHOU3]YINVNUM(LINENO)

  If !clalev ([F:YSIN])  : Local File SINVOICE [F:YSIN]  : Endif
  If !clalev ([F:YHJS2]) : Local File YHOUJSTA [F:YHJS2] : Endif

  Read [F:YSIN]SIH0 = INVNO

  If fstat = 0

    If [F:YSIN]STA = 1

      Local Integer YN : YN = 2
      Call OUINON(func AFNC.MES1(mess(35,6251,1), INVNO), YN) From GESECRAN
      If YN <>2
        End
      Endif

      # Declare webservice variables
      Gosub DEFVAR From WJYWSBIC

      WW_ACTION = 'DELETE'
      WW_IDENT = INVNO

      # Create Document
      Gosub WEBSERV From WJYWSBIC
      Sleep 1

      # Read record
      Read[F:YSIN]SIH0 = INVNO

      If [S]fstat = 5

        #Update Stage
        Read [F:YHJS2]YHJS0 = [M:YHOU]YJBNR;[M:YHOU3]YSTANBR(LINENO)

        If fstat = 0
          Raz [F:YHJS2]YINVNUM
          Raz [F:YHJS2]YDATCLM
          Raz [F:YHJS2]YAMTCLM
          Rewrite [F:YHJS2]
        Endif

        #Update Stage row
        Raz [M:YHOU3]YINVNUM(LINENO)
        Raz [M:YHOU3]YDATCLM(LINENO)
        Raz [M:YHOU3]YAMTCLM(LINENO)

        #Update Variation rows assigned to this stage
        For NI = 0 To [M:YHOU3]NBVAR-1
          If [M:YHOU3]YVINVNUM(NI) = INVNO and [M:YHOU3]YSTAGEDUE(NI) = [M:YHOU3]YSTANBR(LINENO)
            Raz [M:YHOU3]YVINVNUM(NI)
            Raz [M:YHOU3]YVDATCLM(NI)
            Raz [M:YHOU3]YVAMTCLM(NI)
          Endif
        Next

        Affzo [M:YHOU3]

        #Set to Edit mode
        mkstat=4

        #GMESSAGE = mess(14,6251,1)
      Else

        GMESSAGE = mess(24,6251,1) + " - " + NUM_A
& + ". " + WW_MESS(1) + ' ' + WW_MESS(2) + ' ' + WW_MESS(3) + ' ' + WW_MESS(4) + ' ' + WW_MESS(5)

        WW_OK = -1
        WW_GRAVE = 0
        WW_MESS(1) = ""
        WW_MESS(2) = ""
        WW_MESS(3) = ""
        WW_MESS(4) = ""
        WW_MESS(5) = ""
      Endif
    Else
      GMESSAGE = func AFNC.MES1(mess(25,6251,1), [F:YSIN]SIVTYP)
    Endif
  Else

    #Update Stage
    Read [F:YHJS2]YHJS0 = [M:YHOU]YJBNR;[M:YHOU3]YSTANBR(LINENO)

    If fstat = 0
      Raz [F:YHJS2]YINVNUM
      Raz [F:YHJS2]YDATCLM
      Raz [F:YHJS2]YAMTCLM
      Rewrite [F:YHJS2]
    Endif

    #Update Stage row as no Document found
    Raz [M:YHOU3]YINVNUM(LINENO)
    Raz [M:YHOU3]YDATCLM(LINENO)
    Raz [M:YHOU3]YAMTCLM(LINENO)

    #Update Variation rows assigned to this stage as no Document found
    For NI = 0 To [M:YHOU3]NBVAR-1
      If [M:YHOU3]YVINVNUM(NI) = INVNO and [M:YHOU3]YSTAGEDUE(NI) = [M:YHOU3]YSTANBR(LINENO)
        Raz [M:YHOU3]YVINVNUM(NI)
        Raz [M:YHOU3]YVDATCLM(NI)
        Raz [M:YHOU3]YVAMTCLM(NI)
      Endif
    Next

    Affzo [M:YHOU3]

    #Set to Edit mode
    mkstat=4

    #GMESSAGE = func AFNC.MES1(mess(6,6251,1), "Document")

  Endif

  If clalev([F:YSIN])  : Close Local File [F:YSIN]  : Endif
  If clalev([F:YHJS2]) : Close Local File [F:YHJS2] : Endif

Return
#------------------------------------------------------------------------------------#
#Create Stage Credit Document
#------------------------------------------------------------------------------------#
$CREATE_STAGE_CREDIT_DOC

  Local Char NEWDOCNO(250),INVNBR(20)
  Local Decimal DOCAMT,LINEAMT
  Local Integer LINENO,NUMLINES : NUMLINES = 1

  LINENO = nolign-1
  INVNBR = [M:YHOU3]YINVNUM(LINENO)

  #Open table
  If !clalev ([F:SINV]) : Local File SINVOICE  [F:SINV] : Endif
  If !clalev ([F:SINL]) : Local File BPCINVLIG [F:SINL] : Endif
  If !clalev ([F:YHJS2]) : Local File YHOUJSTA  [F:YHJS2] : Endif
  If !clalev ([F:YHJV2]) : Local File YHOUJVAR  [F:YHJV2] : Endif

  Read [F:SINV]SIH0 = INVNBR

  If fstat = 0

    If [F:SINV]STA = 3

      # Declare webservice variables
      Gosub DEFVAR From WJYWSBIC
      WW_ACTION = 'CREATE'

      # Load all values for document creation
      FCY_A = [F:SINV]FCY

      Filter [F:SINL] #Clear Filter
      Filter [F:SINL] Where [F:SINL]NUM = INVNBR Order By [F:SINL]LIG
      For [F:SINL]

        ACC1_2(NUMLINES-1) = [F:SINL]ACC(0)
        AMTATILIN_2(NUMLINES-1) = [F:SINL]AMTATILIN
        AMTNOTLIN_2(NUMLINES-1) = [F:SINL]AMTNOTLIN
        VAT_2(NUMLINES-1) = [F:SINL]VAT
        CCE3_2(NUMLINES-1) = [M:YHOU]YJBNR #HJB
        DES_2(NUMLINES-1) = [F:SINL]DES

        NUMLINES +=1
      Next

      #Check if Document amount is zero, set to 1 to avoid Exception. Document will be created with ZERO amount due to Header - Lines mismatch
      If DOCAMT = 0
        DOCAMT = 1
      Endif

      NBLIG_2 = NUMLINES

      If [F:SINV]SIVTYP = "HCRN"
        SIVTYP_A = "HINV"
        DES_B(1) = [F:SINV]NUM
      Else
        INVNUM_B = INVNBR
        SIVTYP_A = "HCRN"
      Endif

      ACCDAT_A = date$
      BPR_A = [F:SINV]BPR
      BPRSAC_A = "DR"

      #Won't update following three fields if marked as DISPLAY in screen BIC0
      YJBNR_A = [F:SINV]YJBNR
      YSTANBR_A = [F:SINV]YSTANBR
      YSTASUPP_A = 2 #Supress statement printing

      AMTNOT_B = [F:SINV]AMTNOT
      AMTATI_B = [F:SINV]AMTATI
      STRDUDDAT_B = date$
      STA_B = 1
      DES_B(0) = [F:SINV]DES(0)

      Local Integer DIMENSION_COUNT : DIMENSION_COUNT = 0

      For I = 0 To 19
        DIE_1(I) = [F:SINV]DIE(I)
        If DIE_1(I) = "HJB"
          CCE_1(I) = [F:SINV]CCE(I)
          DIMENSION_COUNT+=1
        Elsif DIE_1(I) <> ""
          DIMENSION_COUNT+=1
        Endif
      Next

      NBRCCE_1 = DIMENSION_COUNT

      # Create Document
      Gosub WEBSERV From WJYWSBIC
      Sleep 1

      # Read record
      Read[F:SINV]SIH0 = NUM_A

      If [S]fstat = 0

          NEWDOCNO = NUM_A

          Call ERREURT(func AFNC.MES3(mess(3,6251,1), NEWDOCNO, [F:SINV]BPR, num$([F:SINV]YSTANBR)), 0) From GESECRAN

          #Reset Stage
          Read [F:YHJS2]YHJS0 = [F:SINV]YJBNR;[F:SINV]YSTANBR

          If fstat = 0
            Raz [F:YHJS2]YINVNUM
            Raz [F:YHJS2]YDATCLM
            Raz [F:YHJS2]YAMTCLM
            Rewrite [F:YHJS2]
          Endif

          #Remove Invoice data on Stage
          Raz [M:YHOU3]YINVNUM(LINENO)
          Raz [M:YHOU3]YAMTCLM(LINENO)
          Raz [M:YHOU3]YDATCLM(LINENO)

          Actzo [M:YHOU3]YESTCMPDAT(LINENO)
          Actzo [M:YHOU3]YACTCMPDAT(LINENO)
          Actzo [M:YHOU3]YINVSTAGE(LINENO)
          Actzo [M:YHOU3]YSTAGEPERC(LINENO)
          Actzo [M:YHOU3]YAMTINCGST(LINENO)
          Actzo [M:YHOU3]YRECGPREC(LINENO)

          #Update Variation Records
          Filter [F:YHJV2] Where [F:YHJV2]YJBNR = [F:SINV]YJBNR and [F:YHJV2]YVINVNUM = INVNBR and [F:YHJV2]YSTAGEDUE = [F:SINV]YSTANBR
          For [F:YHJV2]
            Raz [F:YHJV2]YVAMTCLM
            Raz [F:YHJV2]YVDATCLM
            Raz [F:YHJV2]YVINVNUM
            Rewrite [F:YHJV2]
          Next
          Filter [F:YHJV2] #Clear Filter

          #Remove Invoice data on Variations
          For NI = 0 To [M:YHOU3]NBVAR-1
            If [M:YHOU3]YVINVNUM(NI) = INVNBR and [M:YHOU3]YSTAGEDUE(NI) = [F:SINV]YSTANBR
              Raz [M:YHOU3]YVINVNUM(NI)
              Raz [M:YHOU3]YVAMTCLM(NI)
              Raz [M:YHOU3]YVDATCLM(NI)

              Actzo [M:YHOU3]YSTA(NI)
              Actzo [M:YHOU3]YSTAGEDUE(NI)
              Actzo [M:YHOU3]YAMTINC(NI)
            Endif
          Next

          Affzo [M:YHOU3]

          #Supress statement printing
          Read[F:SINV]SIH0 = INVNBR

          If [S]fstat = 0

            #Update Invoice Suppress Statement Printing
            [F:SINV]YSTASUPP = 2
            Rewrite[F:SINV]

            If [S]fstat <> 0
              GMESSAGE = mess(9,6251,1) + " - " + INVNO + " Error no: " + num$(fstat)
            Endif
          Else
            GMESSAGE = mess(9,6251,1) + " - " + INVNO + " Error no: " + num$(fstat)
          Endif

          #Set to Edit mode
          mkstat=4

        Else
          GMESSAGE = func AFNC.MES2(mess(5,6251,1), [F:SINV]BPR, num$([F:SINV]YSTANBR)
& + " - " + WW_MESS(1) + ' ' + WW_MESS(2) + ' ' + WW_MESS(3) + ' ' + WW_MESS(4) + ' ' + WW_MESS(5))

          WW_OK = -1
          WW_GRAVE = 0
          WW_MESS(1) = ""
          WW_MESS(2) = ""
          WW_MESS(3) = ""
          WW_MESS(4) = ""
          WW_MESS(5) = ""

      Endif

    Else
      GMESSAGE = mess(12,6251,1)
    Endif

  Else
    GMESSAGE = func AFNC.MES1(mess(6,6251,1), "Document")
  Endif

  #Close table
  If clalev([F:SINV]) : Close Local File [F:SINV] : Endif
  If clalev([F:SINL]) : Close Local File [F:SINL] : Endif
  If clalev([F:YHJS2]) : Close Local File [F:YHJS2] : Endif
  If clalev([F:YHJV2]) : Close Local File [F:YHJV2] : Endif

Return
#------------------------------------------------------------------------------------#
#Open Variation Document
#------------------------------------------------------------------------------------#
$OPEN_VARIATION_INVCRN_DOC

  If !clalev ([F:YSIN])   : Local File SINVOICE   [F:YSIN]  : Endif

  Read [F:YSIN]SIH0 = [M:YHOU3]YVINVNUM(nolign-1)

  If fstat = 0

    Local Char PARBOUT(250)(1..20)

    PARBOUT(1) = [M:YHOU3]YVINVNUM(nolign-1)
    PARBOUT(2) = "BIC"
    PARBOUT(3) = ""
    GACTION = "GOBJETC1"
    GFONCTION = "GESBIC"

    Call OBJET_CHAR(PARBOUT(1),PARBOUT(2) ,PARBOUT(3)) From GOBJET

  Else
    GMESSAGE = func AFNC.MES1(mess(6,6251,1), "Document")
  Endif

  If clalev([F:YSIN]) : Close Local File [F:YSIN] : Endif

Return

