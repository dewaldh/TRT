#<AdxTL>@(#)0.0.0.0 $Revision$Class Definition of misc tables
# Supervisor
## CRUD-CLASSE ## ATABTAB
# 2018-08-27 13:03:21 380


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(ATABTAB,ASTATUS)
Variable Instance ATABTAB Using R_ATABTAB
Variable Integer ASTATUS

If ATABTAB = null : End : Endif

Gosub AVARIABLES From WMR00ATABTAB
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If fmet ATABTAB.ACTX.AGETAFCRIGHT(ATABTAB,"GESADI",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END : Endif
If fmet ATABTAB.ACTX.AGETAFCRIGHTC(ATABTAB,"GESADI",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END
Endif
If fmet ATABTAB.ACTX.AGETACSRIGHTM(ATABTAB,[L]A_STRACC,[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR
 Goto AINSERT_END
  Endif
  
  Gosub AREPCONTROL_AINSERT
  If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
  
If !adxlog
 Gosub AINSERT_TR_ATABTAB
Else
 Gosub AINSERT_ATABTAB
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = ATABTAB.freeSnapshot
ATABTAB.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
ATABTAB.ASTALIN = [V]CST_ANEW
ATABTAB.ADI.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet ATABTAB._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet ATABTAB._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet ATABTAB._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If ATABTAB.ADI.ASTALIN = [V]CST_ANEWDEL : Return : Endif
ATABTAB.ADI.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ADI.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(ATABTAB.ADI.ACOLALP)
 If ATABTAB.ADI.ACOLALP([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ADI.ACOLALP([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(ATABTAB.ADI.ACOLNUM)
 If ATABTAB.ADI.ACOLNUM([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ADI.ACOLNUM([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

For [L]A_I=1 To maxtab(ATABTAB.ADI.ACOLALP)
 If ATABTAB.ADI.ACOLALP([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ADI.ACOLALP([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(ATABTAB.ADI.ACOLNUM)
 If ATABTAB.ADI.ACOLNUM([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ADI.ACOLNUM([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ADI.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_ATABTAB
Trbegin [F:ADV]
 Gosub AINSERT_ATABTAB
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(ATABTAB.ADI.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 ATABTAB.ADI.ASTALIN = [V]CST_ALL
Endif
For [L]A_I=1 To maxtab(ATABTAB.ADI.ACOLALP)
 If ATABTAB.ADI.ACOLALP([L]A_I)<>null
  If ATABTAB.ADI.ACOLALP([L]A_I).ASTALIN=[V]CST_ADEL or ATABTAB.ADI.ACOLALP([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance ATABTAB.ADI.ACOLALP([L]A_I)
   ATABTAB.ADI.ACOLALP([L]A_I) = null
  Elsif ATABTAB.ADI.ACOLALP([L]A_I).ASTALIN <> [V]CST_ALL
   ATABTAB.ADI.ACOLALP([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
For [L]A_I=1 To maxtab(ATABTAB.ADI.ACOLNUM)
 If ATABTAB.ADI.ACOLNUM([L]A_I)<>null
  If ATABTAB.ADI.ACOLNUM([L]A_I).ASTALIN=[V]CST_ADEL or ATABTAB.ADI.ACOLNUM([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance ATABTAB.ADI.ACOLNUM([L]A_I)
   ATABTAB.ADI.ACOLNUM([L]A_I) = null
  Elsif ATABTAB.ADI.ACOLNUM([L]A_I).ASTALIN <> [V]CST_ALL
   ATABTAB.ADI.ACOLNUM([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
Return

#-----------------------------------------------------#
$AINSERT_ATABTAB
[L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ADI._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If ATABTAB.snapshotEnabled=1
 [L]A_RETIK = ATABTAB.revertUpdTick
Endif
[L]ASTATUS = max(fmet ATABTAB.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



