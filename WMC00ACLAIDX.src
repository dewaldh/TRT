#<AdxTL>@(#)0.0.0.0 $Revision$Class Class index
# Supervisor
## CRUD-CLASSE ## ACLAIDX
# 2018-08-27 12:19:03 893

Gosub TEST From WMCR_ACLAIDX : End

############################################################################################
## C : Subprog AINSERT(INSTANCE)
## R : Subprog AREAD(INSTANCE,CODCLA)
############################################################################################
# ACLAIDX : ACLASSE
############################################################################################

############################################################################################
### AVARIABLES
############################################################################################
$AVARIABLES
[L]ASTATUS =max([L]ASTATUS,fmet ACLAIDX._ADELERRORS([V]CST_ALLERRORS))
$_AVARIABLES
Local    Integer     A_LEVEL,A_I,A_NEWCOL,A_N1
Local    Integer    ASTATUS,A_RETIK,A_TYPMAJ,A_ASTALIN
Local    Char        A_STRSITE(GLONFCY),A_STRACC(GLONACS),CURPRO(50),A_PARENT(50),A_PATH(200),A_ABR(GLONABR),A_ERROR(250)
Local    Uuident    A_UUID

[L]A_LEVEL    = ACLAIDX.ACTX.LEVWML
[L]ASTATUS  = 0

Onerrgo ERR_OPENTAB
If find(ACLAIDX.ACTX.AFOLDER,nomap,"")>0
 Local File ACLASSE [ACLA]
 Local File ACLASSE [AAA_]
 Local File ATEXTE [ATX]
Else
 Local File =ACLAIDX.ACTX.AFOLDER+".ACLASSE" [ACLA]
 Local File =ACLAIDX.ACTX.AFOLDER+".ACLASSE" [AAA_]
 Local File =ACLAIDX.ACTX.AFOLDER+".ATEXTE" [ATX]
Endif
Onerrgo
Return

$ERR_OPENTAB
[L]ASTATUS = max([L]ASTATUS,fmet ACLAIDX.ASETERROR("",errp+"("+num$(errl)+")"-mess(6,123,1)-num$(errn)-errmes$(errn)-errm,[V]CST_AERROR))
Resume

############################################################################################
### Link
############################################################################################
$AOPEN_LINK
Gosub AVARIABLES
Link [ACLA] With
& [AAA_]ACLA0 = CODCLA
& As [LNK_]
Return

############################################################################################
### ACLASSE(WACLA)
############################################################################################
Funprog  _MAJSQL_ACLASSE(WACLA)
Variable Instance WACLA Using C_ACLAIDX
Local Integer ASTATUS,A_I,A_J
Default File [F:ACLA]
If WACLA.ASTALIN=[V]CST_ANEW
 Call INICRE(WACLA) From ASYRSUB
 SetInstance [F:ACLA] With WACLA
 Call NUMBER(fmet WACLA.AGETTEXT("INTCLA"),[F:ACLA]INTCLA,WACLA) From ASYRDIV
 Write [F:ACLA]
 If fstat
  Call FSTA("ACLA",WACLA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WACLA.updTick = [F:ACLA]updTick
Elsif WACLA.ASTALIN=[V]CST_ALL or WACLA.ASTALIN=[V]CST_AUPD
 Call INIUPD(WACLA) From ASYRSUB
 SetInstance [F:ACLA] With WACLA
 Call NUMBER(fmet WACLA.AGETTEXT("INTCLA"),[F:ACLA]INTCLA,WACLA) From ASYRDIV
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WACLA,"ACLASSE")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:ACLA]ACLA0 = [F:ACLA]CODCLA
 If fstat
  Call FSTA("ACLA",WACLA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WACLA.updTick = [F:ACLA]updTick
Elsif WACLA.ASTALIN=[V]CST_ADEL
 SetInstance [F:ACLA] With WACLA
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WACLA,"ACLASSE")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:ACLA]ACLA0 = [F:ACLA]CODCLA
 If fstat
  Call FSTA("ACLA",WACLA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK



