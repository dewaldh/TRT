#<AdxTL>@(#)0.0.0.0 $Revision$Class EU commodity code
# Supervisor
## CRUD-CLASSE ## ITMCUSNOM
# 2018-08-27 12:35:13 317


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ITMCUSNOM [INO_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ITMCUSNOM") From ASYRCOM : Endif
Local Instance ITMCUSNOM Using C_ITMCUSNOM

If !SILENCE : Call TRACE("3 --> New Instance C_ITMCUSNOM") From ASYRCOM : Endif
ITMCUSNOM = NewInstance C_ITMCUSNOM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [INO_]INO0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ITMCUSNOM") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ITMCUSNOM.AREAD([INO_]ITMNOM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ITMCUSNOM.ITMNOM ="-num$(ITMCUSNOM.ITMNOM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ITMCUSNOM.AKEYS)
  Call TRACE("-"-num$(I)-":"-ITMCUSNOM.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [INO_]
FreeGroup ITMCUSNOM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ITMCUSNOM,ACLE,ASTATUS,_ETAG)
Variable Instance ITMCUSNOM Using C_ITMCUSNOM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _ITMNOM(12)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMNOM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File ITMCUSNOM [INO]
Default File [F:INO]
Read [F:INO]INO0 = [L]_ITMNOM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:INO]UPDTICK)>0
 [L]_ETAG = num$([F:INO]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ITMCUSNOM,ACLE,ASTATUS)
Variable Instance ITMCUSNOM Using C_ITMCUSNOM
Value Char ACLE
Variable Integer ASTATUS
Local Char _ITMNOM(12)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMNOM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ITMCUSNOM.AREAD([L]_ITMNOM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ITMCUSNOM,_ITMNOM,ASTATUS)
Variable Instance ITMCUSNOM Using C_ITMCUSNOM
Value Char _ITMNOM
Variable Integer ASTATUS

If ITMCUSNOM = null : End : Endif

Gosub AVARIABLES From WMC00ITMCUSNOM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ITMCUSNOM.APARENT=null
 [L]A_I = ITMCUSNOM.freeSnapshot
 ITMCUSNOM.snapshotEnabled = 0
 ITMCUSNOM.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ITMCUSNOM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ITMCUSNOM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ITMCUSNOM.APARENT=null
 ITMCUSNOM.snapshotEnabled = 1
 ITMCUSNOM.setAccessorEnabled = 1
Endif
LogicClose File [INO]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet ITMCUSNOM._ACTION_PARAM("AREAD_BEFORE",[L]_ITMNOM))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:INO]
Read [F:INO]INO0 = [L]_ITMNOM
If fstat
[L]A_ERROR = [L]_ITMNOM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ITMCUSNOM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:INO]AUUID)>0 & [F:INO]AUUID=NullUuid
 [F:INO]AUUID = getUuid
Endif
SetInstance ITMCUSNOM With [F:INO]
ITMCUSNOM.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet ITMCUSNOM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="ITMCUSNOM" & ZONE="DESAXX" & IDENT1=ITMCUSNOM.ITMNOM & IDENT2=""
 Call ASETTEXTRA(ITMCUSNOM.AXX,ITMCUSNOM.AllocGrp(),"DESAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 ITMCUSNOM.AXX(maxtab(ITMCUSNOM.AXX)).FLG = 0
Next AXX
If !len(fmet ITMCUSNOM.AGETTEXTRA("DESAXX"))
 Call ASETTEXTRA(ITMCUSNOM.AXX,ITMCUSNOM.AllocGrp(),"DESAXX",
& fmet ITMCUSNOM.AGETTEXTRALAN("DESAXX",ITMCUSNOM.ACTX.AFOLD.ALANGDEF),
& ITMCUSNOM.ACTX.LAN) From ASYRSUB
Endif

Return



