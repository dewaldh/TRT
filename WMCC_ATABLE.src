#<AdxTL>@(#)0.0.0.0 $Revision$Class Table dictionary
# Supervisor
## CRUD-CLASSE ## ATABLE
# 2018-08-27 12:23:03 642


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(ATABLE,ASTATUS)
Variable Instance ATABLE Using C_ATABLE
Variable Integer ASTATUS

If ATABLE = null : End : Endif

Gosub _AVARIABLES From WMC00ATABLE

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_ATABLE

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(ATABLE,ASTATUS)
Variable Instance ATABLE Using C_ATABLE
Variable Integer ASTATUS

If ATABLE = null : End : Endif

Gosub AVARIABLES From WMC00ATABLE
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_ATABLE
Else
 Gosub AINSERT_ATABLE
Endif

Gosub _AINSERT_AFTER
[L]A_I = ATABLE.freeSnapshot
ATABLE.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet ATABLE._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet ATABLE._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet ATABLE._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If ATABLE.ASTALIN = [V]CST_ANEWDEL : Return : Endif
ATABLE.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(ATABLE.ATZ) : # ATABZON -- 2
 If ATABLE.ATZ(A_N2) <> null
& and !find(ATABLE.ATZ(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
 For A_N3=1 To maxtab(ATABLE.ATZ(A_N2).AMP) : # AMSKPAR -- 5
  If ATABLE.ATZ(A_N2).AMP(A_N3) <> null
& and !find(ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
   [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).AMP(A_N3).ACTION("AINSERT_CONTROL_BEFORE"))
   If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
  Endif
 Next A_N3
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(ATABLE.ATZ)
 If ATABLE.ATZ(A_N2)<>null
  If ATABLE.ATZ(A_N2).ASTALIN<>[V]CST_ADEL & ATABLE.ATZ(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ATABLE,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"ATABZON:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
For A_N2=1 To maxtab(ATABLE.ATI) : # ATABIND -- 3
 If ATABLE.ATI(A_N2) <> null
& and !find(ATABLE.ATI(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATI(A_N2).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(ATABLE.ATI)
 If ATABLE.ATI(A_N2)<>null
  If ATABLE.ATI(A_N2).ASTALIN<>[V]CST_ADEL & ATABLE.ATI(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ATABLE,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"ATABIND:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
For A_N2=1 To maxtab(ATABLE.ATA) : # ATABAUD -- 4
 If ATABLE.ATA(A_N2) <> null
& and !find(ATABLE.ATA(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATA(A_N2).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER
For A_N2=1 To maxtab(ATABLE.ATZ) : # ATABZON -- 2
 If ATABLE.ATZ(A_N2) <> null
& and !find(ATABLE.ATZ(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
 For A_N3=1 To maxtab(ATABLE.ATZ(A_N2).AMP) : # AMSKPAR -- 5
  If ATABLE.ATZ(A_N2).AMP(A_N3) <> null
& and !find(ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
   [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).AMP(A_N3).ACTION("AINSERT_CONTROL_AFTER"))
   If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
  Endif
 Next A_N3
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(ATABLE.ATZ)
 If ATABLE.ATZ(A_N2)<>null
  If ATABLE.ATZ(A_N2).ASTALIN<>[V]CST_ADEL & ATABLE.ATZ(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ATABLE,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"ATABZON:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
For A_N2=1 To maxtab(ATABLE.ATI) : # ATABIND -- 3
 If ATABLE.ATI(A_N2) <> null
& and !find(ATABLE.ATI(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATI(A_N2).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(ATABLE.ATI)
 If ATABLE.ATI(A_N2)<>null
  If ATABLE.ATI(A_N2).ASTALIN<>[V]CST_ADEL & ATABLE.ATI(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ATABLE,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"ATABIND:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
For A_N2=1 To maxtab(ATABLE.ATA) : # ATABAUD -- 4
 If ATABLE.ATA(A_N2) <> null
& and !find(ATABLE.ATA(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATA(A_N2).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_ATABLE
Trbegin [F:ATB]
 Gosub AINSERT_ATABLE
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_ATABLE
Raz [F:ATB]
[L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Call PUT_CFG(ATABLE,"FICCFG",ATABLE.FICCFG,ATABLE.CODFIC) From SUBATB
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]ASTATUS = max([L]ASTATUS,func WMC00ATABLE._MAJSQL_ATABLE(ATABLE))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]A_TYPMAJ=[V]CST_ANEW

#-----------------------------------------------------#
For A_N2=1 To maxtab(ATABLE.ATZ)
 If ATABLE.ATZ(A_N2) <> null and
& (ATABLE.ATZ(A_N2).ASTALIN=[L]A_TYPMAJ or
& ATABLE.ATZ(A_N2).ASTALIN=[V]CST_ALL) and ([L]A_TYPMAJ<>[V]CST_ADEL)
  If ATABLE.ATZ(A_N2).ASTALIN=[L]A_TYPMAJ
   Raz [F:ATZ]
   [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).ACTION("AINSERT_BEFORE"))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   [L]ASTATUS = func WMC00ATABLE._MAJSQL_ATABZON(ATABLE.ATZ(A_N2))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).ACTION("AINSERT_AFTER"))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 #-----------------------#
 For A_N3=1 To maxtab(ATABLE.ATZ(A_N2).AMP)
  If ATABLE.ATZ(A_N2).AMP(A_N3) <> null and
& (ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN=[L]A_TYPMAJ or
& ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN=[V]CST_ALL) and ([L]A_TYPMAJ<>[V]CST_ADEL)
   If ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN=[L]A_TYPMAJ
    Raz [F:AMP]
    [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).AMP(A_N3).ACTION("AINSERT_BEFORE"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
    [L]ASTATUS = func WMC00ATABLE._MAJSQL_AMSKPAR(ATABLE.ATZ(A_N2).AMP(A_N3))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
    [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).AMP(A_N3).ACTION("AINSERT_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Endif
  If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
 Next A_N3
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 #-----------------------#
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

#-----------------------------------------------------#
For A_N2=1 To maxtab(ATABLE.ATI)
 If ATABLE.ATI(A_N2) <> null and
& (ATABLE.ATI(A_N2).ASTALIN=[L]A_TYPMAJ or
& ATABLE.ATI(A_N2).ASTALIN=[V]CST_ALL) and ([L]A_TYPMAJ<>[V]CST_ADEL)
  If ATABLE.ATI(A_N2).ASTALIN=[L]A_TYPMAJ
   Raz [F:ATI]
   [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATI(A_N2).ACTION("AINSERT_BEFORE"))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   [L]ASTATUS = func WMC00ATABLE._MAJSQL_ATABIND(ATABLE.ATI(A_N2))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATI(A_N2).ACTION("AINSERT_AFTER"))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

#-----------------------------------------------------#
For A_N2=1 To maxtab(ATABLE.ATA)
 If ATABLE.ATA(A_N2) <> null and
& (ATABLE.ATA(A_N2).ASTALIN=[L]A_TYPMAJ or
& ATABLE.ATA(A_N2).ASTALIN=[V]CST_ALL) and ([L]A_TYPMAJ<>[V]CST_ADEL)
  If ATABLE.ATA(A_N2).ASTALIN=[L]A_TYPMAJ
   Raz [F:ATA]
   [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATA(A_N2).ACTION("AINSERT_BEFORE"))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   [L]ASTATUS = func WMC00ATABLE._MAJSQL_ATABAUD(ATABLE.ATA(A_N2))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATA(A_N2).ACTION("AINSERT_AFTER"))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

[L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If ATABLE.snapshotEnabled=1
 [L]A_RETIK = ATABLE.revertUpdTick
Endif
[L]ASTATUS = max(fmet ATABLE.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(ATABLE.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 ATABLE.ASTALIN = [V]CST_ALL
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(ATABLE.ATZ)
 If ATABLE.ATZ(A_N2) <> null
  Local Integer ASTATUS2
  For A_N3=1 To maxtab(ATABLE.ATZ(A_N2).AMP)
   If ATABLE.ATZ(A_N2).AMP(A_N3) <> null
    If ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN=[V]CST_ADEL or ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN=[V]CST_ANEWDEL
     FreeInstance ATABLE.ATZ(A_N2).AMP(A_N3)
     ATABLE.ATZ(A_N2).AMP(A_N3) = null
    Elsif ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN <> [V]CST_ALL
     ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN = [V]CST_ALL
    Endif
    [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
   Endif
  Next A_N3
  If ATABLE.ATZ(A_N2).ASTALIN=[V]CST_ADEL or ATABLE.ATZ(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance ATABLE.ATZ(A_N2)
   ATABLE.ATZ(A_N2) = null
  Elsif ATABLE.ATZ(A_N2).ASTALIN <> [V]CST_ALL
   ATABLE.ATZ(A_N2).ASTALIN = [V]CST_ALL
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Local Integer ASTATUS2
For A_N2=1 To maxtab(ATABLE.ATI)
 If ATABLE.ATI(A_N2) <> null
  If ATABLE.ATI(A_N2).ASTALIN=[V]CST_ADEL or ATABLE.ATI(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance ATABLE.ATI(A_N2)
   ATABLE.ATI(A_N2) = null
  Elsif ATABLE.ATI(A_N2).ASTALIN <> [V]CST_ALL
   ATABLE.ATI(A_N2).ASTALIN = [V]CST_ALL
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Local Integer ASTATUS2
For A_N2=1 To maxtab(ATABLE.ATA)
 If ATABLE.ATA(A_N2) <> null
  If ATABLE.ATA(A_N2).ASTALIN=[V]CST_ADEL or ATABLE.ATA(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance ATABLE.ATA(A_N2)
   ATABLE.ATA(A_N2) = null
  Elsif ATABLE.ATA(A_N2).ASTALIN <> [V]CST_ALL
   ATABLE.ATA(A_N2).ASTALIN = [V]CST_ALL
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Return



