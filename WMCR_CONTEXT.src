#<AdxTL>@(#)0.0.0.0 $Revision$Class Contexts
# Supervisor
## CRUD-CLASSE ## CONTEXT
# 2018-08-27 12:30:17 413


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File CONTEXT [CNX_]

If !SILENCE : Call TRACE("2 --> Local Instance C_CONTEXT") From ASYRCOM : Endif
Local Instance CONTEXT Using C_CONTEXT

If !SILENCE : Call TRACE("3 --> New Instance C_CONTEXT") From ASYRCOM : Endif
CONTEXT = NewInstance C_CONTEXT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [CNX_]CNX0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of CONTEXT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet CONTEXT.AREAD([CNX_]CPY,[CNX_]CNX))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("CONTEXT.CPY ="-num$(CONTEXT.CPY)) From ASYRCOM
 Call TRACE("CONTEXT.CNX ="-num$(CONTEXT.CNX)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(CONTEXT.AKEYS)
  Call TRACE("-"-num$(I)-":"-CONTEXT.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [CNX_]
FreeGroup CONTEXT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(CONTEXT,ACLE,ASTATUS,_ETAG)
Variable Instance CONTEXT Using C_CONTEXT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CPY(5)
Local Tinyint _CNX
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CPY = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CNX = val([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File CONTEXT [CNX]
Default File [F:CNX]
Read [F:CNX]CNX0 = [L]_CPY;[L]_CNX
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:CNX]UPDTICK)>0
 [L]_ETAG = num$([F:CNX]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(CONTEXT,ACLE,ASTATUS)
Variable Instance CONTEXT Using C_CONTEXT
Value Char ACLE
Variable Integer ASTATUS
Local Char _CPY(5)
Local Tinyint _CNX
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CPY = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CNX = val([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet CONTEXT.AREAD([L]_CPY,[L]_CNX))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(CONTEXT,_CPY,_CNX,ASTATUS)
Variable Instance CONTEXT Using C_CONTEXT
Value Char _CPY
Value Tinyint _CNX
Variable Integer ASTATUS

If CONTEXT = null : End : Endif

Gosub AVARIABLES From WMC00CONTEXT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If CONTEXT.APARENT=null
 [L]A_I = CONTEXT.freeSnapshot
 CONTEXT.snapshotEnabled = 0
 CONTEXT.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & CONTEXT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet CONTEXT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If CONTEXT.APARENT=null
 CONTEXT.snapshotEnabled = 1
 CONTEXT.setAccessorEnabled = 1
Endif
LogicClose File [CNX] ,[FIS]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet CONTEXT._ACTION_PARAM("AREAD_BEFORE",[L]_CPY,[L]_CNX))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:CNX]
Read [F:CNX]CNX0 = [L]_CPY;[L]_CNX
If fstat
[L]A_ERROR = [L]_CPY+"~"+num$([L]_CNX)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(CONTEXT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:CNX]AUUID)>0 & [F:CNX]AUUID=NullUuid
 [F:CNX]AUUID = getUuid
Endif
SetInstance CONTEXT With [F:CNX]
CONTEXT.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:FIS]
 Filter [F:FIS] Where STAFIY > 1
 [L]A_N2=0
 For [F:FIS]FIY0 Where CPY=[CNX]CPY & CNX=[CNX]CNX
  [L]A_N2 +=1
  CONTEXT.FISCYEAR(A_N2) = NewInstance  C_FISCYEAR(CONTEXT.ACTX,NullUuid,[L]A_N2,CONTEXT,"FISCYEAR") AllocGroup CONTEXT
  [L]ASTATUS = max([L]ASTATUS,fmet CONTEXT.FISCYEAR(A_N2).ADDINSTANCE_BOUND)
  If dim([F:FIS]AUUID)>0 & [F:FIS]AUUID=NullUuid
   [F:FIS]AUUID = getUuid
  Endif
  SetInstance CONTEXT.FISCYEAR(A_N2) With [F:FIS]
  [L]A_NEWCOL = 0
  For [L]A_I=1 To 24
   If ([F:FIS]DATSTRPER([L]A_I-1)<>[00/00/0000] or [F:FIS]DATENDPER([L]A_I-1)<>[00/00/0000] or [F:FIS]NBRMONPER([L]A_I-1)<>0
& or [F:FIS]NBRWEKPER([L]A_I-1)<>0 or [F:FIS]NBRDAYPER([L]A_I-1)<>0 or [F:FIS]STAPER([L]A_I-1)<>0 or [F:FIS]TYPPST([L]A_I-1)<>0
& or [F:FIS]LSTTYPPRO([L]A_I-1)<>0)
    [L]A_NEWCOL += 1
    CONTEXT.FISCYEAR(A_N2).PERIOD(A_NEWCOL) = NewInstance  C_FISCYEAR_PERIOD(CONTEXT.ACTX,NullUuid,[L]A_I,CONTEXT.FISCYEAR(A_N2),"PERIOD") AllocGroup CONTEXT
    CONTEXT.FISCYEAR(A_N2).PERIOD(A_NEWCOL).DATSTRPER = [F:FIS]DATSTRPER([L]A_I-1)
    CONTEXT.FISCYEAR(A_N2).PERIOD(A_NEWCOL).DATENDPER = [F:FIS]DATENDPER([L]A_I-1)
    CONTEXT.FISCYEAR(A_N2).PERIOD(A_NEWCOL).NBRMONPER = [F:FIS]NBRMONPER([L]A_I-1)
    CONTEXT.FISCYEAR(A_N2).PERIOD(A_NEWCOL).NBRWEKPER = [F:FIS]NBRWEKPER([L]A_I-1)
    CONTEXT.FISCYEAR(A_N2).PERIOD(A_NEWCOL).NBRDAYPER = [F:FIS]NBRDAYPER([L]A_I-1)
    CONTEXT.FISCYEAR(A_N2).PERIOD(A_NEWCOL).STAPER = [F:FIS]STAPER([L]A_I-1)
    CONTEXT.FISCYEAR(A_N2).PERIOD(A_NEWCOL).TYPPST = [F:FIS]TYPPST([L]A_I-1)
    CONTEXT.FISCYEAR(A_N2).PERIOD(A_NEWCOL).LSTTYPPRO = [F:FIS]LSTTYPPRO([L]A_I-1)
    [L]ASTATUS = max([L]ASTATUS,fmet CONTEXT.FISCYEAR(A_N2).PERIOD(A_NEWCOL).ACTION("AREAD_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   Endif
  Next
  [L]ASTATUS = max([L]ASTATUS,fmet CONTEXT.FISCYEAR(A_N2).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  CONTEXT.FISCYEAR(A_N2).ASTALIN = [V]CST_ALL
 Next FIS
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Filter [F:FIS]
Endif
#-----------------------------------------------------#

[L]A_NEWCOL = 0
For [L]A_I=1 To dim([F:CNX]ORIBASDPR)
 If ([F:CNX]ORIBASDPR([L]A_I-1)<>0 or [F:CNX]LEDTYP([L]A_I-1)<>0 or [F:CNX]LED([L]A_I-1)<>"" or [F:CNX]COA([L]A_I-1)<>""
& or [F:CNX]FLGPROACC([L]A_I-1)<>0 or [F:CNX]PLNCAA([L]A_I-1)<>0 or [F:CNX]FLUTRATXS([L]A_I-1)<>"" or [F:CNX]FLUTRAACC([L]A_I-1)<>0
& or [F:CNX]PLNSTD([L]A_I-1)<>0 or [F:CNX]LNKPLN([L]A_I-1)<>0 or [F:CNX]FLGLNKPLN([L]A_I-1)<>0)
  [L]A_NEWCOL += 1
  CONTEXT.DPRPLN(A_NEWCOL) = NewInstance  C_CONTEXT_DPRPLN(CONTEXT.ACTX,NullUuid,[L]A_I,CONTEXT,"DPRPLN") AllocGroup CONTEXT
  CONTEXT.DPRPLN(A_NEWCOL).ORIBASDPR = [F:CNX]ORIBASDPR([L]A_I-1)
  CONTEXT.DPRPLN(A_NEWCOL).LEDTYP = [F:CNX]LEDTYP([L]A_I-1)
  CONTEXT.DPRPLN(A_NEWCOL).LED = [F:CNX]LED([L]A_I-1)
  CONTEXT.DPRPLN(A_NEWCOL).COA = [F:CNX]COA([L]A_I-1)
  CONTEXT.DPRPLN(A_NEWCOL).FLGPROACC = [F:CNX]FLGPROACC([L]A_I-1)
  CONTEXT.DPRPLN(A_NEWCOL).PLNCAA = [F:CNX]PLNCAA([L]A_I-1)
  CONTEXT.DPRPLN(A_NEWCOL).FLUTRATXS = [F:CNX]FLUTRATXS([L]A_I-1)
  CONTEXT.DPRPLN(A_NEWCOL).FLUTRAACC = [F:CNX]FLUTRAACC([L]A_I-1)
  CONTEXT.DPRPLN(A_NEWCOL).PLNSTD = [F:CNX]PLNSTD([L]A_I-1)
  CONTEXT.DPRPLN(A_NEWCOL).LNKPLN = [F:CNX]LNKPLN([L]A_I-1)
  CONTEXT.DPRPLN(A_NEWCOL).FLGLNKPLN = [F:CNX]FLGLNKPLN([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet CONTEXT.DPRPLN(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To dim([F:CNX]UPDWAITYP)
 If ([F:CNX]UPDWAITYP([L]A_I-1)<>"" or [F:CNX]UPDWAIPAR([L]A_I-1)<>"" or [F:CNX]UPDWAIBCO([L]A_I-1)<>0)
  [L]A_NEWCOL += 1
  CONTEXT.UPDWAIT(A_NEWCOL) = NewInstance  C_CONTEXT_UPDWAIT(CONTEXT.ACTX,NullUuid,[L]A_I,CONTEXT,"UPDWAIT") AllocGroup CONTEXT
  CONTEXT.UPDWAIT(A_NEWCOL).UPDWAITYP = [F:CNX]UPDWAITYP([L]A_I-1)
  CONTEXT.UPDWAIT(A_NEWCOL).UPDWAIPAR = [F:CNX]UPDWAIPAR([L]A_I-1)
  CONTEXT.UPDWAIT(A_NEWCOL).UPDWAIBCO = [F:CNX]UPDWAIBCO([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet CONTEXT.UPDWAIT(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet CONTEXT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



