#<AdxTL>@(#)0.0.0.0 $Revision$Class GST reporting periods
# Supervisor
## CRUD-CLASSE ## GSTPER
# 2019-03-21 00:08:53 976


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File GSTPER [GSTPH_]

If !SILENCE : Call TRACE("2 --> Local Instance C_GSTPER") From ASYRCOM : Endif
Local Instance GSTPER Using C_GSTPER

If !SILENCE : Call TRACE("3 --> New Instance C_GSTPER") From ASYRCOM : Endif
GSTPER = NewInstance C_GSTPER AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [GSTPH_]GSTPH0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of GSTPER") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.AREAD([GSTPH_]CODGSTPER))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("GSTPER.CODGSTPER ="-num$(GSTPER.CODGSTPER)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(GSTPER.AKEYS)
  Call TRACE("-"-num$(I)-":"-GSTPER.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [GSTPH_]
FreeGroup GSTPER
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(GSTPER,ACLE,ASTATUS,_ETAG)
Variable Instance GSTPER Using C_GSTPER
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Integer _CODGSTPER
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODGSTPER = val([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File GSTPER [GSTPH]
Default File [F:GSTPH]
Read [F:GSTPH]GSTPH0 = [L]_CODGSTPER
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:GSTPH]UPDTICK)>0
 [L]_ETAG = num$([F:GSTPH]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(GSTPER,ACLE,ASTATUS)
Variable Instance GSTPER Using C_GSTPER
Value Char ACLE
Variable Integer ASTATUS
Local Integer _CODGSTPER
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODGSTPER = val([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet GSTPER.AREAD([L]_CODGSTPER))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(GSTPER,_CODGSTPER,ASTATUS)
Variable Instance GSTPER Using C_GSTPER
Value Integer _CODGSTPER
Variable Integer ASTATUS

If GSTPER = null : End : Endif

Gosub AVARIABLES From WMC00GSTPER
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If GSTPER.APARENT=null
 [L]A_I = GSTPER.freeSnapshot
 GSTPER.snapshotEnabled = 0
 GSTPER.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & GSTPER.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet GSTPER._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If GSTPER.APARENT=null
 GSTPER.snapshotEnabled = 1
 GSTPER.setAccessorEnabled = 1
Endif
LogicClose File [GSTPH] ,[GSTPD]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet GSTPER._ACTION_PARAM("AREAD_BEFORE",[L]_CODGSTPER))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:GSTPH]
Read [F:GSTPH]GSTPH0 = [L]_CODGSTPER
If fstat
[L]A_ERROR = num$([L]_CODGSTPER)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(GSTPER,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:GSTPH]AUUID)>0 & [F:GSTPH]AUUID=NullUuid
 [F:GSTPH]AUUID = getUuid
Endif
SetInstance GSTPER With [F:GSTPH]
GSTPER.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:GSTPD]
 [L]A_N2=0
 For [F:GSTPD]GSTPD0 Where CODGSTPER=[GSTPH]CODGSTPER
  [L]A_N2 +=1
  GSTPER.LINES(A_N2) = NewInstance  C_GSTPERD(GSTPER.ACTX,NullUuid,[L]A_N2,GSTPER,"LINES") AllocGroup GSTPER
  [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.LINES(A_N2).ADDINSTANCE_BOUND)
  Callmet GSTPER.LINES(A_N2).AREAD([F:GSTPD]CODGSTPER,[F:GSTPD]LIN)
  GSTPER.LINES(A_N2).ASTALIN = [V]CST_ALL
  [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.LINES(A_N2).ASETATTRIBUTE("CODGSTPER","$namProParent","CODGSTPER"))
  [L]ASTATUS = max([L]ASTATUS,fmet GSTPER.LINES(A_N2).ASETATTRIBUTE("LIN","$isDisabled","true"))
 Next GSTPD
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
#-----------------------------------------------------#

[L]ASTATUS = max([L]ASTATUS,fmet GSTPER.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



