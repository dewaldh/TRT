#<AdxTL>@(#)0.0.0.0 $Revision$Class Suppliers
# Supervisor
## CRUD-CLASSE ## BPSUPPLIERM
# 2018-08-27 13:07:10 121


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File BPSUPPLIER [BPS_]

If !SILENCE : Call TRACE("2 --> Local Instance R_BPSUPPLIERM") From ASYRCOM : Endif
Local Instance BPSUPPLIERM Using R_BPSUPPLIERM

If !SILENCE : Call TRACE("3 --> New Instance R_BPSUPPLIERM") From ASYRCOM : Endif
BPSUPPLIERM = NewInstance R_BPSUPPLIERM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [BPS_]BPS0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of BPSUPPLIER") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIERM.AREAD([BPS_]BPSNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("BPSUPPLIERM.BPS.BPSNUM ="-num$(BPSUPPLIERM.BPS.BPSNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(BPSUPPLIERM.BPS.AKEYS)
  Call TRACE("-"-num$(I)-":"-BPSUPPLIERM.BPS.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [BPS_]
FreeGroup BPSUPPLIERM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(BPSUPPLIERM,ACLE,ASTATUS,_ETAG)
Variable Instance BPSUPPLIERM Using R_BPSUPPLIERM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _BPSNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BPSNUM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File BPSUPPLIER [BPS]
Default File [F:BPS]
Read [F:BPS]BPS0 = [L]_BPSNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:BPS]UPDTICK)>0
 [L]_ETAG = num$([F:BPS]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(BPSUPPLIERM,ACLE,ASTATUS)
Variable Instance BPSUPPLIERM Using R_BPSUPPLIERM
Value Char ACLE
Variable Integer ASTATUS
Local Char _BPSNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BPSNUM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIERM.AREAD([L]_BPSNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(BPSUPPLIERM,_BPSNUM,ASTATUS)
Variable Instance BPSUPPLIERM Using R_BPSUPPLIERM
Value Char _BPSNUM
Variable Integer ASTATUS

If BPSUPPLIERM = null : End : Endif

Gosub AVARIABLES From WMR00BPSUPPLIERM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If BPSUPPLIERM.APARENT=null
 [L]A_I = BPSUPPLIERM.freeSnapshot
 BPSUPPLIERM.snapshotEnabled = 0
 BPSUPPLIERM.setAccessorEnabled = 0
Endif

If fmet BPSUPPLIERM.ACTX.AGETAFCRIGHT(BPSUPPLIERM,"GESBPS",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:BPS]
Read [F:BPS]BPS0 = [L]_BPSNUM
If fstat
[L]A_ERROR = [L]_BPSNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(BPSUPPLIERM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet BPSUPPLIERM.ACTX.AGETAFCRIGHTR(BPSUPPLIERM,"GESBPS",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet BPSUPPLIERM.ACTX.ASTACRITROLE(BPSUPPLIERM,[L]_BPSNUM
& ,"BPS","BPS",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIERM.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

BPSUPPLIERM.BPS.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIERM.BPS.AREAD([L]_BPSNUM))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIERM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & BPSUPPLIERM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIERM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If BPSUPPLIERM.APARENT=null
 BPSUPPLIERM.snapshotEnabled = 1
 BPSUPPLIERM.setAccessorEnabled = 1
Endif
LogicClose File [BPS] ,[BPR]
End



