#<AdxTL>@(#)0.0.0.0 $Revision$Class Delivery types
# Supervisor
## CRUD-CLASSE ## TABSDHTYP
# 2018-08-27 12:52:30 122


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABSDHTYP [TSD_]

If !SILENCE : Call TRACE("2 --> Local Instance C_TABSDHTYP") From ASYRCOM : Endif
Local Instance TABSDHTYP Using C_TABSDHTYP

If !SILENCE : Call TRACE("3 --> New Instance C_TABSDHTYP") From ASYRCOM : Endif
TABSDHTYP = NewInstance C_TABSDHTYP AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TSD_]TSD0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TABSDHTYP") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TABSDHTYP.AREAD([TSD_]SDHTYP,[TSD_]LEG))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TABSDHTYP.SDHTYP ="-num$(TABSDHTYP.SDHTYP)) From ASYRCOM
 Call TRACE("TABSDHTYP.LEG ="-num$(TABSDHTYP.LEG)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TABSDHTYP.AKEYS)
  Call TRACE("-"-num$(I)-":"-TABSDHTYP.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TSD_]
FreeGroup TABSDHTYP
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TABSDHTYP,ACLE,ASTATUS,_ETAG)
Variable Instance TABSDHTYP Using C_TABSDHTYP
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _SDHTYP(5)
Local Char _LEG(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SDHTYP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File TABSDHTYP [TSD]
Default File [F:TSD]
Read [F:TSD]TSD0 = [L]_SDHTYP;[L]_LEG
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TSD]UPDTICK)>0
 [L]_ETAG = num$([F:TSD]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TABSDHTYP,ACLE,ASTATUS)
Variable Instance TABSDHTYP Using C_TABSDHTYP
Value Char ACLE
Variable Integer ASTATUS
Local Char _SDHTYP(5)
Local Char _LEG(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SDHTYP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TABSDHTYP.AREAD([L]_SDHTYP,[L]_LEG))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TABSDHTYP,_SDHTYP,_LEG,ASTATUS)
Variable Instance TABSDHTYP Using C_TABSDHTYP
Value Char _SDHTYP
Value Char _LEG
Variable Integer ASTATUS

If TABSDHTYP = null : End : Endif

Gosub AVARIABLES From WMC00TABSDHTYP
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TABSDHTYP.APARENT=null
 [L]A_I = TABSDHTYP.freeSnapshot
 TABSDHTYP.snapshotEnabled = 0
 TABSDHTYP.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & TABSDHTYP.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet TABSDHTYP._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If TABSDHTYP.APARENT=null
 TABSDHTYP.snapshotEnabled = 1
 TABSDHTYP.setAccessorEnabled = 1
Endif
LogicClose File [TSD]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet TABSDHTYP._ACTION_PARAM("AREAD_BEFORE",[L]_SDHTYP,[L]_LEG))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:TSD]
Read [F:TSD]TSD0 = [L]_SDHTYP;[L]_LEG
If fstat
[L]A_ERROR = [L]_SDHTYP+"~"+[L]_LEG
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABSDHTYP,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:TSD]AUUID)>0 & [F:TSD]AUUID=NullUuid
 [F:TSD]AUUID = getUuid
Endif
SetInstance TABSDHTYP With [F:TSD]
TABSDHTYP.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet TABSDHTYP.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="TABSDHTYP" & ZONE="DESAXX" & IDENT1=TABSDHTYP.SDHTYP & IDENT2=TABSDHTYP.LEG
 Call ASETTEXTRA(TABSDHTYP.AXX,TABSDHTYP.AllocGrp(),"DESAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 TABSDHTYP.AXX(maxtab(TABSDHTYP.AXX)).FLG = 0
Next AXX
If !len(fmet TABSDHTYP.AGETTEXTRA("DESAXX"))
 Call ASETTEXTRA(TABSDHTYP.AXX,TABSDHTYP.AllocGrp(),"DESAXX",
& fmet TABSDHTYP.AGETTEXTRALAN("DESAXX",TABSDHTYP.ACTX.AFOLD.ALANGDEF),
& TABSDHTYP.ACTX.LAN) From ASYRSUB
Endif
For [AXX] Where CODFIC="TABSDHTYP" & ZONE="SHOAXX" & IDENT1=TABSDHTYP.SDHTYP & IDENT2=TABSDHTYP.LEG
 Call ASETTEXTRA(TABSDHTYP.AXX,TABSDHTYP.AllocGrp(),"SHOAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 TABSDHTYP.AXX(maxtab(TABSDHTYP.AXX)).FLG = 0
Next AXX
If !len(fmet TABSDHTYP.AGETTEXTRA("SHOAXX"))
 Call ASETTEXTRA(TABSDHTYP.AXX,TABSDHTYP.AllocGrp(),"SHOAXX",
& fmet TABSDHTYP.AGETTEXTRALAN("SHOAXX",TABSDHTYP.ACTX.AFOLD.ALANGDEF),
& TABSDHTYP.ACTX.LAN) From ASYRSUB
Endif

Return



