#<AdxTL>@(#)0.0.0.0 $Revision$Class Documentation
# Supervisor
## CRUD-CLASSE ## ADOCUMENT
# 2018-08-27 12:19:47 793


############################################################################################
### Subprog _AUPDATE
############################################################################################
Subprog _AUPDATE(ADOCUMENT,ASTATUS)
Variable Instance ADOCUMENT Using C_ADOCUMENT
Variable Integer ASTATUS

If ADOCUMENT = null : End : Endif

Gosub _AVARIABLES From WMC00ADOCUMENT

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AUPDATE_ADOCUMENT

End

#-----------------------------------------------------#

############################################################################################
### Subprog AUPDATE
############################################################################################
Subprog AUPDATE(ADOCUMENT,ASTATUS)
Variable Instance ADOCUMENT Using C_ADOCUMENT
Variable Integer ASTATUS

If ADOCUMENT = null : End : Endif

Gosub AVARIABLES From WMC00ADOCUMENT
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = ""
ADOCUMENT.ASTALIN = [V]CST_AUPD
Gosub AUPDATE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If !adxlog
 Gosub AUPDATE_TR_ADOCUMENT
Else
 Gosub AUPDATE_ADOCUMENT
Endif
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

Gosub _AUPDATE_AFTER
[L]A_I = ADOCUMENT.freeSnapshot
ADOCUMENT.snapshotEnabled = 1
$AUPDATE_END
End


$AUPDATE_CONTROL
Gosub _AUPDATE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet ADOCUMENT._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet ADOCUMENT._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet ADOCUMENT._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AUPDATE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_BEFORE
If ADOCUMENT.ASTALIN = [V]CST_ANEWDEL : Return : Endif
ADOCUMENT.ASTALIN = [V]CST_AUPD
If [V]CST_ASTALIN(ADOCUMENT.ASTALIN)<>""
 [L]A_ASTALIN = ADOCUMENT.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
A_N2=1
If ADOCUMENT.ADH(A_N2) <> null
& and ADOCUMENT.ADH(A_N2).ASTALIN<>[V]CST_ANEWDEL
 If ADOCUMENT.ADH(A_N2).ASTALIN<>[V]CST_ANEW & ADOCUMENT.ASTALIN=[V]CST_ADEL
  ADOCUMENT.ADH(A_N2).ASTALIN = [V]CST_ADEL
 Endif
 If ADOCUMENT.ADH(A_N2).ASTALIN=[V]CST_ANEW & find(ADOCUMENT.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL)>0
  ADOCUMENT.ADH(A_N2).ASTALIN = [V]CST_ANEWDEL
 Endif
 If [V]CST_ASTALIN(ADOCUMENT.ADH(A_N2).ASTALIN)<>""
  [L]A_ASTALIN = ADOCUMENT.ADH(A_N2).ASTALIN
  [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ADH(A_N2).ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_AFTER
A_N2=1
If ADOCUMENT.ADH(A_N2) <> null
& and ADOCUMENT.ADH(A_N2).ASTALIN<>[V]CST_ANEWDEL
 If [V]CST_ASTALIN(ADOCUMENT.ADH(A_N2).ASTALIN)<>""
  [L]A_ASTALIN = ADOCUMENT.ADH(A_N2).ASTALIN
  [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ADH(A_N2).ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

If [V]CST_ASTALIN(ADOCUMENT.ASTALIN)<>""
 [L]A_ASTALIN = ADOCUMENT.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
Return

#-----------------------------------------------------#
$AUPDATE_TR_ADOCUMENT
Trbegin [F:ADO]
 Gosub AUPDATE_ADOCUMENT
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AUPDATE_ADOCUMENT
Read [F:ADO]ADO0 = ADOCUMENT.LAN;ADOCUMENT.TYP;ADOCUMENT.COD;ADOCUMENT.LEV;ADOCUMENT.SUBLEV
If !fstat
 #-----------------------#
 If [L]A_LEVEL>=2
  [L]A_N2=1
  Read [ADH]ADH0 = [F:ADO]LAN;[F:ADO]TYP;[F:ADO]COD;[F:ADO]LEV;[F:ADO]SUBLEV
  If !fstat
   Delete [F:ADH] Curr
   If fstat
    Call FSTA("ADH",ADOCUMENT,[L]ASTATUS) From ASYRSUB : Return
   Endif
  Endif
 Endif
 #-----------------------#
Endif
[L]A_ASTALIN = ADOCUMENT.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00ADOCUMENT._MAJSQL_ADOCUMENT(ADOCUMENT))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [L]A_TYPMAJ=[V]CST_ADEL,[V]CST_AUPD,[V]CST_ANEW
 #-----------------------#
 A_N2=1
 If ADOCUMENT.ADH(A_N2) <> null and 
& ADOCUMENT.ADH(A_N2).ASTALIN=[V]CST_ALL
 ADOCUMENT.ADH(A_N2).ASTALIN = [V]CST_AUPD
 Endif
 If ADOCUMENT.ADH(A_N2) <> null and
& (ADOCUMENT.ADH(A_N2).ASTALIN=[L]A_TYPMAJ or
& ADOCUMENT.ADH(A_N2).ASTALIN=[V]CST_ALL) and ([L]A_TYPMAJ<>[V]CST_ADEL)
  If [L]A_TYPMAJ=[V]CST_AUPD
   ADOCUMENT.ADH(A_N2).ASTALIN=[V]CST_ANEW
  Else
   If ADOCUMENT.ADH(A_N2).ASTALIN=[L]A_TYPMAJ
    If [V]CST_ASTALIN(ADOCUMENT.ADH(A_N2).ASTALIN)<>""
     [L]A_ASTALIN = ADOCUMENT.ADH(A_N2).ASTALIN
     [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ADH(A_N2).ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_BEFORE"))
     If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
    Endif
    [L]ASTATUS = func WMC00ADOCUMENT._MAJSQL_ADOCCLB(ADOCUMENT.ADH(A_N2))
    If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
    If [V]CST_ASTALIN(ADOCUMENT.ADH(A_N2).ASTALIN)<>""
     [L]A_ASTALIN = ADOCUMENT.ADH(A_N2).ASTALIN
     [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ADH(A_N2).ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_AFTER"))
     If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
    Endif
   Endif
  Endif
 Endif
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 #-----------------------#
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = ADOCUMENT.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AUPDATE_ABORT
Rollback
$_AUPDATE_ABORT
If ADOCUMENT.snapshotEnabled=1
 [L]A_RETIK = ADOCUMENT.revertUpdTick
Endif
Local Integer ASTATUS2
A_N2=1
If ADOCUMENT.ADH(A_N2) <> null
 If ADOCUMENT.ADH(A_N2).ASTALIN=[V]CST_ANEWDEL
  ADOCUMENT.ADH(A_N2).ASTALIN = [V]CST_ANEW
 Endif
 [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
Endif

[L]ASTATUS = max(fmet ADOCUMENT.ACTION("AUPDATE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AUPDATE_AFTER
If find(ADOCUMENT.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 ADOCUMENT.ASTALIN = [V]CST_ALL
Endif
Local Integer ASTATUS2
A_N2=1
If ADOCUMENT.ADH(A_N2) <> null
 If ADOCUMENT.ADH(A_N2).ASTALIN=[V]CST_ADEL or ADOCUMENT.ADH(A_N2).ASTALIN=[V]CST_ANEWDEL
  FreeInstance ADOCUMENT.ADH(A_N2)
  ADOCUMENT.ADH(A_N2) = null
 Elsif ADOCUMENT.ADH(A_N2).ASTALIN <> [V]CST_ALL
  ADOCUMENT.ADH(A_N2).ASTALIN = [V]CST_ALL
 Endif
 [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
Endif
Return



