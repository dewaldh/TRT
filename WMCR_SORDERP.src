#<AdxTL>@(#)0.0.0.0 $Revision$Class Sales orders - price
# Supervisor
## CRUD-CLASSE ## SORDERP
# 2018-08-27 12:48:24 501


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File SORDERP [SOP_]

If !SILENCE : Call TRACE("2 --> Local Instance C_SORDERP") From ASYRCOM : Endif
Local Instance SORDERP Using C_SORDERP

If !SILENCE : Call TRACE("3 --> New Instance C_SORDERP") From ASYRCOM : Endif
SORDERP = NewInstance C_SORDERP AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [SOP_]SOP0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of SORDERP") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet SORDERP.AREAD([SOP_]SOHNUM,[SOP_]SOPLIN,[SOP_]SOPSEQ))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("SORDERP.SOHNUM ="-num$(SORDERP.SOHNUM)) From ASYRCOM
 Call TRACE("SORDERP.SOPLIN ="-num$(SORDERP.SOPLIN)) From ASYRCOM
 Call TRACE("SORDERP.SOPSEQ ="-num$(SORDERP.SOPSEQ)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(SORDERP.AKEYS)
  Call TRACE("-"-num$(I)-":"-SORDERP.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [SOP_]
FreeGroup SORDERP
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(SORDERP,ACLE,ASTATUS,_ETAG)
Variable Instance SORDERP Using C_SORDERP
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _SOHNUM(20)
Local Integer _SOPLIN
Local Integer _SOPSEQ
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SOHNUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_SOPLIN = val([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_SOPSEQ = val([L]CLE(3)) : Endif
Raz [L]_ETAG
Local File SORDERP [SOP]
Default File [F:SOP]
Read [F:SOP]SOP0 = [L]_SOHNUM;[L]_SOPLIN;[L]_SOPSEQ
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:SOP]UPDTICK)>0
 [L]_ETAG = num$([F:SOP]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(SORDERP,ACLE,ASTATUS)
Variable Instance SORDERP Using C_SORDERP
Value Char ACLE
Variable Integer ASTATUS
Local Char _SOHNUM(20)
Local Integer _SOPLIN
Local Integer _SOPSEQ
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SOHNUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_SOPLIN = val([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_SOPSEQ = val([L]CLE(3)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SORDERP.AREAD([L]_SOHNUM,[L]_SOPLIN,[L]_SOPSEQ))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(SORDERP,_SOHNUM,_SOPLIN,_SOPSEQ,ASTATUS)
Variable Instance SORDERP Using C_SORDERP
Value Char _SOHNUM
Value Integer _SOPLIN
Value Integer _SOPSEQ
Variable Integer ASTATUS

If SORDERP = null : End : Endif

Gosub AVARIABLES From WMC00SORDERP
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If SORDERP.APARENT=null
 [L]A_I = SORDERP.freeSnapshot
 SORDERP.snapshotEnabled = 0
 SORDERP.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & SORDERP.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet SORDERP._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If SORDERP.APARENT=null
 SORDERP.snapshotEnabled = 1
 SORDERP.setAccessorEnabled = 1
Endif
LogicClose File [SOP]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet SORDERP._ACTION_PARAM("AREAD_BEFORE",[L]_SOHNUM,[L]_SOPLIN,[L]_SOPSEQ))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet SORDERP._ACTION_PARAM("AREAD",[L]_SOHNUM,[L]_SOPLIN,[L]_SOPSEQ))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
SORDERP.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To 5
 [L]A_NEWCOL += 1
 SORDERP.C_TSICOD(A_NEWCOL) = NewInstance  C_SORDERP_C_TSICOD(SORDERP.ACTX,NullUuid,[L]A_I,SORDERP,"C_TSICOD") AllocGroup SORDERP
 SORDERP.C_TSICOD(A_NEWCOL).TSICOD = [F:SOP]TSICOD([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet SORDERP.C_TSICOD(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 3
 If ([F:SOP]VACITM([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  SORDERP.C_VACITM(A_NEWCOL) = NewInstance  C_SORDERP_C_VACITM(SORDERP.ACTX,NullUuid,[L]A_I,SORDERP,"C_VACITM") AllocGroup SORDERP
  SORDERP.C_VACITM(A_NEWCOL).VACITM = [F:SOP]VACITM([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet SORDERP.C_VACITM(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 3
 If ([F:SOP]VAT([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  SORDERP.C_VAT(A_NEWCOL) = NewInstance  C_SORDERP_C_VAT(SORDERP.ACTX,NullUuid,[L]A_I,SORDERP,"C_VAT") AllocGroup SORDERP
  SORDERP.C_VAT(A_NEWCOL).VAT = [F:SOP]VAT([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet SORDERP.C_VAT(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet SORDERP.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



