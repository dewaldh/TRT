#<AdxTL>@(#)0.0.0.0 $Revision$Class Budget setup
# Supervisor
## CRUD-CLASSE ## BUDPAR
# 2018-08-27 13:08:40 260


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File BUDPAR [BUP_]

If !SILENCE : Call TRACE("2 --> Local Instance R_BUDPAR") From ASYRCOM : Endif
Local Instance BUDPAR Using R_BUDPAR

If !SILENCE : Call TRACE("3 --> New Instance R_BUDPAR") From ASYRCOM : Endif
BUDPAR = NewInstance R_BUDPAR AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [BUP_]BUP0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of BUDPAR") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet BUDPAR.AREAD([BUP_]BUD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("BUDPAR.BUP.BUD ="-num$(BUDPAR.BUP.BUD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(BUDPAR.BUP.AKEYS)
  Call TRACE("-"-num$(I)-":"-BUDPAR.BUP.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [BUP_]
FreeGroup BUDPAR
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(BUDPAR,ACLE,ASTATUS,_ETAG)
Variable Instance BUDPAR Using R_BUDPAR
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _BUD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BUD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File BUDPAR [BUP]
Default File [F:BUP]
Read [F:BUP]BUP0 = [L]_BUD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:BUP]UPDTICK)>0
 [L]_ETAG = num$([F:BUP]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(BUDPAR,ACLE,ASTATUS)
Variable Instance BUDPAR Using R_BUDPAR
Value Char ACLE
Variable Integer ASTATUS
Local Char _BUD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BUD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet BUDPAR.AREAD([L]_BUD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(BUDPAR,_BUD,ASTATUS)
Variable Instance BUDPAR Using R_BUDPAR
Value Char _BUD
Variable Integer ASTATUS

If BUDPAR = null : End : Endif

Gosub AVARIABLES From WMR00BUDPAR
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If BUDPAR.APARENT=null
 [L]A_I = BUDPAR.freeSnapshot
 BUDPAR.snapshotEnabled = 0
 BUDPAR.setAccessorEnabled = 0
Endif

If fmet BUDPAR.ACTX.AGETAFCRIGHT(BUDPAR,"GESBUP",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:BUP]
Read [F:BUP]BUP0 = [L]_BUD
If fstat
[L]A_ERROR = [L]_BUD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(BUDPAR,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = [F:BUP]ACS
If fmet BUDPAR.ACTX.AGETAFCRIGHTR(BUDPAR,"GESBUP",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet BUDPAR.ACTX.AGETACSRIGHTC(BUDPAR,[L]A_STRACC,[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR
 Goto AREAD_END
  Endif
If fmet BUDPAR.ACTX.ASTACRITROLE(BUDPAR,[L]_BUD
& ,"BUP","BUP",[V]CST_ATRUE)>=[V]CST_AERROR
   [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
  Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet BUDPAR.ACTION("AREAD_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  BUDPAR.BUP.setAccessorEnabled = 0
  [L]ASTATUS = max([L]ASTATUS,fmet BUDPAR.BUP.AREAD([L]_BUD))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet BUDPAR.ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  If [L]ASTATUS<[V]CST_AERROR & BUDPAR.APARENT=null
   # Load Link
   [L]ASTATUS = max([L]ASTATUS,fmet BUDPAR._ALNKPRO)
   If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  Endif
  
  $AREAD_END
  If BUDPAR.APARENT=null
   BUDPAR.snapshotEnabled = 1
   BUDPAR.setAccessorEnabled = 1
  Endif
  LogicClose File [BUP] ,[BUV]
  End
  


