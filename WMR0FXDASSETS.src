#<AdxTL>@(#)0.0.0.0 $Revision$Class Asset
# Supervisor
## ACLA-CLASSE ## FXDASSETS
# 2018-08-27 13:15:24 535


####################################################################
# Actions
####################################################################

$ACTION
Local    Char     CURSTR(30) , CODTRT(30)(1..16)
Local    Integer  TYPTRT(1..16) , NBRTRT , INDTRT
[L]CURSTR = "FXDASSETS"

Gosub ACTION From ASYRSUB
Return

####################################################################
# Traitments
####################################################################
$_ADDTRT
this.AINF.TRT(1) = "FXDASSETS_RSTD"
this.AINF.TYP(1) = 1
this.AINF.PTH(1) = ""
this.AINF.TRT(2) = "WMRS_FXDASSETS"
this.AINF.TYP(2) = 1
this.AINF.PTH(2) = ""
this.AINF.NBTRT = 2
Return

####################################################################
#Declaration of variables
####################################################################

$DECLARE_VAR
Local Char    ACTION(50) , CURPRO(250) , VALPRO(250) , CURQRY(50) , CURPTH(250)
Local Char    AMETHOD(50) ,AOPERATION(50),AEVENT(50),ARULE(50)
Local Integer ALLSTAT,AISMET,ASTATUS
Return

####################################################################
# Methods of the class
####################################################################
# Fmethod Dispose
$ISSUE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "ISSUE" : [L]ACTION = "ISSUE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

####################################################################
# Global methods & standards
####################################################################
$AINIT
Gosub DECLARE_VAR
[L]AEVENT = "AINIT" : [L]ACTION = "AINIT" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
$ACONTROL
####################################################################
Gosub DECLARE_VAR
[L]AEVENT = "ACONTROL" : [L]ACTION = "ACONTROL" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# AERRORS
####################################################################

$_AERROR
Gosub DECLARE_VAR From WMR0FXDASSETS
Local Integer ALLSTAT
Call ALLERRORS(this,_CTX,_SUPP) From ASYRSUB
For AINDCLA=1 To 15
 If this.DEP(AINDCLA)<>null
  [L]ASTATUS = fmet this.DEP(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To 99
 If this.PHY(AINDCLA)<>null
  [L]ASTATUS = fmet this.PHY(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
If this.FAS<>null
 [L]ASTATUS = fmet this.FAS._AERROR(_CTX,_SUPP)
Endif
Return

####################################################################
# Delete all errors
####################################################################

$_ADELERRORS
Gosub DECLARE_VAR From WMR0FXDASSETS
Local Integer ALLSTAT
[L]ASTATUS = fmet this.ADELETEERROR([L]_APARAM)
For AINDCLA=1 To 15
 If this.DEP(AINDCLA)<>null
  [L]ASTATUS = fmet this.DEP(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To 99
 If this.PHY(AINDCLA)<>null
  [L]ASTATUS = fmet this.PHY(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
If this.FAS<>null
 [L]ASTATUS = fmet this.FAS._ADELERRORS(_APARAM)
Endif
Return

####################################################################
# ADELLINE
####################################################################
$ADELLINE
Case _ACOLLECTION
 When "DEP"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"DEP",this)
 When "PHY"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"PHY",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# ADDLINE
####################################################################
$ADDLINE
Case _ACOLLECTION
 When "DEP"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"DEP","R_FXDASSETS_DEP",this)
 When "PHY"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"PHY","R_FXDASSETS_PHY",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETDIM
####################################################################
$AGETDIM
Case _ACOLLECTION
 When "DEP"
  [L]_ALINE = 15
 When "PHY"
  [L]_ALINE = 99
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETMIN
####################################################################
$AGETMIN
Case _ACOLLECTION
 When "DEP"
  [L]_ALINE = 2
 When "PHY"
  [L]_ALINE = 1
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# EXEC OPERATION
####################################################################
Subprog EXE_OPERATION(WCLA,_OPERATION,ACLBRETURN,ACLE,ATBPAR,TBVAL)
Variable Instance WCLA Using OBJECT
Value    Char _OPERATION
Variable Clbfile ACLBRETURN
Value    Char ACLE
Variable Char ATBPAR()(1..)
Variable Char TBVAL()(1..)
Local Integer ASTATUS
Case [L]_OPERATION
 When Default
Endcase 
End

####################################################################
# EXEC METHOD
####################################################################
Subprog EXE_METHOD(WCLA,_METHOD,NAME_INSTANCE,ATBPAR,TBVAL)
Variable Instance WCLA Using OBJECT
Value    Char  NAME_INSTANCE
Value    Char _METHOD
Variable Char ATBPAR()(1..)
Variable Char TBVAL()(1..)
Local Integer ASTATUS
Case [L]_METHOD
 When "ISSUE"
  # Parameters value
  # Call method
  Local Integer ARETURN
  If [L]NAME_INSTANCE=""
   [L]NAME_INSTANCE = "WCLA"
  Else
   [L]NAME_INSTANCE = "WCLA."+[L]NAME_INSTANCE
  Endif
  [L]ARETURN = evalue('fmet'-NAME_INSTANCE+'.ISSUE()')
 When Default
Endcase 
End

####################################################################
# _ADELINSTANCE
####################################################################
$_ADELINSTANCE
[L]ASTATUS = func ASYRSUBTAB._ADELINSTANCE(this)
Return

####################################################################
# ADDINSTANCE_BOUND
####################################################################
$ADDINSTANCE_BOUND
this.FAS = NewInstance C_FXDASSETS(this.ACTX,NullUuid,0,this,"FAS") AllocGroup this
this.FAS.ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.FAS.ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
Return



