#<AdxTL>@(#)0.0.0.0 $Revision$Class Batch task
# Supervisor
## CRUD-CLASSE ## BATCH
# 2018-08-27 12:24:33 927


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File BATCH [BTC_]

If !SILENCE : Call TRACE("2 --> Local Instance C_BATCH") From ASYRCOM : Endif
Local Instance BATCH Using C_BATCH

If !SILENCE : Call TRACE("3 --> New Instance C_BATCH") From ASYRCOM : Endif
BATCH = NewInstance C_BATCH AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [BTC_]BTC0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of BATCH") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet BATCH.AREAD([BTC_]COD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("BATCH.COD ="-num$(BATCH.COD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(BATCH.AKEYS)
  Call TRACE("-"-num$(I)-":"-BATCH.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [BTC_]
FreeGroup BATCH
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(BATCH,ACLE,ASTATUS,_ETAG)
Variable Instance BATCH Using C_BATCH
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _COD(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File BATCH [BTC]
Default File [F:BTC]
Read [F:BTC]BTC0 = [L]_COD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:BTC]UPDTICK)>0
 [L]_ETAG = num$([F:BTC]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(BATCH,ACLE,ASTATUS)
Variable Instance BATCH Using C_BATCH
Value Char ACLE
Variable Integer ASTATUS
Local Char _COD(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet BATCH.AREAD([L]_COD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(BATCH,_COD,ASTATUS)
Variable Instance BATCH Using C_BATCH
Value Char _COD
Variable Integer ASTATUS

If BATCH = null : End : Endif

Gosub AVARIABLES From WMC00BATCH
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If BATCH.APARENT=null
 [L]A_I = BATCH.freeSnapshot
 BATCH.snapshotEnabled = 0
 BATCH.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & BATCH.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet BATCH._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If BATCH.APARENT=null
 BATCH.snapshotEnabled = 1
 BATCH.setAccessorEnabled = 1
Endif
LogicClose File [BTC]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet BATCH._ACTION_PARAM("AREAD_BEFORE",[L]_COD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:BTC]
Read [F:BTC]BTC0 = [L]_COD
If fstat
[L]A_ERROR = [L]_COD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(BATCH,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:BTC]AUUID)>0 & [F:BTC]AUUID=NullUuid
 [F:BTC]AUUID = getUuid
Endif
SetInstance BATCH With [F:BTC]
BATCH.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To 4
 [L]A_NEWCOL += 1
 BATCH.TMEOUT(A_NEWCOL) = NewInstance  C_BATCH_TMEOUT(BATCH.ACTX,NullUuid,[L]A_I,BATCH,"TMEOUT") AllocGroup BATCH
 BATCH.TMEOUT(A_NEWCOL).TIMOUT = [F:BTC]TIMOUT([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet BATCH.TMEOUT(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet BATCH.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



