#<AdxTL>@(#)0.0.0.0 $Revision$
######################################################################################################################
# Script            : YCSHELPER                                                                                        #
# Creation date     : 01/02/2019                                                                                     #
# Version           : 1.0.0                                                                                          #
# Authors (Company) : JH (Leverage)                                                                                  #
# Module            : Content server helper                                                                          #
# -------------------------------------------------------------------------------------------------------------------#
# Epic              :                                                 #
# Description       : Content server helper methods to access the API                                                #
#--------------------------------------------------------------------------------------------------------------------#
# Evolutions        :                                                                                                #
######################################################################################################################


#-------------------------------------------------------------------------------------#
#Content server - upload document
#'http://dennisdocs/otcsapp/llisapi.dll/api/v1/nodes/'
#-------------------------------------------------------------------------------------#
Funprog CSUPLOADDOC(YOCTSTICKET,YURL,YPARENTID,YNAME,YTYPE,YFILE)

Value Char YOCTSTICKET
Value Char YURL
Value Integer YPARENTID
Value Char YNAME
Value Integer YTYPE
Value Char YFILE

Local Clbfile ARGUMENTS(0)
Local Clbfile RESHEAD(0)
Local Clbfile RESBODY(6)
Local Integer I:I=0
Local Integer RESULT
Local Integer YID

Raz ARGUMENTS
Append ARGUMENTS, '{'

Call APPEND_ARGS(ARGUMENTS, 'YOCTSTICKET', YOCTSTICKET)
Call APPEND_ARGS(ARGUMENTS, 'YURL', YURL)
Call APPEND_ARGS(ARGUMENTS, 'YPARENTID', num$(YPARENTID))
Call APPEND_ARGS(ARGUMENTS, 'YNAME', YNAME)
Call APPEND_ARGS(ARGUMENTS, 'YTYPE', num$(YTYPE))
Call APPEND_ARGS(ARGUMENTS, 'YFILE', YFILE)
#Infbox YFILE

I = len(ARGUMENTS)
If I>0 : ARGUMENTS= left$(ARGUMENTS,I-1) + "}" : Endif

#call the external API
STATUSCODE = func ASYRWEBSER.EXEC_JS("bundles/ycontent-server/lib/index","csuploaddoc","wait",ARGUMENTS, "0", 0, "", "0", RESHEAD, RESBODY)

If STATUSCODE<>200 Then
#  Infbox num$(STATUSCODE),RESHEAD,RESBODY
 GMESSAGE = "Request could not be completed"
  GERR = 1
Else
Local Integer X
  RESBODY = unescJson(RESBODY)
    X = instr(1,RESBODY,':')
    YID = val(seg$(RESBODY,X+1,len(RESBODY)))
  #Infbox num$(YID)
Endif

End YID



#-------------------------------------------------------------------------------------#
#Content server - create a new folder
#'http://dennisdocs/otcsapp/llisapi.dll/api/v1/nodes/'
#-------------------------------------------------------------------------------------#
Funprog CSNEWFOLDER(YOCTSTICKET,YURL,YPARENTID,YNAME,YTYPE,YDESC,YFILE)

Value Char YOCTSTICKET
Value Char YURL
Value Char YPARENTID
Value Char YNAME
Value Integer YTYPE
Value Char YDESC
Value Char YFILE

Local Clbfile ARGUMENTS(0)
Local Clbfile RESHEAD(0)
Local Clbfile RESBODY(6)
Local Integer I:I=0
Local Integer RESULT
Local Integer YID

Raz ARGUMENTS
Append ARGUMENTS, '{'

Call APPEND_ARGS(ARGUMENTS, 'YOCTSTICKET', YOCTSTICKET)
Call APPEND_ARGS(ARGUMENTS, 'YURL', YURL)
Call APPEND_ARGS(ARGUMENTS, 'YPARENTID', YPARENTID)
Call APPEND_ARGS(ARGUMENTS, 'YNAME', YNAME)
Call APPEND_ARGS(ARGUMENTS, 'YTYPE', num$(YTYPE))


If YTYPE = 144
  Call APPEND_ARGS(ARGUMENTS, 'YFILE', YFILE)
Else
  Call APPEND_ARGS(ARGUMENTS, 'YDESC', YDESC)
Endif

I = len(ARGUMENTS)
If I>0 : ARGUMENTS= left$(ARGUMENTS,I-1) + "}" : Endif

#call the external API
If YTYPE <> 144
  #folder create
  STATUSCODE = func ASYRWEBSER.EXEC_JS("bundles/ycontent-server/lib/index","csnewfolder","wait",ARGUMENTS, "0", 0, "", "0", RESHEAD, RESBODY)
Else
  #file upload
  STATUSCODE = func ASYRWEBSER.EXEC_JS("bundles/ycontent-server/lib/index","csuploaddoc","wait",ARGUMENTS, "0", 0, "", "0", RESHEAD, RESBODY)
Endif

If STATUSCODE<>200 Then
#  Infbox num$(STATUSCODE),RESHEAD,RESBODY
 GMESSAGE = "Request could not be completed"
  GERR = 1
Else
Local Integer X
   RESBODY = unescJson(RESBODY)
   If  RESBODY = "Bad Request"
    GMESSAGE = "Request could not be completed"
    GERR = 1
   Else
    X = instr(1,RESBODY,':')
    YID = val(seg$(RESBODY,X+1,len(RESBODY)))
   Endif

Endif

End YID

#-------------------------------------------------------------------------------------#
#Content server authentication
#'http://dennisdocs/otcsapp/llisapi.dll/api/v1/auth'
#-------------------------------------------------------------------------------------#

Funprog CSAUTH(YUSR,YPWD,YURL)
Value Char YUSR
Value Char YPWD
Value Char YURL

Local Clbfile ARGUMENTS(0)
Local Clbfile RESHEAD(0)
Local Clbfile RESBODY(6)
Local Integer I:I=0
Local Integer RESULT,STATUSCODE
Local Char YOCTSTICKET(250)

#append argument to send to nodejs
Raz ARGUMENTS
Append ARGUMENTS, '{'

Call APPEND_ARGS(ARGUMENTS, 'YUSR', YUSR)
Call APPEND_ARGS(ARGUMENTS, 'YPWD', YPWD)
Call APPEND_ARGS(ARGUMENTS, 'YURL', YURL)

I = len(ARGUMENTS)
If I>0 : ARGUMENTS= left$(ARGUMENTS,I-1) + "}" : Endif


#call the external API
STATUSCODE = func ASYRWEBSER.EXEC_JS("bundles/ycontent-server/lib/index","authenticate","wait",ARGUMENTS, "0", 0, "", "0", RESHEAD, RESBODY)

If STATUSCODE<>200 Then
#  Infbox num$(STATUSCODE),RESHEAD,RESBODY
 GMESSAGE = "Request could not be completed"
  GERR = 1
Else
  RESBODY = unescJson(RESBODY)
  YOCTSTICKET =  num$(func FINDVAL(RESBODY,'ticket'))
Endif

End YOCTSTICKET

#-------------------------------------------------------------------------------------#
#Content server - get node information
#'http://dennisdocs/otcsapp/llisapi.dll/api/v1/nodes/2076615'
#-------------------------------------------------------------------------------------#
Funprog CSNODEINFO(YOCTSTICKET,YURL,YNODEID)
Value Char YOCTSTICKET
Value Char YURL
Value Integer YNODEID

Local Clbfile ARGUMENTS(0)
Local Clbfile RESHEAD(0)
Local Clbfile RESBODY(6)
Local Integer I:I=0
Local Integer RESULT
Local Char YRESULT(250)

Raz ARGUMENTS
Append ARGUMENTS, '{'

Call APPEND_ARGS(ARGUMENTS, 'YOCTSTICKET', YOCTSTICKET)
Call APPEND_ARGS(ARGUMENTS, 'YURL', YURL + num$(YNODEID)+"?fields=data")
Call APPEND_ARGS(ARGUMENTS, 'YNODEID', num$(YNODEID))

I = len(ARGUMENTS)
If I>0 : ARGUMENTS= left$(ARGUMENTS,I-1) + "}" : Endif

#Infbox ARGUMENTS

#call the external API
STATUSCODE = func ASYRWEBSER.EXEC_JS("bundles/ycontent-server/lib/index","getnodeinfo","wait",ARGUMENTS, "0", 0, "", "0", RESHEAD, RESBODY)

If STATUSCODE<>200 Then
#  Infbox num$(STATUSCODE),RESHEAD,RESBODY
  GMESSAGE = "Request could not be completed"
  GERR = 1
Else
#Infbox num$(STATUSCODE),RESHEAD,RESBODY
  RESBODY = unescJson(RESBODY)
  If  RESBODY = "Bad Request"
    GMESSAGE = "Request could not be completed"
    GERR = 1
   Else
    YRESULT = num$(func FINDVAL(RESBODY,'type_name'))
   Endif
  #Infbox num$(YID)
Endif


End YRESULT

#-------------------------------------------------------------------------------------#
#Content server find spesific json tag value
#-------------------------------------------------------------------------------------#
Funprog FINDVAL(RESP,K)
Value    Clbfile  RESP
Value    Char     K
Local Integer X
X = instr(1,RESP,K+'":"')

If !X : End "" : Endif
X += len(K)+3

#Infbox seg$(RESP,X,instr(X,RESP,'"')-1)

End seg$(RESP,X,instr(X,RESP,'"')-1)




#-------------------------------------------------------------------------------------#
#build string to send arguments to nodejs bundle
#-------------------------------------------------------------------------------------#
Subprog APPEND_ARGS(ARGUMENTS, ARGNAME, ARGVALUE)
  Variable  Clbfile ARGUMENTS
  Value     Char    ARGNAME, ARGVALUE

  Append ARGUMENTS, '"' + ARGNAME + '":"' + ARGVALUE + '",'

End

#-------------------------------------------------------------------------------------#
#Function to return the estate folder name for content server
#-------------------------------------------------------------------------------------#
Funprog YESTNAME(YESTID)
Value Integer YESTID




End

#-------------------------------------------------------------------------------------#
#Function to return the precinct folder name for content server
#-------------------------------------------------------------------------------------#
Funprog YPRENAME(YID)
Value Char YID
Local Char RTN(250)

If clalev([F:YPRE]) = 0 : Local File YPRECINT[YPRE] : Endif

Read[F:YPRE]YPRC0 = evalue([F:YCSFL]YOBJIDFLD)
If fstat = 0
  RTN = YID + " - " + [F:YPRE]YPREDES
Endif

End RTN

#-------------------------------------------------------------------------------------#
#Function to return the stage folder name for content server
#-------------------------------------------------------------------------------------#
Funprog YSTANAME(YID)
Value Char YID
Local Char RTN(250)

If clalev([F:YSTA]) = 0 : Local File YSTAGE[YSTA] : Endif

Read[F:YSTA]YSTG0 = evalue([F:YCSFL]YOBJIDFLD)
If fstat = 0
  RTN = YID + " - " + [F:YSTA]YSTADES
Endif

End RTN

#-------------------------------------------------------------------------------------#
#Function to return the planning application folder name for content server
#-------------------------------------------------------------------------------------#
Funprog YPLANAME(YID)
Value Char YID
Local Char RTN(250)

If clalev([F:YPLN]) = 0 : Local File YPLAGEN[YPLN] : Endif

Read[F:YPLN]YPLN0 = evalue([F:YCSFL]YOBJIDFLD)
If fstat = 0
  RTN = YID + " - " + num$([F:YPLN]YNUM)
Endif

End RTN

#-------------------------------------------------------------------------------------#
#Function to return the land development folder name for content server
#-------------------------------------------------------------------------------------#
Funprog YLDPNAME(YID)
Value Char YID
Local Char RTN(250)

If clalev([F:YLDP]) = 0 : Local File YLNDPUR[YLDP] : Endif

Read[F:YLDP]YLDP0 = evalue([F:YCSFL]YOBJIDFLD)
If fstat = 0
  RTN = YID + " - " + num$([F:YLDP]YDES)
Endif

End RTN

#-------------------------------------------------------------------------------------#
#Function to return the sales contract folder name for content server
#-------------------------------------------------------------------------------------#
Funprog YSLCNAME(YID)
Value Char YID
Local Char RTN(250)
Local Char YNAME(250)

If clalev([F:YSLC]) = 0 : Local File YSALCTR[YSLC] : Endif
If clalev([F:YSCU]) = 0 : Local File YSCCUST[YSCU] : Endif
If clalev([F:YBPR]) = 0 : Local File BPARTNER[YBPR] : Endif


Read[F:YSLC]YSLC0 = evalue([F:YCSFL]YOBJIDFLD)
If fstat = 0
  #find the main customer
  Filter [F:YSCU] Where YSLCID = evalue([F:YCSFL]YOBJIDFLD)
  For [F:YSCU]
    #main customer
    If [F:YSCU]YCUSTYP = 1

      #get the customer name
      Read[F:YBPR]BPR0 = [F:YSCU]YCUS
#      Infbox [F:YSCU]YCUS,num$(fstat),[F:YBPR]YLEGNAM
      If fstat = 0
        YNAME = [F:YBPR]YLEGNAM
#        Infbox [F:YBPR]YLEGNAM
        Break
      Endif
    Endif
  Next
 Filter [F:YSCU]

  If YNAME <> ""
    RTN = YID + " - " + YNAME
  Else
    Errbox "Customer legal name not defined. This is used to define the folder name: " + [F:YSCU]YCUS

  Endif
Endif

End RTN

#-------------------------------------------------------------------------------------#
#Function to return the lot folder name for content server
#-------------------------------------------------------------------------------------#
Funprog YLOTNAME(YID)
Value Char YID
Local Char RTN(250)

If clalev([F:YLOT]) = 0 : Local File YLOT[YLOT] : Endif

Read[F:YLOT]YLOT0 = evalue([F:YCSFL]YOBJIDFLD)
If fstat = 0
  RTN = YID + " - " + num$([F:YLOT]YLOTDES)
Endif

End RTN

#-------------------------------------------------------------------------------------#
#Function to return the general scheme folder name for content server
#-------------------------------------------------------------------------------------#
Funprog YGSCNAME(YID)
Value Char YID
Local Char RTN(250)

If clalev([F:YGGN]) = 0 : Local File YGSCGEN[YGGN] : Endif

Read[F:YGGN]YGGN0 = evalue([F:YCSFL]YOBJIDFLD)
If fstat = 0
  RTN = YID + " - " + num$([F:YGGN]YDES)
Endif

End RTN


#-------------------------------------------------------------------------------------#
#Function to log any errors
#-------------------------------------------------------------------------------------#
Subprog YCSLOG(YOBJTYP,YOBJIDENT,YCSNID,YMSG,YACTION)
Value Char YOBJTYP
Value Char YOBJIDENT
Value Integer YCSNID
Value Char YMSG
Value Char YACTION

If clalev([F:YCSLG]) = 0 : Local File YCSLOG[YCSLG] : Endif
[F:YCSLG]YGUID      = num$(getUuid())
[F:YCSLG]YOBJTYP    = [L]YOBJTYP
[F:YCSLG]YOBJIDENT  = [L]YOBJIDENT
[F:YCSLG]YCSNID     = [L]YCSNID
[F:YCSLG]YMSG       = [L]YMSG
[F:YCSLG]YACTION    = [L]YACTION

Write [F:YCSLG]

End




#-------------------------------------------------------------------------------------#
#Web service calls - create new record for processing
#-------------------------------------------------------------------------------------#
Subprog YCSUPLDOC(YGUID,YOBJTYP,YOBJIDENT,YNAME,YFILEPATH,YSTATUS,YMESSAGE)
Variable Char YGUID
Variable Char YOBJTYP
Variable Char YOBJIDENT
Variable Char YNAME
Variable Char YFILEPATH
Variable Integer YSTATUS
Variable Char YMESSAGE

If clalev([F:YFUPL]) = 0 : Local File YCSFUPL[YFUPL] : Endif

[L]YGUID = num$(getUuid())

[F:YFUPL]YGUID      = [L]YGUID
[F:YFUPL]YOBJTYP    = [L]YOBJTYP
[F:YFUPL]YOBJIDENT  = [L]YOBJIDENT
[F:YFUPL]YNAME      = [L]YNAME
[F:YFUPL]YFILPATH   = [L]YFILEPATH
[F:YFUPL]YSTA       = 2
[F:YFUPL]YPROCESSED = 0
Write [F:YFUPL]

If fstat = 0
  [L]YSTATUS = 2
  [L]YMESSAGE = "File upload record created."
Else
  [L]YSTATUS = 1
  [L]YMESSAGE = "File upload record creation failed."
Endif

End

#-------------------------------------------------------------------------------------#
#Web service calls - read processed records
#-------------------------------------------------------------------------------------#
Subprog YCSUPLRESULTS(YGUID,YOBJTYP,YOBJIDENT,YNAME,YFILEPATH,YPID,YCSNID,YOCTS,YSTATUS,YMESSAGE)
Variable Char YGUID()(1..1000)
Variable Char YOBJTYP()(1..1000)
Variable Char YOBJIDENT()(1..1000)
Variable Char YNAME()(1..1000)
Variable Char YFILEPATH()(1..1000)
Variable Integer YPID(1..1000)
Variable Integer YCSNID(1..1000)
Variable Char YOCTS()(1..1000)
Variable Integer YSTATUS(1..1000)
Variable Char YMESSAGE()(1..1000)

Local Integer YCOUNT : YCOUNT = 1

If clalev([F:YFUPL]) = 0 : Local File YCSFUPL[YFUPL] : Endif

Filter[F:YFUPL] Where YPROCESSED = 1
For [F:YFUPL]
  [L]YGUID(YCOUNT)      = num$([F:YFUPL]YGUID)
  [L]YOBJTYP(YCOUNT)    = [F:YFUPL]YOBJTYP
  [L]YOBJIDENT(YCOUNT)  = [F:YFUPL]YOBJIDENT
  [L]YNAME(YCOUNT)      = [F:YFUPL]YNAME
  [L]YFILEPATH(YCOUNT)  = [F:YFUPL]YFILPATH
  [L]YSTATUS(YCOUNT)    = [F:YFUPL]YSTA
  [L]YPID(YCOUNT)       = [F:YFUPL]YPID
  [L]YCSNID(YCOUNT)     = [F:YFUPL]YCSNID
  [L]YOCTS(YCOUNT)      = [F:YFUPL]YOCTS
  [L]YMESSAGE(YCOUNT)   = [F:YFUPL]YMSG

  [F:YFUPL]YPROCESSED = 2
  Rewrite [F:YFUPL]

YCOUNT += 1
Next
Filter[F:YFUPL]

End

