#<AdxTL>@(#)0.0.0.0 $Revision$
# Sage X3 supervisor
# Statistical Update GPA05 2018-04-18T12:57:56

#
# Miscellaneous subprograms
#

# Get translatable texts and transcode backshlashes and double quotes
# Code embedded in the program in order to gain in performance (maybe not useful)

# Gets the message from APLSTD
Funprog M(LANGUE,NUMCHAP,NUMES)
Value Char LANGUE()
Value Integer NUMCHAP,NUMES

  Local File APLSTD

  Read [AST]LAN=LANGUE;NUMCHAP;NUMES
  If fstat : End "" : Endif
  End escjson([AST]LANMES)

# Gets the message from ATEXTE
Funprog A(LANGUE,NUMERO)
Value Char LANGUE()
Value Integer NUMERO

  Local File ATEXTE

  Read [ATX]NUMERO=LANGUE;NUMERO
  If fstat : End "" : Endif
  End escjson([ATX]TEXTE)

# Gets the title of an entity in the dictionary
Funprog E(LANGUE,TABLE)
Value Char LANGUE(),TABLE()

  Local File ATABIND
  Local File ATABZON
  Local File ATABLE
  Read [ATB]CODFIC=TABLE
  If fstat : End '' : Endif
  Read [ATI]NUMLIG(2)=TABLE;1
  If fstat : End '' : Endif
  Read [ATZ]CODZONE=TABLE;vireblc(ctrans([ATI]DESCRIPT,'+-','  '),3)
  If fstat : End '' : Endif
  End func A(LANGUE,[ATZ]NOCOURT)

#
# Sends the JSON prototype
#
Subprog PROTO_JSON(ACTX,PSYR,WCLOB,TIME_UPD,LEVEL_NUM,TYPE_REPRES)
Variable INSTANCE  ACTX Using C_WMACONTEXT
Variable INSTANCE  PSYR     Using C_ASYR
Variable Clbfile   WCLOB
Variable Decimal   TIME_UPD
Value    Char      LEVEL_NUM()
Value    Char      TYPE_REPRES()

# Open ATEXTRA and APLSTD
  Local File ATEXTRA [ATX]
  Local File APLSTD [AST]

# The timestamp value corresponds to the generation time
  TIME_UPD=1524020276896

# Miscellaneous declarations
Local Char P(10) : P='PARSTA2'
Local Char F(10) : F='FLDINTIT'
Local Char L(10) : L=ACTX.LAN
Local Integer FIRST_E
Local Char DOL_KEY(10) : DOL_KEY="'{$key}'"
Local Char QUO_STA(20) : QUO_STA="'GPA05'"


 Append WCLOB,''
 Append WCLOB,'{"$baseUrl":"'+PSYR.PREFIX+'","$url":"'+"{$baseUrl}/STAT("+toupper(QUO_STA)+")?representation=STAT~GPA05.$cube&role={$role}"+'",'
 Append WCLOB,'"$title":"'+func ASYRREQ.T(L,"PARSTA2","GPA05","INTIT",0)+'",'
 Append WCLOB,'"$type":"'+"application/json; vnd.sage=syracuse.presentation=x3.erp.superv/STAT("+toupper(QUO_STA)+")"+'",'
 Append WCLOB,'"$methods":"GET","codeStat":"GPA05","$properties":{"datstart1":{"$type":"application/x-date","$title":"'+func M(L,126,277) + ' ' + "1"+'","$isAdvanced":true,"$links":{"$details":{'
 Append WCLOB,'"$url":"{$baseUrl}/STATS('+QUO_STA+')?representation=STATS~GPA05.$cube&{linkstartP}",'
 Append WCLOB,'"$type":"application/json;vnd.sage=syracuse"}}'
 Append WCLOB,'},'
 Append WCLOB,'"linkstartP":{"$type":"application/x-string","$isExcluded":true},'
 Append WCLOB,'"datend1":{"$type":"application/x-date","$title":"'+func M(L,126,278) + ' ' + "1"+'","$isAdvanced":true,"$links":{"$details":{'
 Append WCLOB,'"$url":"{$baseUrl}/STATS('+QUO_STA+')?representation=STATS~GPA05.$cube&{linkendP}",'
 Append WCLOB,'"$type":"application/json;vnd.sage=syracuse"}}'
 Append WCLOB,'},'
 Append WCLOB,'"linkendP":{"$type":"application/x-string","$isExcluded":true},'
 Append WCLOB,'"def_company":{"$type":"application/x-string","$title":"'+func M(L,45,2)+'","$isAdvanced":true,"$links":{"$details":{"$type":"application/json;vnd.sage=syracuse",'
 Append WCLOB,'"$url":"'+"{$baseUrl}/COMPANY('{def_company}')?representation=COMPANY.$details&role={$role}"+'"}}},'
 Append WCLOB,'"def_facility":{"$type":"application/x-string","$title":"'+func M(L,45,3)+'","$isAdvanced":true,"$maxlength":5,'
 Append WCLOB,'"$links":{"$details":{"$type":"application/json;vnd.sage=syracuse",'
 Append WCLOB,'"$url":"'+"{$baseUrl}/FACILITY('{def_facility}')?representation=FACILITY.$details&role={$role}"+'","$target":"'+"main"+'"}}},'
 Append WCLOB,'"$resources":{'
 Append WCLOB,'"$type":"application/x-array","$provType":"PORTALSTA","$criteria":{'
 Append WCLOB,'"FACILITY":{"$type":"application/x-string","$maxlength":5,'
 Append WCLOB,'"$title":"'+func E(L,'FACILITY')+'",'
 Append WCLOB,'"$links":{"$details":{"$type":"application/json;vnd.sage=syracuse",'
 Append WCLOB,'"$url":"'+"{$baseUrl}/FACILITY('{FACILITY}')?representation=FACILITY.$details&role={$role}"+'","$target":"'+"main"+'"}}}'
 Append WCLOB,',"COMPANY":{"$type":"application/x-string","$maxlength":5,'
 Append WCLOB,'"$title":"'+func E(L,'COMPANY')+'",'
 Append WCLOB,'"$links":{"$details":{"$type":"application/json;vnd.sage=syracuse",'
 Append WCLOB,'"$url":"'+"{$baseUrl}/COMPANY('{COMPANY}')?representation=COMPANY.$details&role={$role}"+'","$target":"'+"main"+'"}}}'
 Append WCLOB,',"DATBEG1":{"$type":"application/x-date","$title":""},'
 Append WCLOB,'"DATEND1":{"$type":"application/x-date","$title":""}'
 Append WCLOB,'},"$item":{"$type":"application/json",'
 Append WCLOB,'"$url":"'+"{$baseUrl}/stats("+QUO_STA+")?representation=$cube("+QUO_STA+")&role={$role}"+'",'
 Append WCLOB,'"$title":"'+func ASYRREQ.T(L,"PARSTA2","GPA05","INTIT",0)+'","$properties":{'
 Append WCLOB,'"linkDown":{"$type":"application/x-string","$isExcluded":true},'
 Append WCLOB,'"dateStat":{"$type":"application/x-date","$capabilities":"sort,filter","$isExcluded":true},'
 Append WCLOB,'"FCY":{"$title":"'+func ASYRREQ.T(L,"PARSTA2","GPA05","FLDINTIT",1)+'","$capabilities":"sort,filter","$type":"application/x-string",'
 Append WCLOB,'"$links":{"$details":{"$type":"application/json;vnd.sage=syracuse",'
 Append WCLOB,'"$url":"'+"{$baseUrl}/FACILITY('{FCY}')?representation=FACILITY.$details&role={$role}"+'","$target":"'+"main"+'"}}},'
 Append WCLOB,'"C_FCY":{"$capabilities":"sort,filter","$type":"application/x-string"},'
 Append WCLOB,'"ITMREF":{"$title":"'+func ASYRREQ.T(L,"PARSTA2","GPA05","FLDINTIT",2)+'","$capabilities":"sort,filter","$type":"application/x-string",'
 Append WCLOB,'"$links":{"$details":{"$type":"application/json;vnd.sage=syracuse",'
 Append WCLOB,'"$url":"'+"{$baseUrl}/ITMMASTER('{ITMREF}')?representation=ITMMASTER.$details&role={$role}"+'","$target":"'+"main"+'"}}},'
 Append WCLOB,'"C_ITMREF":{"$capabilities":"sort,filter","$type":"application/x-string"},'
 Append WCLOB,'"VCRNUM":{"$title":"'+func ASYRREQ.T(L,"PARSTA2","GPA05","FLDINTIT",3)+'","$capabilities":"sort,filter","$type":"application/x-string","$constraints":{"$maxLength":5},'
 Append WCLOB,'"$capabilities":"sort,filter","$isHidden":false,"$isParameter":true},'
 Append WCLOB,'"C_VCRNUM":{"$capabilities":"sort,filter","$type":"application/x-string"},'
 Append WCLOB,'"amount1":{"$type":"application/x-decimal","$precision":15,"$scale":2,"$format":"#,###.00","$title":"'+func ASYRREQ.T(L,"PARSTA2","GPA05","INTITFRM",1)+'"},'
 Append WCLOB,'"amount2":{"$type":"application/x-decimal","$precision":15,"$scale":2,"$format":"#,###.00","$title":"'+func ASYRREQ.T(L,"PARSTA2","GPA05","INTITFRM",2)+'"},'
 Append WCLOB,'"linkUp":{"$type":"application/x-string","$isExcluded":true}'
 Append WCLOB,',"linkDown":{"$type":"application/x-string","$isExcluded":true}'
 Append WCLOB,'}'
 Append WCLOB,',"$links":{'
 Append WCLOB,'"levelDown":{'
 Append WCLOB,'"$url":"{$baseUrl}/STATS('+QUO_STA+')?representation=STATS~GPA05.$cube&{linkDown}",'
 Append WCLOB,'"$title":"'+func M(L,101,47)+'"},'
 Append WCLOB,'"levelUp":{'
 Append WCLOB,'"$url":"{$baseUrl}/STATS('+QUO_STA+')?representation=STATS~GPA05.$cube&{linkUp}",'
 Append WCLOB,'"$title":"'+func M(L,101,46)+'"}}},'
 Append WCLOB,'"$cube":{"$mode":"table","$title":"'+func ASYRREQ.T(L,"PARSTA2","GPA05","INTSHO",0)+'","$displaysOneMeasure":true,"$hierarchies":{'
 Append WCLOB,'"FCY":{"$title":"'+func ASYRREQ.T(L,P,'GPA05',F,1)+'","$properties":['
 Append WCLOB,'"FCY"'
 Append WCLOB,']},'
 Append WCLOB,'"ITMREF":{"$title":"'+func ASYRREQ.T(L,P,'GPA05',F,2)+'","$properties":['
 Append WCLOB,'"ITMREF"'
 Append WCLOB,']},'
 Append WCLOB,'"VCRNUM":{"$title":"'+func ASYRREQ.T(L,P,'GPA05',F,3)+'","$properties":['
 Append WCLOB,'"VCRNUM"'
 Append WCLOB,']},'
 Append WCLOB,'"date":{"properties":["dateStat"],"periods":"YSQMD"}},"$measures":{'
 Append WCLOB,'"amount1":{"$isDefault":true},"amount2":{}'
 Append WCLOB,'}},"$axes":[{"$title":"'+func ASYRREQ.T(L,P,'GPA05',F,1)+'","$hierarchies":['
 Append WCLOB,'["FCY",1,0],'
 Append WCLOB,'["ITMREF",0,0],'
 Append WCLOB,'["VCRNUM",0,0]'
 Append WCLOB,']},'
 Append WCLOB,'{"$title":"Measures","$hierarchies":[["$measures"]]}],"$slicer":{"$title":"FCY","$hierarchies":[["FCY",1,0]]}}}}'
End


#
# Get the data for a statistical code
#
$GET
Local Integer IF_AXES,IF_SLICER,I,J,K,L,M,P
Local Char CPY_FCY_FILTER(250)
Local Integer IF_COMPANY
Local Char DEF_COMPANY(5)
Local Integer IF_FACILITY
Local Char DEF_FACILITY(5)
Local Char ERRCODE(250)
Local Integer NBFLD(1..3)
Local Char KEY_VALUES(40)(1..16)
Local Clbfile AXES(2),SLICER(2)
Local Clbfile FIRST_MEMBERS(3), UP_FILTERS(3), DOWN_FILTERS(3)
Local Char DEF_FCY(250)
Local Integer IF_FCY
Local Char DEF_ITMREF(250)
Local Integer IF_ITMREF
Local Char DEF_VCRNUM(250)
Local Integer IF_VCRNUM
Local Decimal C1, C2
Local Integer DEBUT
Local Date DATBEG1,DATEND1
Local Integer IF_DATBEG1,IF_DATEND1
Local Integer IF_PORTVIEW
Local Char DEF_PORTVIEW(30)

# SET THE DEFAULT COMPANY AND THE DEFAULT SITE
Local Char FCYDEF_PRF(10),CPYDEF_PRF(10)

# Open the profile, site, company and user related tables
  If clalev([F:APF]) : LogicClose File [APF] : Endif : Local File APROFIL [APF]
  If clalev([F:AUS]) : LogicClose File [AUS] : Endif : Local File AUTILIS [AUS]
  If clalev([F:AME]) : LogicClose File [AME] : Endif : Local File AMETUTI [AME]
  If clalev([F:FCY]) : LogicClose File [FCY] : Endif : Local File FACILITY [FCY]
  If clalev([F:AFT]) : LogicClose File [AFT] : Endif : Local File AFCTFCT [AFT]

# Get the right menu profile and read the menu profile record
  Read [AUS]CODUSR = GACTX.USER
  If [F:AUS]PRFMEN=''
    Read [AME]AME0 = [F:AUS]CODMET
    Read [APF]CODPRF = 0;[F:AME]PRFMEN
  Else
    Read [APF]CODPRF = 0;[F:AUS]PRFMEN
  Endif
  If [F:AUS]PRFFCT=''
    Read [AME]AME0 = [F:AUS]CODMET
    Read [AFT]AFT0=[F:AME]PRFFCT
  Else
    Read [AFT]AFT0=[F:AUS]PRFFCT
  Endif

# Assign the default company and file values
  FCYDEF_PRF=[F:AFT]FCYDEF(7)
  If FCYDEF_PRF<>''
    Read [FCY]FCY0=FCYDEF_PRF
    CPYDEF_PRF=[FCY]LEGCPY
  Endif

  NBFLD(1)=1
  NBFLD(2)=1
  NBFLD(3)=1
  ASND.DATA='{'

# Analyze axes and slicers
  For I=1 To MAXTAB(ARCV.PARAMCOD)
      Case toupper(ARCV.PARAMCOD(I))
        When '$AXES'
          Call URLJS(ARCV.PARAMVAL(I),AXES,ERRCODE) From ASYRFNC
          IF_AXES=1
        When '$SLICER'
          Call URLJS(ARCV.PARAMVAL(I),SLICER,ERRCODE) From ASYRFNC
          IF_SLICER=1
        When 'FACILITY'
          DEF_FACILITY=ARCV.PARAMVAL(I)
          IF_FACILITY=1
      When 'COMPANY'
          DEF_COMPANY=ARCV.PARAMVAL(I)
          IF_COMPANY=1
      When 'FCY'
          DEF_FCY=ARCV.PARAMVAL(I)
          IF_FCY=1
      When 'ITMREF'
          DEF_ITMREF=ARCV.PARAMVAL(I)
          IF_ITMREF=1
      When 'VCRNUM'
          DEF_VCRNUM=ARCV.PARAMVAL(I)
          IF_VCRNUM=1
      When 'DATBEG1'
          DATBEG1=func DATVAL(ARCV.PARAMVAL(I))
          IF_DATBEG1=1
      When 'DATEND1'
          DATEND1=func DATVAL(ARCV.PARAMVAL(I))
          IF_DATEND1=1
      When 'PORTVIEW'
          DEF_PORTVIEW=ARCV.PARAMVAL(I)
          IF_PORTVIEW=(DEF_PORTVIEW<>'')
      Endcase
  Next I

# If a portal view code is given, compute the missing parameters
  If IF_PORTVIEW
    Gosub PORTVIEW_STD
  Endif

# Default values for dates if not given, with consistency control
  If IF_DATBEG1=0
    DATBEG1=fmet GACTX.APARAM.AGETUSERVALDATE('DATSTADEB')
  Endif
  If IF_DATEND1=0
    DATEND1=fmet GACTX.APARAM.AGETUSERVALDATE('DATSTAFIN')
  Endif
  If DATBEG1=[0/0/0]
    If DATEND1=[0/0/0]
      DATBEG1=gdat$(1,1,year(date$))
      DATEND1=gdat$(31,12,year(date$))
    Else
      DATEND1=Func DATEN(DATEND1,3)
      DATBEG1=Func DATBG(DATEND1,3)
    Endif
  Else
    DATBEG1=Func DATBG(DATBEG1,3)
    If DATEND1=[0/0/0]
      DATEND1=Func DATEN(DATBEG1,3)
    Else
      DATEND1=Func DATEN(DATEND1,3)
    Endif
  Endif

# Company and site default value got from profile if not already specified
  If IF_FACILITY=0 and FCYDEF_PRF<>''
    DEF_FACILITY=FCYDEF_PRF
    IF_FACILITY=1
  Endif
  If IF_COMPANY=0 and IF_FACILITY=0 and CPYDEF_PRF<>''
    DEF_COMPANY=CPYDEF_PRF
    IF_COMPANY=1
  Endif

# JSON analysis to find out the level (variable L)
# If no AXES parameters, the level is given by the first nul value in other criteria
 If IF_AXES=0
    L=1
    Gosub PORTVIEW_OTH
 Else
    K=0
    L=0
    M=1
    P0=0 : P1=0
    I=instr(1,AXES,'"$hierarchies"')
    If I=0 : Return : Endif : # Error found
    J=instr(I,AXES,'[')
    If J=0 : Return : Endif : # Error found
    While P0=0 and I<>0
        I=instr(J+1,AXES,'[')
        Break (I=0)
        I=instr(I+1,AXES,'"')
        Break (I=0)
        I=instr(I+1,AXES,'"')
        While I>1 and mid$(AXES,I-1,1)="\"
            I=instr(I+1,AXES,'"')
        Wend
        Break (I=0)
        I=instr(I+1,AXES,',')
        Break (I=0)
        J=instr(I+1,AXES,',') : K=instr(I+1,AXES,']')
        If J=0
            J=K : P1=0
        Elsif J<K
            P1=val(mid$(AXES,J+1,K-J-1))
        Else
            J=min(J,K)
            P1=0
        Endif
        P0=val(mid$(AXES,I+1,J-I-1))
        Break (J=0)
        If P0=0
            I=instr(J,AXES,'[')
            L+=NBFLD(M)
            M+=1
        Else
            L+=P0+P1
        Endif
    Wend

    I=instr(1,AXES,'"$members"')
    If I
        K=0
        I+=len('"$members"')
        While K<L-1
            J=instr(I+1,AXES,'"')+1
            I=instr(J,AXES,'"')
            Break (I=0) or (J=1)
            KEY_VALUES(K+1)=mid$(AXES,J,I-J)
            K+=1
        Wend
    Endif
  Endif

# Prepare the header in order to define the criteria hidden and visible
  APPEND ASND.DATA,'"$properties":{"$resources":{"$item":{"$properties":{'
  APPEND ASND.DATA,'"FCY":{"$isHidden":'+string$(L=1,"false")+string$(L<>1,"true")+"}"
  APPEND ASND.DATA,',"C_FCY":{"$isHidden":'+string$(L=1,"false")+string$(L<>1,"true")+"}"
  APPEND ASND.DATA,',"ITMREF":{"$isHidden":'+string$(L=2,"false")+string$(L<>2,"true")+"}"
  APPEND ASND.DATA,',"C_ITMREF":{"$isHidden":'+string$(L=2,"false")+string$(L<>2,"true")+"}"
  APPEND ASND.DATA,',"VCRNUM":{"$isHidden":'+string$(L=3,"false")+string$(L<>3,"true")+"}"
  APPEND ASND.DATA,',"C_VCRNUM":{"$isHidden":'+string$(L=3,"false")+string$(L<>3,"true")+"}"

# Set the first members values
Local Date DD1,DD2
Local Char PREV_FILTERS(250),NEXT_FILTERS(250),KEY_BUFFER(250)

  FIRST_MEMBERS="" : UP_FILTERS="" : I=0
  DD1=DATBEG1 : DD2=DATEND1
  FIRST_MEMBERS="" : UP_FILTERS="" : I=0
  NEXT_FILTERS=""  : PREV_FILTERS=""
  If func SUBPS6.DELTA_MINUS(DD1,DD2,3)
    Append PREV_FILTERS,"DATBEG1="+format$("D:4Y[-]MM[-]DD",DD1)
    Append PREV_FILTERS,"&DATEND1="+format$("D:4Y[-]MM[-]DD",DD2)
  Endif
  DD1=DATBEG1 : DD2=DATEND1
  If func SUBPS6.DELTA_PLUS(DD1,DD2,3)
    Append NEXT_FILTERS,"DATBEG1="+format$("D:4Y[-]MM[-]DD",DD1)
    Append NEXT_FILTERS,"&DATEND1="+format$("D:4Y[-]MM[-]DD",DD2)
  Endif
  If IF_DATBEG1
    APPEND UP_FILTERS,"DATBEG1="+format$("D:4Y[-]MM[-]DD",DATBEG1)
    I=1
  Endif
  If IF_DATEND1
    APPEND UP_FILTERS,string$(I,"&")+"DATEND1="+format$("D:4Y[-]MM[-]DD",DATEND1)
    I=1
  Endif
  If IF_COMPANY
    APPEND UP_FILTERS,string$(I,"&")+"COMPANY="+DEF_COMPANY
    APPEND PREV_FILTERS,string$(PREV_FILTERS<>"","&COMPANY="+DEF_COMPANY)
    APPEND NEXT_FILTERS,string$(NEXT_FILTERS<>"","&COMPANY="+DEF_COMPANY)
    I=1
  Endif
  If IF_FACILITY
    APPEND UP_FILTERS,string$(I,"&")+"FACILITY="+DEF_FACILITY
    APPEND PREV_FILTERS,string$(PREV_FILTERS<>"","&FACILITY="+DEF_FACILITY)
    APPEND NEXT_FILTERS,string$(NEXT_FILTERS<>"","&FACILITY="+DEF_FACILITY)
    I=1
  Endif
  DOWN_FILTERS=UP_FILTERS
  While 1=1
    Break L=1
    KEY_BUFFER=func STRG(KEY_VALUES(1))
    Append FIRST_MEMBERS,'"FCY":"'+KEY_BUFFER+'",'
    Append UP_FILTERS,string$(I,'&')+'FCY='+KEY_BUFFER
    Append PREV_FILTERS,string$(PREV_FILTERS<>'','&FCY='+KEY_BUFFER)
    Append NEXT_FILTERS,string$(NEXT_FILTERS<>'','&FCY='+KEY_BUFFER)
    Break L=2
    DOWN_FILTERS=UP_FILTERS
    KEY_BUFFER=func STRG(KEY_VALUES(2))
    Append FIRST_MEMBERS,'"ITMREF":"'+KEY_BUFFER+'",'
    Append UP_FILTERS,'&ITMREF='+KEY_BUFFER
    Append PREV_FILTERS,string$(PREV_FILTERS<>'','&ITMREF='+KEY_BUFFER)
    Append NEXT_FILTERS,string$(NEXT_FILTERS<>'','&ITMREF='+KEY_BUFFER)
    Break
  Wend

  L=max(min(L,3),1)

# Company and facility filter
  If IF_COMPANY & DEF_COMPANY<>''
    CPY_FCY_FILTER='CPY="'+DEF_COMPANY+'"'
  Endif
  If IF_FACILITY & DEF_FACILITY<>''
    CPY_FCY_FILTER+=string$(CPY_FCY_FILTER<>'','&')+'FCY="'+DEF_FACILITY+'"'
  Endif
  CPY_FCY_FILTER+=string$(CPY_FCY_FILTER='','1=1')

  APPEND ASND.DATA,'}'


# Add the zooming links
  Append ASND.DATA,chr$(10)+',"$links":{'
  If L<3
    Append ASND.DATA,chr$(10)+'"levelUp":{"$isHidden":false},'
  Else
    Append ASND.DATA,chr$(10)+'"levelUp":{"$isHidden":true},'
  Endif
  If L=1
    Append ASND.DATA,chr$(10)+'"levelDown":{"$isHidden":true}'
  Else
    Append ASND.DATA,chr$(10)+'"levelDown":{"$isHidden":false}'
  Endif
  Append ASND.DATA,'}}'
  If IF_AXES
    APPEND ASND.DATA,',"$axes":'
    APPEND ASND.DATA,AXES
  Endif
  If IF_SLICER
    APPEND ASND.DATA,',"$slicer":'
    APPEND ASND.DATA,SLICER
  Endif
  APPEND ASND.DATA,'}}'
# Database access

  If clalev([SAPT]) : LogicClose File [SAPT] : Endif
  Local File STAT [SAPT] Where evalue(CPY_FCY_FILTER)


# Compute the detail calculation
  Case L
    When 1
      Filter [SAPT] Where COD='GPA05' & CRI1<>'$$$' & CRI2='$$$'
&                  Order By Key CLE=CRI1
    When 2
      Filter [SAPT] Where COD='GPA05' & CRI2<>'$$$' & CRI3='$$$' & CRI1=KEY_VALUES(1)
&                  Order By Key CLE=CRI2
    When 3
      Filter [SAPT] Where COD='GPA05' & CRI3<>'$$$' & CRI1=KEY_VALUES(1) & CRI2=KEY_VALUES(2)
&                  Order By Key CLE=CRI3
  Endcase

  Raz DEBUT

# Links to previous or next period
  Append ASND.DATA,',"linkstartP":"'+PREV_FILTERS+'"'
  Append ASND.DATA,',"linkendP":"'+NEXT_FILTERS+'"'
  Append ASND.DATA,',"datstart1":"'+format$("D:YYYY[-]MM[-]DD",DATBEG1)+'"'
  Append ASND.DATA,',"datend1":"'+format$("D:YYYY[-]MM[-]DD",DATEND1)+'"'
  Append ASND.DATA,',"def_company":"'+DEF_COMPANY+'"'
  Append ASND.DATA,',"def_facility":"'+DEF_FACILITY+'"'

# Main loop
  For [SAPT]CLE(1)  Where DAT>=DATBEG1 and DAT<=DATEND1
#
    Raz C1, C2
    For [SAPT]CLE
      #
      C1+=[SAPT]AMT(0)
      C2+=[SAPT]AMT(1)
    Next

    If DEBUT
        APPEND ASND.DATA,",{"
    Else
        APPEND ASND.DATA,',"$resources":[{'
        DEBUT=1
    Endif
    APPEND ASND.DATA,'"level":'+num$(L)+','
    APPEND ASND.DATA, FIRST_MEMBERS

    Case L
      When 1
         APPEND ASND.DATA,'"'+func STRG('FCY')+'":"'
         APPEND ASND.DATA,func STRG([SAPT]CRI1)+'",'
         APPEND ASND.DATA,'"$uuid":"'+num$([SAPT]AUUID)+'",'
         APPEND ASND.DATA,'"C_FCY":"'
         APPEND ASND.DATA,func STRG([SAPT]DES1)+'",'
         APPEND ASND.DATA,'"linkUp":"'+UP_FILTERS+'&FCY='+func STRG([SAPT]CRI1)+'",'
      When 2
         APPEND ASND.DATA,'"'+func STRG('ITMREF')+'":"'
         APPEND ASND.DATA,func STRG([SAPT]CRI2)+'",'
         APPEND ASND.DATA,'"$uuid":"'+num$([SAPT]AUUID)+'",'
         APPEND ASND.DATA,'"C_ITMREF":"'
         APPEND ASND.DATA,func STRG([SAPT]DES2)+'",'
         APPEND ASND.DATA,'"linkUp":"'+UP_FILTERS+'&ITMREF='+func STRG([SAPT]CRI2)+'",'
      When 3
         APPEND ASND.DATA,'"'+func STRG('VCRNUM')+'":"'
         APPEND ASND.DATA,func STRG([SAPT]CRI3)+'",'
         APPEND ASND.DATA,'"$uuid":"'+num$([SAPT]AUUID)+'",'
         APPEND ASND.DATA,'"C_VCRNUM":"'
         APPEND ASND.DATA,func STRG([SAPT]DES3)+'",'
         APPEND ASND.DATA,'"linkUp":"'+UP_FILTERS+'&VCRNUM='+func STRG([SAPT]CRI3)+'",'
    Endcase

# Add the linkdown value
  APPEND ASND.DATA,'"linkDown":"'+DOWN_FILTERS+'",'

    APPEND ASND.DATA,'"amount1":'+num$(C1)+","
    APPEND ASND.DATA,'"amount2":'+num$(C2)
    APPEND ASND.DATA,"}"+chr$(13)+chr$(10)
  Next
  If DEBUT
    APPEND ASND.DATA,"]"
  Endif

  APPEND ASND.DATA,"}"
  Return

# Some libraries that have been including in order to have an autonomous program

# Add the backshlash escaping character on string constants
Funprog STRG(CHAINE)
Value Char CHAINE
Local Char RESULT(250)
Local Integer POS1,POS2
POS2=1
POS1=instr(POS2,CHAINE,'"')
While POS1<>0
    RESULT+=mid$(CHAINE,POS2,POS1-POS2)+'\"'
    POS2=POS1+1
    POS1=instr(POS2,CHAINE,'"')
Wend
End RESULT+right$(CHAINE,POS2)

# Divide A per B but return A if B is null
Funprog D(A,B)
Value Decimal A,B
  If B=0
    End A
  Endif
End A/B

# Returns the date value from a chain normalized date (null date sent if any format mismatch)
Funprog DATVAL(C)
Value Char C
Local Integer IDT
  IDT=instr(1,C,"T")
  If IDT
    C=vireblc(left$(C,IDT-1),4)
  Else
    C=vireblc(C,2)
  Endif
  If pat(C,"####-##-##")
    End gdat$(val(right$(C,9)),val(mid$(C,6,2)),val(left$(C,4)))
  Endif
 End [0/0/0]

# Compute the begin of the period
Funprog DATBG(D,P)
Value Date D
Value Integer P
Case P
  When 1 : End D
  When 2 : End D-dayn(D)+1
  When 3 : End gdat$(1+15*(day(D)>=16),month(D),year(D))
  When 4 : End gdat$(1,month(D),year(D))
  When 5 : End gdat$(1,1+int((month(D)-1)/3),year(D))
  When 6 : End gdat$(1,1,year(D))
  When 7 : End gdat$(1+10*(day(D)>=11)+10*(day(D)>=21),month(D),year(D))
Endcase
End [0/0/0]

# Compute the end of the period
Funprog DATEN(D,P)
Value Date D
Value Integer P
  Case P
    When 1 : End D
    When 2 : End D-dayn(D)+7
    When 3 : If day(D)>=16
             End eomonth(D)
           Else End gdat$(15,month(D),year(D))
           Endif
    When 4 : End eomonth(D)
    When 5 : End eomonth(gdat$(1,3+int((month(D)-1)/3),year(D)))
    When 6 : End gdat$(31,12,year(D))
    When 7 : If day(D)>=21
               End eomonth(D)
             Elsif day(D)>=11
               End gdat$(20,month(D),year(D))
             Else End gdat$(10,month(D),year(D))
             Endif
  Endcase
End [0/0/0]

# Compute the number of periods between 2 dates
Funprog DCL(DAT1,DAT2,PERTYP)
Value    Date    DAT1
Value    Date    DAT2
Value    Integer PERTYP
  Case PERTYP
    When 1 : End DAT1-DAT2
    When 2 : End (DAT1-DAT2)/7
    When 3 : End 24*(year(DAT1)-year(DAT2))+2*(month(DAT1)-month(DAT2))+(day(DAT2)<day(DAT1))-(day(DAT2)>day(DAT1))
    When 4 : End 12*(year(DAT1)-year(DAT2))+(month(DAT1)-month(DAT2))
    When 5 : End 4*(year(DAT1)-year(DAT2))+(month(DAT1)-month(DAT2))/3
    When 6 : End year(DAT1)-year(DAT2)
    When 7 : End 36*(year(DAT1)-year(DAT2))+3*(month(DAT1)-month(DAT2))
&              + min(2,int((day(DAT1)-1)/10))-min(2,int((day(DAT2)-1)/10))
  Endcase
End 0

# Shift a date by a given number of periods (positive or negative)
Subprog ADC(PERTYP,DAT1,DAT2,DECAL)
Value    Integer PERTYP
Value    Date    DAT1
Variable Date    DAT2
Value    Integer DECAL
  Case PERTYP
    When 1 : DAT2 = DAT1+DECAL
    When 2 : DAT2 = DAT1+7*DECAL
    When 3 : DAT2 = addmonth(DAT1,fix(DECAL/2))
             If day(DAT2)>15
               DAT2 = eomonth(DAT2)
             Endif
             Case mod(DECAL,2)
               When 1
                 If day(DAT2)<16
                   DAT2 = eomonth(DAT2)
                 Else
                   DAT2 = eomonth(DAT2)+15
                 Endif
               When -1
                 If DAT2=eomonth(DAT2)
                    DAT2 = gdat$(15,month(DAT2),year(DAT2))
                 Else
                    DAT2 = eomonth(addmonth(DAT2,-1))
                 Endif
             Endcase
    When 4 : DAT2 = addmonth(DAT1,DECAL)
    When 5 : DAT2 = addmonth(DAT1,3*DECAL)
    When 6 : DAT2 = addmonth(DAT1,12*DECAL)
    When 7 : DAT2 = addmonth(DAT1,fix(DECAL/3))
             Case mod(DECAL,3)
               When 0
               When 1
                 Case day(DAT2)
                   When 10      : DAT2 = gdat$(20,month(DAT2)+1,year(DAT2))
                   When 20      : DAT2 = eomonth(DAT2)
                   When Default : DAT2 = gdat$(10,month(DAT2)+1,year(DAT2))
                 Endcase
               When -1
                 Case day(DAT2)
                   When 10      : DAT2 = eomonth(addmonth(DAT2,-1))
                   When 20      : DAT2 = gdat$(10,month(DAT2),year(DAT2))
                   When Default : DAT2 = gdat$(20,month(DAT2),year(DAT2))
                 Endcase
               When 2
                 Case day(DAT2)
                   When 10      : DAT2 = eomonth(DAT2)
                   When 20      : DAT2 = gdat$(10,month(DAT2)+1,year(DAT2))
                   When Default : DAT2 = gdat$(20,month(DAT2)+1,year(DAT2))
                 Endcase
               When -2
                 Case day(DAT2)
                   When 10      : DAT2 = gdat$(20,month(DAT2)-1,year(DAT2))
                   When 20      : DAT2 = eomonth(addmonth(DAT2,-1))
                   When Default : DAT2 = gdat$(10,month(DAT2),year(DAT2))
                 Endcase
             Endcase
  Endcase
End

$PORTVIEW_STD
Local Char PAR_VAL(20)

  If clalev([APV]) : LogicClose File [APV] : Endif : Local File APTLVW [APV]

  Read [APV]APV0=DEF_PORTVIEW
  If fstat=0
    For PAR_VAL='DATDEB1', 'DATFIN1', 'DATDEB2', 'DATFIN2', 'CPY', 'FCY'
      J=find(PAR_VAL,[APV]SRCPARCOD(0..dim([APV]SRCPARCOD)-1))
      If J
        Case PAR_VAL
          When 'DATDEB1'
            If IF_DATBEG1=0
              DATBEG1=Func EVALDATE([APV]SRCPARFOR(J-1))
              IF_DATBEG1=1
            Endif
          When 'DATFIN1'
            If IF_DATEND1=0
              DATEND1=Func EVALDATE([APV]SRCPARFOR(J-1))
              IF_DATEND1=1
            Endif
          When 'CPY'
            If IF_COMPANY=0
              DEF_COMPANY=Func EVALCHAR([APV]SRCPARFOR(J-1))
              IF_COMPANY=([APV]SRCPARFOR(J-1)<>'')
            Endif
          When 'FCY'
            If IF_FACILITY=0
              DEF_FACILITY=Func EVALCHAR([APV]SRCPARFOR(J-1))
              IF_FACILITY=([APV]SRCPARFOR(J-1)<>'')
            Endif
        Endcase
      Endif
    Next
  Endif

Return

$PORTVIEW_OTH
Local Char PAR_VAL(20)

  If clalev([APV]) : LogicClose File [APV] : Endif : Local File APTLVW [APV]

  Read [APV]APV0=DEF_PORTVIEW
  If fstat=0
    For PAR_VAL='CRIT1','CRIT2'
      J=find(PAR_VAL,[APV]SRCPARCOD(0..dim([APV]SRCPARCOD)-1))
      If J
        Case PAR_VAL
          When 'CRIT1'
            If IF_FCY=0
              DEF_FCY=Func EVALCHAR([APV]SRCPARFOR(J-1))
              If DEF_FCY<>'' : IF_FCY=1 : Endif
            Endif
          When 'CRIT2'
            If IF_ITMREF=0
              DEF_ITMREF=Func EVALCHAR([APV]SRCPARFOR(J-1))
              If DEF_ITMREF<>'' : IF_ITMREF=1 : Endif
            Endif
        Endcase
      Endif
    Next
  Endif
  If IF_FCY=1
    L+=(L=1)
    KEY_VALUES(1)=string$(L=2,DEF_FCY)
  Endif
  If IF_ITMREF=1
    L+=(L=2)
    KEY_VALUES(2)=string$(L=3,DEF_ITMREF)
  Endif
Return

Funprog EVALDATE(EVALCHAINE)
Value Char EVALCHAINE()

Onerrgo RIEN_DAT
Local Date RESULTAT

  RESUL_TAT=evalue(EVALCHAINE)
  If type(RESUL_TAT)<>3
    RESULTAT=gdat$(num$(RESUL_TAT))
  Else 
    RESULTAT=RESUL_TAT
  Endif
End RESULTAT
$RIEN_DAT
End [0/0/0]

Funprog EVALCHAR(EVALCHAINE)
Value Char EVALCHAINE()

Onerrgo RIEN_CH

Local Char RESULTAT(250)
  RESULTAT=num$(evalue(EVALCHAINE))
  End RESULTAT
$RIEN_CH
End ''
