#<AdxTL>@(#)0.0.0.0 $Revision$Class Expense
# Supervisor
## CRUD-CLASSE ## EXPENSES
# 2018-08-27 13:14:37 254


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(EXPENSES,ASTATUS)
Variable Instance EXPENSES Using R_EXPENSES
Variable Integer ASTATUS

If EXPENSES = null : End : Endif

Gosub AVARIABLES From WMR00EXPENSES
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If fmet EXPENSES.ACTX.AGETAFCRIGHT(EXPENSES,"GESEXS",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END : Endif
If fmet EXPENSES.ACTX.AGETAFCRIGHTC(EXPENSES,"GESEXS",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END
Endif

Gosub AREPCONTROL_AINSERT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_EXPENSES
Else
 Gosub AINSERT_EXPENSES
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = EXPENSES.freeSnapshot
EXPENSES.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
EXPENSES.ASTALIN = [V]CST_ANEW
EXPENSES.EXS.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet EXPENSES._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet EXPENSES._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet EXPENSES._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If EXPENSES.EXS.ASTALIN = [V]CST_ANEWDEL : Return : Endif
EXPENSES.EXS.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.EXS.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.EXS.CODEXPENS)
 If EXPENSES.EXS.CODEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.EXS.CODEXPENS([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.EXS.DIMCEN)
 If EXPENSES.EXS.DIMCEN([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.EXS.DIMCEN([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.EXS.LNKRATLED)
 If EXPENSES.EXS.LNKRATLED([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.EXS.LNKRATLED([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.EXS.RATEXPENS)
 If EXPENSES.EXS.RATEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.EXS.RATEXPENS([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

For [L]A_I=1 To maxtab(EXPENSES.EXS.CODEXPENS)
 If EXPENSES.EXS.CODEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.EXS.CODEXPENS([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.EXS.DIMCEN)
 If EXPENSES.EXS.DIMCEN([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.EXS.DIMCEN([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.EXS.LNKRATLED)
 If EXPENSES.EXS.LNKRATLED([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.EXS.LNKRATLED([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.EXS.RATEXPENS)
 If EXPENSES.EXS.RATEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.EXS.RATEXPENS([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.EXS.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_EXPENSES
Trbegin [F:EXS]
 Gosub AINSERT_EXPENSES
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(EXPENSES.EXS.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 EXPENSES.EXS.ASTALIN = [V]CST_ALL
Endif
For [L]A_I=1 To maxtab(EXPENSES.EXS.CODEXPENS)
 If EXPENSES.EXS.CODEXPENS([L]A_I)<>null
  If EXPENSES.EXS.CODEXPENS([L]A_I).ASTALIN=[V]CST_ADEL or EXPENSES.EXS.CODEXPENS([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance EXPENSES.EXS.CODEXPENS([L]A_I)
   EXPENSES.EXS.CODEXPENS([L]A_I) = null
  Elsif EXPENSES.EXS.CODEXPENS([L]A_I).ASTALIN <> [V]CST_ALL
   EXPENSES.EXS.CODEXPENS([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
For [L]A_I=1 To maxtab(EXPENSES.EXS.DIMCEN)
 If EXPENSES.EXS.DIMCEN([L]A_I)<>null
  If EXPENSES.EXS.DIMCEN([L]A_I).ASTALIN=[V]CST_ADEL or EXPENSES.EXS.DIMCEN([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance EXPENSES.EXS.DIMCEN([L]A_I)
   EXPENSES.EXS.DIMCEN([L]A_I) = null
  Elsif EXPENSES.EXS.DIMCEN([L]A_I).ASTALIN <> [V]CST_ALL
   EXPENSES.EXS.DIMCEN([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
For [L]A_I=1 To maxtab(EXPENSES.EXS.LNKRATLED)
 If EXPENSES.EXS.LNKRATLED([L]A_I)<>null
  If EXPENSES.EXS.LNKRATLED([L]A_I).ASTALIN=[V]CST_ADEL or EXPENSES.EXS.LNKRATLED([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance EXPENSES.EXS.LNKRATLED([L]A_I)
   EXPENSES.EXS.LNKRATLED([L]A_I) = null
  Elsif EXPENSES.EXS.LNKRATLED([L]A_I).ASTALIN <> [V]CST_ALL
   EXPENSES.EXS.LNKRATLED([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
For [L]A_I=1 To maxtab(EXPENSES.EXS.RATEXPENS)
 If EXPENSES.EXS.RATEXPENS([L]A_I)<>null
  If EXPENSES.EXS.RATEXPENS([L]A_I).ASTALIN=[V]CST_ADEL or EXPENSES.EXS.RATEXPENS([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance EXPENSES.EXS.RATEXPENS([L]A_I)
   EXPENSES.EXS.RATEXPENS([L]A_I) = null
  Elsif EXPENSES.EXS.RATEXPENS([L]A_I).ASTALIN <> [V]CST_ALL
   EXPENSES.EXS.RATEXPENS([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
Return

#-----------------------------------------------------#
$AINSERT_EXPENSES
[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.EXS._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If EXPENSES.snapshotEnabled=1
 [L]A_RETIK = EXPENSES.revertUpdTick
Endif
[L]ASTATUS = max(fmet EXPENSES.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



