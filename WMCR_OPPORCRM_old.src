#<AdxTL>@(#)0.0.0.0 $Revision$Class CRM project
# Sage X3 supervisor
## CRUD-CLASSE ## OPPORCRM
# 2018-06-20 06:48:14 263


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File OPPORCRM [OPPCRM_]

If !SILENCE : Call TRACE("2 --> Local Instance C_OPPORCRM") From ASYRCOM : Endif
Local Instance OPPORCRM Using C_OPPORCRM

If !SILENCE : Call TRACE("3 --> New Instance C_OPPORCRM") From ASYRCOM : Endif
OPPORCRM = NewInstance C_OPPORCRM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [OPPCRM_]OPPCRM0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of OPPORCRM") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet OPPORCRM.AREAD([OPPCRM_]OPPNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("OPPORCRM.OPPNUM ="-num$(OPPORCRM.OPPNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(OPPORCRM.AKEYS)
  Call TRACE("-"-num$(I)-":"-OPPORCRM.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [OPPCRM_]
FreeGroup OPPORCRM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(OPPORCRM,ACLE,ASTATUS,_ETAG)
Variable Instance OPPORCRM Using C_OPPORCRM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _OPPNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_OPPNUM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File OPPORCRM [OPPCRM]
Default File [F:OPPCRM]
Read [F:OPPCRM]OPPCRM0 = [L]_OPPNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:OPPCRM]UPDTICK)>0
 [L]_ETAG = num$([F:OPPCRM]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(OPPORCRM,ACLE,ASTATUS)
Variable Instance OPPORCRM Using C_OPPORCRM
Value Char ACLE
Variable Integer ASTATUS
Local Char _OPPNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_OPPNUM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet OPPORCRM.AREAD([L]_OPPNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(OPPORCRM,_OPPNUM,ASTATUS)
Variable Instance OPPORCRM Using C_OPPORCRM
Value Char _OPPNUM
Variable Integer ASTATUS

If OPPORCRM = null : End : Endif

Gosub AVARIABLES From WMC00OPPORCRM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If OPPORCRM.APARENT=null
 [L]A_I = OPPORCRM.freeSnapshot
 OPPORCRM.snapshotEnabled = 0
 OPPORCRM.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & OPPORCRM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet OPPORCRM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If OPPORCRM.APARENT=null
 OPPORCRM.snapshotEnabled = 1
 OPPORCRM.setAccessorEnabled = 1
Endif
LogicClose File [OPPCRM] ,[STB] ,[STA]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet OPPORCRM._ACTION_PARAM("AREAD_BEFORE",[L]_OPPNUM))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:OPPCRM]
Read [F:OPPCRM]OPPCRM0 = [L]_OPPNUM
If fstat
[L]A_ERROR = [L]_OPPNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(OPPORCRM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:OPPCRM]AUUID)>0 & [F:OPPCRM]AUUID=NullUuid
 [F:OPPCRM]AUUID = getUuid
Endif
SetInstance OPPORCRM With [F:OPPCRM]
OPPORCRM.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:STB]
 [L]A_N2=0
 For [F:STB]OSB1 Where OPPNUM=[F:OPPCRM]OPPNUM
  [L]A_N2 +=1
  OPPORCRM.STPSTB(A_N2) = NewInstance  C_OPPORSTB(OPPORCRM.ACTX,NullUuid,[L]A_N2,OPPORCRM,"STPSTB") AllocGroup OPPORCRM
  [L]ASTATUS = max([L]ASTATUS,fmet OPPORCRM.STPSTB(A_N2).ADDINSTANCE_BOUND)
  Callmet OPPORCRM.STPSTB(A_N2).AREAD([F:STB]OPPNUM,[F:STB]STELIN)
  OPPORCRM.STPSTB(A_N2).ASTALIN = [V]CST_ALL
  [L]ASTATUS = max([L]ASTATUS,fmet OPPORCRM.STPSTB(A_N2).ASETATTRIBUTE("OPPNUM","$namProParent","OPPNUM"))
  [L]ASTATUS = max([L]ASTATUS,fmet OPPORCRM.STPSTB(A_N2).ASETATTRIBUTE("STELIN","$isDisabled","true"))
 Next STB
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
#-----------------------------------------------------#

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:STA]
 [L]A_N2=0
 For [F:STA]OSA1 Where OPPNUM=[F:OPPCRM]OPPNUM
  [L]A_N2 +=1
  OPPORCRM.STPSTA(A_N2) = NewInstance  C_OPPORSTA(OPPORCRM.ACTX,NullUuid,[L]A_N2,OPPORCRM,"STPSTA") AllocGroup OPPORCRM
  [L]ASTATUS = max([L]ASTATUS,fmet OPPORCRM.STPSTA(A_N2).ADDINSTANCE_BOUND)
  Callmet OPPORCRM.STPSTA(A_N2).AREAD([F:STA]OPPNUM,[F:STA]STELINX)
  OPPORCRM.STPSTA(A_N2).ASTALIN = [V]CST_ALL
  [L]ASTATUS = max([L]ASTATUS,fmet OPPORCRM.STPSTA(A_N2).ASETATTRIBUTE("OPPNUM","$namProParent","OPPNUM"))
  [L]ASTATUS = max([L]ASTATUS,fmet OPPORCRM.STPSTA(A_N2).ASETATTRIBUTE("STELINX","$isDisabled","true"))
 Next STA
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
#-----------------------------------------------------#

[L]ASTATUS = max([L]ASTATUS,fmet OPPORCRM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



