#<AdxTL>@(#)0.0.0.0 $Revision$Class Products
# Supervisor
## CRUD-CLASSE ## ITMMASTERM
# 2018-08-27 13:19:10 722


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ITMMASTER [ITM_]

If !SILENCE : Call TRACE("2 --> Local Instance R_ITMMASTERM") From ASYRCOM : Endif
Local Instance ITMMASTERM Using R_ITMMASTERM

If !SILENCE : Call TRACE("3 --> New Instance R_ITMMASTERM") From ASYRCOM : Endif
ITMMASTERM = NewInstance R_ITMMASTERM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ITM_]ITM0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ITMMASTER") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ITMMASTERM.AREAD([ITM_]ITMREF))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ITMMASTERM.ITM.ITMREF ="-num$(ITMMASTERM.ITM.ITMREF)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ITMMASTERM.ITM.AKEYS)
  Call TRACE("-"-num$(I)-":"-ITMMASTERM.ITM.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ITM_]
FreeGroup ITMMASTERM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ITMMASTERM,ACLE,ASTATUS,_ETAG)
Variable Instance ITMMASTERM Using R_ITMMASTERM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _ITMREF(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMREF = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File ITMMASTER [ITM]
Default File [F:ITM]
Read [F:ITM]ITM0 = [L]_ITMREF
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ITM]UPDTICK)>0
 [L]_ETAG = num$([F:ITM]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ITMMASTERM,ACLE,ASTATUS)
Variable Instance ITMMASTERM Using R_ITMMASTERM
Value Char ACLE
Variable Integer ASTATUS
Local Char _ITMREF(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMREF = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ITMMASTERM.AREAD([L]_ITMREF))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ITMMASTERM,_ITMREF,ASTATUS)
Variable Instance ITMMASTERM Using R_ITMMASTERM
Value Char _ITMREF
Variable Integer ASTATUS

If ITMMASTERM = null : End : Endif

Gosub AVARIABLES From WMR00ITMMASTERM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ITMMASTERM.APARENT=null
 [L]A_I = ITMMASTERM.freeSnapshot
 ITMMASTERM.snapshotEnabled = 0
 ITMMASTERM.setAccessorEnabled = 0
Endif

If fmet ITMMASTERM.ACTX.AGETAFCRIGHT(ITMMASTERM,"GESITM",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:ITM]
Read [F:ITM]ITM0 = [L]_ITMREF
If fstat
[L]A_ERROR = [L]_ITMREF
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ITMMASTERM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet ITMMASTERM.ACTX.AGETAFCRIGHTR(ITMMASTERM,"GESITM",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet ITMMASTERM.ACTX.ASTACRITROLE(ITMMASTERM,[L]_ITMREF
& ,"ITM","ITM",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet ITMMASTERM.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

ITMMASTERM.ITM.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet ITMMASTERM.ITM.AREAD([L]_ITMREF))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ITMMASTERM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ITMMASTERM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ITMMASTERM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ITMMASTERM.APARENT=null
 ITMMASTERM.snapshotEnabled = 1
 ITMMASTERM.setAccessorEnabled = 1
Endif
LogicClose File [ITM] ,[ITU] ,[ITP] ,[ITA] ,[ITS]
End



