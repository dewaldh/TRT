#<AdxTL>@(#)0.0.0.0 $Revision$Class Indirect references
# Supervisor
## CRUD-CLASSE ## SFTINDREF
# 2018-08-27 12:45:31 097


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(SFTINDREF,ASTATUS)
Variable Instance SFTINDREF Using C_SFTINDREF
Variable Integer ASTATUS

If SFTINDREF = null : End : Endif

Gosub _AVARIABLES From WMC00SFTINDREF

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_SFTINDREF

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(SFTINDREF,ASTATUS)
Variable Instance SFTINDREF Using C_SFTINDREF
Variable Integer ASTATUS

If SFTINDREF = null : End : Endif

Gosub AVARIABLES From WMC00SFTINDREF
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_SFTINDREF
Else
 Gosub AINSERT_SFTINDREF
Endif

Gosub _AINSERT_AFTER
[L]A_I = SFTINDREF.freeSnapshot
SFTINDREF.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet SFTINDREF._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet SFTINDREF._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet SFTINDREF._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If SFTINDREF.ASTALIN = [V]CST_ANEWDEL : Return : Endif
SFTINDREF.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet SFTINDREF.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet SFTINDREF.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_SFTINDREF
Trbegin [F:SFTIR]
 Gosub AINSERT_SFTINDREF
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_SFTINDREF
Raz [F:SFTIR]
[L]ASTATUS = max([L]ASTATUS,fmet SFTINDREF.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00SFTINDREF._MAJSQL_SFTINDREF(SFTINDREF))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet SFTINDREF.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If SFTINDREF.snapshotEnabled=1
 [L]A_RETIK = SFTINDREF.revertUpdTick
Endif
[L]ASTATUS = max(fmet SFTINDREF.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(SFTINDREF.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 SFTINDREF.ASTALIN = [V]CST_ALL
Endif
Return



