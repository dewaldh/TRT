#<AdxTL>@(#)0.0.0.0 $Revision$Class Payment types
# Supervisor
## CRUD-CLASSE ## TABPAYTYP
# 2018-08-27 13:38:12 438


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABPAYTYP [TPY_]

If !SILENCE : Call TRACE("2 --> Local Instance R_TABPAYTYP") From ASYRCOM : Endif
Local Instance TABPAYTYP Using R_TABPAYTYP

If !SILENCE : Call TRACE("3 --> New Instance R_TABPAYTYP") From ASYRCOM : Endif
TABPAYTYP = NewInstance R_TABPAYTYP AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TPY_]TPY0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TABPAYTYP") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.AREAD([TPY_]PAYTYP,[TPY_]LEG))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TABPAYTYP.TPY.PAYTYP ="-num$(TABPAYTYP.TPY.PAYTYP)) From ASYRCOM
 Call TRACE("TABPAYTYP.TPY.LEG ="-num$(TABPAYTYP.TPY.LEG)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TABPAYTYP.TPY.AKEYS)
  Call TRACE("-"-num$(I)-":"-TABPAYTYP.TPY.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TPY_]
FreeGroup TABPAYTYP
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TABPAYTYP,ACLE,ASTATUS,_ETAG)
Variable Instance TABPAYTYP Using R_TABPAYTYP
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _PAYTYP(5)
Local Char _LEG(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PAYTYP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File TABPAYTYP [TPY]
Default File [F:TPY]
Read [F:TPY]TPY0 = [L]_PAYTYP;[L]_LEG
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TPY]UPDTICK)>0
 [L]_ETAG = num$([F:TPY]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TABPAYTYP,ACLE,ASTATUS)
Variable Instance TABPAYTYP Using R_TABPAYTYP
Value Char ACLE
Variable Integer ASTATUS
Local Char _PAYTYP(5)
Local Char _LEG(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PAYTYP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.AREAD([L]_PAYTYP,[L]_LEG))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TABPAYTYP,_PAYTYP,_LEG,ASTATUS)
Variable Instance TABPAYTYP Using R_TABPAYTYP
Value Char _PAYTYP
Value Char _LEG
Variable Integer ASTATUS

If TABPAYTYP = null : End : Endif

Gosub AVARIABLES From WMR00TABPAYTYP
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TABPAYTYP.APARENT=null
 [L]A_I = TABPAYTYP.freeSnapshot
 TABPAYTYP.snapshotEnabled = 0
 TABPAYTYP.setAccessorEnabled = 0
Endif

If fmet TABPAYTYP.ACTX.AGETAFCRIGHT(TABPAYTYP,"GESTPY",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:TPY]
Read [F:TPY]TPY0 = [L]_PAYTYP;[L]_LEG
If fstat
[L]A_ERROR = [L]_PAYTYP+"~"+[L]_LEG
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABPAYTYP,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = [F:TPY]ACS
If fmet TABPAYTYP.ACTX.AGETAFCRIGHTR(TABPAYTYP,"GESTPY",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet TABPAYTYP.ACTX.AGETACSRIGHTC(TABPAYTYP,[L]A_STRACC,[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR
 Goto AREAD_END
  Endif
If fmet TABPAYTYP.ACTX.ASTACRITROLE(TABPAYTYP,[L]_PAYTYP+"~"+[L]_LEG
& ,"TPY","TPY",[V]CST_ATRUE)>=[V]CST_AERROR
   [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
  Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.ACTION("AREAD_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  TABPAYTYP.TPY.setAccessorEnabled = 0
  [L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.TPY.AREAD([L]_PAYTYP,[L]_LEG))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  If [L]ASTATUS<[V]CST_AERROR & TABPAYTYP.APARENT=null
   # Load Link
   [L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP._ALNKPRO)
   If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  Endif
  
  $AREAD_END
  If TABPAYTYP.APARENT=null
   TABPAYTYP.snapshotEnabled = 1
   TABPAYTYP.setAccessorEnabled = 1
  Endif
  LogicClose File [TPY] ,[TFC]
  End
  


