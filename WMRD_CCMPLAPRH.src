#<AdxTL>@(#)0.0.0.0 $Revision$Class Plan-Purchase requests
# Supervisor
## CRUD-CLASSE ## CCMPLAPRH
# 2018-08-27 13:13:14 368


############################################################################################
### Subprog ADELETE
############################################################################################
Subprog ADELETE(CCMPLAPRH,ASTATUS)
Variable Instance CCMPLAPRH Using R_CCMPLAPRH
Variable Integer ASTATUS

If CCMPLAPRH = null : End : Endif

Gosub AVARIABLES From WMR00CCMPLAPRH
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

Local Instance ALNKDELTAB Using C_ALNKDELTAB

If fmet CCMPLAPRH.ACTX.AGETAFCRIGHT(CCMPLAPRH,"GESCCM",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto ADELETE_END : Endif
If fmet CCMPLAPRH.ACTX.AGETAFCRIGHTD(CCMPLAPRH,"GESCCM",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto ADELETE_END
Endif

Gosub AREPCONTROL_ADELETE
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

If !adxlog
 Gosub ADELETE_TR_CCMPLAPRH
Else
 Gosub ADELETE_CCMPLAPRH
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_END : Return : Endif

$ADELETE_END
End

#-----------------------------------------------------#
$AREPCONTROL_ADELETE
CCMPLAPRH.ASTALIN = [V]CST_ADEL
CCMPLAPRH.CCMIPRH.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet CCMPLAPRH.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub ADELETE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMPLAPRH.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$ADELETE_CONTROL
Gosub _ADELETE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Verification delete
[L]ASTATUS = max([L]ASTATUS,func ASYRSUB.VERIFY_INSTANCE(CCMPLAPRH.CCMIPRH,ALNKDELTAB))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _ADELETE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_BEFORE
If CCMPLAPRH.CCMIPRH.ASTALIN = [V]CST_ANEWDEL : Return : Endif
CCMPLAPRH.CCMIPRH.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet CCMPLAPRH.CCMIPRH.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet CCMPLAPRH.CCMIPRH.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_TR_CCMPLAPRH
Trbegin [F:CCMIPRH]
 Gosub ADELETE_CCMPLAPRH
 If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_ADELETE_AFTER
Return

#-----------------------------------------------------#
$ADELETE_CCMPLAPRH
[L]ASTATUS = max([L]ASTATUS,fmet CCMPLAPRH.ACTION("ADELETE_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMPLAPRH.CCMIPRH._ADELETE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMPLAPRH.ACTION("ADELETE_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_ABORT
Rollback
$_ADELETE_ABORT
If CCMPLAPRH.snapshotEnabled=1
 [L]A_RETIK = CCMPLAPRH.revertUpdTick
Endif
[L]ASTATUS = max(fmet CCMPLAPRH.ACTION("ADELETE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



