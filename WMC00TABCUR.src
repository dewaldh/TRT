#<AdxTL>@(#)0.0.0.0 $Revision$Class Currency table
# Supervisor
## CRUD-CLASSE ## TABCUR
# 2018-08-27 12:51:14 425

Gosub TEST From WMCR_TABCUR : End

############################################################################################
## C : Subprog AINSERT(INSTANCE)
## D : Subprog ADELETE(INSTANCE)
## R : Subprog AREAD(INSTANCE,CUR)
## U : Subprog AUPDATE(INSTANCE)
############################################################################################
# TABCUR : TABCUR
############################################################################################

############################################################################################
### AVARIABLES
############################################################################################
$AVARIABLES
[L]ASTATUS =max([L]ASTATUS,fmet TABCUR._ADELERRORS([V]CST_ALLERRORS))
$_AVARIABLES
Local    Integer     A_LEVEL,A_I,A_NEWCOL,A_N1
Local    Integer    ASTATUS,A_RETIK,A_TYPMAJ,A_ASTALIN
Local    Char        A_STRSITE(GLONFCY),A_STRACC(GLONACS),CURPRO(50),A_PARENT(50),A_PATH(200),A_ABR(GLONABR),A_ERROR(250)
Local    Uuident    A_UUID

[L]A_LEVEL    = TABCUR.ACTX.LEVWML
[L]ASTATUS  = 0

Onerrgo ERR_OPENTAB
If find(TABCUR.ACTX.AFOLDER,nomap,"")>0
 Local File TABCUR [TCU]
 Local File TABCUR [AAA_]
 Local File ATEXTRA [AXX]
Else
 Local File =TABCUR.ACTX.AFOLDER+".TABCUR" [TCU]
 Local File =TABCUR.ACTX.AFOLDER+".TABCUR" [AAA_]
 Local File =TABCUR.ACTX.AFOLDER+".ATEXTRA" [AXX]
Endif
Onerrgo
Return

$ERR_OPENTAB
[L]ASTATUS = max([L]ASTATUS,fmet TABCUR.ASETERROR("",errp+"("+num$(errl)+")"-mess(6,123,1)-num$(errn)-errmes$(errn)-errm,[V]CST_AERROR))
Resume

############################################################################################
### Link
############################################################################################
$AOPEN_LINK
Gosub AVARIABLES
Link [TCU] With
& [AAA_]TCU0 = CUR
& As [LNK_]
Return

############################################################################################
### TABCUR(WTCU)
############################################################################################
Funprog  _MAJSQL_TABCUR(WTCU)
Variable Instance WTCU Using C_TABCUR
Local Integer ASTATUS,A_I,A_J
Default File [F:TCU]
If WTCU.ASTALIN=[V]CST_ANEW
 Call INICRE(WTCU) From ASYRSUB
 SetInstance [F:TCU] With WTCU
 For J=1 To maxtab(WTCU.AXX)
  If WTCU.AXX(J)<>null & WTCU.AXX(J).PRO= "INTDES" & WTCU.AXX(J).FLG>0
   Call MAJTEXTRALAN(WTCU,WTCU.AXX(J).TEX,"TABCUR","INTDES",WTCU.AXX(J).LAN,WTCU.CUR,"",[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For J=1 To maxtab(WTCU.AXX)
  If WTCU.AXX(J)<>null & WTCU.AXX(J).PRO= "INTSHO" & WTCU.AXX(J).FLG>0
   Call MAJTEXTRALAN(WTCU,WTCU.AXX(J).TEX,"TABCUR","INTSHO",WTCU.AXX(J).LAN,WTCU.CUR,"",[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 Write [F:TCU]
 If fstat
  Call FSTA("TCU",WTCU,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WTCU.updTick = [F:TCU]updTick
Elsif WTCU.ASTALIN=[V]CST_ALL or WTCU.ASTALIN=[V]CST_AUPD
 Call INIUPD(WTCU) From ASYRSUB
 SetInstance [F:TCU] With WTCU
 For J=1 To maxtab(WTCU.AXX)
  If WTCU.AXX(J)<>null & WTCU.AXX(J).PRO= "INTDES" & WTCU.AXX(J).FLG>0
   Call MAJTEXTRALAN(WTCU,WTCU.AXX(J).TEX,"TABCUR","INTDES",WTCU.AXX(J).LAN,WTCU.CUR,"",[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For J=1 To maxtab(WTCU.AXX)
  If WTCU.AXX(J)<>null & WTCU.AXX(J).PRO= "INTSHO" & WTCU.AXX(J).FLG>0
   Call MAJTEXTRALAN(WTCU,WTCU.AXX(J).TEX,"TABCUR","INTSHO",WTCU.AXX(J).LAN,WTCU.CUR,"",[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WTCU,"TABCUR")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:TCU]TCU0 = [F:TCU]CUR
 If fstat
  Call FSTA("TCU",WTCU,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WTCU.updTick = [F:TCU]updTick
Elsif WTCU.ASTALIN=[V]CST_ADEL
 SetInstance [F:TCU] With WTCU
 For J=1 To maxtab(WTCU.AXX)
  If WTCU.AXX(J)<>null & WTCU.AXX(J).PRO= "INTDES"
   Call SUPTEXTRA(WTCU,WTCU.AXX(J).TEX,"TABCUR","INTDES",WTCU.AXX(J).LAN,WTCU.CUR,"",[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For J=1 To maxtab(WTCU.AXX)
  If WTCU.AXX(J)<>null & WTCU.AXX(J).PRO= "INTSHO"
   Call SUPTEXTRA(WTCU,WTCU.AXX(J).TEX,"TABCUR","INTSHO",WTCU.AXX(J).LAN,WTCU.CUR,"",[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WTCU,"TABCUR")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:TCU]TCU0 = [F:TCU]CUR
 If fstat
  Call FSTA("TCU",WTCU,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK



