#<AdxTL>@(#)0.0.0.0 $Revision$Class Indirect references
# Supervisor
## CRUD-CLASSE ## SFTINDREF
# 2018-08-27 12:45:31 306


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File SFTINDREF [SFTIR_]

If !SILENCE : Call TRACE("2 --> Local Instance C_SFTINDREF") From ASYRCOM : Endif
Local Instance SFTINDREF Using C_SFTINDREF

If !SILENCE : Call TRACE("3 --> New Instance C_SFTINDREF") From ASYRCOM : Endif
SFTINDREF = NewInstance C_SFTINDREF AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [SFTIR_]SFTAG0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of SFTINDREF") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet SFTINDREF.AREAD([SFTIR_]INDCOD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("SFTINDREF.INDCOD ="-num$(SFTINDREF.INDCOD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(SFTINDREF.AKEYS)
  Call TRACE("-"-num$(I)-":"-SFTINDREF.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [SFTIR_]
FreeGroup SFTINDREF
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(SFTINDREF,ACLE,ASTATUS,_ETAG)
Variable Instance SFTINDREF Using C_SFTINDREF
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _INDCOD(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_INDCOD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File SFTINDREF [SFTIR]
Default File [F:SFTIR]
Read [F:SFTIR]SFTAG0 = [L]_INDCOD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:SFTIR]UPDTICK)>0
 [L]_ETAG = num$([F:SFTIR]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(SFTINDREF,ACLE,ASTATUS)
Variable Instance SFTINDREF Using C_SFTINDREF
Value Char ACLE
Variable Integer ASTATUS
Local Char _INDCOD(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_INDCOD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SFTINDREF.AREAD([L]_INDCOD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(SFTINDREF,_INDCOD,ASTATUS)
Variable Instance SFTINDREF Using C_SFTINDREF
Value Char _INDCOD
Variable Integer ASTATUS

If SFTINDREF = null : End : Endif

Gosub AVARIABLES From WMC00SFTINDREF
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If SFTINDREF.APARENT=null
 [L]A_I = SFTINDREF.freeSnapshot
 SFTINDREF.snapshotEnabled = 0
 SFTINDREF.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & SFTINDREF.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet SFTINDREF._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If SFTINDREF.APARENT=null
 SFTINDREF.snapshotEnabled = 1
 SFTINDREF.setAccessorEnabled = 1
Endif
LogicClose File [SFTIR]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet SFTINDREF._ACTION_PARAM("AREAD_BEFORE",[L]_INDCOD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:SFTIR]
Read [F:SFTIR]SFTAG0 = [L]_INDCOD
If fstat
[L]A_ERROR = [L]_INDCOD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(SFTINDREF,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:SFTIR]AUUID)>0 & [F:SFTIR]AUUID=NullUuid
 [F:SFTIR]AUUID = getUuid
Endif
SetInstance SFTINDREF With [F:SFTIR]
SFTINDREF.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet SFTINDREF.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="SFTINDREF" & ZONE="INDESAXX" & IDENT1=SFTINDREF.INDCOD & IDENT2=""
 Call ASETTEXTRA(SFTINDREF.AXX,SFTINDREF.AllocGrp(),"INDESAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 SFTINDREF.AXX(maxtab(SFTINDREF.AXX)).FLG = 0
Next AXX
If !len(fmet SFTINDREF.AGETTEXTRA("INDESAXX"))
 Call ASETTEXTRA(SFTINDREF.AXX,SFTINDREF.AllocGrp(),"INDESAXX",
& fmet SFTINDREF.AGETTEXTRALAN("INDESAXX",SFTINDREF.ACTX.AFOLD.ALANGDEF),
& SFTINDREF.ACTX.LAN) From ASYRSUB
Endif

Return



