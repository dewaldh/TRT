#<AdxTL>@(#)0.0.0.0 $Revision$Class Location
# Supervisor
## CRUD-CLASSE ## TABPLACE
# 2018-08-27 13:38:20 900


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(TABPLACE,ASTATUS)
Variable Instance TABPLACE Using R_TABPLACE
Variable Integer ASTATUS

If TABPLACE = null : End : Endif

Gosub AVARIABLES From WMR00TABPLACE
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If fmet TABPLACE.ACTX.AGETAFCRIGHT(TABPLACE,"GESTPC",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END : Endif
If fmet TABPLACE.ACTX.AGETAFCRIGHTC(TABPLACE,"GESTPC",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END
Endif

Gosub AREPCONTROL_AINSERT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_TABPLACE
Else
 Gosub AINSERT_TABPLACE
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = TABPLACE.freeSnapshot
TABPLACE.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
TABPLACE.ASTALIN = [V]CST_ANEW
TABPLACE.TPC.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet TABPLACE._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet TABPLACE._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet TABPLACE._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If TABPLACE.TPC.ASTALIN = [V]CST_ANEWDEL : Return : Endif
TABPLACE.TPC.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(TABPLACE.TPC.BPA) : # BPADDRESS -- 2
 If TABPLACE.TPC.BPA(A_N2) <> null
& and !find(TABPLACE.TPC.BPA(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2)._AINSERT_CONTROL_BEFORE)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  For [L]A_I=1 To maxtab(TABPLACE.TPC.BPA(A_N2).COLTEL)
   If TABPLACE.TPC.BPA(A_N2).COLTEL([L]A_I)<>null
    [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2).COLTEL([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
  For [L]A_I=1 To maxtab(TABPLACE.TPC.BPA(A_N2).COLWEB)
   If TABPLACE.TPC.BPA(A_N2).COLWEB([L]A_I)<>null
    [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2).COLWEB([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(TABPLACE.TPC.BPA)
 If TABPLACE.TPC.BPA(A_N2)<>null
  If TABPLACE.TPC.BPA(A_N2).ASTALIN<>[V]CST_ADEL & TABPLACE.TPC.BPA(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABPLACE.TPC,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"BPADDRESS:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER
For A_N2=1 To maxtab(TABPLACE.TPC.BPA) : # BPADDRESS -- 2
 If TABPLACE.TPC.BPA(A_N2) <> null
& and !find(TABPLACE.TPC.BPA(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2)._AINSERT_CONTROL_AFTER)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  For [L]A_I=1 To maxtab(TABPLACE.TPC.BPA(A_N2).COLTEL)
   If TABPLACE.TPC.BPA(A_N2).COLTEL([L]A_I)<>null
    [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2).COLTEL([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
  For [L]A_I=1 To maxtab(TABPLACE.TPC.BPA(A_N2).COLWEB)
   If TABPLACE.TPC.BPA(A_N2).COLWEB([L]A_I)<>null
    [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2).COLWEB([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(TABPLACE.TPC.BPA)
 If TABPLACE.TPC.BPA(A_N2)<>null
  If TABPLACE.TPC.BPA(A_N2).ASTALIN<>[V]CST_ADEL & TABPLACE.TPC.BPA(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABPLACE.TPC,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"BPADDRESS:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_TABPLACE
Trbegin [F:TPC]
 Gosub AINSERT_TABPLACE
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(TABPLACE.TPC.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 TABPLACE.TPC.ASTALIN = [V]CST_ALL
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(TABPLACE.TPC.BPA)
 If TABPLACE.TPC.BPA(A_N2) <> null
  [L]ASTATUS2 = fmet TABPLACE.TPC.BPA(A_N2)._AINSERT_AFTER
  If TABPLACE.TPC.BPA(A_N2).ASTALIN=[V]CST_ADEL or TABPLACE.TPC.BPA(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance TABPLACE.TPC.BPA(A_N2)
   TABPLACE.TPC.BPA(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Return

#-----------------------------------------------------#
$AINSERT_TABPLACE
[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If TABPLACE.snapshotEnabled=1
 [L]A_RETIK = TABPLACE.revertUpdTick
Endif
[L]ASTATUS = max(fmet TABPLACE.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



