#<AdxTL>@(#)0.0.0.0 $Revision$Class Class index
# Supervisor
## CRUD-CLASSE ## ACLAIDX
# 2018-08-27 12:19:03 788


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ACLASSE [ACLA_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ACLAIDX") From ASYRCOM : Endif
Local Instance ACLAIDX Using C_ACLAIDX

If !SILENCE : Call TRACE("3 --> New Instance C_ACLAIDX") From ASYRCOM : Endif
ACLAIDX = NewInstance C_ACLAIDX AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ACLA_]ACLA0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ACLAIDX") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ACLAIDX.AREAD([ACLA_]CODCLA))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ACLAIDX.CODCLA ="-num$(ACLAIDX.CODCLA)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ACLAIDX.AKEYS)
  Call TRACE("-"-num$(I)-":"-ACLAIDX.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ACLA_]
FreeGroup ACLAIDX
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ACLAIDX,ACLE,ASTATUS,_ETAG)
Variable Instance ACLAIDX Using C_ACLAIDX
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CODCLA(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODCLA = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File ACLASSE [ACLA]
Default File [F:ACLA]
Read [F:ACLA]ACLA0 = [L]_CODCLA
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ACLA]UPDTICK)>0
 [L]_ETAG = num$([F:ACLA]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ACLAIDX,ACLE,ASTATUS)
Variable Instance ACLAIDX Using C_ACLAIDX
Value Char ACLE
Variable Integer ASTATUS
Local Char _CODCLA(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODCLA = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ACLAIDX.AREAD([L]_CODCLA))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ACLAIDX,_CODCLA,ASTATUS)
Variable Instance ACLAIDX Using C_ACLAIDX
Value Char _CODCLA
Variable Integer ASTATUS

If ACLAIDX = null : End : Endif

Gosub AVARIABLES From WMC00ACLAIDX
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ACLAIDX.APARENT=null
 [L]A_I = ACLAIDX.freeSnapshot
 ACLAIDX.snapshotEnabled = 0
 ACLAIDX.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ACLAIDX.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ACLAIDX._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ACLAIDX.APARENT=null
 ACLAIDX.snapshotEnabled = 1
 ACLAIDX.setAccessorEnabled = 1
Endif
LogicClose File [ACLA]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet ACLAIDX._ACTION_PARAM("AREAD_BEFORE",[L]_CODCLA))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:ACLA]
Read [F:ACLA]ACLA0 = [L]_CODCLA
If fstat
[L]A_ERROR = [L]_CODCLA
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ACLAIDX,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:ACLA]AUUID)>0 & [F:ACLA]AUUID=NullUuid
 [F:ACLA]AUUID = getUuid
Endif
SetInstance ACLAIDX With [F:ACLA]
ACLAIDX.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet ACLAIDX.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [ATX] Where NUMERO=[F:ACLA]INTCLA
 Call ASETTEXT(ACLAIDX.ATX,ACLAIDX.AllocGrp,"INTCLA",[F:ATX]TEXTE,[F:ATX]LAN,[F:ATX]NUMERO) From ASYRSUB
Next ATX

Return



