#<AdxTL>@(#)0.0.0.0 $Revision$Class Plan-Purchase requests
# Supervisor
## CRUD-CLASSE ## CCMPLAPRH
# 2018-08-27 13:13:14 468


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File CCMIMPPRH [CCMIPRH_]

If !SILENCE : Call TRACE("2 --> Local Instance R_CCMPLAPRH") From ASYRCOM : Endif
Local Instance CCMPLAPRH Using R_CCMPLAPRH

If !SILENCE : Call TRACE("3 --> New Instance R_CCMPLAPRH") From ASYRCOM : Endif
CCMPLAPRH = NewInstance R_CCMPLAPRH AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [CCMIPRH_]CCMPRH0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of CCMIMPPRH") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet CCMPLAPRH.AREAD([CCMIPRH_]CRID))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("CCMPLAPRH.CCMIPRH.CRID ="-num$(CCMPLAPRH.CCMIPRH.CRID)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(CCMPLAPRH.CCMIPRH.AKEYS)
  Call TRACE("-"-num$(I)-":"-CCMPLAPRH.CCMIPRH.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [CCMIPRH_]
FreeGroup CCMPLAPRH
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(CCMPLAPRH,ACLE,ASTATUS,_ETAG)
Variable Instance CCMPLAPRH Using R_CCMPLAPRH
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CRID(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CRID = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File CCMIMPPRH [CCMIPRH]
Default File [F:CCMIPRH]
Read [F:CCMIPRH]CCMPRH0 = [L]_CRID
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:CCMIPRH]UPDTICK)>0
 [L]_ETAG = num$([F:CCMIPRH]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(CCMPLAPRH,ACLE,ASTATUS)
Variable Instance CCMPLAPRH Using R_CCMPLAPRH
Value Char ACLE
Variable Integer ASTATUS
Local Char _CRID(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CRID = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet CCMPLAPRH.AREAD([L]_CRID))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(CCMPLAPRH,_CRID,ASTATUS)
Variable Instance CCMPLAPRH Using R_CCMPLAPRH
Value Char _CRID
Variable Integer ASTATUS

If CCMPLAPRH = null : End : Endif

Gosub AVARIABLES From WMR00CCMPLAPRH
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If CCMPLAPRH.APARENT=null
 [L]A_I = CCMPLAPRH.freeSnapshot
 CCMPLAPRH.snapshotEnabled = 0
 CCMPLAPRH.setAccessorEnabled = 0
Endif

If fmet CCMPLAPRH.ACTX.AGETAFCRIGHT(CCMPLAPRH,"GESCCM",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:CCMIPRH]
Read [F:CCMIPRH]CCMPRH0 = [L]_CRID
If fstat
[L]A_ERROR = [L]_CRID
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(CCMPLAPRH,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet CCMPLAPRH.ACTX.AGETAFCRIGHTR(CCMPLAPRH,"GESCCM",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet CCMPLAPRH.ACTX.ASTACRITROLE(CCMPLAPRH,[L]_CRID
& ,"CCM","CCMIPRH",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMPLAPRH.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

CCMPLAPRH.CCMIPRH.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet CCMPLAPRH.CCMIPRH.AREAD([L]_CRID))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMPLAPRH.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & CCMPLAPRH.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet CCMPLAPRH._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If CCMPLAPRH.APARENT=null
 CCMPLAPRH.snapshotEnabled = 1
 CCMPLAPRH.setAccessorEnabled = 1
Endif
LogicClose File [CCMIPRH]
End



