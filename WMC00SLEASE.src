#<AdxTL>@(#)0.0.0.0 $Revision$Class Lease contracts
# Supervisor
## CRUD-CLASSE ## SLEASE
# 2018-08-27 12:47:08 322

Gosub TEST From WMCR_SLEASE : End

############################################################################################
## C : Subprog AINSERT(INSTANCE)
## D : Subprog ADELETE(INSTANCE)
## R : Subprog AREAD(INSTANCE,LEAREF)
## U : Subprog AUPDATE(INSTANCE)
############################################################################################
# SLEASE : LEASE
# LEABILBOOK : LEASE LEABILBOOK
# FXDASSETS : LEASE FXDASSETS
############################################################################################

############################################################################################
### AVARIABLES
############################################################################################
$AVARIABLES
[L]ASTATUS =max([L]ASTATUS,fmet SLEASE._ADELERRORS([V]CST_ALLERRORS))
$_AVARIABLES
Local    Integer     A_LEVEL,A_I,A_NEWCOL,A_N1,A_N2,A_S2,A_N3,A_S3
Local    Integer    ASTATUS,A_RETIK,A_TYPMAJ,A_ASTALIN
Local    Char        A_STRSITE(GLONFCY),A_STRACC(GLONACS),CURPRO(50),A_PARENT(50),A_PATH(200),A_ABR(GLONABR),A_ERROR(250)
Local    Uuident    A_UUID

[L]A_LEVEL    = SLEASE.ACTX.LEVWML
[L]ASTATUS  = 0

Onerrgo ERR_OPENTAB
If find(SLEASE.ACTX.AFOLDER,nomap,"")>0
 Local File LEASE [LEA]
 Local File LEABILBOOK [LBB]
 Local File FXDASSETS [FAS]
Else
 Local File =SLEASE.ACTX.AFOLDER+".LEASE" [LEA]
 Local File =SLEASE.ACTX.AFOLDER+".LEABILBOOK" [LBB]
 Local File =SLEASE.ACTX.AFOLDER+".FXDASSETS" [FAS]
Endif
Onerrgo
Return

$ERR_OPENTAB
[L]ASTATUS = max([L]ASTATUS,fmet SLEASE.ASETERROR("",errp+"("+num$(errl)+")"-mess(6,123,1)-num$(errn)-errmes$(errn)-errm,[V]CST_AERROR))
Resume

############################################################################################
### Link
############################################################################################
$AOPEN_LINK
Gosub AVARIABLES
Link [LEA] With
& [LBB]LBB0 = LEAREF,
& [FAS]FAS12 = [LEA]LEAREF
& As [LNK_]
Return

############################################################################################
### LEASE(WLEA)
############################################################################################
Funprog  _MAJSQL_LEASE(WLEA)
Variable Instance WLEA Using C_SLEASE
Local Integer ASTATUS,A_I,A_J
Default File [F:LEA]
If WLEA.ASTALIN=[V]CST_ANEW
 Call INICRE(WLEA) From ASYRSUB
 SetInstance [F:LEA] With WLEA
 For [L]A_J=1 to 20
  For [L]A_I=1 To maxtab(WLEA.ANA)
   If WLEA.ANA([L]A_I)<>null & !find(WLEA.ANA([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WLEA.ANA([L]A_I).AORDER=[L]A_J
    [F:LEA]DIE([L]A_J-1) = WLEA.ANA([L]A_I).DIE
    [F:LEA]CCE([L]A_J-1) = WLEA.ANA([L]A_I).CCE
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 Write [F:LEA]
 If fstat
  Call FSTA("LEA",WLEA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WLEA.updTick = [F:LEA]updTick
Elsif WLEA.ASTALIN=[V]CST_ALL or WLEA.ASTALIN=[V]CST_AUPD
 Call INIUPD(WLEA) From ASYRSUB
 SetInstance [F:LEA] With WLEA
 For [L]A_J=1 to 20
  For [L]A_I=1 To maxtab(WLEA.ANA)
   If WLEA.ANA([L]A_I)<>null & !find(WLEA.ANA([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WLEA.ANA([L]A_I).AORDER=[L]A_J
    [F:LEA]DIE([L]A_J-1) = WLEA.ANA([L]A_I).DIE
    [F:LEA]CCE([L]A_J-1) = WLEA.ANA([L]A_I).CCE
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WLEA,"LEASE")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:LEA]LEA0 = [F:LEA]LEAREF
 If fstat
  Call FSTA("LEA",WLEA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WLEA.updTick = [F:LEA]updTick
Elsif WLEA.ASTALIN=[V]CST_ADEL
 SetInstance [F:LEA] With WLEA
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WLEA,"LEASE")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:LEA]LEA0 = [F:LEA]LEAREF
 If fstat
  Call FSTA("LEA",WLEA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### LEABILBOOK(WLBB)
############################################################################################
Funprog  _MAJSQL_LEABILBOOK(WLBB)
Variable Instance WLBB Using C_LEABILBOOK
Local Integer ASTATUS,A_I,A_J
Default File [F:LBB]
If WLBB.ASTALIN=[V]CST_ANEW
 Call INICRE(WLBB) From ASYRSUB
 SetInstance [F:LBB] With WLBB
 Write [F:LBB]
 If fstat
  Call FSTA("LBB",WLBB,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WLBB.updTick = [F:LBB]updTick
Elsif WLBB.ASTALIN=[V]CST_ALL or WLBB.ASTALIN=[V]CST_AUPD
 Call INIUPD(WLBB) From ASYRSUB
 SetInstance [F:LBB] With WLBB
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WLBB,"LEABILBOOK")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:LBB]LBB0 = [F:LBB]LEAREF;[F:LBB]ENDPERDAT
 If fstat
  Call FSTA("LBB",WLBB,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WLBB.updTick = [F:LBB]updTick
Elsif WLBB.ASTALIN=[V]CST_ADEL
 SetInstance [F:LBB] With WLBB
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WLBB,"LEABILBOOK")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:LBB]LBB0 = [F:LBB]LEAREF;[F:LBB]ENDPERDAT
 If fstat
  Call FSTA("LBB",WLBB,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### FXDASSETS(WFAS)
############################################################################################
Funprog  _MAJSQL_FXDASSETS(WFAS)
Variable Instance WFAS Using C_FXDASSETS
Local Integer ASTATUS,A_I,A_J
Default File [F:FAS]
If WFAS.ASTALIN=[V]CST_ANEW
 Call INICRE(WFAS) From ASYRSUB
 SetInstance [F:FAS] With WFAS
 For [L]A_J=1 to 20
  For [L]A_I=1 To maxtab(WFAS.ANA)
   If WFAS.ANA([L]A_I)<>null & !find(WFAS.ANA([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WFAS.ANA([L]A_I).AORDER=[L]A_J
    [F:FAS]DIE([L]A_J-1) = WFAS.ANA([L]A_I).DIE
    [F:FAS]CCE([L]A_J-1) = WFAS.ANA([L]A_I).CCE
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 15
  For [L]A_I=1 To maxtab(WFAS.CGAL)
   If WFAS.CGAL([L]A_I)<>null & !find(WFAS.CGAL([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WFAS.CGAL([L]A_I).AORDER=[L]A_J
    [F:FAS]ISSAMT([L]A_J-1) = WFAS.CGAL([L]A_I).ISSAMT
    [F:FAS]SHOGAL([L]A_J-1) = WFAS.CGAL([L]A_I).SHOGAL
    [F:FAS]LNGGAL([L]A_J-1) = WFAS.CGAL([L]A_I).LNGGAL
    [F:FAS]GAL([L]A_J-1) = WFAS.CGAL([L]A_I).GAL
    [F:FAS]IMLRVEISS([L]A_J-1) = WFAS.CGAL([L]A_I).IMLRVEISS
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 11
  For [L]A_I=1 To maxtab(WFAS.CNX)
   If WFAS.CNX([L]A_I)<>null & !find(WFAS.CNX([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WFAS.CNX([L]A_I).AORDER=[L]A_J
    [F:FAS]FLGCNXCLC([L]A_J-1) = WFAS.CNX([L]A_I).FLGCNXCLC
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 Write [F:FAS]
 If fstat
  Call FSTA("FAS",WFAS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WFAS.updTick = [F:FAS]updTick
Elsif WFAS.ASTALIN=[V]CST_ALL or WFAS.ASTALIN=[V]CST_AUPD
 Call INIUPD(WFAS) From ASYRSUB
 SetInstance [F:FAS] With WFAS
 For [L]A_J=1 to 20
  For [L]A_I=1 To maxtab(WFAS.ANA)
   If WFAS.ANA([L]A_I)<>null & !find(WFAS.ANA([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WFAS.ANA([L]A_I).AORDER=[L]A_J
    [F:FAS]DIE([L]A_J-1) = WFAS.ANA([L]A_I).DIE
    [F:FAS]CCE([L]A_J-1) = WFAS.ANA([L]A_I).CCE
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 15
  For [L]A_I=1 To maxtab(WFAS.CGAL)
   If WFAS.CGAL([L]A_I)<>null & !find(WFAS.CGAL([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WFAS.CGAL([L]A_I).AORDER=[L]A_J
    [F:FAS]ISSAMT([L]A_J-1) = WFAS.CGAL([L]A_I).ISSAMT
    [F:FAS]SHOGAL([L]A_J-1) = WFAS.CGAL([L]A_I).SHOGAL
    [F:FAS]LNGGAL([L]A_J-1) = WFAS.CGAL([L]A_I).LNGGAL
    [F:FAS]GAL([L]A_J-1) = WFAS.CGAL([L]A_I).GAL
    [F:FAS]IMLRVEISS([L]A_J-1) = WFAS.CGAL([L]A_I).IMLRVEISS
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to 11
  For [L]A_I=1 To maxtab(WFAS.CNX)
   If WFAS.CNX([L]A_I)<>null & !find(WFAS.CNX([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WFAS.CNX([L]A_I).AORDER=[L]A_J
    [F:FAS]FLGCNXCLC([L]A_J-1) = WFAS.CNX([L]A_I).FLGCNXCLC
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WFAS,"FXDASSETS")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:FAS]FAS12 = [F:FAS]LEAREF
 If fstat
  Call FSTA("FAS",WFAS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WFAS.updTick = [F:FAS]updTick
Elsif WFAS.ASTALIN=[V]CST_ADEL
 SetInstance [F:FAS] With WFAS
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WFAS,"FXDASSETS")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:FAS]FAS12 = [F:FAS]LEAREF
 If fstat
  Call FSTA("FAS",WFAS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK



