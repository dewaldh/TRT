#<AdxTL>@(#)0.0.0.0 $Revision$Class Shift code
# Supervisor
## CRUD-CLASSE ## SFTSHIFT
# 2018-08-27 12:45:36 105


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File SFTSHIFT [SFTS_]

If !SILENCE : Call TRACE("2 --> Local Instance C_SFTSHIFT") From ASYRCOM : Endif
Local Instance SFTSHIFT Using C_SFTSHIFT

If !SILENCE : Call TRACE("3 --> New Instance C_SFTSHIFT") From ASYRCOM : Endif
SFTSHIFT = NewInstance C_SFTSHIFT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [SFTS_]SHF0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of SFTSHIFT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.AREAD([SFTS_]SHFCOD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("SFTSHIFT.SHFCOD ="-num$(SFTSHIFT.SHFCOD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(SFTSHIFT.AKEYS)
  Call TRACE("-"-num$(I)-":"-SFTSHIFT.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [SFTS_]
FreeGroup SFTSHIFT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(SFTSHIFT,ACLE,ASTATUS,_ETAG)
Variable Instance SFTSHIFT Using C_SFTSHIFT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _SHFCOD(6)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SHFCOD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File SFTSHIFT [SFTS]
Default File [F:SFTS]
Read [F:SFTS]SHF0 = [L]_SHFCOD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:SFTS]UPDTICK)>0
 [L]_ETAG = num$([F:SFTS]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(SFTSHIFT,ACLE,ASTATUS)
Variable Instance SFTSHIFT Using C_SFTSHIFT
Value Char ACLE
Variable Integer ASTATUS
Local Char _SHFCOD(6)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SHFCOD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.AREAD([L]_SHFCOD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(SFTSHIFT,_SHFCOD,ASTATUS)
Variable Instance SFTSHIFT Using C_SFTSHIFT
Value Char _SHFCOD
Variable Integer ASTATUS

If SFTSHIFT = null : End : Endif

Gosub AVARIABLES From WMC00SFTSHIFT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If SFTSHIFT.APARENT=null
 [L]A_I = SFTSHIFT.freeSnapshot
 SFTSHIFT.snapshotEnabled = 0
 SFTSHIFT.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & SFTSHIFT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If SFTSHIFT.APARENT=null
 SFTSHIFT.snapshotEnabled = 1
 SFTSHIFT.setAccessorEnabled = 1
Endif
LogicClose File [SFTS]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT._ACTION_PARAM("AREAD_BEFORE",[L]_SHFCOD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:SFTS]
Read [F:SFTS]SHF0 = [L]_SHFCOD
If fstat
[L]A_ERROR = [L]_SHFCOD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(SFTSHIFT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:SFTS]AUUID)>0 & [F:SFTS]AUUID=NullUuid
 [F:SFTS]AUUID = getUuid
Endif
SetInstance SFTSHIFT With [F:SFTS]
SFTSHIFT.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To 10
 If ([F:SFTS]BRKCOD([L]A_I-1)<>"" or [F:SFTS]BRKSTR([L]A_I-1)<>"" or [F:SFTS]BRKEND([L]A_I-1)<>"" or [F:SFTS]BRKDUR([L]A_I-1)<>0
& or [F:SFTS]DURCHECKB([L]A_I-1)<>0)
  [L]A_NEWCOL += 1
  SFTSHIFT.BREAKS(A_NEWCOL) = NewInstance  C_SFTSHIFT_BREAKS(SFTSHIFT.ACTX,NullUuid,[L]A_I,SFTSHIFT,"BREAKS") AllocGroup SFTSHIFT
  SFTSHIFT.BREAKS(A_NEWCOL).BRKCOD = [F:SFTS]BRKCOD([L]A_I-1)
  SFTSHIFT.BREAKS(A_NEWCOL).BRKSTR = [F:SFTS]BRKSTR([L]A_I-1)
  SFTSHIFT.BREAKS(A_NEWCOL).BRKEND = [F:SFTS]BRKEND([L]A_I-1)
  SFTSHIFT.BREAKS(A_NEWCOL).BRKDUR = [F:SFTS]BRKDUR([L]A_I-1)
  SFTSHIFT.BREAKS(A_NEWCOL).DURCHECKB = [F:SFTS]DURCHECKB([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.BREAKS(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet SFTSHIFT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="SFTSHIFT" & ZONE="SHFDES" & IDENT1=SFTSHIFT.SHFCOD & IDENT2=""
 Call ASETTEXTRA(SFTSHIFT.AXX,SFTSHIFT.AllocGrp(),"SHFDES",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 SFTSHIFT.AXX(maxtab(SFTSHIFT.AXX)).FLG = 0
Next AXX
If !len(fmet SFTSHIFT.AGETTEXTRA("SHFDES"))
 Call ASETTEXTRA(SFTSHIFT.AXX,SFTSHIFT.AllocGrp(),"SHFDES",
& fmet SFTSHIFT.AGETTEXTRALAN("SHFDES",SFTSHIFT.ACTX.AFOLD.ALANGDEF),
& SFTSHIFT.ACTX.LAN) From ASYRSUB
Endif

Return



