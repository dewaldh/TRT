#<AdxTL>@(#)0.0.0.0 $Revision$Class Customer pricing parameters
# Supervisor
## CRUD-CLASSE ## SPRICCONF
# 2018-08-27 13:32:44 669


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File SPRICCONF [SPC_]

If !SILENCE : Call TRACE("2 --> Local Instance R_SPRICCONF") From ASYRCOM : Endif
Local Instance SPRICCONF Using R_SPRICCONF

If !SILENCE : Call TRACE("3 --> New Instance R_SPRICCONF") From ASYRCOM : Endif
SPRICCONF = NewInstance R_SPRICCONF AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [SPC_]SPC0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of SPRICCONF") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet SPRICCONF.AREAD([SPC_]PLI))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("SPRICCONF.SPC.PLI ="-num$(SPRICCONF.SPC.PLI)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(SPRICCONF.SPC.AKEYS)
  Call TRACE("-"-num$(I)-":"-SPRICCONF.SPC.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [SPC_]
FreeGroup SPRICCONF
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(SPRICCONF,ACLE,ASTATUS,_ETAG)
Variable Instance SPRICCONF Using R_SPRICCONF
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _PLI(6)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PLI = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File SPRICCONF [SPC]
Default File [F:SPC]
Read [F:SPC]SPC0 = [L]_PLI
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:SPC]UPDTICK)>0
 [L]_ETAG = num$([F:SPC]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(SPRICCONF,ACLE,ASTATUS)
Variable Instance SPRICCONF Using R_SPRICCONF
Value Char ACLE
Variable Integer ASTATUS
Local Char _PLI(6)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PLI = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SPRICCONF.AREAD([L]_PLI))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(SPRICCONF,_PLI,ASTATUS)
Variable Instance SPRICCONF Using R_SPRICCONF
Value Char _PLI
Variable Integer ASTATUS

If SPRICCONF = null : End : Endif

Gosub AVARIABLES From WMR00SPRICCONF
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If SPRICCONF.APARENT=null
 [L]A_I = SPRICCONF.freeSnapshot
 SPRICCONF.snapshotEnabled = 0
 SPRICCONF.setAccessorEnabled = 0
Endif

If fmet SPRICCONF.ACTX.AGETAFCRIGHT(SPRICCONF,"GESSPC",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:SPC]
Read [F:SPC]SPC0 = [L]_PLI
If fstat
[L]A_ERROR = [L]_PLI
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(SPRICCONF,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet SPRICCONF.ACTX.AGETAFCRIGHTR(SPRICCONF,"GESSPC",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet SPRICCONF.ACTX.ASTACRITROLE(SPRICCONF,[L]_PLI
& ,"SPC","SPC",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet SPRICCONF.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

SPRICCONF.SPC.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet SPRICCONF.SPC.AREAD([L]_PLI))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet SPRICCONF.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & SPRICCONF.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet SPRICCONF._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If SPRICCONF.APARENT=null
 SPRICCONF.snapshotEnabled = 1
 SPRICCONF.setAccessorEnabled = 1
Endif
LogicClose File [SPC]
End



