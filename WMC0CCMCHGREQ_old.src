#<AdxTL>@(#)0.0.0.0 $Revision$Class Change request
# Sage X3 supervisor
## ACLA-CLASSE ## CCMCHGREQ
# 2018-06-20 06:39:43 051

####################################################################
# Traitments
####################################################################
$_ADDTRT
this.AINF.TRT(1) = "WMCM_CCMCHGREQ"
this.AINF.TYP(1) = 1
this.AINF.PTH(1) = ""
this.AINF.TRT(2) = "CCMCRCOM_CSTD"
this.AINF.TYP(2) = 1
this.AINF.PTH(2) = ""
this.AINF.TRT(3) = "CCMCHGREQ_CSTD"
this.AINF.TYP(3) = 1
this.AINF.PTH(3) = ""
this.AINF.NBTRT = 3
Return

####################################################################
#Declaration of variables
####################################################################

$DECLARE_VAR
Local Char    ACTION(50) , CURPRO(250) , VALPRO(250) , CURQRY(50) , CURPTH(250)
Local Char    AMETHOD(50) ,AOPERATION(50),AEVENT(50),ARULE(50)
Local Integer ALLSTAT,AISMET,ASTATUS
Return

####################################################################
# Methods of the class
####################################################################
# Fmethod Is new change req status valid
$IS_NEW_CHGREQ_STATUS_VALID
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "IS_NEW_CHGREQ_STATUS_VALID" : [L]ACTION = "IS_NEW_CHGREQ_STATUS_VALID" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Check product description
$IS_PRODUCT_DESCRIPTION_VALID
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "IS_PRODUCT_DESCRIPTION_VALID" : [L]ACTION = "IS_PRODUCT_DESCRIPTION_VALID" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Duplicate product
$DUPLICATE_PRODUCT
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "DUPLICATE_PRODUCT" : [L]ACTION = "DUPLICATE_PRODUCT" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Delete redundant (blank) rows
$DELETE_REDUNDANT_ROWS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "DELETE_REDUNDANT_ROWS" : [L]ACTION = "DELETE_REDUNDANT_ROWS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Implement status change
$IMPLEMENT
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "IMPLEMENT" : [L]ACTION = "IMPLEMENT" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Determine implement status
$DETERMINE_IMPLEMENT_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "DETERMINE_IMPLEMENT_STATUS" : [L]ACTION = "DETERMINE_IMPLEMENT_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod High level implement status
$HIGH_LEVEL_IMPLEMENT_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "HIGH_LEVEL_IMPLEMENT_STATUS" : [L]ACTION = "HIGH_LEVEL_IMPLEMENT_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Sales order implement status
$SALES_ORDER_IMPLEMENT_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "SALES_ORDER_IMPLEMENT_STATUS" : [L]ACTION = "SALES_ORDER_IMPLEMENT_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Sales quotes implement status
$SALES_QUOTE_IMPLEMENT_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "SALES_QUOTE_IMPLEMENT_STATUS" : [L]ACTION = "SALES_QUOTE_IMPLEMENT_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Purchase implement status
$PURCHASE_IMPLEMENT_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "PURCHASE_IMPLEMENT_STATUS" : [L]ACTION = "PURCHASE_IMPLEMENT_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Work order implement status
$WORK_ORDER_IMPLEMENT_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "WORK_ORDER_IMPLEMENT_STATUS" : [L]ACTION = "WORK_ORDER_IMPLEMENT_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Subcontract implement status
$SUB_CONTRACT_IMPLEMENT_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "SUB_CONTRACT_IMPLEMENT_STATUS" : [L]ACTION = "SUB_CONTRACT_IMPLEMENT_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Check user site
$CHECK_USER_SITE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "CHECK_USER_SITE" : [L]ACTION = "CHECK_USER_SITE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Purchase request implement
$PURCHASE_REQ_IMPLEMENT_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "PURCHASE_REQ_IMPLEMENT_STATUS" : [L]ACTION = "PURCHASE_REQ_IMPLEMENT_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Forecast implement status
$FORECAST_IMPLEMENT_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "FORECAST_IMPLEMENT_STATUS" : [L]ACTION = "FORECAST_IMPLEMENT_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Stock implement status
$STOCK_IMPLEMENT_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "STOCK_IMPLEMENT_STATUS" : [L]ACTION = "STOCK_IMPLEMENT_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod BOM implement status
$BOM_IMPLEMENT_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "BOM_IMPLEMENT_STATUS" : [L]ACTION = "BOM_IMPLEMENT_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Routing implement status
$ROUTING_IMPLEMENT_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "ROUTING_IMPLEMENT_STATUS" : [L]ACTION = "ROUTING_IMPLEMENT_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Create impact analysis
$CREATE_IMPACT_ANALYSIS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "CREATE_IMPACT_ANALYSIS" : [L]ACTION = "CREATE_IMPACT_ANALYSIS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Version management
$IS_PRODUCT_VERSION_MANAGED
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "IS_PRODUCT_VERSION_MANAGED" : [L]ACTION = "IS_PRODUCT_VERSION_MANAGED" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Send email
$SEND_EMAIL
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "SEND_EMAIL" : [L]ACTION = "SEND_EMAIL" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Get user email
$GET_USER_EMAIL
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "GET_USER_EMAIL" : [L]ACTION = "GET_USER_EMAIL" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Build email subject and body
$BUILD_EMAIL
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "BUILD_EMAIL" : [L]ACTION = "BUILD_EMAIL" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Build email URL
$BUILD_EMAIL_URL
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "BUILD_EMAIL_URL" : [L]ACTION = "BUILD_EMAIL_URL" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Check active change request
$CHECK_ACTIVE_CHGREQ_EXISTS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "CHECK_ACTIVE_CHGREQ_EXISTS" : [L]ACTION = "CHECK_ACTIVE_CHGREQ_EXISTS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

####################################################################
# Operations of the class
####################################################################
# Fmethod Write into the log file
$WRITELOG
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "WRITELOG" : [L]ACTION = "WRITELOG" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Update implement status
$UPDATE_IMPLEMENT_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "UPDATE_IMPLEMENT_STATUS" : [L]ACTION = "UPDATE_IMPLEMENT_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return


####################################################################
# Global methods & standards
####################################################################
$AINIT
Gosub DECLARE_VAR
[L]AEVENT = "AINIT" : [L]ACTION = "AINIT" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# AERRORS
####################################################################

$_AERROR
Gosub DECLARE_VAR From WMC0CCMCHGREQ
Local Integer ALLSTAT
Call ALLERRORS(this,_CTX,_SUPP) From ASYRSUB
For AINDCLA=1 To maxtab(this.CCMCRNOTES)
 If this.CCMCRNOTES(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRNOTES(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMCRORIGI)
 If this.CCMCRORIGI(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRORIGI(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMCRORIGC)
 If this.CCMCRORIGC(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRORIGC(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMCRORIGS)
 If this.CCMCRORIGS(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRORIGS(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMCRORIGE)
 If this.CCMCRORIGE(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRORIGE(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMAPPROVER)
 If this.CCMAPPROVER(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMAPPROVER(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMIASTAD)
 If this.CCMIASTAD(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMIASTAD(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMIASTAM)
 If this.CCMIASTAM(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMIASTAM(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMIASTAS)
 If this.CCMIASTAS(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMIASTAS(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
Return

####################################################################
# Delete all errors
####################################################################

$_ADELERRORS
Gosub DECLARE_VAR From WMC0CCMCHGREQ
Local Integer ALLSTAT
[L]ASTATUS = fmet this.ADELETEERROR([L]_APARAM)
For AINDCLA=1 To maxtab(this.CCMCRNOTES)
 If this.CCMCRNOTES(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRNOTES(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMCRORIGI)
 If this.CCMCRORIGI(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRORIGI(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMCRORIGC)
 If this.CCMCRORIGC(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRORIGC(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMCRORIGS)
 If this.CCMCRORIGS(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRORIGS(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMCRORIGE)
 If this.CCMCRORIGE(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRORIGE(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMAPPROVER)
 If this.CCMAPPROVER(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMAPPROVER(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMIASTAD)
 If this.CCMIASTAD(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMIASTAD(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMIASTAM)
 If this.CCMIASTAM(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMIASTAM(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMIASTAS)
 If this.CCMIASTAS(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMIASTAS(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
Return

####################################################################
# _ASEARCHINFOS
####################################################################

$_ASEARCHINFOS
Gosub DECLARE_VAR From WMC0CCMCHGREQ
ASTATUS= func ASYRSUB.ASEARCHINFOS(this,[L]AINS_ORI,[L]ERR_TYPE,[L]PROPERTY,[L]ASTAT,[L]SELSTAT,[L]PATH)
If [L]ERR_TYPE=[V]CST_ACURRENT : Return : Endif
For AINDCLA=1 To maxtab(this.CCMCRNOTES)
 If this.CCMCRNOTES(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRNOTES(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CCMCRNOTES('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMCRORIGI)
 If this.CCMCRORIGI(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRORIGI(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CCMCRORIGI('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMCRORIGC)
 If this.CCMCRORIGC(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRORIGC(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CCMCRORIGC('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMCRORIGS)
 If this.CCMCRORIGS(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRORIGS(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CCMCRORIGS('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMCRORIGE)
 If this.CCMCRORIGE(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMCRORIGE(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CCMCRORIGE('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMAPPROVER)
 If this.CCMAPPROVER(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMAPPROVER(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CCMAPPROVER('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMIASTAD)
 If this.CCMIASTAD(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMIASTAD(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CCMIASTAD('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMIASTAM)
 If this.CCMIASTAM(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMIASTAM(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CCMIASTAM('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CCMIASTAS)
 If this.CCMIASTAS(AINDCLA)<>null
  [L]ASTATUS = fmet this.CCMIASTAS(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CCMIASTAS('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
Return

####################################################################
# AGETERRORSFROM
####################################################################

$_AGETERRORSFROM
Gosub DECLARE_VAR From WMC0CCMCHGREQ
If AINS_FROM<>null
 [L]ASTATUS = fmet AINS_FROM.ASEARCHINFOS( [V]CST_ALL, "", [V]CST_AFATAL, 0)
Endif
Call AGETERRORSFROM(AINS_FROM,this,ENVIRONNEMENT) From ASYRSUB
Return

####################################################################
# RICH MEDIA
####################################################################
$AREAD_CLB
Case [L]_PRONAME
 When "CRDESC"
  If fmet this.AGETATTRIBUTE("CRDESC","$isLoaded")<>"true"
   Gosub READ_CLB_CRDESC
  Else
   [L]_CLB = this.CRDESC
  Endif
  If [L]_CNT=''
   [L]ASTATUS = fmet this.ASETATTRIBUTE("CRDESC","$contentType","text/rtf")
   [L]_CNT = "text/rtf"
  Endif
 When "REJDESC"
  If fmet this.AGETATTRIBUTE("REJDESC","$isLoaded")<>"true"
   Gosub READ_CLB_REJDESC
  Else
   [L]_CLB = this.REJDESC
  Endif
  If [L]_CNT=''
   [L]ASTATUS = fmet this.ASETATTRIBUTE("REJDESC","$contentType","text/rtf")
   [L]_CNT = "text/rtf"
  Endif
Endcase
Return

$READ_CLB_CRDESC
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File CCMCRDESC [WCCMCRD]
Else
Local File =this.ACTX.AFOLDER+".CCMCRDESC" [WCCMCRD]
Endif
Raz [L]_CLB
Raz [L]_CNT
Gosub DECODE_KEYVAL From ASYRLOB
[F:WCCMCRD]CRID = [L]_KEYVALTAB(1)
Read [WCCMCRD] =
If !fstat
 [L]_CLB = [F:WCCMCRD]CRDESC
Endif
LogicClose File [WCCMCRD]
Return

$READ_EXI_CRDESC
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File CCMCRDESC [WCCMCRD]
Else
Local File =this.ACTX.AFOLDER+".CCMCRDESC" [WCCMCRD]
Endif
Local Tinyint _EXI : [L]_EXI=1
[F:WCCMCRD]CRID = this.CRID
Look [WCCMCRD] =
If fstat
 [L]_EXI=0
Endif
LogicClose File [WCCMCRD]
Return

$READ_CLB_REJDESC
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File CCMREJDSC [WCCMREJ]
Else
Local File =this.ACTX.AFOLDER+".CCMREJDSC" [WCCMREJ]
Endif
Raz [L]_CLB
Raz [L]_CNT
Gosub DECODE_KEYVAL From ASYRLOB
[F:WCCMREJ]CRID = [L]_KEYVALTAB(1)
Read [WCCMREJ] =
If !fstat
 [L]_CLB = [F:WCCMREJ]REJDESC
Endif
LogicClose File [WCCMREJ]
Return

$READ_EXI_REJDESC
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File CCMREJDSC [WCCMREJ]
Else
Local File =this.ACTX.AFOLDER+".CCMREJDSC" [WCCMREJ]
Endif
Local Tinyint _EXI : [L]_EXI=1
[F:WCCMREJ]CRID = this.CRID
Look [WCCMREJ] =
If fstat
 [L]_EXI=0
Endif
LogicClose File [WCCMREJ]
Return

####################################################################
$ACONTROL
####################################################################
Gosub DECLARE_VAR
[L]AEVENT = "ACONTROL" : [L]ACTION = "ACONTROL" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# ADELLINE
####################################################################
$ADELLINE
Case _ACOLLECTION
 When "CCMAPPROVER"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CCMAPPROVER",this)
 When "CCMCRNOTES"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CCMCRNOTES",this)
 When "CCMCRORIGC"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CCMCRORIGC",this)
 When "CCMCRORIGE"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CCMCRORIGE",this)
 When "CCMCRORIGI"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CCMCRORIGI",this)
 When "CCMCRORIGS"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CCMCRORIGS",this)
 When "CCMIASTAD"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CCMIASTAD",this)
 When "CCMIASTAM"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CCMIASTAM",this)
 When "CCMIASTAS"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CCMIASTAS",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# ADDLINE
####################################################################
$ADDLINE
Case _ACOLLECTION
 When "CCMAPPROVER"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CCMAPPROVER","C_CCMAPPROVER",this)
 When "CCMCRNOTES"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CCMCRNOTES","C_CCMCRNOTES",this)
 When "CCMCRORIGC"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CCMCRORIGC","C_CCMCRORIGC",this)
 When "CCMCRORIGE"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CCMCRORIGE","C_CCMCRORIGE",this)
 When "CCMCRORIGI"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CCMCRORIGI","C_CCMCRORIGI",this)
 When "CCMCRORIGS"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CCMCRORIGS","C_CCMCRORIGS",this)
 When "CCMIASTAD"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CCMIASTAD","C_CCMIASTAD",this)
 When "CCMIASTAM"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CCMIASTAM","C_CCMIASTAM",this)
 When "CCMIASTAS"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CCMIASTAS","C_CCMIASTAS",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETDIM
####################################################################
$AGETDIM
Case _ACOLLECTION
 When "CCMAPPROVER"
  [L]_ALINE = 0
 When "CCMCRNOTES"
  [L]_ALINE = 0
 When "CCMCRORIGC"
  [L]_ALINE = 0
 When "CCMCRORIGE"
  [L]_ALINE = 0
 When "CCMCRORIGI"
  [L]_ALINE = 0
 When "CCMCRORIGS"
  [L]_ALINE = 0
 When "CCMIASTAD"
  [L]_ALINE = 0
 When "CCMIASTAM"
  [L]_ALINE = 0
 When "CCMIASTAS"
  [L]_ALINE = 0
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETMIN
####################################################################
$AGETMIN
Case _ACOLLECTION
 When "CCMAPPROVER"
  [L]_ALINE = 1
 When "CCMCRNOTES"
  [L]_ALINE = 1
 When "CCMCRORIGC"
  [L]_ALINE = 1
 When "CCMCRORIGE"
  [L]_ALINE = 1
 When "CCMCRORIGI"
  [L]_ALINE = 1
 When "CCMCRORIGS"
  [L]_ALINE = 1
 When "CCMIASTAD"
  [L]_ALINE = 1
 When "CCMIASTAM"
  [L]_ALINE = 1
 When "CCMIASTAS"
  [L]_ALINE = 1
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# _ALOAD_KEYS
####################################################################
$_ALOAD_KEYS
this.AKEYS(1) = "CRID"
Return

####################################################################
# _ADELINSTANCE
####################################################################
$_ADELINSTANCE
[L]ASTATUS = func ASYRSUBTAB._ADELINSTANCE(this)
Return

####################################################################
# ADDINSTANCE_BOUND
####################################################################
$ADDINSTANCE_BOUND
Return



