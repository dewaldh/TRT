#<AdxTL>@(#)0.0.0.0 $Revision$
$ACTION

Case ACTION
  When "IMP_OUVRE"     : Gosub IMP_OUVRE
  When "IMP_VERIF_CRE" : Gosub IMP_VERIF_CRE
  When "IMP_VERIF_MOD" : Gosub IMP_VERIF_MOD
Endcase
Return


$IMP_OUVRE
Local Integer PLBSEQ
PLBSEQ = 10

Return


$IMP_VERIF_CRE

Return

$IMP_VERIF_MOD


Global Instance GZINSPJMBUD Using C_PJMBUD
ANOWRITE = 1


Local Integer IRET
Local Char SNUMERO(20)

  If (GZINSPJMBUD <> null) : FreeGroup GZINSPJMBUD : Endif
  GZINSPJMBUD = NewInstance C_PJMBUD AllocGroup null

  #You can use the instruction SetInstance which will set propertie's values from field's values for propertie's names that are identical to a field's name of the [F] file.
  #SetInstance GZINSPJMBUD With [F:PJBU]
GZINSPJMBUD.PBUFCY = "002-1"
GZINSPJMBUD.OPPNUM = "AD0000000000088"
GZINSPJMBUD.PBUCOD = "000"
#GZINSPJMBUD.PBUDATH = ""
#GZINSPJMBUD.PBUDATS = ""
#GZINSPJMBUD.PBUDATO = ""
GZINSPJMBUD.PBUPAE = ""
GZINSPJMBUD.PBUSTATE = 2
GZINSPJMBUD.PBUELE = 2
GZINSPJMBUD.PBUIMP = 2
#GZINSPJMBUD.PBUSTARTDT = ""
#GZINSPJMBUD.PBUENDDT = ""
GZINSPJMBUD.KEYCONCAT = "AD0000000000088!!000"

Call NUMERO("PBU","",date$,"",SNUMERO,IRET) From SUBANM

GZINSPJMBUD.PBUNUM = SNUMERO


#Infbox GZINSPJMBUD.PBUFCY


If [PJLB]PBUCOD <> ""
 Local Integer INDEX
  INDEX = fmet GZINSPJMBUD.ADDLINE("BUDLIG", [V]CST_ALASTPOS)
  If (INDEX = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSPJMBUD)
    GOK = 0
    GERR = 1
    Return
  Endif

  # Use the SetInstance
  #SetInstance GZINSPJMBUD.BUDLIG(INDEX) With [F:PJLB]
  #If (GERR = 1) : Return : Endif
  #Infbox GZINSPJMBUD.BUDLIG(INDEX).PBUCOD
GZINSPJMBUD.BUDLIG(INDEX).OPPNUM = "AD0000000000088"
GZINSPJMBUD.BUDLIG(INDEX).PBUCOD = "000"
GZINSPJMBUD.BUDLIG(INDEX).PLBSEQ = 10
GZINSPJMBUD.BUDLIG(INDEX).PCCCOD = "TEST"
GZINSPJMBUD.BUDLIG(INDEX).PLBFCY = "002-1"
GZINSPJMBUD.BUDLIG(INDEX).PLBDESAXX = ""
GZINSPJMBUD.BUDLIG(INDEX).PLBU = ""
GZINSPJMBUD.BUDLIG(INDEX).PLBQTY = 0
GZINSPJMBUD.BUDLIG(INDEX).PLBPRI = 0
GZINSPJMBUD.BUDLIG(INDEX).PLBAMT = 1200
GZINSPJMBUD.BUDLIG(INDEX).PLBDATBUD = date$
GZINSPJMBUD.BUDLIG(INDEX).PLBFLGREM = 1
GZINSPJMBUD.BUDLIG(INDEX).PLBQTYREM = 0
GZINSPJMBUD.BUDLIG(INDEX).PLBPRIREM = 0
#GZINSPJMBUD.BUDLIG(INDEX).PLBDATREM =
GZINSPJMBUD.BUDLIG(INDEX).PLBQTYEST = 0
GZINSPJMBUD.BUDLIG(INDEX).PLBAMTEST = 1200
GZINSPJMBUD.BUDLIG(INDEX).PLBQTYREC = 0
GZINSPJMBUD.BUDLIG(INDEX).PLBAMTREC = 1000
GZINSPJMBUD.BUDLIG(INDEX).CUR = "AUD"



Local Integer INDEX1
  INDEX1 = fmet GZINSPJMBUD.ADDLINE("PIMPL", [V]CST_ALASTPOS)
  If (INDEX1 = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSPJMBUD)
    GOK = 0
    GERR = 1
    Return
  Endif


# Use the SetInstance
  #SetInstance GZINSPJMBUD.PIMPL(INDEX) With [F:PJLB]
  #If (GERR = 1) : Return : Endif
  #Infbox GZINSPJMBUD.PIMPL(INDEX).PBUCOD
  GZINSPJMBUD.PIMPL(INDEX).PIMNUM = GZINSPJMBUD.BUDLIG(INDEX).OPPNUM+"!!"+GZINSPJMBUD.BUDLIG(INDEX).PBUCOD
  GZINSPJMBUD.PIMPL(INDEX).PIMDESAXX = ""
  GZINSPJMBUD.PIMPL(INDEX).OPPNUM = GZINSPJMBUD.BUDLIG(INDEX).OPPNUM
  GZINSPJMBUD.PIMPL(INDEX).PBUCOD = GZINSPJMBUD.BUDLIG(INDEX).PBUCOD
  GZINSPJMBUD.PIMPL(INDEX).TASCOD = ""
  GZINSPJMBUD.PIMPL(INDEX).FCY = GZINSPJMBUD.BUDLIG(INDEX).PLBFCY
  GZINSPJMBUD.PIMPL(INDEX).PIMTYP = 2
  GZINSPJMBUD.PIMPL(INDEX).PIMSTA = 2
  GZINSPJMBUD.PIMPL(INDEX).FINRSPFCY = GZINSPJMBUD.BUDLIG(INDEX).PLBFCY
  GZINSPJMBUD.PIMPL(INDEX).CPY = "002"
  GZINSPJMBUD.PIMPL(INDEX).OPPSTATE = 1
  GZINSPJMBUD.PIMPL(INDEX).PBUSTATE = 1
  GZINSPJMBUD.PIMPL(INDEX).TASSTATE = 1

  Endif






#Properties have been set, it is time to invoke the creation method of the class
  Local Integer MY_STATUS
  [L]MY_STATUS = fmet GZINSPJMBUD.AINSERT()
  If ([L]MY_STATUS >= [V]CST_AERROR)
    Call RECOVERS_ERROR_IN_CLASSIC(GZINSPJMBUD)
    If GMESSAGE = AVOID.ACHAR Then
      GMESSAGE = mess(27,6251,1)
      Infbox GMESSAGE
    Endif
  Endif

#Local Integer IRET Local Char SNUMERO(20)
#Local Integer IERROR
#Local Integer IMANUAL
#Local Char SMESSAGE(250)
#Local Char SCOMPTEUR(GLONANM)
#Local Char SNUMERO(20)
#
#If [PJBU]PBUNUM = ""
#Call NUMERO("PBU","",date$,"",SNUMERO,IRET) From SUBANM
#
##IRET = func ANM_TOOL.NUMERO("", SCOMPTEUR, [PJBU]PBUFCY, date$, "", SNUMERO, SMESSAGE)
##  If IRET = [V]CST_AERROR Then
##    [L]ASTATUS = fmet this.ASETERROR("", mess(22,7770,1) - "(" + SCOMPTEUR + ") :" - SMESSAGE, [V]CST_AERROR)
##    OK = 0
##  Endif
#  [PJBU]PBUNUM = SNUMERO
#  Rewrite [PJBU]
#Infbox num$(fstat)
#Endif
#
#If [PJLB]PBUCOD <> ""
#  Rewrite [PJLB]
#  Infbox num$(fstat)
#Endif

If GZINSPJMBUD <> null Then
    FreeGroup GZINSPJMBUD
  Endif
  Kill GZINSPJMBUD
  ANOWRITE = 0

OK = 0
GOK = 0

Return

#------------------------------------------------------------------------------------#
#Handle Classic Errors from Class
#------------------------------------------------------------------------------------#
Subprog RECOVERS_ERROR_IN_CLASSIC(GZINSPJM)

  Variable Instance GZINSPJM Using C_PJMBUD

  Local Integer NI
  Local Char SMESSAGE(type(GMESSAGE)-10)
  Local Integer MY_STATUS
  Local Integer IMESSAGE

  IMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_UPPER_MESSAGE(GZINSPJM, SMESSAGE)
  If IMESSAGE = [V]CST_AWARNING Then
    GMESSAGE = SMESSAGE
    GERR = 2
  Elsif IMESSAGE = [V]CST_AERROR or IMESSAGE = [V]CST_AFATAL Then
    GMESSAGE = SMESSAGE
    GOK = 0
    GERR = 1
  Endif

  [L]MY_STATUS = [V]CST_AOK
End

