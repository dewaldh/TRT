#<AdxTL>@(#)0.0.0.0 $Revision$Class Expense codes
# Supervisor
## CRUD-CLASSE ## TABEXPENS
# 2018-08-27 12:51:28 542


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABEXPENS [TES_]

If !SILENCE : Call TRACE("2 --> Local Instance C_TABEXPENS") From ASYRCOM : Endif
Local Instance TABEXPENS Using C_TABEXPENS

If !SILENCE : Call TRACE("3 --> New Instance C_TABEXPENS") From ASYRCOM : Endif
TABEXPENS = NewInstance C_TABEXPENS AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TES_]TES0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TABEXPENS") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TABEXPENS.AREAD([TES_]CODEXP))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TABEXPENS.CODEXP ="-num$(TABEXPENS.CODEXP)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TABEXPENS.AKEYS)
  Call TRACE("-"-num$(I)-":"-TABEXPENS.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TES_]
FreeGroup TABEXPENS
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TABEXPENS,ACLE,ASTATUS,_ETAG)
Variable Instance TABEXPENS Using C_TABEXPENS
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CODEXP(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODEXP = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File TABEXPENS [TES]
Default File [F:TES]
Read [F:TES]TES0 = [L]_CODEXP
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TES]UPDTICK)>0
 [L]_ETAG = num$([F:TES]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TABEXPENS,ACLE,ASTATUS)
Variable Instance TABEXPENS Using C_TABEXPENS
Value Char ACLE
Variable Integer ASTATUS
Local Char _CODEXP(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODEXP = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TABEXPENS.AREAD([L]_CODEXP))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TABEXPENS,_CODEXP,ASTATUS)
Variable Instance TABEXPENS Using C_TABEXPENS
Value Char _CODEXP
Variable Integer ASTATUS

If TABEXPENS = null : End : Endif

Gosub AVARIABLES From WMC00TABEXPENS
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TABEXPENS.APARENT=null
 [L]A_I = TABEXPENS.freeSnapshot
 TABEXPENS.snapshotEnabled = 0
 TABEXPENS.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & TABEXPENS.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet TABEXPENS._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If TABEXPENS.APARENT=null
 TABEXPENS.snapshotEnabled = 1
 TABEXPENS.setAccessorEnabled = 1
Endif
LogicClose File [TES]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet TABEXPENS._ACTION_PARAM("AREAD_BEFORE",[L]_CODEXP))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:TES]
Read [F:TES]TES0 = [L]_CODEXP
If fstat
[L]A_ERROR = [L]_CODEXP
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABEXPENS,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = [F:TES]ACS
If dim([F:TES]AUUID)>0 & [F:TES]AUUID=NullUuid
 [F:TES]AUUID = getUuid
Endif
SetInstance TABEXPENS With [F:TES]
TABEXPENS.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To min(20,TABEXPENS.NBRCCE)
 [L]A_NEWCOL += 1
 TABEXPENS.DIMCEN(A_NEWCOL) = NewInstance  C_TABEXPENS_DIMCEN(TABEXPENS.ACTX,NullUuid,[L]A_I,TABEXPENS,"DIMCEN") AllocGroup TABEXPENS
 TABEXPENS.DIMCEN(A_NEWCOL).DIE = [F:TES]DIE([L]A_I-1)
 TABEXPENS.DIMCEN(A_NEWCOL).CCEFLG = [F:TES]CCEFLG([L]A_I-1)
 TABEXPENS.DIMCEN(A_NEWCOL).CCE = [F:TES]CCE([L]A_I-1)
 TABEXPENS.DIMCEN(A_NEWCOL).INICCE = [F:TES]INICCE([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet TABEXPENS.DIMCEN(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet TABEXPENS.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="TABEXPENS" & ZONE="DESTRA" & IDENT1=TABEXPENS.CODEXP & IDENT2=""
 Call ASETTEXTRA(TABEXPENS.AXX,TABEXPENS.AllocGrp(),"DESTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 TABEXPENS.AXX(maxtab(TABEXPENS.AXX)).FLG = 0
Next AXX
If !len(fmet TABEXPENS.AGETTEXTRA("DESTRA"))
 Call ASETTEXTRA(TABEXPENS.AXX,TABEXPENS.AllocGrp(),"DESTRA",
& fmet TABEXPENS.AGETTEXTRALAN("DESTRA",TABEXPENS.ACTX.AFOLD.ALANGDEF),
& TABEXPENS.ACTX.LAN) From ASYRSUB
Endif
For [AXX] Where CODFIC="TABEXPENS" & ZONE="SHOTRA" & IDENT1=TABEXPENS.CODEXP & IDENT2=""
 Call ASETTEXTRA(TABEXPENS.AXX,TABEXPENS.AllocGrp(),"SHOTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 TABEXPENS.AXX(maxtab(TABEXPENS.AXX)).FLG = 0
Next AXX
If !len(fmet TABEXPENS.AGETTEXTRA("SHOTRA"))
 Call ASETTEXTRA(TABEXPENS.AXX,TABEXPENS.AllocGrp(),"SHOTRA",
& fmet TABEXPENS.AGETTEXTRALAN("SHOTRA",TABEXPENS.ACTX.AFOLD.ALANGDEF),
& TABEXPENS.ACTX.LAN) From ASYRSUB
Endif

Return



