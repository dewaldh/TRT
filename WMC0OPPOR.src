#<AdxTL>@(#)0.0.0.0 $Revision$Class Project
# Supervisor
## ACLA-CLASSE ## OPPOR
# 2019-02-19 23:12:01 776

####################################################################
# Traitments
####################################################################
$_ADDTRT
this.AINF.TRT(1) = "WMCM_OPPOR"
this.AINF.TYP(1) = 1
this.AINF.PTH(1) = ""
this.AINF.TRT(2) = "OPPOR_CSTD"
this.AINF.TYP(2) = 1
this.AINF.PTH(2) = ""
this.AINF.TRT(3) = "OPPOR_CSPE"
this.AINF.TYP(3) = 3
this.AINF.PTH(3) = ""
this.AINF.NBTRT = 3
Return

####################################################################
#Declaration of variables
####################################################################

$DECLARE_VAR
Local Char    ACTION(50) , CURPRO(250) , VALPRO(250) , CURQRY(50) , CURPTH(250)
Local Char    AMETHOD(50) ,AOPERATION(50),AEVENT(50),ARULE(50)
Local Integer ALLSTAT,AISMET,ASTATUS
Return

####################################################################
# Methods of the class
####################################################################
# Fmethod CRM project
$COM_IS_CRM_OPPOR
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "COM_IS_CRM_OPPOR" : [L]ACTION = "COM_IS_CRM_OPPOR" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod PJM project
$COM_IS_PJM_OPPOR
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "COM_IS_PJM_OPPOR" : [L]ACTION = "COM_IS_PJM_OPPOR" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Contact name load
$COM_LOAD_OPPMCNNAM
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "COM_LOAD_OPPMCNNAM" : [L]ACTION = "COM_LOAD_OPPMCNNAM" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod First contact management
$COM_MANAGE_LCM_CREATE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "COM_MANAGE_LCM_CREATE" : [L]ACTION = "COM_MANAGE_LCM_CREATE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod First contact management
$COM_MANAGE_LCM_DELETE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "COM_MANAGE_LCM_DELETE" : [L]ACTION = "COM_MANAGE_LCM_DELETE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod First contact management
$COM_MANAGE_LCM_UPDATE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "COM_MANAGE_LCM_UPDATE" : [L]ACTION = "COM_MANAGE_LCM_UPDATE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod To CRM project
$COM_PROMOTE_CRM
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "COM_PROMOTE_CRM" : [L]ACTION = "COM_PROMOTE_CRM" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod To PJM project
$COM_PROMOTE_PJM
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "COM_PROMOTE_PJM" : [L]ACTION = "COM_PROMOTE_PJM" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Index
$CPP_GET_INDEX
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "CPP_GET_INDEX" : [L]ACTION = "CPP_GET_INDEX" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Service request
$CRM_INIT_OPPOR_FROM_SRE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "CRM_INIT_OPPOR_FROM_SRE" : [L]ACTION = "CRM_INIT_OPPOR_FROM_SRE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Technical properties init.
$CRM_INIT_TECH_PROP
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "CRM_INIT_TECH_PROP" : [L]ACTION = "CRM_INIT_TECH_PROP" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Copy project
$PJM_COPY
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "PJM_COPY" : [L]ACTION = "PJM_COPY" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Technical properties init.
$PJM_INIT_TECH_PROP
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "PJM_INIT_TECH_PROP" : [L]ACTION = "PJM_INIT_TECH_PROP" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Technical properties init.
$PJM_PROPAGATE_TECH_PROP
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "PJM_PROPAGATE_TECH_PROP" : [L]ACTION = "PJM_PROPAGATE_TECH_PROP" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Reset errors
$PJM_RESET_ERRORS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "PJM_RESET_ERRORS" : [L]ACTION = "PJM_RESET_ERRORS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Index
$SBB_GET_INDEX
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "SBB_GET_INDEX" : [L]ACTION = "SBB_GET_INDEX" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Manages pre-sales step
$_CRM_ADD_STEPB
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "_CRM_ADD_STEPB" : [L]ACTION = "_CRM_ADD_STEPB" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Manages pre-sales step
$_CRM_ADD_STEPB_DATA
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "_CRM_ADD_STEPB_DATA" : [L]ACTION = "_CRM_ADD_STEPB_DATA" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Manages pre-sales step
$_CRM_DEL_STEPB
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "_CRM_DEL_STEPB" : [L]ACTION = "_CRM_DEL_STEPB" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

####################################################################
# Operations of the class
####################################################################
# Fmethod Manages pre-sales step
$CRM_ADD_STEPB
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "CRM_ADD_STEPB" : [L]ACTION = "CRM_ADD_STEPB" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Manages pre-sales step
$CRM_DEL_STEPB
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "CRM_DEL_STEPB" : [L]ACTION = "CRM_DEL_STEPB" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Automatic budget
$PJM_BUDGET_AUTOMATION
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_BUDGET_AUTOMATION" : [L]ACTION = "PJM_BUDGET_AUTOMATION" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Budget closing
$PJM_BUDGET_CLOSING
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_BUDGET_CLOSING" : [L]ACTION = "PJM_BUDGET_CLOSING" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Budget delivery
$PJM_BUDGET_DELIVERY
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_BUDGET_DELIVERY" : [L]ACTION = "PJM_BUDGET_DELIVERY" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Budget reactivation
$PJM_BUDGET_REACTIVATE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_BUDGET_REACTIVATE" : [L]ACTION = "PJM_BUDGET_REACTIVATE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Budget suspension
$PJM_BUDGET_SUSPENSION
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_BUDGET_SUSPENSION" : [L]ACTION = "PJM_BUDGET_SUSPENSION" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Break down key
$PJM_KEY_SPLIT
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_KEY_SPLIT" : [L]ACTION = "PJM_KEY_SPLIT" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Project closing
$PJM_PROJECT_CLOSING
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_PROJECT_CLOSING" : [L]ACTION = "PJM_PROJECT_CLOSING" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Project delivery
$PJM_PROJECT_DELIVERY
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_PROJECT_DELIVERY" : [L]ACTION = "PJM_PROJECT_DELIVERY" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Project launch
$PJM_PROJECT_LAUNCH
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_PROJECT_LAUNCH" : [L]ACTION = "PJM_PROJECT_LAUNCH" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Project reactivation
$PJM_PROJECT_REACTIVATE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_PROJECT_REACTIVATE" : [L]ACTION = "PJM_PROJECT_REACTIVATE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Project suspension
$PJM_PROJECT_SUSPENSION
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_PROJECT_SUSPENSION" : [L]ACTION = "PJM_PROJECT_SUSPENSION" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Saleable product automation
$PJM_SPLD_AUTOMATION
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_SPLD_AUTOMATION" : [L]ACTION = "PJM_SPLD_AUTOMATION" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Sold product list
$PJM_SPLD_SOLD
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_SPLD_SOLD" : [L]ACTION = "PJM_SPLD_SOLD" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Task closing
$PJM_TASK_CLOSING
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_TASK_CLOSING" : [L]ACTION = "PJM_TASK_CLOSING" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Task launch
$PJM_TASK_LAUNCH
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_TASK_LAUNCH" : [L]ACTION = "PJM_TASK_LAUNCH" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Plan task
$PJM_TASK_PLANNED
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_TASK_PLANNED" : [L]ACTION = "PJM_TASK_PLANNED" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Task reactivation
$PJM_TASK_REACTIVATE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_TASK_REACTIVATE" : [L]ACTION = "PJM_TASK_REACTIVATE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Allocation
$PJM_TASK_RITT_ALLOCATION
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_TASK_RITT_ALLOCATION" : [L]ACTION = "PJM_TASK_RITT_ALLOCATION" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Planning
$PJM_TASK_RITT_SOQQTY
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_TASK_RITT_SOQQTY" : [L]ACTION = "PJM_TASK_RITT_SOQQTY" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Close operation
$PJM_TASK_RTKO_CLOSING
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_TASK_RTKO_CLOSING" : [L]ACTION = "PJM_TASK_RTKO_CLOSING" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Reactivate operation
$PJM_TASK_RTKO_REACTIVATE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_TASK_RTKO_REACTIVATE" : [L]ACTION = "PJM_TASK_RTKO_REACTIVATE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Suspend operation
$PJM_TASK_RTKO_SUSPENSION
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_TASK_RTKO_SUSPENSION" : [L]ACTION = "PJM_TASK_RTKO_SUSPENSION" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Task suspension
$PJM_TASK_SUSPENSION
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_TASK_SUSPENSION" : [L]ACTION = "PJM_TASK_SUSPENSION" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Time entry
$PJM_TASK_TIMEENTRY
Gosub DECLARE_VAR
[L]AISMET = [V]CST_ANO
[L]AOPERATION = "PJM_TASK_TIMEENTRY" : [L]ACTION = "PJM_TASK_TIMEENTRY" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return


####################################################################
# Global methods & standards
####################################################################
$AINIT
Gosub DECLARE_VAR
[L]AEVENT = "AINIT" : [L]ACTION = "AINIT" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# AERRORS
####################################################################

$_AERROR
Gosub DECLARE_VAR From WMC0OPPOR
Local Integer ALLSTAT
Call ALLERRORS(this,_CTX,_SUPP) From ASYRSUB
If this.CRM<>null
 [L]ASTATUS = fmet this.CRM._AERROR(_CTX,_SUPP)
Endif
If this.PJM<>null
 [L]ASTATUS = fmet this.PJM._AERROR(_CTX,_SUPP)
Endif
For AINDCLA=1 To maxtab(this.CPP)
 If this.CPP(AINDCLA)<>null
  [L]ASTATUS = fmet this.CPP(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.SBB)
 If this.SBB(AINDCLA)<>null
  [L]ASTATUS = fmet this.SBB(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
If this.PIMPL<>null
 [L]ASTATUS = fmet this.PIMPL._AERROR(_CTX,_SUPP)
Endif
For AINDCLA=1 To maxtab(this.YRMA)
 If this.YRMA(AINDCLA)<>null
  [L]ASTATUS = fmet this.YRMA(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
Return

####################################################################
# Delete all errors
####################################################################

$_ADELERRORS
Gosub DECLARE_VAR From WMC0OPPOR
Local Integer ALLSTAT
[L]ASTATUS = fmet this.ADELETEERROR([L]_APARAM)
If this.CRM<>null
 [L]ASTATUS = fmet this.CRM._ADELERRORS(_APARAM)
Endif
If this.PJM<>null
 [L]ASTATUS = fmet this.PJM._ADELERRORS(_APARAM)
Endif
For AINDCLA=1 To maxtab(this.CPP)
 If this.CPP(AINDCLA)<>null
  [L]ASTATUS = fmet this.CPP(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.SBB)
 If this.SBB(AINDCLA)<>null
  [L]ASTATUS = fmet this.SBB(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
If this.PIMPL<>null
 [L]ASTATUS = fmet this.PIMPL._ADELERRORS(_APARAM)
Endif
For AINDCLA=1 To maxtab(this.YRMA)
 If this.YRMA(AINDCLA)<>null
  [L]ASTATUS = fmet this.YRMA(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
Return

####################################################################
# _ASEARCHINFOS
####################################################################

$_ASEARCHINFOS
Gosub DECLARE_VAR From WMC0OPPOR
ASTATUS= func ASYRSUB.ASEARCHINFOS(this,[L]AINS_ORI,[L]ERR_TYPE,[L]PROPERTY,[L]ASTAT,[L]SELSTAT,[L]PATH)
If [L]ERR_TYPE=[V]CST_ACURRENT : Return : Endif
If this.CRM<>null
 [L]ASTATUS = fmet this.CRM._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CRM')
Endif
If this.PJM<>null
 [L]ASTATUS = fmet this.PJM._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'PJM')
Endif
For AINDCLA=1 To maxtab(this.CPP)
 If this.CPP(AINDCLA)<>null
  [L]ASTATUS = fmet this.CPP(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CPP('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.SBB)
 If this.SBB(AINDCLA)<>null
  [L]ASTATUS = fmet this.SBB(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'SBB('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
If this.PIMPL<>null
 [L]ASTATUS = fmet this.PIMPL._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'PIMPL')
Endif
For AINDCLA=1 To maxtab(this.YRMA)
 If this.YRMA(AINDCLA)<>null
  [L]ASTATUS = fmet this.YRMA(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YRMA('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
Return

####################################################################
# AGETERRORSFROM
####################################################################

$_AGETERRORSFROM
Gosub DECLARE_VAR From WMC0OPPOR
If AINS_FROM<>null
 [L]ASTATUS = fmet AINS_FROM.ASEARCHINFOS( [V]CST_ALL, "", [V]CST_AFATAL, 0)
Endif
Call AGETERRORSFROM(AINS_FROM,this,ENVIRONNEMENT) From ASYRSUB
Return

####################################################################
$ACONTROL
####################################################################
Gosub DECLARE_VAR
[L]AEVENT = "ACONTROL" : [L]ACTION = "ACONTROL" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# ADELLINE
####################################################################
$ADELLINE
Case _ACOLLECTION
 When "CPP"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CPP",this)
 When "CRM"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CRM",this)
 When "PIMPL"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"PIMPL",this)
 When "PJM"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"PJM",this)
 When "SBB"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"SBB",this)
 When "YRMA"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YRMA",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# ADDLINE
####################################################################
$ADDLINE
Case _ACOLLECTION
 When "CPP"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CPP","C_OPPORCPP",this)
 When "CRM"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CRM","C_OPPORCRM",this)
 When "PIMPL"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"PIMPL","C_PIMPL",this)
 When "PJM"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"PJM","C_OPPORPJM",this)
 When "SBB"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"SBB","C_OPPORSBB",this)
 When "YRMA"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YRMA","C_YRMA",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETDIM
####################################################################
$AGETDIM
Case _ACOLLECTION
 When "CPP"
  [L]_ALINE = 0
 When "CRM"
  [L]_ALINE = 1
 When "PIMPL"
  [L]_ALINE = 1
 When "PJM"
  [L]_ALINE = 1
 When "SBB"
  [L]_ALINE = 0
 When "YRMA"
  [L]_ALINE = 0
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETMIN
####################################################################
$AGETMIN
Case _ACOLLECTION
 When "CPP"
  [L]_ALINE = 1
 When "CRM"
  [L]_ALINE = 1
 When "PIMPL"
  [L]_ALINE = 2
 When "PJM"
  [L]_ALINE = 1
 When "SBB"
  [L]_ALINE = 1
 When "YRMA"
  [L]_ALINE = 1
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# _ALOAD_KEYS
####################################################################
$_ALOAD_KEYS
this.AKEYS(1) = "OPPNUM"
Return

####################################################################
# _ADELINSTANCE
####################################################################
$_ADELINSTANCE
[L]ASTATUS = func ASYRSUBTAB._ADELINSTANCE(this)
Return

####################################################################
# ADDINSTANCE_BOUND
####################################################################
$ADDINSTANCE_BOUND
this.PIMPL(1) = NewInstance C_PIMPL(this.ACTX,NullUuid,1,this,"PIMPL") AllocGroup this
this.PIMPL(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.PIMPL(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
Return



