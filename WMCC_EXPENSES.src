#<AdxTL>@(#)0.0.0.0 $Revision$Class Expense
# Supervisor
## CRUD-CLASSE ## EXPENSES
# 2018-08-27 12:31:13 105


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(EXPENSES,ASTATUS)
Variable Instance EXPENSES Using C_EXPENSES
Variable Integer ASTATUS

If EXPENSES = null : End : Endif

Gosub _AVARIABLES From WMC00EXPENSES

[L]A_STRSITE = EXPENSES.FCY
[L]A_STRACC = ""
Gosub AINSERT_EXPENSES

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(EXPENSES,ASTATUS)
Variable Instance EXPENSES Using C_EXPENSES
Variable Integer ASTATUS

If EXPENSES = null : End : Endif

Gosub AVARIABLES From WMC00EXPENSES
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = EXPENSES.FCY
[L]A_STRACC = ""
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_EXPENSES
Else
 Gosub AINSERT_EXPENSES
Endif

Gosub _AINSERT_AFTER
[L]A_I = EXPENSES.freeSnapshot
EXPENSES.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet EXPENSES._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet EXPENSES._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet EXPENSES._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If EXPENSES.ASTALIN = [V]CST_ANEWDEL : Return : Endif
EXPENSES.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.CODEXPENS)
 If EXPENSES.CODEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.CODEXPENS([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.DIMCEN)
 If EXPENSES.DIMCEN([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.DIMCEN([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.LNKRATLED)
 If EXPENSES.LNKRATLED([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.LNKRATLED([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.RATEXPENS)
 If EXPENSES.RATEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.RATEXPENS([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

For [L]A_I=1 To maxtab(EXPENSES.CODEXPENS)
 If EXPENSES.CODEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.CODEXPENS([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.DIMCEN)
 If EXPENSES.DIMCEN([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.DIMCEN([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.LNKRATLED)
 If EXPENSES.LNKRATLED([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.LNKRATLED([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.RATEXPENS)
 If EXPENSES.RATEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.RATEXPENS([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_EXPENSES
Trbegin [F:EXS]
 Gosub AINSERT_EXPENSES
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_EXPENSES
Raz [F:EXS]
[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

If find( EXPENSES.ASTALIN,[V]CST_ANEW,[V]CST_ADEL) | 
& (find( EXPENSES.ASTALIN,[V]CST_AUPD) & 
& fmet EXPENSES.AGETATTRIBUTE("BEXS","$isLoaded")="true")
[L]ASTATUS = func WMC00EXPENSES._MAJSQL_EXPENSES_BEXS(EXPENSES,EXPENSES.BEXS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
[L]ASTATUS = max([L]ASTATUS,func WMC00EXPENSES._MAJSQL_EXPENSES(EXPENSES))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If EXPENSES.snapshotEnabled=1
 [L]A_RETIK = EXPENSES.revertUpdTick
Endif
[L]ASTATUS = max(fmet EXPENSES.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(EXPENSES.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 EXPENSES.ASTALIN = [V]CST_ALL
Endif
For [L]A_I=1 To maxtab(EXPENSES.CODEXPENS)
 If EXPENSES.CODEXPENS([L]A_I)<>null
  If EXPENSES.CODEXPENS([L]A_I).ASTALIN=[V]CST_ADEL or EXPENSES.CODEXPENS([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance EXPENSES.CODEXPENS([L]A_I)
   EXPENSES.CODEXPENS([L]A_I) = null
  Elsif EXPENSES.CODEXPENS([L]A_I).ASTALIN <> [V]CST_ALL
   EXPENSES.CODEXPENS([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
For [L]A_I=1 To maxtab(EXPENSES.DIMCEN)
 If EXPENSES.DIMCEN([L]A_I)<>null
  If EXPENSES.DIMCEN([L]A_I).ASTALIN=[V]CST_ADEL or EXPENSES.DIMCEN([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance EXPENSES.DIMCEN([L]A_I)
   EXPENSES.DIMCEN([L]A_I) = null
  Elsif EXPENSES.DIMCEN([L]A_I).ASTALIN <> [V]CST_ALL
   EXPENSES.DIMCEN([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
For [L]A_I=1 To maxtab(EXPENSES.LNKRATLED)
 If EXPENSES.LNKRATLED([L]A_I)<>null
  If EXPENSES.LNKRATLED([L]A_I).ASTALIN=[V]CST_ADEL or EXPENSES.LNKRATLED([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance EXPENSES.LNKRATLED([L]A_I)
   EXPENSES.LNKRATLED([L]A_I) = null
  Elsif EXPENSES.LNKRATLED([L]A_I).ASTALIN <> [V]CST_ALL
   EXPENSES.LNKRATLED([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
For [L]A_I=1 To maxtab(EXPENSES.RATEXPENS)
 If EXPENSES.RATEXPENS([L]A_I)<>null
  If EXPENSES.RATEXPENS([L]A_I).ASTALIN=[V]CST_ADEL or EXPENSES.RATEXPENS([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance EXPENSES.RATEXPENS([L]A_I)
   EXPENSES.RATEXPENS([L]A_I) = null
  Elsif EXPENSES.RATEXPENS([L]A_I).ASTALIN <> [V]CST_ALL
   EXPENSES.RATEXPENS([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
Return



