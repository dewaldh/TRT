#<AdxTL>@(#)0.0.0.0 $Revision$Class Suppliers
# Supervisor
## ACLA-CLASSE ## BPSUPPLIER
# 2018-08-27 12:26:26 191

####################################################################
# Traitments
####################################################################
$_ADDTRT
this.AINF.TRT(1) = "BPSUPPLIER_CSTD"
this.AINF.TYP(1) = 1
this.AINF.PTH(1) = ""
this.AINF.NBTRT = 1
Return

####################################################################
#Declaration of variables
####################################################################

$DECLARE_VAR
Local Char    ACTION(50) , CURPRO(250) , VALPRO(250) , CURQRY(50) , CURPTH(250)
Local Char    AMETHOD(50) ,AOPERATION(50),AEVENT(50),ARULE(50)
Local Integer ALLSTAT,AISMET,ASTATUS
Return

####################################################################
# Methods of the class
####################################################################
# Fmethod Miscellaneous table loading
$INIT_TSSCODADI
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "INIT_TSSCODADI" : [L]ACTION = "INIT_TSSCODADI" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return


####################################################################
# Global methods & standards
####################################################################
$AINIT
Gosub DECLARE_VAR
[L]AEVENT = "AINIT" : [L]ACTION = "AINIT" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# AERRORS
####################################################################

$_AERROR
Gosub DECLARE_VAR From WMC0BPSUPPLIER
Local Integer ALLSTAT
Call ALLERRORS(this,_CTX,_SUPP) From ASYRSUB
For AINDCLA=1 To 5
 If this.CTSSCOD(AINDCLA)<>null
  [L]ASTATUS = fmet this.CTSSCOD(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To 30
 If this.CINVDTA(AINDCLA)<>null
  [L]ASTATUS = fmet this.CINVDTA(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To 20
 If this.CDIE(AINDCLA)<>null
  [L]ASTATUS = fmet this.CDIE(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To 30
 If this.CRITCOD(AINDCLA)<>null
  [L]ASTATUS = fmet this.CRITCOD(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To 10
 If this.CRITPAR(AINDCLA)<>null
  [L]ASTATUS = fmet this.CRITPAR(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
If this.BPR<>null
 [L]ASTATUS = fmet this.BPR._AERROR(_CTX,_SUPP)
Endif
Return

####################################################################
# Delete all errors
####################################################################

$_ADELERRORS
Gosub DECLARE_VAR From WMC0BPSUPPLIER
Local Integer ALLSTAT
[L]ASTATUS = fmet this.ADELETEERROR([L]_APARAM)
For AINDCLA=1 To 5
 If this.CTSSCOD(AINDCLA)<>null
  [L]ASTATUS = fmet this.CTSSCOD(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To 30
 If this.CINVDTA(AINDCLA)<>null
  [L]ASTATUS = fmet this.CINVDTA(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To 20
 If this.CDIE(AINDCLA)<>null
  [L]ASTATUS = fmet this.CDIE(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To 30
 If this.CRITCOD(AINDCLA)<>null
  [L]ASTATUS = fmet this.CRITCOD(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To 10
 If this.CRITPAR(AINDCLA)<>null
  [L]ASTATUS = fmet this.CRITPAR(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
If this.BPR<>null
 [L]ASTATUS = fmet this.BPR._ADELERRORS(_APARAM)
Endif
Return

####################################################################
# _ASEARCHINFOS
####################################################################

$_ASEARCHINFOS
Gosub DECLARE_VAR From WMC0BPSUPPLIER
ASTATUS= func ASYRSUB.ASEARCHINFOS(this,[L]AINS_ORI,[L]ERR_TYPE,[L]PROPERTY,[L]ASTAT,[L]SELSTAT,[L]PATH)
If [L]ERR_TYPE=[V]CST_ACURRENT : Return : Endif
For AINDCLA=1 To 5
 If this.CTSSCOD(AINDCLA)<>null
  [L]ASTATUS = fmet this.CTSSCOD(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CTSSCOD('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To 30
 If this.CINVDTA(AINDCLA)<>null
  [L]ASTATUS = fmet this.CINVDTA(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CINVDTA('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To 20
 If this.CDIE(AINDCLA)<>null
  [L]ASTATUS = fmet this.CDIE(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CDIE('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To 30
 If this.CRITCOD(AINDCLA)<>null
  [L]ASTATUS = fmet this.CRITCOD(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CRITCOD('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To 10
 If this.CRITPAR(AINDCLA)<>null
  [L]ASTATUS = fmet this.CRITPAR(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CRITPAR('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
If this.BPR<>null
 [L]ASTATUS = fmet this.BPR._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'BPR')
Endif
Return

####################################################################
# AGETERRORSFROM
####################################################################

$_AGETERRORSFROM
Gosub DECLARE_VAR From WMC0BPSUPPLIER
If AINS_FROM<>null
 [L]ASTATUS = fmet AINS_FROM.ASEARCHINFOS( [V]CST_ALL, "", [V]CST_AFATAL, 0)
Endif
Call AGETERRORSFROM(AINS_FROM,this,ENVIRONNEMENT) From ASYRSUB
Return

####################################################################
# RICH MEDIA
####################################################################
$AREAD_CLB
Case [L]_PRONAME
 When "CLAORDTEX"
  If fmet this.AGETATTRIBUTE("CLAORDTEX","$isLoaded")<>"true"
   Gosub READ_CLB_CLAORDTEX
  Else
   [L]_CLB = this.CLAORDTEX
  Endif
  If [L]_CNT=''
   [L]ASTATUS = fmet this.ASETATTRIBUTE("CLAORDTEX","$contentType","text/rtf")
   [L]_CNT = "text/rtf"
  Endif
 When "CLARTNTEX"
  If fmet this.AGETATTRIBUTE("CLARTNTEX","$isLoaded")<>"true"
   Gosub READ_CLB_CLARTNTEX
  Else
   [L]_CLB = this.CLARTNTEX
  Endif
  If [L]_CNT=''
   [L]ASTATUS = fmet this.ASETATTRIBUTE("CLARTNTEX","$contentType","text/rtf")
   [L]_CNT = "text/rtf"
  Endif
Endcase
Return

$READ_CLB_CLAORDTEX
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File TEXCLOB [WTXC]
Else
Local File =this.ACTX.AFOLDER+".TEXCLOB" [WTXC]
Endif
Raz [L]_CLB
Raz [L]_CNT
Gosub DECODE_KEYVAL From ASYRLOB
[F:WTXC]CODE = [L]_KEYVALTAB(1)
Read [WTXC] =
If !fstat
 [L]_CLB = [F:WTXC]TEXTE
Endif
LogicClose File [WTXC]
Return

$READ_EXI_CLAORDTEX
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File TEXCLOB [WTXC]
Else
Local File =this.ACTX.AFOLDER+".TEXCLOB" [WTXC]
Endif
Local Tinyint _EXI : [L]_EXI=1
[F:WTXC]CODE = this.ORDTEX
Look [WTXC] =
If fstat
 [L]_EXI=0
Endif
LogicClose File [WTXC]
Return

$READ_CLB_CLARTNTEX
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File TEXCLOB [WTXC]
Else
Local File =this.ACTX.AFOLDER+".TEXCLOB" [WTXC]
Endif
Raz [L]_CLB
Raz [L]_CNT
Gosub DECODE_KEYVAL From ASYRLOB
[F:WTXC]CODE = [L]_KEYVALTAB(1)
Read [WTXC] =
If !fstat
 [L]_CLB = [F:WTXC]TEXTE
Endif
LogicClose File [WTXC]
Return

$READ_EXI_CLARTNTEX
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File TEXCLOB [WTXC]
Else
Local File =this.ACTX.AFOLDER+".TEXCLOB" [WTXC]
Endif
Local Tinyint _EXI : [L]_EXI=1
[F:WTXC]CODE = this.RTNTEX
Look [WTXC] =
If fstat
 [L]_EXI=0
Endif
LogicClose File [WTXC]
Return

####################################################################
$ACONTROL
####################################################################
Gosub DECLARE_VAR
[L]AEVENT = "ACONTROL" : [L]ACTION = "ACONTROL" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# ADELLINE
####################################################################
$ADELLINE
Case _ACOLLECTION
 When "BPR"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"BPR",this)
 When "CDIE"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CDIE",this)
 When "CINVDTA"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CINVDTA",this)
 When "CRITCOD"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CRITCOD",this)
  If [L]_ALINE<>[V]CST_ANOTDEFINED : this.RITNBR -= 1 : Endif
 When "CRITPAR"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CRITPAR",this)
  If [L]_ALINE<>[V]CST_ANOTDEFINED : this.RITPARNBR -= 1 : Endif
 When "CTSSCOD"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"CTSSCOD",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# ADDLINE
####################################################################
$ADDLINE
Case _ACOLLECTION
 When "BPR"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"BPR","C_BPARTNER",this)
 When "CDIE"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CDIE","C_BPSUPPLIER_CDIE",this)
 When "CINVDTA"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CINVDTA","C_BPSUPPLIER_CINVDTA",this)
 When "CRITCOD"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CRITCOD","C_BPSUPPLIER_CRITCOD",this)
  If [L]_ALINE<>[V]CST_ANOTDEFINED : this.RITNBR += 1 : Endif
 When "CRITPAR"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CRITPAR","C_BPSUPPLIER_CRITPAR",this)
  If [L]_ALINE<>[V]CST_ANOTDEFINED : this.RITPARNBR += 1 : Endif
 When "CTSSCOD"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CTSSCOD","C_BPSUPPLIER_CTSSCOD",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETDIM
####################################################################
$AGETDIM
Case _ACOLLECTION
 When "BPR"
  [L]_ALINE = 1
 When "CDIE"
  [L]_ALINE = 20
 When "CINVDTA"
  [L]_ALINE = 30
 When "CRITCOD"
  [L]_ALINE = 30
 When "CRITPAR"
  [L]_ALINE = 10
 When "CTSSCOD"
  [L]_ALINE = 5
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETMIN
####################################################################
$AGETMIN
Case _ACOLLECTION
 When "BPR"
  [L]_ALINE = 2
 When "CDIE"
  [L]_ALINE = 1
 When "CINVDTA"
  [L]_ALINE = 1
 When "CRITCOD"
  [L]_ALINE = 1
 When "CRITPAR"
  [L]_ALINE = 1
 When "CTSSCOD"
  [L]_ALINE = 3
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# _ALOAD_KEYS
####################################################################
$_ALOAD_KEYS
this.AKEYS(1) = "BPSNUM"
Return

####################################################################
# _ADELINSTANCE
####################################################################
$_ADELINSTANCE
[L]ASTATUS = func ASYRSUBTAB._ADELINSTANCE(this)
Return

####################################################################
# ADDINSTANCE_BOUND
####################################################################
$ADDINSTANCE_BOUND
this.BPR(1) = NewInstance C_BPARTNER(this.ACTX,NullUuid,1,this,"BPR") AllocGroup this
this.BPR(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.BPR(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
Return



