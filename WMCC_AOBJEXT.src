#<AdxTL>@(#)0.0.0.0 $Revision$Class Import/export templates
# Supervisor
## CRUD-CLASSE ## AOBJEXT
# 2018-08-27 12:21:34 202


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(AOBJEXT,ASTATUS)
Variable Instance AOBJEXT Using C_AOBJEXT
Variable Integer ASTATUS

If AOBJEXT = null : End : Endif

Gosub _AVARIABLES From WMC00AOBJEXT

[L]A_STRSITE = ""
[L]A_STRACC = AOBJEXT.ACS
Gosub AINSERT_AOBJEXT

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(AOBJEXT,ASTATUS)
Variable Instance AOBJEXT Using C_AOBJEXT
Variable Integer ASTATUS

If AOBJEXT = null : End : Endif

Gosub AVARIABLES From WMC00AOBJEXT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = AOBJEXT.ACS
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_AOBJEXT
Else
 Gosub AINSERT_AOBJEXT
Endif

Gosub _AINSERT_AFTER
[L]A_I = AOBJEXT.freeSnapshot
AOBJEXT.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet AOBJEXT._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet AOBJEXT._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet AOBJEXT._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If AOBJEXT.ASTALIN = [V]CST_ANEWDEL : Return : Endif
AOBJEXT.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(AOBJEXT.FILCOL)
 If AOBJEXT.FILCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.FILCOL([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(AOBJEXT.FLGCOL)
 If AOBJEXT.FLGCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.FLGCOL([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(AOBJEXT.AOD) : # AOBJEXTD -- 2
 If AOBJEXT.AOD(A_N2) <> null
& and !find(AOBJEXT.AOD(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.AOD(A_N2).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(AOBJEXT.AOD)
 If AOBJEXT.AOD(A_N2)<>null
  If AOBJEXT.AOD(A_N2).ASTALIN<>[V]CST_ADEL & AOBJEXT.AOD(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(AOBJEXT,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"AOBJEXTD:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER
For A_N2=1 To maxtab(AOBJEXT.AOD) : # AOBJEXTD -- 2
 If AOBJEXT.AOD(A_N2) <> null
& and !find(AOBJEXT.AOD(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.AOD(A_N2).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(AOBJEXT.AOD)
 If AOBJEXT.AOD(A_N2)<>null
  If AOBJEXT.AOD(A_N2).ASTALIN<>[V]CST_ADEL & AOBJEXT.AOD(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(AOBJEXT,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"AOBJEXTD:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

For [L]A_I=1 To maxtab(AOBJEXT.FILCOL)
 If AOBJEXT.FILCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.FILCOL([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(AOBJEXT.FLGCOL)
 If AOBJEXT.FLGCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.FLGCOL([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_AOBJEXT
Trbegin [F:AOE]
 Gosub AINSERT_AOBJEXT
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_AOBJEXT
Raz [F:AOE]
[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00AOBJEXT._MAJSQL_AOBJEXT(AOBJEXT))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]A_TYPMAJ=[V]CST_ANEW

#-----------------------------------------------------#
For A_N2=1 To maxtab(AOBJEXT.AOD)
 If AOBJEXT.AOD(A_N2) <> null and
& (AOBJEXT.AOD(A_N2).ASTALIN=[L]A_TYPMAJ or
& AOBJEXT.AOD(A_N2).ASTALIN=[V]CST_ALL)
  If AOBJEXT.AOD(A_N2).ASTALIN=[L]A_TYPMAJ
   Raz [F:AOD]
   [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.AOD(A_N2).ACTION("AINSERT_BEFORE"))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   [L]ASTATUS = func WMC00AOBJEXT._MAJSQL_AOBJEXTD(AOBJEXT.AOD(A_N2))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   [L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.AOD(A_N2).ACTION("AINSERT_AFTER"))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXT.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If AOBJEXT.snapshotEnabled=1
 [L]A_RETIK = AOBJEXT.revertUpdTick
Endif
[L]ASTATUS = max(fmet AOBJEXT.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(AOBJEXT.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 AOBJEXT.ASTALIN = [V]CST_ALL
Endif
For [L]A_I=1 To maxtab(AOBJEXT.FILCOL)
 If AOBJEXT.FILCOL([L]A_I)<>null
  If AOBJEXT.FILCOL([L]A_I).ASTALIN=[V]CST_ADEL or AOBJEXT.FILCOL([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance AOBJEXT.FILCOL([L]A_I)
   AOBJEXT.FILCOL([L]A_I) = null
  Elsif AOBJEXT.FILCOL([L]A_I).ASTALIN <> [V]CST_ALL
   AOBJEXT.FILCOL([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
For [L]A_I=1 To maxtab(AOBJEXT.FLGCOL)
 If AOBJEXT.FLGCOL([L]A_I)<>null
  If AOBJEXT.FLGCOL([L]A_I).ASTALIN=[V]CST_ADEL or AOBJEXT.FLGCOL([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance AOBJEXT.FLGCOL([L]A_I)
   AOBJEXT.FLGCOL([L]A_I) = null
  Elsif AOBJEXT.FLGCOL([L]A_I).ASTALIN <> [V]CST_ALL
   AOBJEXT.FLGCOL([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(AOBJEXT.AOD)
 If AOBJEXT.AOD(A_N2) <> null
  If AOBJEXT.AOD(A_N2).ASTALIN=[V]CST_ADEL or AOBJEXT.AOD(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance AOBJEXT.AOD(A_N2)
   AOBJEXT.AOD(A_N2) = null
  Elsif AOBJEXT.AOD(A_N2).ASTALIN <> [V]CST_ALL
   AOBJEXT.AOD(A_N2).ASTALIN = [V]CST_ALL
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Return



