#<AdxTL>@(#)0.0.0.0 $Revision$Class Suppliers
# Supervisor
## CRUD-CLASSE ## BPSUPPLIER
# 2018-08-27 12:26:27 040


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File BPSUPPLIER [BPS_]

If !SILENCE : Call TRACE("2 --> Local Instance C_BPSUPPLIER") From ASYRCOM : Endif
Local Instance BPSUPPLIER Using C_BPSUPPLIER

If !SILENCE : Call TRACE("3 --> New Instance C_BPSUPPLIER") From ASYRCOM : Endif
BPSUPPLIER = NewInstance C_BPSUPPLIER AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [BPS_]BPS0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of BPSUPPLIER") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.AREAD([BPS_]BPSNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("BPSUPPLIER.BPSNUM ="-num$(BPSUPPLIER.BPSNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(BPSUPPLIER.AKEYS)
  Call TRACE("-"-num$(I)-":"-BPSUPPLIER.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [BPS_]
FreeGroup BPSUPPLIER
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(BPSUPPLIER,ACLE,ASTATUS,_ETAG)
Variable Instance BPSUPPLIER Using C_BPSUPPLIER
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _BPSNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BPSNUM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File BPSUPPLIER [BPS]
Default File [F:BPS]
Read [F:BPS]BPS0 = [L]_BPSNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:BPS]UPDTICK)>0
 [L]_ETAG = num$([F:BPS]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(BPSUPPLIER,ACLE,ASTATUS)
Variable Instance BPSUPPLIER Using C_BPSUPPLIER
Value Char ACLE
Variable Integer ASTATUS
Local Char _BPSNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BPSNUM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.AREAD([L]_BPSNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(BPSUPPLIER,_BPSNUM,ASTATUS)
Variable Instance BPSUPPLIER Using C_BPSUPPLIER
Value Char _BPSNUM
Variable Integer ASTATUS

If BPSUPPLIER = null : End : Endif

Gosub AVARIABLES From WMC00BPSUPPLIER
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If BPSUPPLIER.APARENT=null
 [L]A_I = BPSUPPLIER.freeSnapshot
 BPSUPPLIER.snapshotEnabled = 0
 BPSUPPLIER.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & BPSUPPLIER.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If BPSUPPLIER.APARENT=null
 BPSUPPLIER.snapshotEnabled = 1
 BPSUPPLIER.setAccessorEnabled = 1
Endif
LogicClose File [BPS] ,[BPR]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER._ACTION_PARAM("AREAD_BEFORE",[L]_BPSNUM))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:BPS]
Read [F:BPS]BPS0 = [L]_BPSNUM
If fstat
[L]A_ERROR = [L]_BPSNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(BPSUPPLIER,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:BPS]AUUID)>0 & [F:BPS]AUUID=NullUuid
 [F:BPS]AUUID = getUuid
Endif
If dim([F:BPS]CLAORDTEX)>0: Raz [F:BPS]CLAORDTEX: Endif
If dim([F:BPS]CLARTNTEX)>0: Raz [F:BPS]CLARTNTEX: Endif
SetInstance BPSUPPLIER With [F:BPS]
BPSUPPLIER.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:BPR]
 [L]A_N2=1
 Read [F:BPR]BPR0 = [F:BPS]BPSNUM
 If !fstat
  Callmet BPSUPPLIER.BPR(A_N2).AREAD([F:BPR]BPRNUM)
  BPSUPPLIER.BPR(A_N2).ASTALIN = [V]CST_ALL
  [L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.BPR(A_N2).ASETATTRIBUTE("BPRNUM","$isDisabled","true"))
 Elsif fstat
  [L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.BPR(A_N2).ASETERROR("",func ASYRFNC.MES1(mess(00112,00143,1),"BPR")+" : "+num$([F:BPS]BPSNUM)
&  -":"-func ASYRFNC.MES1(mess(93,140,1),"BPARTNER"),[V]CST_AWARNING))
 Endif
Endif
#-----------------------------------------------------#

[L]A_NEWCOL = 0
For [L]A_I=1 To 20
 If ([F:BPS]DIE([L]A_I-1)<>"" or [F:BPS]CCE([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  BPSUPPLIER.CDIE(A_NEWCOL) = NewInstance  C_BPSUPPLIER_CDIE(BPSUPPLIER.ACTX,NullUuid,[L]A_I,BPSUPPLIER,"CDIE") AllocGroup BPSUPPLIER
  BPSUPPLIER.CDIE(A_NEWCOL).DIE = [F:BPS]DIE([L]A_I-1)
  BPSUPPLIER.CDIE(A_NEWCOL).CCE = [F:BPS]CCE([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.CDIE(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 30
 If ([F:BPS]INVDTAAMT([L]A_I-1)<>0 or [F:BPS]INVDTA([L]A_I-1)<>0 or [F:BPS]AMTCOD([L]A_I-1)<>0)
  [L]A_NEWCOL += 1
  BPSUPPLIER.CINVDTA(A_NEWCOL) = NewInstance  C_BPSUPPLIER_CINVDTA(BPSUPPLIER.ACTX,NullUuid,[L]A_I,BPSUPPLIER,"CINVDTA") AllocGroup BPSUPPLIER
  BPSUPPLIER.CINVDTA(A_NEWCOL).INVDTAAMT = [F:BPS]INVDTAAMT([L]A_I-1)
  BPSUPPLIER.CINVDTA(A_NEWCOL).INVDTA = [F:BPS]INVDTA([L]A_I-1)
  BPSUPPLIER.CINVDTA(A_NEWCOL).AMTCOD = [F:BPS]AMTCOD([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.CINVDTA(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To min(30,BPSUPPLIER.RITNBR)
 [L]A_NEWCOL += 1
 BPSUPPLIER.CRITCOD(A_NEWCOL) = NewInstance  C_BPSUPPLIER_CRITCOD(BPSUPPLIER.ACTX,NullUuid,[L]A_I,BPSUPPLIER,"CRITCOD") AllocGroup BPSUPPLIER
 BPSUPPLIER.CRITCOD(A_NEWCOL).RITCOD = [F:BPS]RITCOD([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.CRITCOD(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To min(10,BPSUPPLIER.RITPARNBR)
 [L]A_NEWCOL += 1
 BPSUPPLIER.CRITPAR(A_NEWCOL) = NewInstance  C_BPSUPPLIER_CRITPAR(BPSUPPLIER.ACTX,NullUuid,[L]A_I,BPSUPPLIER,"CRITPAR") AllocGroup BPSUPPLIER
 BPSUPPLIER.CRITPAR(A_NEWCOL).RITPARNAM = [F:BPS]RITPARNAM([L]A_I-1)
 BPSUPPLIER.CRITPAR(A_NEWCOL).RITPARCOE = [F:BPS]RITPARCOE([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.CRITPAR(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 5
 [L]A_NEWCOL += 1
 BPSUPPLIER.CTSSCOD(A_NEWCOL) = NewInstance  C_BPSUPPLIER_CTSSCOD(BPSUPPLIER.ACTX,NullUuid,[L]A_I,BPSUPPLIER,"CTSSCOD") AllocGroup BPSUPPLIER
 BPSUPPLIER.CTSSCOD(A_NEWCOL).TSSCOD = [F:BPS]TSSCOD([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.CTSSCOD(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



