#<AdxTL>@(#)0.0.0.0 $Revision$Class Change request
# Sage X3 supervisor
## CRUD-CLASSE ## CCMCHGREQ
# 2018-06-20 06:39:44 177

Gosub TEST From WMCR_CCMCHGREQ : End

############################################################################################
## C : Subprog AINSERT(INSTANCE)
## D : Subprog ADELETE(INSTANCE)
## R : Subprog AREAD(INSTANCE,CRID)
## U : Subprog AUPDATE(INSTANCE)
############################################################################################
# CCMCHGREQ : CCMCHGREQ
# CCMCRNOTES : CCMCHGREQ CCMCRNOTES
# CCMCRORIGI : CCMCHGREQ CCMCRORIGI
# CCMCRORIGC : CCMCHGREQ CCMCRORIGC
# CCMCRORIGS : CCMCHGREQ CCMCRORIGS
# CCMCRORIGE : CCMCHGREQ CCMCRORIGE
# CCMAPPROVER : CCMCHGREQ CCMAPPROVER
# CCMIASTAD : CCMCHGREQ CCMIASTAD
# CCMIASTAM : CCMCHGREQ CCMIASTAM
# CCMIASTAS : CCMCHGREQ CCMIASTAS
############################################################################################

############################################################################################
### AVARIABLES
############################################################################################
$AVARIABLES
[L]ASTATUS =max([L]ASTATUS,fmet CCMCHGREQ._ADELERRORS([V]CST_ALLERRORS))
$_AVARIABLES
Local    Integer     A_LEVEL,A_I,A_NEWCOL,A_N1,A_N2,A_S2,A_N3,A_S3,A_N4,A_S4,A_N5,A_S5,A_N6,A_S6,A_N7,A_S7,A_N8,A_S8
Local    Integer A_N9,A_S9,A_N10,A_S10
Local    Integer    ASTATUS,A_RETIK,A_TYPMAJ,A_ASTALIN
Local    Char        A_STRSITE(GLONFCY),A_STRACC(GLONACS),CURPRO(50),A_PARENT(50),A_PATH(200),A_ABR(GLONABR),A_ERROR(250)
Local    Uuident    A_UUID

[L]A_LEVEL    = CCMCHGREQ.ACTX.LEVWML
[L]ASTATUS  = 0

Onerrgo ERR_OPENTAB
If find(CCMCHGREQ.ACTX.AFOLDER,nomap,"")>0
 Local File CCMCHGREQ [CCMCR]
 Local File CCMCRNOTES [CCMCRN]
 Local File CCMCRORIGI [CCMCROI]
 Local File CCMCRORIGC [CCMCROC]
 Local File CCMCRORIGS [CCMCROS]
 Local File CCMCRORIGE [CCMCROE]
 Local File CCMAPPROVER [CCMAPPR]
 Local File CCMIASTAD [CCMISD]
 Local File CCMIASTAM [CCMISM]
 Local File CCMIASTAS [CCMISS]
Else
 Local File =CCMCHGREQ.ACTX.AFOLDER+".CCMCHGREQ" [CCMCR]
 Local File =CCMCHGREQ.ACTX.AFOLDER+".CCMCRNOTES" [CCMCRN]
 Local File =CCMCHGREQ.ACTX.AFOLDER+".CCMCRORIGI" [CCMCROI]
 Local File =CCMCHGREQ.ACTX.AFOLDER+".CCMCRORIGC" [CCMCROC]
 Local File =CCMCHGREQ.ACTX.AFOLDER+".CCMCRORIGS" [CCMCROS]
 Local File =CCMCHGREQ.ACTX.AFOLDER+".CCMCRORIGE" [CCMCROE]
 Local File =CCMCHGREQ.ACTX.AFOLDER+".CCMAPPROVER" [CCMAPPR]
 Local File =CCMCHGREQ.ACTX.AFOLDER+".CCMIASTAD" [CCMISD]
 Local File =CCMCHGREQ.ACTX.AFOLDER+".CCMIASTAM" [CCMISM]
 Local File =CCMCHGREQ.ACTX.AFOLDER+".CCMIASTAS" [CCMISS]
Endif
Onerrgo
Return

$ERR_OPENTAB
[L]ASTATUS = max([L]ASTATUS,fmet CCMCHGREQ.ASETERROR("",errp+"("+num$(errl)+")"-mess(6,123,1)-num$(errn)-errmes$(errn)-errm,[V]CST_AERROR))
Resume

############################################################################################
### Link
############################################################################################
$AOPEN_LINK
Gosub AVARIABLES
Link [CCMCR] With
& [CCMCRN]CCMCRN0 = [F:CCMCR]CRID,
& [CCMCROI]CCMCROI0 = [F:CCMCR]CRID,
& [CCMCROC]CCMCROC0 = [F:CCMCR]CRID,
& [CCMCROS]CCMCROS0 = [F:CCMCR]CRID,
& [CCMCROE]CCMCROE0 = [F:CCMCR]CRID,
& [CCMAPPR]CCMAPPR0 = [F:CCMCR]CRID,
& [CCMISD]CCMISD1 = [F:CCMCR]CRID,
& [CCMISM]CCMISM1 = [F:CCMCR]CRID,
& [CCMISS]CCMISS1 = [F:CCMCR]CRID
& As [LNK_]
Return

############################################################################################
### CCMCHGREQ(WCCMCR)
############################################################################################
Funprog  _MAJSQL_CCMCHGREQ(WCCMCR)
Variable Instance WCCMCR Using C_CCMCHGREQ
Local Integer ASTATUS,A_I,A_J
Default File [F:CCMCR]
If WCCMCR.ASTALIN=[V]CST_ANEW
 Call INICRE(WCCMCR) From ASYRSUB
 SetInstance [F:CCMCR] With WCCMCR
 Write [F:CCMCR]
 If fstat
  Call FSTA("CCMCR",WCCMCR,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMCR.updTick = [F:CCMCR]updTick
Elsif WCCMCR.ASTALIN=[V]CST_ALL or WCCMCR.ASTALIN=[V]CST_AUPD
 Call INIUPD(WCCMCR) From ASYRSUB
 SetInstance [F:CCMCR] With WCCMCR
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMCR,"CCMCHGREQ")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:CCMCR]CCMCR0 = [F:CCMCR]CRID
 If fstat
  Call FSTA("CCMCR",WCCMCR,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMCR.updTick = [F:CCMCR]updTick
Elsif WCCMCR.ASTALIN=[V]CST_ADEL
 SetInstance [F:CCMCR] With WCCMCR
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMCR,"CCMCHGREQ")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:CCMCR]CCMCR0 = [F:CCMCR]CRID
 If fstat
  Call FSTA("CCMCR",WCCMCR,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### CCMCRNOTES(WCCMCRN)
############################################################################################
Funprog  _MAJSQL_CCMCRNOTES(WCCMCRN)
Variable Instance WCCMCRN Using C_CCMCRNOTES
Local Integer ASTATUS,A_I,A_J
Default File [F:CCMCRN]
If WCCMCRN.ASTALIN=[V]CST_ANEW
 Call INICRE(WCCMCRN) From ASYRSUB
 SetInstance [F:CCMCRN] With WCCMCRN
 Call _MAJSQL_CCMCRNOTES_CRNOTES(WCCMCRN,WCCMCRN.CRNOTES)
 Write [F:CCMCRN]
 If fstat
  Call FSTA("CCMCRN",WCCMCRN,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMCRN.updTick = [F:CCMCRN]updTick
Elsif WCCMCRN.ASTALIN=[V]CST_ALL or WCCMCRN.ASTALIN=[V]CST_AUPD
 Call INIUPD(WCCMCRN) From ASYRSUB
 SetInstance [F:CCMCRN] With WCCMCRN
 Call _MAJSQL_CCMCRNOTES_CRNOTES(WCCMCRN,WCCMCRN.CRNOTES)
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMCRN,"CCMCRNOTES")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:CCMCRN]CCMCRN0 = [F:CCMCRN]CRID;[F:CCMCRN]NOTELINE
 If fstat
  Call FSTA("CCMCRN",WCCMCRN,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMCRN.updTick = [F:CCMCRN]updTick
Elsif WCCMCRN.ASTALIN=[V]CST_ADEL
 SetInstance [F:CCMCRN] With WCCMCRN
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMCRN,"CCMCRNOTES")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:CCMCRN]CCMCRN0 = [F:CCMCRN]CRID;[F:CCMCRN]NOTELINE
 If fstat
  Call FSTA("CCMCRN",WCCMCRN,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### CCMCRORIGI(WCCMCROI)
############################################################################################
Funprog  _MAJSQL_CCMCRORIGI(WCCMCROI)
Variable Instance WCCMCROI Using C_CCMCRORIGI
Local Integer ASTATUS,A_I,A_J
Default File [F:CCMCROI]
If WCCMCROI.ASTALIN=[V]CST_ANEW
 Call INICRE(WCCMCROI) From ASYRSUB
 SetInstance [F:CCMCROI] With WCCMCROI
 Write [F:CCMCROI]
 If fstat
  Call FSTA("CCMCROI",WCCMCROI,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMCROI.updTick = [F:CCMCROI]updTick
Elsif WCCMCROI.ASTALIN=[V]CST_ALL or WCCMCROI.ASTALIN=[V]CST_AUPD
 Call INIUPD(WCCMCROI) From ASYRSUB
 SetInstance [F:CCMCROI] With WCCMCROI
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMCROI,"CCMCRORIGI")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:CCMCROI]CCMCROI0 = [F:CCMCROI]CRID;[F:CCMCROI]ORIGILN
 If fstat
  Call FSTA("CCMCROI",WCCMCROI,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMCROI.updTick = [F:CCMCROI]updTick
Elsif WCCMCROI.ASTALIN=[V]CST_ADEL
 SetInstance [F:CCMCROI] With WCCMCROI
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMCROI,"CCMCRORIGI")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:CCMCROI]CCMCROI0 = [F:CCMCROI]CRID;[F:CCMCROI]ORIGILN
 If fstat
  Call FSTA("CCMCROI",WCCMCROI,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### CCMCRORIGC(WCCMCROC)
############################################################################################
Funprog  _MAJSQL_CCMCRORIGC(WCCMCROC)
Variable Instance WCCMCROC Using C_CCMCRORIGC
Local Integer ASTATUS,A_I,A_J
Default File [F:CCMCROC]
If WCCMCROC.ASTALIN=[V]CST_ANEW
 Call INICRE(WCCMCROC) From ASYRSUB
 SetInstance [F:CCMCROC] With WCCMCROC
 Write [F:CCMCROC]
 If fstat
  Call FSTA("CCMCROC",WCCMCROC,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMCROC.updTick = [F:CCMCROC]updTick
Elsif WCCMCROC.ASTALIN=[V]CST_ALL or WCCMCROC.ASTALIN=[V]CST_AUPD
 Call INIUPD(WCCMCROC) From ASYRSUB
 SetInstance [F:CCMCROC] With WCCMCROC
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMCROC,"CCMCRORIGC")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:CCMCROC]CCMCROC0 = [F:CCMCROC]CRID;[F:CCMCROC]ORIGCLN
 If fstat
  Call FSTA("CCMCROC",WCCMCROC,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMCROC.updTick = [F:CCMCROC]updTick
Elsif WCCMCROC.ASTALIN=[V]CST_ADEL
 SetInstance [F:CCMCROC] With WCCMCROC
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMCROC,"CCMCRORIGC")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:CCMCROC]CCMCROC0 = [F:CCMCROC]CRID;[F:CCMCROC]ORIGCLN
 If fstat
  Call FSTA("CCMCROC",WCCMCROC,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### CCMCRORIGS(WCCMCROS)
############################################################################################
Funprog  _MAJSQL_CCMCRORIGS(WCCMCROS)
Variable Instance WCCMCROS Using C_CCMCRORIGS
Local Integer ASTATUS,A_I,A_J
Default File [F:CCMCROS]
If WCCMCROS.ASTALIN=[V]CST_ANEW
 Call INICRE(WCCMCROS) From ASYRSUB
 SetInstance [F:CCMCROS] With WCCMCROS
 Write [F:CCMCROS]
 If fstat
  Call FSTA("CCMCROS",WCCMCROS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMCROS.updTick = [F:CCMCROS]updTick
Elsif WCCMCROS.ASTALIN=[V]CST_ALL or WCCMCROS.ASTALIN=[V]CST_AUPD
 Call INIUPD(WCCMCROS) From ASYRSUB
 SetInstance [F:CCMCROS] With WCCMCROS
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMCROS,"CCMCRORIGS")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:CCMCROS]CCMCROS0 = [F:CCMCROS]CRID;[F:CCMCROS]ORIGSLN
 If fstat
  Call FSTA("CCMCROS",WCCMCROS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMCROS.updTick = [F:CCMCROS]updTick
Elsif WCCMCROS.ASTALIN=[V]CST_ADEL
 SetInstance [F:CCMCROS] With WCCMCROS
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMCROS,"CCMCRORIGS")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:CCMCROS]CCMCROS0 = [F:CCMCROS]CRID;[F:CCMCROS]ORIGSLN
 If fstat
  Call FSTA("CCMCROS",WCCMCROS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### CCMCRORIGE(WCCMCROE)
############################################################################################
Funprog  _MAJSQL_CCMCRORIGE(WCCMCROE)
Variable Instance WCCMCROE Using C_CCMCRORIGE
Local Integer ASTATUS,A_I,A_J
Default File [F:CCMCROE]
If WCCMCROE.ASTALIN=[V]CST_ANEW
 Call INICRE(WCCMCROE) From ASYRSUB
 SetInstance [F:CCMCROE] With WCCMCROE
 Write [F:CCMCROE]
 If fstat
  Call FSTA("CCMCROE",WCCMCROE,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMCROE.updTick = [F:CCMCROE]updTick
Elsif WCCMCROE.ASTALIN=[V]CST_ALL or WCCMCROE.ASTALIN=[V]CST_AUPD
 Call INIUPD(WCCMCROE) From ASYRSUB
 SetInstance [F:CCMCROE] With WCCMCROE
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMCROE,"CCMCRORIGE")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:CCMCROE]CCMCROE0 = [F:CCMCROE]CRID;[F:CCMCROE]ORIGELN
 If fstat
  Call FSTA("CCMCROE",WCCMCROE,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMCROE.updTick = [F:CCMCROE]updTick
Elsif WCCMCROE.ASTALIN=[V]CST_ADEL
 SetInstance [F:CCMCROE] With WCCMCROE
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMCROE,"CCMCRORIGE")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:CCMCROE]CCMCROE0 = [F:CCMCROE]CRID;[F:CCMCROE]ORIGELN
 If fstat
  Call FSTA("CCMCROE",WCCMCROE,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### CCMAPPROVER(WCCMAPPR)
############################################################################################
Funprog  _MAJSQL_CCMAPPROVER(WCCMAPPR)
Variable Instance WCCMAPPR Using C_CCMAPPROVER
Local Integer ASTATUS,A_I,A_J
Default File [F:CCMAPPR]
If WCCMAPPR.ASTALIN=[V]CST_ANEW
 Call INICRE(WCCMAPPR) From ASYRSUB
 SetInstance [F:CCMAPPR] With WCCMAPPR
 Write [F:CCMAPPR]
 If fstat
  Call FSTA("CCMAPPR",WCCMAPPR,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMAPPR.updTick = [F:CCMAPPR]updTick
Elsif WCCMAPPR.ASTALIN=[V]CST_ALL or WCCMAPPR.ASTALIN=[V]CST_AUPD
 Call INIUPD(WCCMAPPR) From ASYRSUB
 SetInstance [F:CCMAPPR] With WCCMAPPR
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMAPPR,"CCMAPPROVER")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:CCMAPPR]CCMAPPR0 = [F:CCMAPPR]CRID;[F:CCMAPPR]APPRLN
 If fstat
  Call FSTA("CCMAPPR",WCCMAPPR,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMAPPR.updTick = [F:CCMAPPR]updTick
Elsif WCCMAPPR.ASTALIN=[V]CST_ADEL
 SetInstance [F:CCMAPPR] With WCCMAPPR
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMAPPR,"CCMAPPROVER")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:CCMAPPR]CCMAPPR0 = [F:CCMAPPR]CRID;[F:CCMAPPR]APPRLN
 If fstat
  Call FSTA("CCMAPPR",WCCMAPPR,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### CCMIASTAD(WCCMISD)
############################################################################################
Funprog  _MAJSQL_CCMIASTAD(WCCMISD)
Variable Instance WCCMISD Using C_CCMIASTAD
Local Integer ASTATUS,A_I,A_J
Default File [F:CCMISD]
If WCCMISD.ASTALIN=[V]CST_ANEW
 Call INICRE(WCCMISD) From ASYRSUB
 SetInstance [F:CCMISD] With WCCMISD
 Write [F:CCMISD]
 If fstat
  Call FSTA("CCMISD",WCCMISD,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMISD.updTick = [F:CCMISD]updTick
Elsif WCCMISD.ASTALIN=[V]CST_ALL or WCCMISD.ASTALIN=[V]CST_AUPD
 Call INIUPD(WCCMISD) From ASYRSUB
 SetInstance [F:CCMISD] With WCCMISD
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMISD,"CCMIASTAD")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:CCMISD]CCMISD1 = [F:CCMISD]COL1;[F:CCMISD]COL2
 If fstat
  Call FSTA("CCMISD",WCCMISD,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMISD.updTick = [F:CCMISD]updTick
Elsif WCCMISD.ASTALIN=[V]CST_ADEL
 SetInstance [F:CCMISD] With WCCMISD
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMISD,"CCMIASTAD")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:CCMISD]CCMISD1 = [F:CCMISD]COL1;[F:CCMISD]COL2
 If fstat
  Call FSTA("CCMISD",WCCMISD,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### CCMIASTAM(WCCMISM)
############################################################################################
Funprog  _MAJSQL_CCMIASTAM(WCCMISM)
Variable Instance WCCMISM Using C_CCMIASTAM
Local Integer ASTATUS,A_I,A_J
Default File [F:CCMISM]
If WCCMISM.ASTALIN=[V]CST_ANEW
 Call INICRE(WCCMISM) From ASYRSUB
 SetInstance [F:CCMISM] With WCCMISM
 Write [F:CCMISM]
 If fstat
  Call FSTA("CCMISM",WCCMISM,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMISM.updTick = [F:CCMISM]updTick
Elsif WCCMISM.ASTALIN=[V]CST_ALL or WCCMISM.ASTALIN=[V]CST_AUPD
 Call INIUPD(WCCMISM) From ASYRSUB
 SetInstance [F:CCMISM] With WCCMISM
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMISM,"CCMIASTAM")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:CCMISM]CCMISM1 = [F:CCMISM]COL1;[F:CCMISM]COL2
 If fstat
  Call FSTA("CCMISM",WCCMISM,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMISM.updTick = [F:CCMISM]updTick
Elsif WCCMISM.ASTALIN=[V]CST_ADEL
 SetInstance [F:CCMISM] With WCCMISM
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMISM,"CCMIASTAM")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:CCMISM]CCMISM1 = [F:CCMISM]COL1;[F:CCMISM]COL2
 If fstat
  Call FSTA("CCMISM",WCCMISM,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### CCMIASTAS(WCCMISS)
############################################################################################
Funprog  _MAJSQL_CCMIASTAS(WCCMISS)
Variable Instance WCCMISS Using C_CCMIASTAS
Local Integer ASTATUS,A_I,A_J
Default File [F:CCMISS]
If WCCMISS.ASTALIN=[V]CST_ANEW
 Call INICRE(WCCMISS) From ASYRSUB
 SetInstance [F:CCMISS] With WCCMISS
 Write [F:CCMISS]
 If fstat
  Call FSTA("CCMISS",WCCMISS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMISS.updTick = [F:CCMISS]updTick
Elsif WCCMISS.ASTALIN=[V]CST_ALL or WCCMISS.ASTALIN=[V]CST_AUPD
 Call INIUPD(WCCMISS) From ASYRSUB
 SetInstance [F:CCMISS] With WCCMISS
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMISS,"CCMIASTAS")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:CCMISS]CCMISS1 = [F:CCMISS]COL1;[F:CCMISS]COL2
 If fstat
  Call FSTA("CCMISS",WCCMISS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WCCMISS.updTick = [F:CCMISS]updTick
Elsif WCCMISS.ASTALIN=[V]CST_ADEL
 SetInstance [F:CCMISS] With WCCMISS
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WCCMISS,"CCMIASTAS")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:CCMISS]CCMISS1 = [F:CCMISS]COL1;[F:CCMISS]COL2
 If fstat
  Call FSTA("CCMISS",WCCMISS,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

Funprog  _MAJSQL_CCMCHGREQ_CRDESC(WCCMCR,CRDESC)
Variable Instance WCCMCR Using C_CCMCHGREQ
Value Clbfile CRDESC
Local Clbfile WEMPTY
Local Char WCNT(100),WATYP(GLONATYP)
Local Integer ASTATUS
Local File CCMCRDESC [F:CCMCRD]
If WCCMCR.ASTALIN=[V]CST_ANEW & [L]WEMPTY<>[L]CRDESC
 Raz [CCMCRD]
 Call INICRE(WCCMCR) From ASYRSUB
 [F:CCMCRD]CRID = WCCMCR.CRID
 [F:CCMCRD]CRDESC = [L]CRDESC
 [L]WATYP = 'ATYPE10-3'
 [L]WCNT = 'text/rtf'
 Write [F:CCMCRD]
 If fstat
  Call FSTA("CCMCR",WCCMCR,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Elsif WCCMCR.ASTALIN=[V]CST_ADEL
 Read [F:CCMCRD]CCMCR0 =WCCMCR.CRID
 If !fstat
  Delete [F:CCMCRD]
  If fstat
   Call FSTA("CCMCR",WCCMCR,[L]ASTATUS) From ASYRSUB
   End [L]ASTATUS
  Endif
 Endif
Elsif WCCMCR.ASTALIN=[V]CST_ALL or WCCMCR.ASTALIN=[V]CST_AUPD
 If fmet WCCMCR.AGETATTRIBUTE("CRDESC","$isLoaded")="true"
  Read [F:CCMCRD]CCMCR0 =WCCMCR.CRID
  If !fstat & [L]WEMPTY<>[L]CRDESC
   Call INIUPD(WCCMCR) From ASYRSUB
   [F:CCMCRD]CRDESC = [L]CRDESC
   [L]WATYP = 'ATYPE10-3'
   [L]WCNT = 'text/rtf'
   Rewrite [F:CCMCRD]
   If fstat
    Call FSTA("CCMCR",WCCMCR,[L]ASTATUS) From ASYRSUB
    End [L]ASTATUS
   Endif
  Elsif !fstat & [L]WEMPTY=[L]CRDESC
   Delete [F:CCMCRD]
   If fstat
    Call FSTA("CCMCR",WCCMCR,[L]ASTATUS) From ASYRSUB
    End [L]ASTATUS
   Endif
  Elsif fstat & [L]WEMPTY<>[L]CRDESC
   Raz [CCMCRD]
   Call INICRE(WCCMCR) From ASYRSUB
   [CCMCRD]CRID = WCCMCR.CRID
   [F:CCMCRD]CRDESC = [L]CRDESC
   [L]WATYP = 'ATYPE10-3'
   [L]WCNT = 'text/rtf'
   Write [F:CCMCRD]
   If fstat
    Call FSTA("CCMCR",WCCMCR,[L]ASTATUS) From ASYRSUB
    End [L]ASTATUS
   Endif
  Endif
 Endif : #isLoaded
Endif : #[V]CST_AUPD 
Close Local File [F:CCMCRD]
End 0

Funprog  _MAJSQL_CCMCHGREQ_REJDESC(WCCMCR,REJDESC)
Variable Instance WCCMCR Using C_CCMCHGREQ
Value Clbfile REJDESC
Local Clbfile WEMPTY
Local Char WCNT(100),WATYP(GLONATYP)
Local Integer ASTATUS
Local File CCMREJDSC [F:CCMREJ]
If WCCMCR.ASTALIN=[V]CST_ANEW & [L]WEMPTY<>[L]REJDESC
 Raz [CCMREJ]
 Call INICRE(WCCMCR) From ASYRSUB
 [F:CCMREJ]CRID = WCCMCR.CRID
 [F:CCMREJ]REJDESC = [L]REJDESC
 [L]WATYP = 'ATYPE10-3'
 [L]WCNT = 'text/rtf'
 Write [F:CCMREJ]
 If fstat
  Call FSTA("CCMCR",WCCMCR,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Elsif WCCMCR.ASTALIN=[V]CST_ADEL
 Read [F:CCMREJ]CCMCR0 =WCCMCR.CRID
 If !fstat
  Delete [F:CCMREJ]
  If fstat
   Call FSTA("CCMCR",WCCMCR,[L]ASTATUS) From ASYRSUB
   End [L]ASTATUS
  Endif
 Endif
Elsif WCCMCR.ASTALIN=[V]CST_ALL or WCCMCR.ASTALIN=[V]CST_AUPD
 If fmet WCCMCR.AGETATTRIBUTE("REJDESC","$isLoaded")="true"
  Read [F:CCMREJ]CCMCR0 =WCCMCR.CRID
  If !fstat & [L]WEMPTY<>[L]REJDESC
   Call INIUPD(WCCMCR) From ASYRSUB
   [F:CCMREJ]REJDESC = [L]REJDESC
   [L]WATYP = 'ATYPE10-3'
   [L]WCNT = 'text/rtf'
   Rewrite [F:CCMREJ]
   If fstat
    Call FSTA("CCMCR",WCCMCR,[L]ASTATUS) From ASYRSUB
    End [L]ASTATUS
   Endif
  Elsif !fstat & [L]WEMPTY=[L]REJDESC
   Delete [F:CCMREJ]
   If fstat
    Call FSTA("CCMCR",WCCMCR,[L]ASTATUS) From ASYRSUB
    End [L]ASTATUS
   Endif
  Elsif fstat & [L]WEMPTY<>[L]REJDESC
   Raz [CCMREJ]
   Call INICRE(WCCMCR) From ASYRSUB
   [CCMREJ]CRID = WCCMCR.CRID
   [F:CCMREJ]REJDESC = [L]REJDESC
   [L]WATYP = 'ATYPE10-3'
   [L]WCNT = 'text/rtf'
   Write [F:CCMREJ]
   If fstat
    Call FSTA("CCMCR",WCCMCR,[L]ASTATUS) From ASYRSUB
    End [L]ASTATUS
   Endif
  Endif
 Endif : #isLoaded
Endif : #[V]CST_AUPD 
Close Local File [F:CCMREJ]
End 0

Funprog  _MAJSQL_CCMCRNOTES_CRNOTES(WCCMCRN,CRNOTES)
Variable Instance WCCMCRN Using C_CCMCRNOTES
Value Blbfile CRNOTES
Local Blbfile WEMPTY
Local Char WCNT(100),WATYP(GLONATYP)
Local Integer ASTATUS
If WCCMCRN.ASTALIN=[V]CST_ANEW & [L]WEMPTY<>[L]CRNOTES
 [F:CCMCRN]CRNOTES = [L]CRNOTES
 [L]WCNT=fmet WCCMCRN.AGETATTRIBUTE("CRNOTES","$contentType")
 If [L]WCNT<>''
  [L]WATYP = func ASYRLOB.F_CNTTYP_TO_ATYP(9,'',[L]WCNT)
 Else
  [L]WATYP = 'ATYPE9'
  [L]WCNT = 'application/x-document'
 Endif
 [F:CCMCRN]DOCTYPE = [L]WATYP
Elsif WCCMCRN.ASTALIN=[V]CST_ALL or WCCMCRN.ASTALIN=[V]CST_AUPD
 If fmet WCCMCRN.AGETATTRIBUTE("CRNOTES","$isLoaded")="true"
  If [L]WEMPTY<>[L]CRNOTES
   [F:CCMCRN]CRNOTES = [L]CRNOTES
   [L]WCNT=fmet WCCMCRN.AGETATTRIBUTE("CRNOTES","$contentType")
   If [L]WCNT<>''
    [L]WATYP = func ASYRLOB.F_CNTTYP_TO_ATYP(9,'',[L]WCNT)
   Else
    [L]WATYP = 'ATYPE9'
    [L]WCNT = 'application/x-document'
   Endif
   [F:CCMCRN]DOCTYPE = [L]WATYP
  Endif
 Endif : #isLoaded
Endif : #[V]CST_AUPD 
End 0



