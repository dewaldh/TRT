#<AdxTL>@(#)0.0.0.0 $Revision$Class Pyramid groups & links
# Supervisor
## CRUD-CLASSE ## GCCEGRUPYMSI
# 2018-08-27 13:16:46 863


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File GCCEGRUPYM [CRY_]

If !SILENCE : Call TRACE("2 --> Local Instance R_GCCEGRUPYMSI") From ASYRCOM : Endif
Local Instance GCCEGRUPYMSI Using R_GCCEGRUPYMSI

If !SILENCE : Call TRACE("3 --> New Instance R_GCCEGRUPYMSI") From ASYRCOM : Endif
GCCEGRUPYMSI = NewInstance R_GCCEGRUPYMSI AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [CRY_]CRY0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of GCCEGRUPYMSI") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet GCCEGRUPYMSI.AREAD([CRY_]PYM,[CRY_]GRU,[CRY_]LIN))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("GCCEGRUPYMSI.CRY.PYM ="-num$(GCCEGRUPYMSI.CRY.PYM)) From ASYRCOM
 Call TRACE("GCCEGRUPYMSI.CRY.GRU ="-num$(GCCEGRUPYMSI.CRY.GRU)) From ASYRCOM
 Call TRACE("GCCEGRUPYMSI.CRY.LIN ="-num$(GCCEGRUPYMSI.CRY.LIN)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(GCCEGRUPYMSI.CRY.AKEYS)
  Call TRACE("-"-num$(I)-":"-GCCEGRUPYMSI.CRY.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [CRY_]
FreeGroup GCCEGRUPYMSI
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(GCCEGRUPYMSI,ACLE,ASTATUS,_ETAG)
Variable Instance GCCEGRUPYMSI Using R_GCCEGRUPYMSI
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _PYM(5)
Local Char _GRU(10)
Local Shortint _LIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PYM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_GRU = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_LIN = val([L]CLE(3)) : Endif
Raz [L]_ETAG
Local File GCCEGRUPYM [CRY]
Default File [F:CRY]
Read [F:CRY]CRY0 = [L]_PYM;[L]_GRU;[L]_LIN
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:CRY]UPDTICK)>0
 [L]_ETAG = num$([F:CRY]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(GCCEGRUPYMSI,ACLE,ASTATUS)
Variable Instance GCCEGRUPYMSI Using R_GCCEGRUPYMSI
Value Char ACLE
Variable Integer ASTATUS
Local Char _PYM(5)
Local Char _GRU(10)
Local Shortint _LIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PYM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_GRU = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_LIN = val([L]CLE(3)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet GCCEGRUPYMSI.AREAD([L]_PYM,[L]_GRU,[L]_LIN))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(GCCEGRUPYMSI,_PYM,_GRU,_LIN,ASTATUS)
Variable Instance GCCEGRUPYMSI Using R_GCCEGRUPYMSI
Value Char _PYM
Value Char _GRU
Value Shortint _LIN
Variable Integer ASTATUS

If GCCEGRUPYMSI = null : End : Endif

Gosub AVARIABLES From WMR00GCCEGRUPYMSI
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If GCCEGRUPYMSI.APARENT=null
 [L]A_I = GCCEGRUPYMSI.freeSnapshot
 GCCEGRUPYMSI.snapshotEnabled = 0
 GCCEGRUPYMSI.setAccessorEnabled = 0
Endif

If fmet GCCEGRUPYMSI.ACTX.AGETAFCRIGHT(GCCEGRUPYMSI,"GESCYM",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:CRY]
Read [F:CRY]CRY0 = [L]_PYM;[L]_GRU;[L]_LIN
If fstat
[L]A_ERROR = [L]_PYM+"~"+[L]_GRU+"~"+num$([L]_LIN)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(GCCEGRUPYMSI,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet GCCEGRUPYMSI.ACTX.AGETAFCRIGHTR(GCCEGRUPYMSI,"GESCYM",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet GCCEGRUPYMSI.ACTX.ASTACRITROLE(GCCEGRUPYMSI,[L]_PYM+"~"+[L]_GRU+"~"+num$([L]_LIN)
& ,"CYM","CRY",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet GCCEGRUPYMSI.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

GCCEGRUPYMSI.CRY.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet GCCEGRUPYMSI.CRY.AREAD([L]_PYM,[L]_GRU,[L]_LIN))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet GCCEGRUPYMSI.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & GCCEGRUPYMSI.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet GCCEGRUPYMSI._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If GCCEGRUPYMSI.APARENT=null
 GCCEGRUPYMSI.snapshotEnabled = 1
 GCCEGRUPYMSI.setAccessorEnabled = 1
Endif
LogicClose File [CRY] ,[CYK]
End



