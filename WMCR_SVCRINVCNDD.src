#<AdxTL>@(#)0.0.0.0 $Revision$Class Scheduled invoice
# Supervisor
## CRUD-CLASSE ## SVCRINVCNDD
# 2018-08-27 12:50:29 967


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File SVCRINVCNDD [SVICD_]

If !SILENCE : Call TRACE("2 --> Local Instance C_SVCRINVCNDD") From ASYRCOM : Endif
Local Instance SVCRINVCNDD Using C_SVCRINVCNDD

If !SILENCE : Call TRACE("3 --> New Instance C_SVCRINVCNDD") From ASYRCOM : Endif
SVCRINVCNDD = NewInstance C_SVCRINVCNDD AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [SVICD_]SVICD0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of SVCRINVCNDD") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet SVCRINVCNDD.AREAD([SVICD_]VCRTYP,[SVICD_]VCRNUMORI,[SVICD_]VCRLINORI,[SVICD_]VCRSEQORI,[SVICD_]VCRINVCNDLIN))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("SVCRINVCNDD.VCRTYP ="-num$(SVCRINVCNDD.VCRTYP)) From ASYRCOM
 Call TRACE("SVCRINVCNDD.VCRNUMORI ="-num$(SVCRINVCNDD.VCRNUMORI)) From ASYRCOM
 Call TRACE("SVCRINVCNDD.VCRLINORI ="-num$(SVCRINVCNDD.VCRLINORI)) From ASYRCOM
 Call TRACE("SVCRINVCNDD.VCRSEQORI ="-num$(SVCRINVCNDD.VCRSEQORI)) From ASYRCOM
 Call TRACE("SVCRINVCNDD.VCRINVCNDLIN ="-num$(SVCRINVCNDD.VCRINVCNDLIN)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(SVCRINVCNDD.AKEYS)
  Call TRACE("-"-num$(I)-":"-SVCRINVCNDD.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [SVICD_]
FreeGroup SVCRINVCNDD
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(SVCRINVCNDD,ACLE,ASTATUS,_ETAG)
Variable Instance SVCRINVCNDD Using C_SVCRINVCNDD
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Tinyint _VCRTYP
Local Char _VCRNUMORI(20)
Local Integer _VCRLINORI
Local Integer _VCRSEQORI
Local Integer _VCRINVCNDLIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_VCRTYP = val([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_VCRNUMORI = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_VCRLINORI = val([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_VCRSEQORI = val([L]CLE(4)) : Endif
If [L]CLE(5)<>"" : [L]_VCRINVCNDLIN = val([L]CLE(5)) : Endif
Raz [L]_ETAG
Local File SVCRINVCNDD [SVICD]
Default File [F:SVICD]
Read [F:SVICD]SVICD0 = [L]_VCRTYP;[L]_VCRNUMORI;[L]_VCRLINORI;[L]_VCRSEQORI;[L]_VCRINVCNDLIN
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:SVICD]UPDTICK)>0
 [L]_ETAG = num$([F:SVICD]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(SVCRINVCNDD,ACLE,ASTATUS)
Variable Instance SVCRINVCNDD Using C_SVCRINVCNDD
Value Char ACLE
Variable Integer ASTATUS
Local Tinyint _VCRTYP
Local Char _VCRNUMORI(20)
Local Integer _VCRLINORI
Local Integer _VCRSEQORI
Local Integer _VCRINVCNDLIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_VCRTYP = val([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_VCRNUMORI = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_VCRLINORI = val([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_VCRSEQORI = val([L]CLE(4)) : Endif
If [L]CLE(5)<>"" : [L]_VCRINVCNDLIN = val([L]CLE(5)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SVCRINVCNDD.AREAD([L]_VCRTYP,[L]_VCRNUMORI,[L]_VCRLINORI,[L]_VCRSEQORI,[L]_VCRINVCNDLIN))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(SVCRINVCNDD,_VCRTYP,_VCRNUMORI,_VCRLINORI,_VCRSEQORI,_VCRINVCNDLIN,ASTATUS)
Variable Instance SVCRINVCNDD Using C_SVCRINVCNDD
Value Tinyint _VCRTYP
Value Char _VCRNUMORI
Value Integer _VCRLINORI
Value Integer _VCRSEQORI
Value Integer _VCRINVCNDLIN
Variable Integer ASTATUS

If SVCRINVCNDD = null : End : Endif

Gosub AVARIABLES From WMC00SVCRINVCNDD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If SVCRINVCNDD.APARENT=null
 [L]A_I = SVCRINVCNDD.freeSnapshot
 SVCRINVCNDD.snapshotEnabled = 0
 SVCRINVCNDD.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & SVCRINVCNDD.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet SVCRINVCNDD._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If SVCRINVCNDD.APARENT=null
 SVCRINVCNDD.snapshotEnabled = 1
 SVCRINVCNDD.setAccessorEnabled = 1
Endif
LogicClose File [SVICD]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet SVCRINVCNDD._ACTION_PARAM("AREAD_BEFORE",[L]_VCRTYP,[L]_VCRNUMORI,[L]_VCRLINORI,[L]_VCRSEQORI,[L]_VCRINVCNDLIN))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:SVICD]
Read [F:SVICD]SVICD0 = [L]_VCRTYP;[L]_VCRNUMORI;[L]_VCRLINORI;[L]_VCRSEQORI;[L]_VCRINVCNDLIN
If fstat
 [L]A_ERROR = num$([L]_VCRTYP)+"~"+[L]_VCRNUMORI+"~"+num$([L]_VCRLINORI)+"~"+num$([L]_VCRSEQORI)+"~"+num$([L]_VCRINVCNDLIN)
& 
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(SVCRINVCNDD,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:SVICD]AUUID)>0 & [F:SVICD]AUUID=NullUuid
 [F:SVICD]AUUID = getUuid
Endif
SetInstance SVCRINVCNDD With [F:SVICD]
SVCRINVCNDD.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet SVCRINVCNDD.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="SVCRINVCNDD" & ZONE="DESAXX" & IDENT1="" & IDENT2=""
 Call ASETTEXTRA(SVCRINVCNDD.AXX,SVCRINVCNDD.AllocGrp(),"DESAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 SVCRINVCNDD.AXX(maxtab(SVCRINVCNDD.AXX)).FLG = 0
Next AXX
If !len(fmet SVCRINVCNDD.AGETTEXTRA("DESAXX"))
 Call ASETTEXTRA(SVCRINVCNDD.AXX,SVCRINVCNDD.AllocGrp(),"DESAXX",
& fmet SVCRINVCNDD.AGETTEXTRALAN("DESAXX",SVCRINVCNDD.ACTX.AFOLD.ALANGDEF),
& SVCRINVCNDD.ACTX.LAN) From ASYRSUB
Endif
For [AXX] Where CODFIC="SVCRINVCNDD" & ZONE="SHOAXX" & IDENT1="" & IDENT2=""
 Call ASETTEXTRA(SVCRINVCNDD.AXX,SVCRINVCNDD.AllocGrp(),"SHOAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 SVCRINVCNDD.AXX(maxtab(SVCRINVCNDD.AXX)).FLG = 0
Next AXX
If !len(fmet SVCRINVCNDD.AGETTEXTRA("SHOAXX"))
 Call ASETTEXTRA(SVCRINVCNDD.AXX,SVCRINVCNDD.AllocGrp(),"SHOAXX",
& fmet SVCRINVCNDD.AGETTEXTRALAN("SHOAXX",SVCRINVCNDD.ACTX.AFOLD.ALANGDEF),
& SVCRINVCNDD.ACTX.LAN) From ASYRSUB
Endif

Return



