#<AdxTL>@(#)0.0.0.0 $Revision$Class Loan return
# Supervisor
## CRUD-CLASSE ## SRETURNL
# 2018-08-27 13:35:28 822


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File SRETURN [SRH_]

If !SILENCE : Call TRACE("2 --> Local Instance R_SRETURNL") From ASYRCOM : Endif
Local Instance SRETURNL Using R_SRETURNL

If !SILENCE : Call TRACE("3 --> New Instance R_SRETURNL") From ASYRCOM : Endif
SRETURNL = NewInstance R_SRETURNL AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [SRH_]SRH0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of SRETURN") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet SRETURNL.AREAD([SRH_]SRHNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("SRETURNL.SRH.SRHNUM ="-num$(SRETURNL.SRH.SRHNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(SRETURNL.SRH.AKEYS)
  Call TRACE("-"-num$(I)-":"-SRETURNL.SRH.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [SRH_]
FreeGroup SRETURNL
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(SRETURNL,ACLE,ASTATUS,_ETAG)
Variable Instance SRETURNL Using R_SRETURNL
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _SRHNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SRHNUM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File SRETURN [SRH]
Default File [F:SRH]
Read [F:SRH]SRH0 = [L]_SRHNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:SRH]UPDTICK)>0
 [L]_ETAG = num$([F:SRH]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(SRETURNL,ACLE,ASTATUS)
Variable Instance SRETURNL Using R_SRETURNL
Value Char ACLE
Variable Integer ASTATUS
Local Char _SRHNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SRHNUM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SRETURNL.AREAD([L]_SRHNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(SRETURNL,_SRHNUM,ASTATUS)
Variable Instance SRETURNL Using R_SRETURNL
Value Char _SRHNUM
Variable Integer ASTATUS

If SRETURNL = null : End : Endif

Gosub AVARIABLES From WMR00SRETURNL
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If SRETURNL.APARENT=null
 [L]A_I = SRETURNL.freeSnapshot
 SRETURNL.snapshotEnabled = 0
 SRETURNL.setAccessorEnabled = 0
Endif

If fmet SRETURNL.ACTX.AGETAFCRIGHT(SRETURNL,"GESSRL",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:SRH]
Read [F:SRH]SRH0 = [L]_SRHNUM
If fstat
[L]A_ERROR = [L]_SRHNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(SRETURNL,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:SRH]STOFCY
[L]A_STRACC = ""
If fmet SRETURNL.ACTX.AGETAFCRIGHTR(SRETURNL,"GESSRL",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet SRETURNL.ACTX.ASTACRITROLE(SRETURNL,[L]_SRHNUM
& ,"SRL","SRH",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet SRETURNL.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

SRETURNL.SRH.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet SRETURNL.SRH.AREAD([L]_SRHNUM))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet SRETURNL.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & SRETURNL.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet SRETURNL._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If SRETURNL.APARENT=null
 SRETURNL.snapshotEnabled = 1
 SRETURNL.setAccessorEnabled = 1
Endif
LogicClose File [SRH] ,[SRD]
End



