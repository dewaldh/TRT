#<AdxTL>@(#)0.0.0.0 $Revision$Class Expense
# Supervisor
## CRUD-CLASSE ## EXPENSES
# 2018-08-27 12:31:13 204


############################################################################################
### Subprog _ADELETE
############################################################################################
Subprog _ADELETE(EXPENSES,ASTATUS)
Variable Instance EXPENSES Using C_EXPENSES
Variable Integer ASTATUS

If EXPENSES = null : End : Endif

Gosub _AVARIABLES From WMC00EXPENSES

[L]A_STRSITE = EXPENSES.FCY
[L]A_STRACC = ""
Local Instance ALNKDELTAB Using C_ALNKDELTAB
Gosub ADELETE_EXPENSES

End

############################################################################################
### Subprog ADELETE
############################################################################################
Subprog ADELETE(EXPENSES,ASTATUS)
Variable Instance EXPENSES Using C_EXPENSES
Variable Integer ASTATUS

If EXPENSES = null : End : Endif

Gosub AVARIABLES From WMC00EXPENSES
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

Local Instance ALNKDELTAB Using C_ALNKDELTAB

[L]A_STRSITE = EXPENSES.FCY
[L]A_STRACC = ""
Gosub ADELETE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

If !adxlog
 Gosub ADELETE_TR_EXPENSES
Else
 Gosub ADELETE_EXPENSES
Endif

$ADELETE_END
End


$ADELETE_CONTROL
Gosub _ADELETE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Verification delete
[L]ASTATUS = max([L]ASTATUS,func ASYRSUB.VERIFY_INSTANCE(EXPENSES,ALNKDELTAB))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _ADELETE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_BEFORE
If EXPENSES.ASTALIN = [V]CST_ANEWDEL : Return : Endif
EXPENSES.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.CODEXPENS)
 If EXPENSES.CODEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.CODEXPENS([L]A_I).ACTION("ADELETE_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.DIMCEN)
 If EXPENSES.DIMCEN([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.DIMCEN([L]A_I).ACTION("ADELETE_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.LNKRATLED)
 If EXPENSES.LNKRATLED([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.LNKRATLED([L]A_I).ACTION("ADELETE_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.RATEXPENS)
 If EXPENSES.RATEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.RATEXPENS([L]A_I).ACTION("ADELETE_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_AFTER

For [L]A_I=1 To maxtab(EXPENSES.CODEXPENS)
 If EXPENSES.CODEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.CODEXPENS([L]A_I).ACTION("ADELETE_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.DIMCEN)
 If EXPENSES.DIMCEN([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.DIMCEN([L]A_I).ACTION("ADELETE_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.LNKRATLED)
 If EXPENSES.LNKRATLED([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.LNKRATLED([L]A_I).ACTION("ADELETE_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENSES.RATEXPENS)
 If EXPENSES.RATEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.RATEXPENS([L]A_I).ACTION("ADELETE_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_TR_EXPENSES
Trbegin [F:EXS]
 Gosub ADELETE_EXPENSES
 If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$ADELETE_EXPENSES
[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.ACTION("ADELETE_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = func ASYRSUB.DELETE_LINKS(EXPENSES,ALNKDELTAB)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

If find( EXPENSES.ASTALIN,[V]CST_ANEW,[V]CST_ADEL) | 
& (find( EXPENSES.ASTALIN,[V]CST_AUPD) & 
& fmet EXPENSES.AGETATTRIBUTE("BEXS","$isLoaded")="true")
[L]ASTATUS = func WMC00EXPENSES._MAJSQL_EXPENSES_BEXS(EXPENSES,EXPENSES.BEXS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
[L]ASTATUS = max([L]ASTATUS,func WMC00EXPENSES._MAJSQL_EXPENSES(EXPENSES))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet EXPENSES.ACTION("ADELETE_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_ABORT
Rollback
$_ADELETE_ABORT
If EXPENSES.snapshotEnabled=1
 [L]A_RETIK = EXPENSES.revertUpdTick
Endif
[L]ASTATUS = max(fmet EXPENSES.ACTION("ADELETE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#

#-----------------------------------------------------#
$_ADELETE_AFTER
Return



