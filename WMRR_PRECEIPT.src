#<AdxTL>@(#)0.0.0.0 $Revision$Class Receipt
# Supervisor
## CRUD-CLASSE ## PRECEIPT
# 2018-08-27 13:25:39 786


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File PRECEIPT [PTH_]

If !SILENCE : Call TRACE("2 --> Local Instance R_PRECEIPT") From ASYRCOM : Endif
Local Instance PRECEIPT Using R_PRECEIPT

If !SILENCE : Call TRACE("3 --> New Instance R_PRECEIPT") From ASYRCOM : Endif
PRECEIPT = NewInstance R_PRECEIPT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [PTH_]PTH0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of PRECEIPT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet PRECEIPT.AREAD([PTH_]PTHNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("PRECEIPT.PTH.PTHNUM ="-num$(PRECEIPT.PTH.PTHNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(PRECEIPT.PTH.AKEYS)
  Call TRACE("-"-num$(I)-":"-PRECEIPT.PTH.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [PTH_]
FreeGroup PRECEIPT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(PRECEIPT,ACLE,ASTATUS,_ETAG)
Variable Instance PRECEIPT Using R_PRECEIPT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _PTHNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PTHNUM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File PRECEIPT [PTH]
Default File [F:PTH]
Read [F:PTH]PTH0 = [L]_PTHNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:PTH]UPDTICK)>0
 [L]_ETAG = num$([F:PTH]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(PRECEIPT,ACLE,ASTATUS)
Variable Instance PRECEIPT Using R_PRECEIPT
Value Char ACLE
Variable Integer ASTATUS
Local Char _PTHNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PTHNUM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PRECEIPT.AREAD([L]_PTHNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(PRECEIPT,_PTHNUM,ASTATUS)
Variable Instance PRECEIPT Using R_PRECEIPT
Value Char _PTHNUM
Variable Integer ASTATUS

If PRECEIPT = null : End : Endif

Gosub AVARIABLES From WMR00PRECEIPT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If PRECEIPT.APARENT=null
 [L]A_I = PRECEIPT.freeSnapshot
 PRECEIPT.snapshotEnabled = 0
 PRECEIPT.setAccessorEnabled = 0
Endif

If fmet PRECEIPT.ACTX.AGETAFCRIGHT(PRECEIPT,"GESPTH2",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:PTH]
Read [F:PTH]PTH0 = [L]_PTHNUM
If fstat
[L]A_ERROR = [L]_PTHNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PRECEIPT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:PTH]PRHFCY
[L]A_STRACC = ""
If fmet PRECEIPT.ACTX.AGETAFCRIGHTR(PRECEIPT,"GESPTH2",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet PRECEIPT.ACTX.ASTACRITROLE(PRECEIPT,[L]_PTHNUM
& ,"PTH","PTH",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet PRECEIPT.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

PRECEIPT.PTH.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet PRECEIPT.PTH.AREAD([L]_PTHNUM))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PRECEIPT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & PRECEIPT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet PRECEIPT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If PRECEIPT.APARENT=null
 PRECEIPT.snapshotEnabled = 1
 PRECEIPT.setAccessorEnabled = 1
Endif
LogicClose File [PTH] ,[PTD] ,[PTHCAL] ,[PVF] ,[PVFCAL] ,[PVV]
End



