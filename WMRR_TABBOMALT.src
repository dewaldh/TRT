#<AdxTL>@(#)0.0.0.0 $Revision$Class BOM code
# Supervisor
## CRUD-CLASSE ## TABBOMALT
# 2018-08-27 13:36:32 271


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABBOMALT [TBO_]

If !SILENCE : Call TRACE("2 --> Local Instance R_TABBOMALT") From ASYRCOM : Endif
Local Instance TABBOMALT Using R_TABBOMALT

If !SILENCE : Call TRACE("3 --> New Instance R_TABBOMALT") From ASYRCOM : Endif
TABBOMALT = NewInstance R_TABBOMALT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TBO_]TBO0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TABBOMALT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TABBOMALT.AREAD([TBO_]BOMALTTYP,[TBO_]BOMALT))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TABBOMALT.TBO.BOMALTTYP ="-num$(TABBOMALT.TBO.BOMALTTYP)) From ASYRCOM
 Call TRACE("TABBOMALT.TBO.BOMALT ="-num$(TABBOMALT.TBO.BOMALT)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TABBOMALT.TBO.AKEYS)
  Call TRACE("-"-num$(I)-":"-TABBOMALT.TBO.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TBO_]
FreeGroup TABBOMALT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TABBOMALT,ACLE,ASTATUS,_ETAG)
Variable Instance TABBOMALT Using R_TABBOMALT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Tinyint _BOMALTTYP
Local Shortint _BOMALT
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BOMALTTYP = val([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_BOMALT = val([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File TABBOMALT [TBO]
Default File [F:TBO]
Read [F:TBO]TBO0 = [L]_BOMALTTYP;[L]_BOMALT
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TBO]UPDTICK)>0
 [L]_ETAG = num$([F:TBO]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TABBOMALT,ACLE,ASTATUS)
Variable Instance TABBOMALT Using R_TABBOMALT
Value Char ACLE
Variable Integer ASTATUS
Local Tinyint _BOMALTTYP
Local Shortint _BOMALT
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BOMALTTYP = val([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_BOMALT = val([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TABBOMALT.AREAD([L]_BOMALTTYP,[L]_BOMALT))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TABBOMALT,_BOMALTTYP,_BOMALT,ASTATUS)
Variable Instance TABBOMALT Using R_TABBOMALT
Value Tinyint _BOMALTTYP
Value Shortint _BOMALT
Variable Integer ASTATUS

If TABBOMALT = null : End : Endif

Gosub AVARIABLES From WMR00TABBOMALT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TABBOMALT.APARENT=null
 [L]A_I = TABBOMALT.freeSnapshot
 TABBOMALT.snapshotEnabled = 0
 TABBOMALT.setAccessorEnabled = 0
Endif

If fmet TABBOMALT.ACTX.AGETAFCRIGHT(TABBOMALT,"GESTBO",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:TBO]
Read [F:TBO]TBO0 = [L]_BOMALTTYP;[L]_BOMALT
If fstat
[L]A_ERROR = num$([L]_BOMALTTYP)+"~"+num$([L]_BOMALT)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABBOMALT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet TABBOMALT.ACTX.AGETAFCRIGHTR(TABBOMALT,"GESTBO",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet TABBOMALT.ACTX.ASTACRITROLE(TABBOMALT,num$([L]_BOMALTTYP)+"~"+num$([L]_BOMALT)
& ,"TBO","TBO",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABBOMALT.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

TABBOMALT.TBO.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet TABBOMALT.TBO.AREAD([L]_BOMALTTYP,[L]_BOMALT))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABBOMALT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & TABBOMALT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet TABBOMALT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If TABBOMALT.APARENT=null
 TABBOMALT.snapshotEnabled = 1
 TABBOMALT.setAccessorEnabled = 1
Endif
LogicClose File [TBO]
End



