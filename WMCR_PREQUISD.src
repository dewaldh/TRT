#<AdxTL>@(#)0.0.0.0 $Revision$Class Purchase request detail
# Supervisor
## CRUD-CLASSE ## PREQUISD
# 2018-08-27 12:42:50 194


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File PREQUISD [PSD_]

If !SILENCE : Call TRACE("2 --> Local Instance C_PREQUISD") From ASYRCOM : Endif
Local Instance PREQUISD Using C_PREQUISD

If !SILENCE : Call TRACE("3 --> New Instance C_PREQUISD") From ASYRCOM : Endif
PREQUISD = NewInstance C_PREQUISD AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [PSD_]PSD0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of PREQUISD") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet PREQUISD.AREAD([PSD_]PSHNUM,[PSD_]PSDLIN))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("PREQUISD.PSHNUM ="-num$(PREQUISD.PSHNUM)) From ASYRCOM
 Call TRACE("PREQUISD.PSDLIN ="-num$(PREQUISD.PSDLIN)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(PREQUISD.AKEYS)
  Call TRACE("-"-num$(I)-":"-PREQUISD.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [PSD_]
FreeGroup PREQUISD
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(PREQUISD,ACLE,ASTATUS,_ETAG)
Variable Instance PREQUISD Using C_PREQUISD
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _PSHNUM(20)
Local Integer _PSDLIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PSHNUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_PSDLIN = val([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File PREQUISD [PSD]
Default File [F:PSD]
Read [F:PSD]PSD0 = [L]_PSHNUM;[L]_PSDLIN
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:PSD]UPDTICK)>0
 [L]_ETAG = num$([F:PSD]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(PREQUISD,ACLE,ASTATUS)
Variable Instance PREQUISD Using C_PREQUISD
Value Char ACLE
Variable Integer ASTATUS
Local Char _PSHNUM(20)
Local Integer _PSDLIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PSHNUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_PSDLIN = val([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PREQUISD.AREAD([L]_PSHNUM,[L]_PSDLIN))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(PREQUISD,_PSHNUM,_PSDLIN,ASTATUS)
Variable Instance PREQUISD Using C_PREQUISD
Value Char _PSHNUM
Value Integer _PSDLIN
Variable Integer ASTATUS

If PREQUISD = null : End : Endif

Gosub AVARIABLES From WMC00PREQUISD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If PREQUISD.APARENT=null
 [L]A_I = PREQUISD.freeSnapshot
 PREQUISD.snapshotEnabled = 0
 PREQUISD.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & PREQUISD.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet PREQUISD._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If PREQUISD.APARENT=null
 PREQUISD.snapshotEnabled = 1
 PREQUISD.setAccessorEnabled = 1
Endif
LogicClose File [PSD] ,[CAL]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet PREQUISD._ACTION_PARAM("AREAD_BEFORE",[L]_PSHNUM,[L]_PSDLIN))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:PSD]
Read [F:PSD]PSD0 = [L]_PSHNUM;[L]_PSDLIN
If fstat
[L]A_ERROR = [L]_PSHNUM+"~"+num$([L]_PSDLIN)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PREQUISD,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:PSD]PSHFCY
[L]A_STRACC = ""
If dim([F:PSD]AUUID)>0 & [F:PSD]AUUID=NullUuid
 [F:PSD]AUUID = getUuid
Endif
If dim([F:PSD]TEXTE)>0: Raz [F:PSD]TEXTE: Endif
SetInstance PREQUISD With [F:PSD]
PREQUISD.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:CAL]
 [L]A_N2=1
 Read [F:CAL]CAL0 = "PSD";0;[F:PSD]PSHNUM;[F:PSD]PSDLIN;0;"";1
 If !fstat
  PREQUISD.PSDCAL(A_N2) = NewInstance  C_CPTANALIN(PREQUISD.ACTX,NullUuid,[L]A_N2,PREQUISD,"PSDCAL") AllocGroup PREQUISD
  [L]ASTATUS = max([L]ASTATUS,fmet PREQUISD.PSDCAL(A_N2).ADDINSTANCE_BOUND)
  If dim([F:CAL]AUUID)>0 & [F:CAL]AUUID=NullUuid
   [F:CAL]AUUID = getUuid
  Endif
  SetInstance PREQUISD.PSDCAL(A_N2) With [F:CAL]
  [L]A_NEWCOL = 0
  For [L]A_I=1 To 10
   If ([F:CAL]COA([L]A_I-1)<>"" or [F:CAL]ACC([L]A_I-1)<>"")
    [L]A_NEWCOL += 1
    PREQUISD.PSDCAL(A_N2).C_COA(A_NEWCOL) = NewInstance  C_CPTANALIN_C_COA(PREQUISD.ACTX,NullUuid,[L]A_I,PREQUISD.PSDCAL(A_N2),"C_COA") AllocGroup PREQUISD
    PREQUISD.PSDCAL(A_N2).C_COA(A_NEWCOL).COA = [F:CAL]COA([L]A_I-1)
    PREQUISD.PSDCAL(A_N2).C_COA(A_NEWCOL).ACC = [F:CAL]ACC([L]A_I-1)
    [L]ASTATUS = max([L]ASTATUS,fmet PREQUISD.PSDCAL(A_N2).C_COA(A_NEWCOL).ACTION("AREAD_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
   Endif
  Next
  [L]A_NEWCOL = 0
  For [L]A_I=1 To 20
   [L]A_NEWCOL += 1
   PREQUISD.PSDCAL(A_N2).C_DIE(A_NEWCOL) = NewInstance  C_CPTANALIN_C_DIE(PREQUISD.ACTX,NullUuid,[L]A_I,PREQUISD.PSDCAL(A_N2),"C_DIE") AllocGroup PREQUISD
   PREQUISD.PSDCAL(A_N2).C_DIE(A_NEWCOL).DIE = [F:CAL]DIE([L]A_I-1)
   PREQUISD.PSDCAL(A_N2).C_DIE(A_NEWCOL).CCE = [F:CAL]CCE([L]A_I-1)
   [L]ASTATUS = max([L]ASTATUS,fmet PREQUISD.PSDCAL(A_N2).C_DIE(A_NEWCOL).ACTION("AREAD_AFTER"))
   If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
  Next
  [L]A_NEWCOL = 0
  For [L]A_I=1 To 10
   If ([F:CAL]LED([L]A_I-1)<>"")
    [L]A_NEWCOL += 1
    PREQUISD.PSDCAL(A_N2).C_LED(A_NEWCOL) = NewInstance  C_CPTANALIN_C_LED(PREQUISD.ACTX,NullUuid,[L]A_I,PREQUISD.PSDCAL(A_N2),"C_LED") AllocGroup PREQUISD
    PREQUISD.PSDCAL(A_N2).C_LED(A_NEWCOL).LED = [F:CAL]LED([L]A_I-1)
    [L]ASTATUS = max([L]ASTATUS,fmet PREQUISD.PSDCAL(A_N2).C_LED(A_NEWCOL).ACTION("AREAD_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
   Endif
  Next
  [L]ASTATUS = max([L]ASTATUS,fmet PREQUISD.PSDCAL(A_N2).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
  PREQUISD.PSDCAL(A_N2).ASTALIN = [V]CST_ALL
  [L]ASTATUS = max([L]ASTATUS,fmet PREQUISD.PSDCAL(A_N2).ASETATTRIBUTE("VCRNUM","$namProParent","PSHNUM"))
  [L]ASTATUS = max([L]ASTATUS,fmet PREQUISD.PSDCAL(A_N2).ASETATTRIBUTE("VCRLIN","$namProParent","PSDLIN"))
 Endif
Endif
#-----------------------------------------------------#

[L]A_NEWCOL = 0
For [L]A_I=1 To 9
 [L]A_NEWCOL += 1
 PREQUISD.C_DISCRG(A_NEWCOL) = NewInstance  C_PREQUISD_C_DISCRG(PREQUISD.ACTX,NullUuid,[L]A_I,PREQUISD,"C_DISCRG") AllocGroup PREQUISD
 [L]ASTATUS = max([L]ASTATUS,fmet PREQUISD.C_DISCRG(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 3
 [L]A_NEWCOL += 1
 PREQUISD.C_VACITM(A_NEWCOL) = NewInstance  C_PREQUISD_C_VACITM(PREQUISD.ACTX,NullUuid,[L]A_I,PREQUISD,"C_VACITM") AllocGroup PREQUISD
 PREQUISD.C_VACITM(A_NEWCOL).VAT = [F:PSD]VAT([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet PREQUISD.C_VACITM(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet PREQUISD.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



