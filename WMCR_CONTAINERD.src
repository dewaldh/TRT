#<AdxTL>@(#)0.0.0.0 $Revision$Class Container detail
# Supervisor
## CRUD-CLASSE ## CONTAINERD
# 2018-08-27 12:30:11 533


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File CONTAINERD [CTRD_]

If !SILENCE : Call TRACE("2 --> Local Instance C_CONTAINERD") From ASYRCOM : Endif
Local Instance CONTAINERD Using C_CONTAINERD

If !SILENCE : Call TRACE("3 --> New Instance C_CONTAINERD") From ASYRCOM : Endif
CONTAINERD = NewInstance C_CONTAINERD AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [CTRD_]CTRD0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of CONTAINERD") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet CONTAINERD.AREAD([CTRD_]CTRNUM,[CTRD_]CTRLIN))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("CONTAINERD.CTRNUM ="-num$(CONTAINERD.CTRNUM)) From ASYRCOM
 Call TRACE("CONTAINERD.CTRLIN ="-num$(CONTAINERD.CTRLIN)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(CONTAINERD.AKEYS)
  Call TRACE("-"-num$(I)-":"-CONTAINERD.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [CTRD_]
FreeGroup CONTAINERD
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(CONTAINERD,ACLE,ASTATUS,_ETAG)
Variable Instance CONTAINERD Using C_CONTAINERD
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CTRNUM(20)
Local Integer _CTRLIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CTRNUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CTRLIN = val([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File CONTAINERD [CTRD]
Default File [F:CTRD]
Read [F:CTRD]CTRD0 = [L]_CTRNUM;[L]_CTRLIN
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:CTRD]UPDTICK)>0
 [L]_ETAG = num$([F:CTRD]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(CONTAINERD,ACLE,ASTATUS)
Variable Instance CONTAINERD Using C_CONTAINERD
Value Char ACLE
Variable Integer ASTATUS
Local Char _CTRNUM(20)
Local Integer _CTRLIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CTRNUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CTRLIN = val([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet CONTAINERD.AREAD([L]_CTRNUM,[L]_CTRLIN))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(CONTAINERD,_CTRNUM,_CTRLIN,ASTATUS)
Variable Instance CONTAINERD Using C_CONTAINERD
Value Char _CTRNUM
Value Integer _CTRLIN
Variable Integer ASTATUS

If CONTAINERD = null : End : Endif

Gosub AVARIABLES From WMC00CONTAINERD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If CONTAINERD.APARENT=null
 [L]A_I = CONTAINERD.freeSnapshot
 CONTAINERD.snapshotEnabled = 0
 CONTAINERD.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & CONTAINERD.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet CONTAINERD._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If CONTAINERD.APARENT=null
 CONTAINERD.snapshotEnabled = 1
 CONTAINERD.setAccessorEnabled = 1
Endif
LogicClose File [CTRD]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet CONTAINERD._ACTION_PARAM("AREAD_BEFORE",[L]_CTRNUM,[L]_CTRLIN))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:CTRD]
Read [F:CTRD]CTRD0 = [L]_CTRNUM;[L]_CTRLIN
If fstat
[L]A_ERROR = [L]_CTRNUM+"~"+num$([L]_CTRLIN)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(CONTAINERD,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:CTRD]AUUID)>0 & [F:CTRD]AUUID=NullUuid
 [F:CTRD]AUUID = getUuid
Endif
SetInstance CONTAINERD With [F:CTRD]
CONTAINERD.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet CONTAINERD.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



