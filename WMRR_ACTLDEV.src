#<AdxTL>@(#)0.0.0.0 $Revision$Class Reserved brackets
# Supervisor
## CRUD-CLASSE ## ACTLDEV
# 2018-08-27 13:00:57 537


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ACTLDEV [ACD_]

If !SILENCE : Call TRACE("2 --> Local Instance R_ACTLDEV") From ASYRCOM : Endif
Local Instance ACTLDEV Using R_ACTLDEV

If !SILENCE : Call TRACE("3 --> New Instance R_ACTLDEV") From ASYRCOM : Endif
ACTLDEV = NewInstance R_ACTLDEV AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ACD_]ACD0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ACTLDEV") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ACTLDEV.AREAD([ACD_]COD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ACTLDEV.ACD.COD ="-num$(ACTLDEV.ACD.COD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ACTLDEV.ACD.AKEYS)
  Call TRACE("-"-num$(I)-":"-ACTLDEV.ACD.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ACD_]
FreeGroup ACTLDEV
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ACTLDEV,ACLE,ASTATUS,_ETAG)
Variable Instance ACTLDEV Using R_ACTLDEV
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _COD(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File ACTLDEV [ACD]
Default File [F:ACD]
Read [F:ACD]ACD0 = [L]_COD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ACD]UPDTICK)>0
 [L]_ETAG = num$([F:ACD]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ACTLDEV,ACLE,ASTATUS)
Variable Instance ACTLDEV Using R_ACTLDEV
Value Char ACLE
Variable Integer ASTATUS
Local Char _COD(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ACTLDEV.AREAD([L]_COD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ACTLDEV,_COD,ASTATUS)
Variable Instance ACTLDEV Using R_ACTLDEV
Value Char _COD
Variable Integer ASTATUS

If ACTLDEV = null : End : Endif

Gosub AVARIABLES From WMR00ACTLDEV
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ACTLDEV.APARENT=null
 [L]A_I = ACTLDEV.freeSnapshot
 ACTLDEV.snapshotEnabled = 0
 ACTLDEV.setAccessorEnabled = 0
Endif

If fmet ACTLDEV.ACTX.AGETAFCRIGHT(ACTLDEV,"GESACD",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:ACD]
Read [F:ACD]ACD0 = [L]_COD
If fstat
[L]A_ERROR = [L]_COD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ACTLDEV,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet ACTLDEV.ACTX.AGETAFCRIGHTR(ACTLDEV,"GESACD",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet ACTLDEV.ACTX.ASTACRITROLE(ACTLDEV,[L]_COD
& ,"ACD","ACD",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet ACTLDEV.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

ACTLDEV.ACD.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet ACTLDEV.ACD.AREAD([L]_COD))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ACTLDEV.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ACTLDEV.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ACTLDEV._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ACTLDEV.APARENT=null
 ACTLDEV.snapshotEnabled = 1
 ACTLDEV.setAccessorEnabled = 1
Endif
LogicClose File [ACD]
End



