#<AdxTL>@(#)0.0.0.0 $Revision$
#
#2. ON AN AP/AR INVOICE THE USER ENTERS and AMOUNT ON THE LINE LINKED To A PROJECT BUDGET.
#AFTER THE USER ENTERS THE AMOUNT, THE System WILL CALCULATE THE ACTUAL EXPENDITURE PLUS THE INVOICE AMOUNTS and COMPARE IT To THE PJM BUDGET and AP TOLERANCE OF THE COMPANY.
#
#1. If THE NEW ACTUAL AMOUNT IS GREATER THAN THE BUDGET AMOUNT PLUS THE COMPANY TOLERANCE (LESSER OF THE BUDGET AMOUNT MULTIPLIED By THE TOLERANCE PERCENTAGE and THE TOLERANCE AMOUNT) Then WARN THE
# USER and ALLOW THEM To SAVE THE INVOICE, BUT PREVENT POSTING. THE USER MUST Then Seek A BUDGET INCREASE. ONCE SUFFICIENT BUDGET EXISTS THE POSTING OPTION WILL Then BE AVAILABLE.
#
#2. If THE NEW ACTUAL AMOUNT IS LESS THAN or EQUAL To THE BUDGET AMOUNT PLUS THE COMPANY TOLERANCE, PROCESS As NORMAL.
#
#3. COMPANY TOLERANCE CALCULATED As PER EXAMPLE TABLE:
#
#SCENARIO 1 SCENARIO 1
#
#PROJECT BUDGET AMOUNT $2,000 $10,000
#
#AP TOLERANCE PERCENTAGE 2% = $40 2% = $200
#
#AP TOLERANCE AMOUNT $50 $50
#
#MAXIMUM AMOUNT POSTED AGAINST PROJECT
#
#BUDGET $2,040 $2,050
#



#------------------------------------------------------------------------------------#
#Actions
#------------------------------------------------------------------------------------#
$ACTION
Case ACTION
  When "OUVRE"      : Gosub OUVRE
  When "INICRE"     : Gosub INICRE
  When "RAZCRE"     : Gosub RAZCRE
  When "RAZDUP"     : Gosub RAZDUP
  When "APRES_CRE"  : Gosub APRES_CRE
  When "VERIF_MOD"  : Gosub VERIF_MOD
  When "STYLE"      : Gosub STYLE
  When "SETBOUT"    : Gosub SETBOUT
  When Default
Endcase
Return

#------------------------------------------------------------------------------------#
#Open needed tables
#------------------------------------------------------------------------------------#
$OUVRE

If clalev([F:YGAC]) = 0 : Local File GACCOUNT[YGAC] : Endif
If clalev([F:YCCE]) = 0 : Local File CACCE[YCCE] : Endif

Return

#------------------------------------------------------------------------------------#
#Do validations before create
#------------------------------------------------------------------------------------#
$INICRE
If func AFNC.ACTIV("YPJM") = 1
  Gosub VALIDATEPJM
Endif
Return

#------------------------------------------------------------------------------------#
#Do validations before modifications
#------------------------------------------------------------------------------------#
$VERIF_MOD
If func AFNC.ACTIV("YPJM") = 1
  Gosub VALIDATEPJM
  GOK = 0
Endif
Return


#------------------------------------------------------------------------------------#
#Do actions after creation
#------------------------------------------------------------------------------------#
$APRES_CRE
  #DFCX1-71 - Write-back Document number to Housing Job Stage if allocated to a Housing Job and Stage number
  If func AFNC.ACTIV("YHOU") = 1
    #Only for manually created documents
    If GWEBSERV = 0 and [F:SIH]NUM <> ""
      If [M:BIC0]YJBNR <> "" and [M:BIC0]YSTANBR > 0
        #Update Staging Record
        If !clalev ([F:YHJS])   : Local File YHOUJSTA   [F:YHJS]  : Endif

        Read [F:YHJS]YHJS0 = [M:BIC0]YJBNR;[M:BIC0]YSTANBR

        If fstat = 0

          [F:YHJS]YINVNUM = [F:SIH]NUM
          [F:YHJS]YAMTCLM = [F:SIH]AMTATI
          [F:YHJS]YDATCLM = [F:SIH]ACCDAT

          Rewrite [F:YHJS]

          If fstat <> 0
            Infbox("Failed to update Housing Job Stage")
          Endif

        Endif

        If clalev([F:YHJS])     : Close Local File [F:YHJS]     : Endif

      Endif
    Endif
  Endif
Return
#------------------------------------------------------------------------------------#
#Do validations before create
#------------------------------------------------------------------------------------#
$RAZCRE
  #DFCX1-71 - Disable the Job Number, Stage Number, and Supress Statement Printing for Housing Jobs
  If func AFNC.ACTIV("YHOU") = 1
    Diszo [M:BIC0]YJBNR,YSTANBR,YSTASUPP
    Affzo [M:BIC0]YJBNR,YSTANBR,YSTASUPP
  Endif
Return


#------------------------------------------------------------------------------------#
#Do validations before duplication
#------------------------------------------------------------------------------------#
$RAZDUP
  #DFCX1-71 - Disable the Job Number, Stage Number, and Supress Statement Printing for Housing Jobs
  If func AFNC.ACTIV("YHOU") = 1

    Raz [M:BIC0]YJBNR,YSTANBR,YSTASUPP

    If [M:BIC0]SIVTYP = "HINV" or [M:BIC0]SIVTYP = "HCRN"
      Actzo [M:BIC0]YJBNR,YSTANBR
    Else
      Diszo [M:BIC0]YJBNR,YSTANBR
    Endif

    Diszo [M:BIC0]YSTASUPP
    Affzo [M:BIC0]YJBNR,YSTANBR,YSTASUPP
  Endif
Return

#------------------------------------------------------------------------------------#
#Set Buttons
#------------------------------------------------------------------------------------#
$SETBOUT
  #DFCX1-72 - Disable the Delete link for Housing Job Invoices and Credit Notes
  If func AFNC.ACTIV("YHOU") = 1
    #Hide Delete button if its not called by a Web Service
    If GWEBSERV = 0
      If [M:BIC0]SIVTYP = "HINV" or [M:BIC0]SIVTYP = "HCRN"
        Call VIREBOUT(CHAINE,"A") From GOBJET
      Endif
    Endif
  Endif
Return


#------------------------------------------------------------------------------------#
#Do validations after record is displayed
#------------------------------------------------------------------------------------#
$STYLE
  #DFCX1-71 - Disable the Job Number and Stage Number fields for Housing Jobs
  If func AFNC.ACTIV("YHOU") = 1
    Diszo [M:BIC0]YJBNR,YSTANBR,YSTASUPP
    Affzo [M:BIC0]YJBNR,YSTANBR,YSTASUPP
  Endif
  #DFCX1-153 - DW -  the user must be unable to selected Project Header - Start
  If func AFNC.ACTIV("YPJM") = 1
    If dim([M:BIC1]PJTH)>0 : Chgfmt [M:BIC1]PJTH With "-K:40X" : Raz [M:BIC1]PJTH : Endif
  Endif
  #DFCX1-153 - DW -  the user must be unable to selected Project Header - End
Return

#------------------------------------------------------------------------------------#
#Sum Validations - DFCX1-153
#------------------------------------------------------------------------------------#
#$VERIF_CRE
#  Infbox("!")
#Return
#nolign = nolign - 1
#$AVANT_MODFIC
#Local Integer LIG : LIG = [M:BIC3]NBLIG * 2
#Local Integer NL : NL = 0
#For I = 1 To LIG
#  I += 1
#  NL = I/2
#  Infbox(num$([M:BIC3]AMTATILIN(nolign-NL)))
#Next I
#
#GOK = 0
#Return

#------------------------------------------------------------------------------------#
#Perform SINVTYP validation After Change
#------------------------------------------------------------------------------------#
Subprog AM_SIVTYP(VALEUR)
Variable Char    VALEUR
  #DFCX1-71 - Disable the Job Number and Stage Number fields for Housing Jobs
  If func AFNC.ACTIV("YHOU") = 1
    If VALEUR = "HINV" or VALEUR = "HCRN"
      Actzo [M:BIC0]YJBNR,YSTANBR
    Else
      Raz [M:BIC0]YJBNR,YSTANBR
      Diszo [M:BIC0]YJBNR,YSTANBR
    Endif
    #Enable the Supress printing field if its web services to enable editing value
    If GWEBSERV = 0
      Diszo [M:BIC0]YSTASUPP
    Else
      Actzo [M:BIC0]YSTASUPP
    Endif
    Affzo [M:BIC0]YJBNR,YSTANBR,YSTASUPP
  Endif
End


#------------------------------------------------------------------------------------#
#Perform YJBNR validation Control - DFCX1-71
#------------------------------------------------------------------------------------#
Subprog C_YJBNR(VALEUR)
Variable Char    VALEUR
If func AFNC.ACTIV("YHOU") = 1
  If VALEUR <> '' and GWEBSERV = 0

    Local Integer I : I = 0
    Local Char REQUEST(255)

    REQUEST(0) = "SELECT t0.YJBNR_0, t0.YJBTYP_0, t0.YHOUTYP_0 FROM YHOUJDET t0"
    REQUEST(0) -= "JOIN CACCE t1 ON t0.YJBNR_0 = t1.CCE_0 AND t1.DIE_0 = 'HJB' AND t1.ENAFLG_0 = 2"
    REQUEST(0) -= "WHERE UPPER(t0.YJBNR_0) = UPPER('" + VALEUR + "') AND t0.YCUSNO_0 = '" + [M:BIC0]BPR + "'"

    For (Char YJOBNUM(15), Char YJOBTYP(20), Char YHOUTYP(50)) From "5" Sql REQUEST As [YLNK]
      I += 1
      Break
    Next

    If I = 0
      #No record found
      Call ERRTIT(func AFNC.MES1(mess(6,6251,1), "Housing Job Number"), "Mandatory field") From GESECRAN
      Raz [M:BIC0]YJBNR
      Affzo [M:BIC0]YJBNR
      mkstat=2
    Endif

  Endif
Endif
End


#------------------------------------------------------------------------------------#
#Perform YSTANBR validation Control - DFCX1-71
#------------------------------------------------------------------------------------#
Subprog C_YSTANBR(VALEUR)
Variable Decimal    VALEUR
If func AFNC.ACTIV("YHOU") = 1
  If VALEUR <> 0 and GWEBSERV = 0
    Local Integer I : I = 0
    Local Char REQUEST(255)(1..2)

    REQUEST(1) = "SELECT t0.YSTANBR_0, t0.YSTAGENAM_0, t0.YINVNUM_0 FROM YHOUJSTA t0"
    REQUEST(1) -= "JOIN CACCE t1 ON t0.YJBNR_0 = t1.CCE_0 AND t1.DIE_0 = 'HJB' AND t1.ENAFLG_0 = 2"
    REQUEST(1) -= "WHERE t0.YSTANBR_0 = " + num$(VALEUR) + " AND t0.YJBNR_0 = '" + [M:BIC0]YJBNR + "'"

    If [M:BIC0]SIVTYP = "HINV"
      REQUEST(2) -= "AND t0.YDATCLM_0 = '1753-01-01' and t0.YINVNUM_0 = '' and t0.YAMTCLM_0 = 0 and t0.YACTCMPDAT_0 <> '1753-01-01'"
    Elsif [M:BIC0]SIVTYP = "HCRN"
      REQUEST(2) -= "AND t0.YINVNUM_0 <> ''"
    Endif
    REQUEST(2) -= "ORDER BY 1"

    For (Integer YSTAGE, Char YSTAGNAME(50), Char YINVNO(50)) From "5" Sql REQUEST As [YLNK]
      I += 1
      #[M:BIC1]INVNUM = [YLNK]YINVNO
      #Affzo [M:BIC1]INVNUM
      Break
    Next

    If I = 0
      #No record found
      Call ERRTIT(func AFNC.MES1(mess(6,6251,1), "Housing Job Stage"), "Mandatory field") From GESECRAN
      Raz [M:BIC0]YSTANBR
      Affzo [M:BIC0]YSTANBR
      mkstat=2
    Endif

  Endif
Endif
End

#------------------------------------------------------------------------------------#
#Do PJM validations on accounts
#------------------------------------------------------------------------------------#
#OLD CODE-----------------------------------------------------------------------------
#Subprog AP_PJTLIN(VALEUR)
#Variable Char    VALEUR()
#
#Local Integer YVAL
#Local Char YAMT1
#
#If VALEUR = ''
#  YVAL = func YDFCGENERAL.VAL_PJM([M:BIC3]ACC1(nolign-1))
#  If YVAL = 2
##    Infbox mess(1,6201,1)
#    Call ERRTIT( mess(1,6201,1),"Mandatory field") From GESECRAN
#    mkstat = 2
#  Endif
#Else
#
#If instr(1,VALEUR,":") > 0
#  YAMT1 = seg$(VALEUR,instr(1,VALEUR,":")+1,len(VALEUR))
#  [M:BIC3]YBUDAMT(nolign-1) =  val( YAMT1)
#  Affzo [M:BIC3]YBUDAMT(nolign-1)
#  VALEUR = left$(VALEUR,instr(1,VALEUR,":")-1)
#Endif
#
#  #get the amount remaining.
#  Local Char ZSQL(255)(3)
#  Local Decimal YSPENT
#  ZSQL(0) = "select SUM(L.AMTNOTLIN_0 * H.SNS_0) as [amount spent] FROM BPCINVLIG L "
#  ZSQL(1) = "LEFT OUTER JOIN PINVOICE H on H.NUM_0 = L.NUM_0 where PJTLIN_0 = '" + VALEUR + "' AND H.STA_0 = 2"
#
#For (Decimal YAMT) From "5" Sql ZSQL As [YLNK]
#
#  [M:BIC3]YALLOCAMT(nolign-1) = [F:YLNK]YAMT
#  Affzo [M:BIC3]YALLOCAMT(nolign-1)
#
#  [M:BIC3]YRMNAMT(nolign-1) = [M:BIC3]YBUDAMT(nolign-1) - [M:BIC3]YALLOCAMT(nolign-1)
#  Affzo [M:BIC3]YRMNAMT(nolign-1)
#
#  If [M:BIC3]AMTNOTLIN(nolign-1) > [M:BIC3]YRMNAMT(nolign-1)
#    GMESSAGE = "The invoice amount before tax is more than the remaining budgeted amount."
#    GERR = 1
#    zonsui = "[M:BIC3]AMTATILIN(" + num$(nolign - 1) + ")"
#  Endif
#Next
#
#Endif
#End
Subprog AP_PJTLIN(VALEUR)
Variable Char    VALEUR()
End #Per Richard as its preventing Housing Invoices - JANMULDER
#Validate PJM account value
If func AFNC.ACTIV("YPJM") = 1
  If VALEUR = ""
    If clalev([F:GAC]) = 0 : Local File GACCOUNT [GAC] : Endif
    Filter [F:GAC] Where ACC = [M:BIC3]ACC1(nolign-1)
      For [F:GAC]
      If [F:GAC]YPJM <> 2
        Call ERRTIT(mess(1,6201,1),"Mandatory field") From GESECRAN
        mkstat = 2
        End
      Endif
      Next
      Filter [F:YGAC]
  Endif

  #GET THE AMOUNT REMAINING.
  If VALEUR <> ""

  #GET THE BUDGET
     If instr(1,VALEUR,":") > 0
      YAMT1 = seg$(VALEUR,instr(1,VALEUR,":")+1,len(VALEUR))
      [M:BIC3]YBUDAMT(nolign-1) =  val(YAMT1)
      Affzo [M:BIC3]YBUDAMT(nolign-1)
      VALEUR = left$(VALEUR,instr(1,VALEUR,":")-1)
    Endif

  #GET THE AMOUNT REMAINING FOR THE LINE
    Local Char ZSQL(255)(3)
    Local Decimal YSPENT
    ZSQL(0) = "select SUM(L.AMTNOTLIN_0 * H.SNS_0) as [amount spent] FROM BPCINVLIG L "
    ZSQL(1) = "LEFT OUTER JOIN PINVOICE H on H.NUM_0 = L.NUM_0 where PJTLIN_0 = '" + VALEUR + "' AND H.STA_0 = 2"

    For (Decimal YAMT) From "5" Sql ZSQL As [YLNK]

      [M:BIC3]YALLOCAMT(nolign-1) = [F:YLNK]YAMT
      Affzo [M:BIC3]YALLOCAMT(nolign-1)

      [M:BIC3]YRMNAMT(nolign-1) = [M:BIC3]YBUDAMT(nolign-1) - [M:BIC3]AMTNOTLIN(nolign-1)
      Affzo [M:BIC3]YRMNAMT(nolign-1)

    Next

    #Check Remaining Amount Budget Line
    If [M:BIC3]AMTATILIN > [M:BIC3]YRMNAMT(nolign-1)
      GMESSAGE = "The invoice amount is more than the remaining budgeted amount."
      GERR = 1
      zonsui = "[M:BIC3]AMTATILIN(" + num$(nolign-1) + ")"
      GOK = 0
    Endif
  Endif
Endif
End

#------------------------------------------------------------------------------------#
#After line action, do validations
#------------------------------------------------------------------------------------#
Subprog APRES_NBLIG

If [M:BIC3]YRMNAMT(nolign-1) > 0
  If [M:BIC3]AMTNOTLIN(nolign-1) > [M:BIC3]YRMNAMT(nolign-1)
      GMESSAGE = "The invoice amount before tax is more than the remaining budgeted amount."
      GERR = 1
      zonsui = "[M:BIC3]AMTATILIN(" + num$(nolign - 1) + ")"
      End
    Endif
Endif
End

#------------------------------------------------------------------------------------#
#Perform PJM account link validations
#------------------------------------------------------------------------------------#
$VALIDATEPJM

Local Char YMSG(250)

  For I = 0 To [M:BIC3]NBLIG-1

  Filter [F:YGAC] Where ACC = [M:BIC3]ACC1(I)
  For [F:YGAC]

  If [F:YGAC]YPJM = 2 and [M:BIC3]PJTLIN(I) = ""
    YMSG += num$(I + 1) + ", "
  Endif

  Next
  Filter [F:YGAC]

  Next

  If len(YMSG) > 0
    GMESSAGE = mess(2,6201,1) + left$(YMSG,len(YMSG)-2) # "Please enter a project code on the following lines: " + ZMSG
    GERR = 1
    GOK = 0
  Endif

Return

#------------------------------------------------------------------------------------#
#After field validations
#------------------------------------------------------------------------------------#
Subprog AM_CCE1(VALEUR)
Variable Char    VALEUR()
  If func YVALDIE(VALEUR,[M]DIE(0)) = 1
    GMESSAGE = "Invalid value"
    GERR = 1
    mkstat = 2
  Endif
End

Subprog AM_CCE2(VALEUR)
Variable Char    VALEUR()
  If func YVALDIE(VALEUR,[M]DIE(1)) = 1
    GMESSAGE = "Invalid value"
    GERR = 1
    mkstat = 2
  Endif
End

Subprog AM_CCE3(VALEUR)
Variable Char    VALEUR()
  If func YVALDIE(VALEUR,[M]DIE(2)) = 1
    GMESSAGE = "Invalid value"
    GERR = 1
    mkstat = 2
  Endif
End

Subprog AM_CCE4(VALEUR)
Variable Char    VALEUR()
  If func YVALDIE(VALEUR,[M]DIE(3)) = 1
    GMESSAGE = "Invalid value"
    GERR = 1
    mkstat = 2
  Endif
End

Subprog AM_CCE5(VALEUR)
Variable Char    VALEUR()
  If func YVALDIE(VALEUR,[M]DIE(4)) = 1
    GMESSAGE = "Invalid value"
    GERR = 1
    mkstat = 2
  Endif
End


#------------------------------------------------------------------------------------#
#Perform dimension value validations
#------------------------------------------------------------------------------------#
Funprog YVALDIE(YCCE,YDIE)
Value Char YCCE,YDIE
Local Integer YVALID

YVALID = 2

Read[F:YCCE]CCE0 = YDIE;YCCE
If fstat <> 0
  YVALID = 1
Endif

End YVALID

#------------------------------------------------------------------------------------#
#Section automatically added (screen BIC0) 11/07/2018 15:23:25 (DEWAL)
#------------------------------------------------------------------------------------#
Subprog C_BPR(VALEUR)
Variable Char    VALEUR()
If func AFNC.ACTIV("YBPR") = 1
  Call C_BPRSEL(VALEUR) From YSELBPC
Endif

End

Subprog AM_AMTATILIN(VALEUR)
Variable Decimal VALEUR
If func AFNC.ACTIV("YPJM") = 1
  If [M:BIC3]PJTLIN(nolign-1) <> ""
    [M:BIC3]YRMNAMT(nolign-1) = [M:BIC3]YBUDAMT(nolign-1) - VALEUR
    Affzo [M:BIC3]YRMNAMT(nolign-1)

    If VALEUR > [M:BIC3]YRMNAMT(nolign-1)
      GMESSAGE = "The invoice amount is more than the remaining budgeted amount."
      GERR = 1
      zonsui = "[M:BIC3]AMTATILIN(" + num$(nolign-1) + ")"
      GOK = 0
    Endif
  Endif
Endif

End

#------------------------------------------------------------------------------------#
#
#------------------------------------------------------------------------------------#
Subprog AM_DIE(VALEUR)
Variable Char    VALEUR()
End

#------------------------------------------------------------------------------------#
#
#------------------------------------------------------------------------------------#
Subprog AM_ACC1(VALEUR)
Variable Char    VALEUR()
End

