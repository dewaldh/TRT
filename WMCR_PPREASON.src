#<AdxTL>@(#)0.0.0.0 $Revision$Class Purchase price reasons
# Supervisor
## CRUD-CLASSE ## PPREASON
# 2018-08-27 12:41:47 006


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File PPREASON [PPR_]

If !SILENCE : Call TRACE("2 --> Local Instance C_PPREASON") From ASYRCOM : Endif
Local Instance PPREASON Using C_PPREASON

If !SILENCE : Call TRACE("3 --> New Instance C_PPREASON") From ASYRCOM : Endif
PPREASON = NewInstance C_PPREASON AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [PPR_]PPR0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of PPREASON") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet PPREASON.AREAD([PPR_]PRIREN))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("PPREASON.PRIREN ="-num$(PPREASON.PRIREN)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(PPREASON.AKEYS)
  Call TRACE("-"-num$(I)-":"-PPREASON.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [PPR_]
FreeGroup PPREASON
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(PPREASON,ACLE,ASTATUS,_ETAG)
Variable Instance PPREASON Using C_PPREASON
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Shortint _PRIREN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PRIREN = val([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File PPREASON [PPR]
Default File [F:PPR]
Read [F:PPR]PPR0 = [L]_PRIREN
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:PPR]UPDTICK)>0
 [L]_ETAG = num$([F:PPR]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(PPREASON,ACLE,ASTATUS)
Variable Instance PPREASON Using C_PPREASON
Value Char ACLE
Variable Integer ASTATUS
Local Shortint _PRIREN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PRIREN = val([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PPREASON.AREAD([L]_PRIREN))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(PPREASON,_PRIREN,ASTATUS)
Variable Instance PPREASON Using C_PPREASON
Value Shortint _PRIREN
Variable Integer ASTATUS

If PPREASON = null : End : Endif

Gosub AVARIABLES From WMC00PPREASON
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If PPREASON.APARENT=null
 [L]A_I = PPREASON.freeSnapshot
 PPREASON.snapshotEnabled = 0
 PPREASON.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & PPREASON.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet PPREASON._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If PPREASON.APARENT=null
 PPREASON.snapshotEnabled = 1
 PPREASON.setAccessorEnabled = 1
Endif
LogicClose File [PPR]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet PPREASON._ACTION_PARAM("AREAD_BEFORE",[L]_PRIREN))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:PPR]
Read [F:PPR]PPR0 = [L]_PRIREN
If fstat
[L]A_ERROR = num$([L]_PRIREN)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PPREASON,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:PPR]AUUID)>0 & [F:PPR]AUUID=NullUuid
 [F:PPR]AUUID = getUuid
Endif
SetInstance PPREASON With [F:PPR]
PPREASON.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet PPREASON.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="PPREASON" & ZONE="DESAXX" & IDENT1=PPREASON.PRIRENCAR & IDENT2=""
 Call ASETTEXTRA(PPREASON.AXX,PPREASON.AllocGrp(),"DESAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 PPREASON.AXX(maxtab(PPREASON.AXX)).FLG = 0
Next AXX
If !len(fmet PPREASON.AGETTEXTRA("DESAXX"))
 Call ASETTEXTRA(PPREASON.AXX,PPREASON.AllocGrp(),"DESAXX",
& fmet PPREASON.AGETTEXTRALAN("DESAXX",PPREASON.ACTX.AFOLD.ALANGDEF),
& PPREASON.ACTX.LAN) From ASYRSUB
Endif

Return



