#<AdxTL>@(#)0.0.0.0 $Revision$
# Supervisor
## BI-DIMENSION ## Synchronization rule ACCDUD

$OUVRE
Local Char FILTRE(250)
OUVTAB = GDOSSIER+".GACCDUDATE" : If clalev([F:DUD])=0 : Local File =OUVTAB [DUD] : Endif
OUVTAB = GDOSSIER+".GACCDUDATE" : If clalev([F:A_])=0 : Local File =OUVTAB [A_] : Endif
OUVTAB = "Link [DUD]"
Link [DUD] With
& [A_]DUD0=[DUD]TYP;[DUD]NUM;[DUD]LIG;[DUD]DUDLIG
& As [LNK_]
& Order By Key CLE = [DUD]TYP;[DUD]NUM;[DUD]LIG;[DUD]DUDLIG
FILTRE = ""
Return

$FERME
If clalev([F:DUD]) : Close local File [DUD] : Endif
If clalev([F:A_]) : Close local File [A_] : Endif
Return

$DCLE
Local Char    DCLE(GLONAVA)(1..4)
Local Integer DTYP(1..4)
Local Integer NBDCLE
NBDCLE = 4
DCLE(1) = "TYP"
DTYP(1) =  7
DCLE(2) = "NUM"
DTYP(2) =  7
DCLE(3) = "NUMLIG"
DTYP(3) =  7
DCLE(4) = "DUDLIG"
DTYP(4) =  2
Return

$CHARGE_CLE
If dim([F:AAA_]TYP)>0
 [F:AAA_]TYP = [F:DUD]TYP
Endif
If dim([F:AAA_]NUM)>0
 [F:AAA_]NUM = [F:DUD]NUM
Endif
If dim([F:AAA_]NUMLIG)>0
 [F:AAA_]NUMLIG = [F:DUD]LIG
Endif
If dim([F:AAA_]DUDLIG)>0
 [F:AAA_]DUDLIG = [F:DUD]DUDLIG
Endif
Return

########################################################################
# Return the filter necessary for incremental delete in synchroonization
Subprog GET_FLTDELINC(PFLT)
Variable Clbfile PFLT
PFLT = "1=1"
Append PFLT, " & [F:AAA_]TYP=[F:DUD]TYP"
Append PFLT, " & [F:AAA_]NUM=[F:DUD]NUM"
Append PFLT, " & [F:AAA_]NUMLIG=[F:DUD]LIG"
Append PFLT, " & [F:AAA_]DUDLIG=[F:DUD]DUDLIG"

End

$MAJFLD
### TYP
[L]FLD="TYP"
[L]FORMULE='[F:DUD]TYP'
If dim([F:AAA_]TYP)>0
 [F:AAA_]TYP = [F:DUD]TYP
Endif

### NUM
[L]FLD="NUM"
[L]FORMULE='[F:DUD]NUM'
If dim([F:AAA_]NUM)>0
 [F:AAA_]NUM = [F:DUD]NUM
Endif

### NUMLIG
[L]FLD="NUMLIG"
[L]FORMULE='[F:DUD]LIG'
If dim([F:AAA_]NUMLIG)>0
 [F:AAA_]NUMLIG = [F:DUD]LIG
Endif

### DUDLIG
[L]FLD="DUDLIG"
[L]FORMULE='[F:DUD]DUDLIG'
If dim([F:AAA_]DUDLIG)>0
 [F:AAA_]DUDLIG = [F:DUD]DUDLIG
Endif

### DUDDAT
[L]FLD="DUDDAT"
[L]FORMULE='[F:DUD]DUDDAT'
If dim([F:AAA_]DUDDAT)>0
 [F:AAA_]DUDDAT = [F:DUD]DUDDAT
Endif

### PAM
[L]FLD="PAM"
[L]FORMULE='[F:DUD]PAM'
If dim([F:AAA_]PAM)>0
 [F:AAA_]PAM = [F:DUD]PAM
Endif

### SOI
[L]FLD="SOI"
[L]FORMULE='num$([F:DUD]SOI)-"-"-mess([F:DUD]SOI,1,1)'
If dim([F:AAA_]SOI)>0
 [F:AAA_]SOI = num$([F:DUD]SOI)-"-"-mess([F:DUD]SOI,1,1)
Endif

### FLGFUP
[L]FLD="FLGFUP"
[L]FORMULE='num$([F:DUD]FLGFUP)-"-"-mess([F:DUD]FLGFUP,1,1)'
If dim([F:AAA_]FLGFUP)>0
 [F:AAA_]FLGFUP = num$([F:DUD]FLGFUP)-"-"-mess([F:DUD]FLGFUP,1,1)
Endif

### LEVFUP
[L]FLD="LEVFUP"
[L]FORMULE='[F:DUD]LEVFUP'
If dim([F:AAA_]LEVFUP)>0
 [F:AAA_]LEVFUP = [F:DUD]LEVFUP
Endif

### DATFUP
[L]FLD="DATFUP"
[L]FORMULE='[F:DUD]DATFUP'
If dim([F:AAA_]DATFUP)>0
 [F:AAA_]DATFUP = [F:DUD]DATFUP
Endif

### FLGPAZ
[L]FLD="FLGPAZ"
[L]FORMULE='num$([F:DUD]FLGPAZ)-"-"-mess([F:DUD]FLGPAZ,510,1)'
If dim([F:AAA_]FLGPAZ)>0
 [F:AAA_]FLGPAZ = num$([F:DUD]FLGPAZ)-"-"-mess([F:DUD]FLGPAZ,510,1)
Endif

### DPTCOD
[L]FLD="DPTCOD"
[L]FORMULE='[F:DUD]DPTCOD'
If dim([F:AAA_]DPTCOD)>0
 [F:AAA_]DPTCOD = [F:DUD]DPTCOD
Endif

### SOINUM
[L]FLD="SOINUM"
[L]FORMULE='[F:DUD]SOINUM'
If dim([F:AAA_]SOINUM)>0
 [F:AAA_]SOINUM = [F:DUD]SOINUM
Endif

### FLGCLE
[L]FLD="FLGCLE"
[L]FORMULE='[F:DUD]FLGCLE'
If dim([F:AAA_]FLGCLE)>0
 [F:AAA_]FLGCLE = [F:DUD]FLGCLE
Endif

### BPRPAY
[L]FLD="BPRPAY"
[L]FORMULE='[F:DUD]BPRPAY'
If dim([F:AAA_]BPRPAY)>0
 [F:AAA_]BPRPAY = [F:DUD]BPRPAY
Endif


Return

