#<AdxTL>@(#)0.0.0.0 $Revision$Class Estate
# Supervisor
## CRUD-CLASSE ## YEST
# 2019-04-02 19:14:04 783


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File YESTA [YEST_]

If !SILENCE : Call TRACE("2 --> Local Instance R_YEST") From ASYRCOM : Endif
Local Instance YEST Using R_YEST

If !SILENCE : Call TRACE("3 --> New Instance R_YEST") From ASYRCOM : Endif
YEST = NewInstance R_YEST AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [YEST_]YEST0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of YEST") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet YEST.AREAD([YEST_]YESTID))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("YEST.YEST.YESTID ="-num$(YEST.YEST.YESTID)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(YEST.YEST.AKEYS)
  Call TRACE("-"-num$(I)-":"-YEST.YEST.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [YEST_]
FreeGroup YEST
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(YEST,ACLE,ASTATUS,_ETAG)
Variable Instance YEST Using R_YEST
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Shortint _YESTID
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_YESTID = val([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File YESTA [YEST]
Default File [F:YEST]
Read [F:YEST]YEST0 = [L]_YESTID
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:YEST]UPDTICK)>0
 [L]_ETAG = num$([F:YEST]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(YEST,ACLE,ASTATUS)
Variable Instance YEST Using R_YEST
Value Char ACLE
Variable Integer ASTATUS
Local Shortint _YESTID
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_YESTID = val([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet YEST.AREAD([L]_YESTID))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(YEST,_YESTID,ASTATUS)
Variable Instance YEST Using R_YEST
Value Shortint _YESTID
Variable Integer ASTATUS

If YEST = null : End : Endif

Gosub AVARIABLES From WMR00YEST
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If YEST.APARENT=null
 [L]A_I = YEST.freeSnapshot
 YEST.snapshotEnabled = 0
 YEST.setAccessorEnabled = 0
Endif

If fmet YEST.ACTX.AGETAFCRIGHT(YEST,"GESYEST",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:YEST]
Read [F:YEST]YEST0 = [L]_YESTID
If fstat
[L]A_ERROR = num$([L]_YESTID)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(YEST,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = [F:YEST]YACCESS
If fmet YEST.ACTX.AGETAFCRIGHTR(YEST,"GESYEST",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet YEST.ACTX.AGETACSRIGHTC(YEST,[L]A_STRACC,[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR
 Goto AREAD_END
  Endif
If fmet YEST.ACTX.ASTACRITROLE(YEST,num$([L]_YESTID)
& ,"YEST","YEST",[V]CST_ATRUE)>=[V]CST_AERROR
   [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
  Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet YEST.ACTION("AREAD_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  YEST.YEST.setAccessorEnabled = 0
  [L]ASTATUS = max([L]ASTATUS,fmet YEST.YEST.AREAD([L]_YESTID))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet YEST.ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  If [L]ASTATUS<[V]CST_AERROR & YEST.APARENT=null
   # Load Link
   [L]ASTATUS = max([L]ASTATUS,fmet YEST._ALNKPRO)
   If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  Endif
  
  $AREAD_END
  If YEST.APARENT=null
   YEST.snapshotEnabled = 1
   YEST.setAccessorEnabled = 1
  Endif
  LogicClose File [YEST] ,[YRMA] ,[YLDP] ,[YSTG] ,[YPRC]
  End
  


