#<AdxTL>@(#)0.0.0.0 $Revision$Class Formula wizard setup
# Supervisor
## CRUD-CLASSE ## AVARLOCD
# 2018-08-27 12:24:04 963


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File AVARLOC [AVR_]

If !SILENCE : Call TRACE("2 --> Local Instance C_AVARLOCD") From ASYRCOM : Endif
Local Instance AVARLOCD Using C_AVARLOCD

If !SILENCE : Call TRACE("3 --> New Instance C_AVARLOCD") From ASYRCOM : Endif
AVARLOCD = NewInstance C_AVARLOCD AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [AVR_]AVR0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of AVARLOCD") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet AVARLOCD.AREAD([AVR_]TYP,[AVR_]FCT,[AVR_]COD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("AVARLOCD.TYP ="-num$(AVARLOCD.TYP)) From ASYRCOM
 Call TRACE("AVARLOCD.FCT ="-num$(AVARLOCD.FCT)) From ASYRCOM
 Call TRACE("AVARLOCD.COD ="-num$(AVARLOCD.COD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(AVARLOCD.AKEYS)
  Call TRACE("-"-num$(I)-":"-AVARLOCD.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [AVR_]
FreeGroup AVARLOCD
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(AVARLOCD,ACLE,ASTATUS,_ETAG)
Variable Instance AVARLOCD Using C_AVARLOCD
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Tinyint _TYP
Local Char _FCT(12)
Local Char _COD(80)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_TYP = val([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_FCT = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_COD = num$([L]CLE(3)) : Endif
Raz [L]_ETAG
Local File AVARLOC [AVR]
Default File [F:AVR]
Read [F:AVR]AVR0 = [L]_TYP;[L]_FCT;[L]_COD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:AVR]UPDTICK)>0
 [L]_ETAG = num$([F:AVR]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(AVARLOCD,ACLE,ASTATUS)
Variable Instance AVARLOCD Using C_AVARLOCD
Value Char ACLE
Variable Integer ASTATUS
Local Tinyint _TYP
Local Char _FCT(12)
Local Char _COD(80)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_TYP = val([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_FCT = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_COD = num$([L]CLE(3)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet AVARLOCD.AREAD([L]_TYP,[L]_FCT,[L]_COD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(AVARLOCD,_TYP,_FCT,_COD,ASTATUS)
Variable Instance AVARLOCD Using C_AVARLOCD
Value Tinyint _TYP
Value Char _FCT
Value Char _COD
Variable Integer ASTATUS

If AVARLOCD = null : End : Endif

Gosub AVARIABLES From WMC00AVARLOCD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If AVARLOCD.APARENT=null
 [L]A_I = AVARLOCD.freeSnapshot
 AVARLOCD.snapshotEnabled = 0
 AVARLOCD.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & AVARLOCD.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet AVARLOCD._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If AVARLOCD.APARENT=null
 AVARLOCD.snapshotEnabled = 1
 AVARLOCD.setAccessorEnabled = 1
Endif
LogicClose File [AVR]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet AVARLOCD._ACTION_PARAM("AREAD_BEFORE",[L]_TYP,[L]_FCT,[L]_COD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:AVR]
Read [F:AVR]AVR0 = [L]_TYP;[L]_FCT;[L]_COD
If fstat
[L]A_ERROR = num$([L]_TYP)+"~"+[L]_FCT+"~"+[L]_COD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(AVARLOCD,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:AVR]AUUID)>0 & [F:AVR]AUUID=NullUuid
 [F:AVR]AUUID = getUuid
Endif
SetInstance AVARLOCD With [F:AVR]
AVARLOCD.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet AVARLOCD.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [ATX] Where NUMERO=[F:AVR]INTIT
 Call ASETTEXT(AVARLOCD.ATX,AVARLOCD.AllocGrp,"INTIT",[F:ATX]TEXTE,[F:ATX]LAN,[F:ATX]NUMERO) From ASYRSUB
Next ATX

Return



