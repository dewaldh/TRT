#<AdxTL>@(#)0.0.0.0 $Revision$Class Transcribe import/export
# Supervisor
## CRUD-CLASSE ## AOBJEXTR
# 2018-08-27 13:02:11 338


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(AOBJEXTR,ASTATUS)
Variable Instance AOBJEXTR Using R_AOBJEXTR
Variable Integer ASTATUS

If AOBJEXTR = null : End : Endif

Gosub AVARIABLES From WMR00AOBJEXTR
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If fmet AOBJEXTR.ACTX.AGETAFCRIGHT(AOBJEXTR,"GESAOR",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END : Endif
If fmet AOBJEXTR.ACTX.AGETAFCRIGHTC(AOBJEXTR,"GESAOR",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END
Endif

Gosub AREPCONTROL_AINSERT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_AOBJEXTR
Else
 Gosub AINSERT_AOBJEXTR
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = AOBJEXTR.freeSnapshot
AOBJEXTR.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
AOBJEXTR.ASTALIN = [V]CST_ANEW
AOBJEXTR.AOR.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXTR.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXTR.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet AOBJEXTR._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet AOBJEXTR._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet AOBJEXTR._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If AOBJEXTR.AOR.ASTALIN = [V]CST_ANEWDEL : Return : Endif
AOBJEXTR.AOR.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXTR.AOR.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXTR.AOR.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_AOBJEXTR
Gosub AINSERT_AOBJEXTR
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(AOBJEXTR.AOR.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 AOBJEXTR.AOR.ASTALIN = [V]CST_ALL
Endif
Return

#-----------------------------------------------------#
$AINSERT_AOBJEXTR
[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXTR.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXTR.AOR._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AOBJEXTR.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
$_AINSERT_ABORT
If AOBJEXTR.snapshotEnabled=1
 [L]A_RETIK = AOBJEXTR.revertUpdTick
Endif
[L]ASTATUS = max(fmet AOBJEXTR.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



