#<AdxTL>@(#)0.0.0.0 $Revision$Class Sold product list
# Supervisor
## CRUD-CLASSE ## PJMSOLITMD
# 2018-08-27 12:40:17 196


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File PJMSOLITMD [PSOD_]

If !SILENCE : Call TRACE("2 --> Local Instance C_PJMSOLITMD") From ASYRCOM : Endif
Local Instance PJMSOLITMD Using C_PJMSOLITMD

If !SILENCE : Call TRACE("3 --> New Instance C_PJMSOLITMD") From ASYRCOM : Endif
PJMSOLITMD = NewInstance C_PJMSOLITMD AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [PSOD_]PSOD0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of PJMSOLITMD") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet PJMSOLITMD.AREAD([PSOD_]PSONUM,[PSOD_]SEQNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("PJMSOLITMD.PSONUM ="-num$(PJMSOLITMD.PSONUM)) From ASYRCOM
 Call TRACE("PJMSOLITMD.SEQNUM ="-num$(PJMSOLITMD.SEQNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(PJMSOLITMD.AKEYS)
  Call TRACE("-"-num$(I)-":"-PJMSOLITMD.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [PSOD_]
FreeGroup PJMSOLITMD
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(PJMSOLITMD,ACLE,ASTATUS,_ETAG)
Variable Instance PJMSOLITMD Using C_PJMSOLITMD
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _PSONUM(20)
Local Integer _SEQNUM
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PSONUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_SEQNUM = val([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File PJMSOLITMD [PSOD]
Default File [F:PSOD]
Read [F:PSOD]PSOD0 = [L]_PSONUM;[L]_SEQNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:PSOD]UPDTICK)>0
 [L]_ETAG = num$([F:PSOD]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(PJMSOLITMD,ACLE,ASTATUS)
Variable Instance PJMSOLITMD Using C_PJMSOLITMD
Value Char ACLE
Variable Integer ASTATUS
Local Char _PSONUM(20)
Local Integer _SEQNUM
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PSONUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_SEQNUM = val([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PJMSOLITMD.AREAD([L]_PSONUM,[L]_SEQNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(PJMSOLITMD,_PSONUM,_SEQNUM,ASTATUS)
Variable Instance PJMSOLITMD Using C_PJMSOLITMD
Value Char _PSONUM
Value Integer _SEQNUM
Variable Integer ASTATUS

If PJMSOLITMD = null : End : Endif

Gosub AVARIABLES From WMC00PJMSOLITMD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If PJMSOLITMD.APARENT=null
 [L]A_I = PJMSOLITMD.freeSnapshot
 PJMSOLITMD.snapshotEnabled = 0
 PJMSOLITMD.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & PJMSOLITMD.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet PJMSOLITMD._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If PJMSOLITMD.APARENT=null
 PJMSOLITMD.snapshotEnabled = 1
 PJMSOLITMD.setAccessorEnabled = 1
Endif
LogicClose File [PSOD]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet PJMSOLITMD._ACTION_PARAM("AREAD_BEFORE",[L]_PSONUM,[L]_SEQNUM))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:PSOD]
Read [F:PSOD]PSOD0 = [L]_PSONUM;[L]_SEQNUM
If fstat
[L]A_ERROR = [L]_PSONUM+"~"+num$([L]_SEQNUM)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PJMSOLITMD,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:PSOD]AUUID)>0 & [F:PSOD]AUUID=NullUuid
 [F:PSOD]AUUID = getUuid
Endif
SetInstance PJMSOLITMD With [F:PSOD]
PJMSOLITMD.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet PJMSOLITMD.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



