#<AdxTL>@(#)0.0.0.0 $Revision$Class ## ?IDENTQRY? SEARCH ##
# Supervisor
#WMSRHBPARTNER BPARTNER
# 2018-08-27 12:25:10 579

Funprog IS_IMPLEMENTED()
End 1
#---------------------------------------------------------------------------------------------------#
# List of tables to open
#---------------------------------------------------------------------------------------------------#
$ASEARCH_OPEN
If filinfo(filpath("FIL","BPARTNER","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File BPARTNER [BPR]
If filinfo(filpath("FIL","BPADDRESS","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File BPADDRESS [BPA]
If filinfo(filpath("FIL","CONTACT","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File CONTACT [CNT]
If filinfo(filpath("FIL","BPEXCEPT","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File BPEXCEPT [BPEX]
If filinfo(filpath("FIL","BID","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File BID [BID]
Local File BPARTNER [BPR_]
Local Char KEY_BPR(120)(1..3)
Local Char KEY_BPA(120)(1..3)
Local Char KEY_CNT(120)(1..3)
Local Char KEY_BPEX(120)(1..3)
Local Char KEY_BID(120)(1..3)
#Empty keys :
KEY_BPR(3) = ""
KEY_BPA(3) = "0++"
KEY_CNT(3) = "0++"
KEY_BPEX(3) = "+"
KEY_BID(3) = "0+++"
ACTION = "ASEARCH_OPEN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to close
#---------------------------------------------------------------------------------------------------#
$ASEARCH_CLOSE
LogicClose File [BPR]
LogicClose File [BPA]
LogicClose File [CNT]
LogicClose File [BPEX]
LogicClose File [BID]
LogicClose File [BPR_]
ACTION = "ASEARCH_CLOSE_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to join
#---------------------------------------------------------------------------------------------------#
$ASEARCH_JOIN
Link [BPR] With
& [BPA]BPA0~=1;[F:BPR]BPRNUM,
& [CNT]CNT0=1;[F:BPR]BPRNUM,
& [BPEX]BPE0=[F:BPR]BPRNUM,
& [BID]BID0=1;[F:BPR]BPRNUM
& As [LNK_]
& Where (1=1
& )
ACTION = "ASEARCH_JOIN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to join
#---------------------------------------------------------------------------------------------------#
$ASEARCH_JOIN_INC
Link [BPR] With
& [BPA]BPA0~=1;[F:BPR]BPRNUM,
& [CNT]CNT0=1;[F:BPR]BPRNUM,
& [BPEX]BPE0=[F:BPR]BPRNUM,
& [BID]BID0=1;[F:BPR]BPRNUM
& As [LNK_]
& Where (UPDDATTIM > gdatetime$(QUPDDATTIM)
& )
ACTION = "ASEARCH_JOIN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# Create an instance of
#---------------------------------------------------------------------------------------------------#
$ASEARCH_CREATEINSTANCE
Local Integer ASTATUS
Local Integer FINS
Local Integer CI1
Local Integer CJ1
Local Char    SEPINS1(2) : SEPINS1=""
Local Char IS1(1)

Return

#---------------------------------------------------------------------------------------------------#
# Set an instance
#---------------------------------------------------------------------------------------------------#
$ASEARCH_SETINSTANCE
KEY_BPR(2) = [F:BPR]BPRNUM
KEY_BPA(2) = num$([F:BPA]BPATYP)+"+"+[F:BPA]BPANUM+"+"+[F:BPA]BPAADD
KEY_CNT(2) = num$([F:CNT]BPATYP)+"+"+[F:CNT]BPANUM+"+"+[F:CNT]CCNCRM
KEY_BPEX(2) = [F:BPEX]BPRNUM+"+"+[F:BPEX]CPY
KEY_BID(2) = num$([F:BID]BPATYP)+"+"+[F:BID]BPANUM+"+"+[F:BID]BIDNUM+"+"+[F:BID]BPAADD

If (KEY_BPR(2) <> KEY_BPR(3)) & (KEY_BPR(1) <> KEY_BPR(2))
 If INS <> null
  [L]ASTATUS = fmet INS.ACTION("ASEARCH_TRANS_AFTER")
  #serialize INS
  Gosub ASEARCH_TO_JSON
 Endif
#Create a new instance
INS = NewInstance C_BPARTNER(GACTX,UIDINS,NUMLIN,null,"") AllocGroup null
INS.setaccessorEnabled = 0
SetInstance INS With [F:BPR]
FINS = 1
Local Integer BPRNAM_MAX:BPRNAM_MAX0
CJ1=1
For CI1 = 0 To dim([F:BPR]BPRNAM)-1
 Break ([F:BPR]BPRNAM(CI1)="")
 BPRNAM_MAX+=1
 #Create a new instance
 INS.C_BPRNAM(CJ1) = NewInstance C_BPARTNER_C_BPRNAM(GACTX,UIDINS,NUMLIN,INS,"") AllocGroup INS
 INS.C_BPRNAM(CJ1).setaccessorEnabled = 0
 INS.C_BPRNAM(CJ1).BPRNAM=[F:BPR]BPRNAM(CI1)
 CJ1+=1
Next CI1
 KEY_BPR(1) = KEY_BPR(2)
Endif : # KEY_BPR(1) <> KEY_BPR(2)

Return

#---------------------------------------------------------------------------------------------------#
# Serialize the entity in a JSON format
#---------------------------------------------------------------------------------------------------#
$ASEARCH_TO_JSON
If FINS=0 : Return : Endif
QCOUNT += 1
Onerrgo ERROR_VALUE
Append ASND.DATA ,SEPINS1
SEPINS1 = ','+chr$(10)
Append ASND.DATA ,'{'
Append ASND.DATA ,'"BPRNUM":'          +'"'+escJson(INS.BPRNUM)+'"'
Append ASND.DATA ,',"BPRSHO":'         +'"'+escJson(INS.BPRSHO)+'"'
Append ASND.DATA ,',"EECNUM":'         +'"'+escJson(INS.EECNUM)+'"'
Append ASND.DATA ,',"FCY":'            +'"'+escJson(INS.FCY)+'"'
Append ASND.DATA ,',"CRY":'            +'"'+escJson(INS.CRY)+'"'
Append ASND.DATA ,',"CRN":'            +'"'+escJson(INS.CRN)+'"'
Append ASND.DATA ,',"CUR":'            +'"'+escJson(INS.CUR)+'"'
Append ASND.DATA ,',"LAN":'            +'"'+escJson(INS.LAN)+'"'
Append ASND.DATA ,',"BPRLOG":'         +'"'+escJson(INS.BPRLOG)+'"'
Append ASND.DATA ,',"ACCCOD":'         +'"'+escJson(INS.ACCCOD)+'"'
Append ASND.DATA ,',"CNTNAM":'         +'"'+escJson(INS.CNTNAM)+'"'
Append ASND.DATA ,',"BIDCRY":'         +'"'+escJson(INS.BIDCRY)+'"'
Append ASND.DATA ,',"CREUSR":'         +'"'+escJson(INS.CREUSR)+'"'
Append ASND.DATA ,',"CREDAT":'          + func ASYRSRH.DATE_TO_SYR(INS.CREDAT)
Append ASND.DATA ,',"UPDUSR":'         +'"'+escJson(INS.UPDUSR)+'"'
Append ASND.DATA ,',"UPDDAT":'          + func ASYRSRH.DATE_TO_SYR(INS.UPDDAT)
Append ASND.DATA ,',"CSLBPR":'         +'"'+escJson(INS.CSLBPR)+'"'
IS1=""
CJ1=1
Append ASND.DATA ,',"C_BPRNAM":['
For CI1=1 To BPRNAM_MAX
 Append ASND.DATA ,IS1+'{'
 Append ASND.DATA ,'"BPRNAM":'          +'"'+escJson(INS.C_BPRNAM(CJ1).BPRNAM)+'"'
 Append ASND.DATA ,'}'
 IS1=","
 CJ1+=1
Next CI1
Append ASND.DATA , "]"
Append ASND.DATA ,'}'
Onerrgo
Freegroup INS
INS = null
Raz KEY_BPR(1),KEY_BPA(1),KEY_CNT(1),KEY_BPEX(1),KEY_BID(1)
FINS = 0
Return

#---------------------------------------------------------------------------------------------------#
# Errors
#---------------------------------------------------------------------------------------------------#
$ERROR_VALUE
SVALUE ='"<error'-errmes$(errn)+'>"'
Resume
#---------------------------------------------------------------------------------------------------#
# Link standard key
#---------------------------------------------------------------------------------------------------#
$AQUERY_PRIMARYKEYS
Local Char ASTDKEY(250)
ASTDKEY = ""
ASTDKEY += "[F:BPR]BPRNUM"
ACTION = "ASEARCH_PRIMARYKEYS_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# Actions
#---------------------------------------------------------------------------------------------------#
$ASEARCH_ACTION
Local Char CURPRO(250),CURPTH(250),AMETHOD(50),AEVENT(50)
[L]AEVENT = [L]ACTION
 Gosub METHODS From BPARTNER_CSTD
Gosub METHODS From BPARTNER_CSTD
Return

#---------------------------------------------------------------------------------------------------#
# APPEND_PROTOTYPE
#---------------------------------------------------------------------------------------------------#
Funprog APPEND_PROTOTYPE(ACTX,WCLOB,PSYR)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Variable Clbfile   WCLOB
Variable Instance  PSYR     Using C_ASYR
Local Integer ERROR : ERROR = 0
Local Integer IND   : IND = 0
Local Char TRTNAME(80)
Local Char REPRESENTATION(80)
Local File ASHW    [ASW]
Filter [ASW] Where CODCLA="BPARTNER" & DEFREP=2
Read [ASW]ASW0 First
If !fstat
 If  [ASW]ENAFAC(0) = 2
  REPRESENTATION = [ASW]CODREP
 Else
  WCLOB ="{}"
  End ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(62,149,1),"BPARTNER")) 
 Endif
Endif
Close Local File [ASW]
If len(REPRESENTATION)=0
 WCLOB ="{}"
 End ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(62,149,1),"BPARTNER")) 
Endif
Append WCLOB,'{'
Append WCLOB,'"$baseUrl":"'+PSYR.PREFIX+'"'
Append WCLOB,',"$baseType":"'+PSYR.CNTPRE+"."+nomap+'"'
Append WCLOB,',"$classTitle":"'+func GET_RES_STRING(ACTX.LAN,1581)+'"'
Append WCLOB,',"$url":"{$baseUrl}/BPARTNER'+PSYR.URLREP+''+REPRESENTATION+'.$search"'
Append WCLOB,',"$prototype":"{$baseUrl}/$prototypes('+"'"+'{$representation}.$thumb'+"'"+')"'
Append WCLOB,',"$type":"{$baseType}.'+REPRESENTATION+'.$search"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"$resources":{'
Append WCLOB,'"$type":"application/x-array"'
Append WCLOB,',"$item":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1581)+' {$key}"'
Append WCLOB,',"$key":"{BPRNUM}"'
Append WCLOB,',"$url":"{$baseUrl}/BPARTNER('+"'"+'{$key}'+"'"+')'+PSYR.URLREP+'BPARTNER.searchItem"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"BPRNUM":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,19569)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,',"BPRSHO":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,4010)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":10'
Append WCLOB,"}"
Append WCLOB,',"EECNUM":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,29280)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"FCY":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1344)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"CRY":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,263)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":3'
Append WCLOB,"}"
Append WCLOB,',"CRN":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1424)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":20'
Append WCLOB,"}"
Append WCLOB,',"CUR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,323)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":3'
Append WCLOB,"}"
Append WCLOB,',"LAN":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1505)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":3'
Append WCLOB,"}"
Append WCLOB,',"BPRLOG":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1586)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"ACCCOD":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1687)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":10'
Append WCLOB,"}"
Append WCLOB,',"CNTNAM":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,9789)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":35'
Append WCLOB,"}"
Append WCLOB,',"BIDCRY":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,9005)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":3'
Append WCLOB,"}"
Append WCLOB,',"CREUSR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1320)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"CREDAT":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1322)+'"'
Append WCLOB,',"$type":"application/x-date"'
Append WCLOB,"}"
Append WCLOB,',"UPDUSR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1324)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"UPDDAT":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1326)+'"'
Append WCLOB,',"$type":"application/x-date"'
Append WCLOB,"}"
Append WCLOB,',"CSLBPR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,12138)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,',"C_BPRNAM":{'
Append WCLOB,'"$type":"application/x-array"'
Append WCLOB,',"$minItems":0'
Append WCLOB,',"$maxItems":2'
Append WCLOB,',"$item":{'
Append WCLOB,'"$type":"application/json"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"BPRNAM":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1644)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":35'
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,',"$links":{'
Append WCLOB,'"$search$details":{'
Append WCLOB,'"$title":"Detail"'
Append WCLOB,',"$default":true'
Append WCLOB,',"$url":"{$baseUrl}/BPARTNER('+"'"+'{$key}'+"'"+')?representation=BPARTNER.$details"'
Append WCLOB,',"$devices":"desktop"'
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
End ERROR
#---------------------------------------------------------------------------------------------------#
# GET_RES_STRING
#---------------------------------------------------------------------------------------------------#
Funprog GET_RES_STRING(_LAN,_ID)
Value Char _LAN
Value Integer _ID
Gosub  _GET_RES_STRING From WMSRHBPARTNERB
End RES

#---------------------------------------------------------------------------------------------------#
# GET_RES_MENU
#---------------------------------------------------------------------------------------------------#
Funprog GET_RES_MENU(_LAN,_ID)
Value Char _LAN
Value Char _ID
Gosub  _GET_RES_MENU From WMSRHBPARTNERB
End RES


