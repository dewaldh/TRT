#<AdxTL>@(#)0.0.0.0 $Revision$Class Impact analysis-Sales quotes
# Supervisor
## CRUD-CLASSE ## CCMIMPSQD
# 2018-08-27 13:12:15 611


############################################################################################
### Subprog ADELETE
############################################################################################
Subprog ADELETE(CCMIMPSQD,ASTATUS)
Variable Instance CCMIMPSQD Using R_CCMIMPSQD
Variable Integer ASTATUS

If CCMIMPSQD = null : End : Endif

Gosub AVARIABLES From WMR00CCMIMPSQD
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

Local Instance ALNKDELTAB Using C_ALNKDELTAB

If fmet CCMIMPSQD.ACTX.AGETAFCRIGHT(CCMIMPSQD,"GESCCM",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto ADELETE_END : Endif
If fmet CCMIMPSQD.ACTX.AGETAFCRIGHTD(CCMIMPSQD,"GESCCM",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto ADELETE_END
Endif

Gosub AREPCONTROL_ADELETE
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

If !adxlog
 Gosub ADELETE_TR_CCMIMPSQD
Else
 Gosub ADELETE_CCMIMPSQD
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_END : Return : Endif

$ADELETE_END
End

#-----------------------------------------------------#
$AREPCONTROL_ADELETE
CCMIMPSQD.ASTALIN = [V]CST_ADEL
CCMIMPSQD.CCMISQD.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQD.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub ADELETE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQD.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$ADELETE_CONTROL
Gosub _ADELETE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Verification delete
[L]ASTATUS = max([L]ASTATUS,func ASYRSUB.VERIFY_INSTANCE(CCMIMPSQD.CCMISQD,ALNKDELTAB))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _ADELETE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_BEFORE
If CCMIMPSQD.CCMISQD.ASTALIN = [V]CST_ANEWDEL : Return : Endif
CCMIMPSQD.CCMISQD.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQD.CCMISQD.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQD.CCMISQD.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_TR_CCMIMPSQD
Trbegin [F:CCMISQD]
 Gosub ADELETE_CCMIMPSQD
 If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_ADELETE_AFTER
Return

#-----------------------------------------------------#
$ADELETE_CCMIMPSQD
[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQD.ACTION("ADELETE_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQD.CCMISQD._ADELETE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQD.ACTION("ADELETE_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_ABORT
Rollback
$_ADELETE_ABORT
If CCMIMPSQD.snapshotEnabled=1
 [L]A_RETIK = CCMIMPSQD.revertUpdTick
Endif
[L]ASTATUS = max(fmet CCMIMPSQD.ACTION("ADELETE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



