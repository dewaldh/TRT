#<AdxTL>@(#)0.0.0.0 $Revision$
######################################################################################################
# FILE NAME   : SPEYBBVAL
# DESCRIPTION : Business Batch Post to Journals
######################################################################################################
# DATE        : 11-29-2018
# AUTHOR      : Dewald Henning
# COMPANY     : Leverage Technologies
# VERSION     : 2.1
#-----------------------------------------------------------------------------------------------------
# Epics Code  : DFCX1-27
#-----------------------------------------------------------------------------------------------------
######################################################################################################

$ACTION
  Case ACTION
    When "YBBPST"  :   Gosub POST
    When Default
  Endcase
Return

$POST
If clalev([F:YBBH])= 0  : Local File YBBHEADER [YBBH] : Endif
Read [F:YBBH]YBBH0 = [M:YBB0]YBATNBR

Local Char MESSAGE(255) : MESSAGE = "Post business batch "-[M:YBB0]YBATNBR-" to journals?"
If [F:YBBH]YBATSTA = 2
  Call OUINON(MESSAGE,OK)  From GESECRAN
  Case OK
      When 2: Gosub PRE_SIMULATION_VALIDATIONS
     #When 2: Goto PST_BUSBAT  #yes
  Endcase
Else
  Infbox("Business Batch status is not at validated. Refresh.")
Endif


Return

#DEW : DFCX1-142 - 5/12/2018 - START
#--------------------------------------
# Validate Simulation before Post
#--------------------------------------
$PRE_SIMULATION_VALIDATIONS

#Open Tables
If clalev([F:YBBS])= 0  : Local File YBBSIM [YBBS] : Endif
If clalev([F:JOU])= 0  : Local File GJOURNAL [JOU] : Endif
If clalev([F:JST])= 0  : Local File GAJOUSTA [JST] : Endif
If clalev([F:CPY])= 0  : Local File COMPANY [CPY] : Endif
If clalev([F:FCY])= 0  : Local File FACILITY [FCY] : Endif
If clalev([F:GAC])= 0  : Local File GACCOUNT [GAC] : Endif
If clalev([F:CCE])= 0  : Local File CACCE [CCE] : Endif
If clalev([F:CCE])= 0  : Local File PERIOD [CCE] : Endif
If clalev([F:YBBE]) = 0 : Local File YBBERR [YBBE]        : Endif

#Variables
Local Char YBATNBR(50) : [L]YBATNBR = [M:YBB0]YBATNBR
Local Integer I : I = 0
Local Char YSTATUS(250) : YSTATUS = "PASS"
Local Char YMESS(250)
Local Char YSRC(50) : YSRC = "Simulation Line Validation"


#Clear Error Tables
Delete [F:YBBE]YBBE1 = [L]YBATNBR

For [F:YBBS] Where YBATNBR = [L]YBATNBR

  #Get Company and Site
  Read [F:FCY]FCY0 = [F:YBBS]YFCY
  Read [F:CPY]CPY0 = [F:FCY]LEGCPY

  #1. Type must be active and be a business batch
  Read [F:JOU]JOU0 = [F:YBBS]YJOU
  If [F:JOU]YBUSBAT <> 2 or [F:JOU]ENAFLG <> 2
    If [F:JOU]YBUSBAT <> 2 : YMESS = "Journal not flagged as Business Batch" : Endif
    If [F:JOU]ENAFLG <> 2 : YMESS = "Journal not active" : Endif
    Call ADDLIG_ERR([L]YBATNBR,YSRC,[F:YBBS]YDETLIG,[F:YBBS]YFCY,[F:YBBS]YENTTYP,[F:YBBS]YJOU,[F:YBBS]YDETDES,[F:YBBS]YACC,[F:YBBS]YLIGDES,YMESS) From SPEYBBVAL
    YSTATUS = "FAILED"
  Endif

  #2. Batch date must be within the journal opening & closing dates
  Read [F:JST]JST0 = [F:CPY]CPY;[F:YBBS]YJOU
  YMESS = "Batch date not within Journal opening and closing period"
  If num$([F:JST]OPGENDDAT) = "00/00/0000"
    If [M:YBB0]YBATDAT < [F:JST]OPGSTRDAT
      Call ADDLIG_ERR([L]YBATNBR,YSRC,[F:YBBS]YDETLIG,[F:YBBS]YFCY,[F:YBBS]YENTTYP,[F:YBBS]YJOU,[F:YBBS]YDETDES,[F:YBBS]YACC,[F:YBBS]YLIGDES,YMESS) From SPEYBBVAL
      YSTATUS = "FAILED"
    Endif
  Else
      If [M:YBB0]YBATDAT < [F:JST]OPGSTRDAT or [M:YBB0]YBATDAT > [F:JST]OPGENDDAT
        Call ADDLIG_ERR([L]YBATNBR,YSRC,[F:YBBS]YDETLIG,[F:YBBS]YFCY,[F:YBBS]YENTTYP,[F:YBBS]YJOU,[F:YBBS]YDETDES,[F:YBBS]YACC,[F:YBBS]YLIGDES,YMESS) From SPEYBBVAL
        YSTATUS = "FAILED"
    Endif
  Endif

  #3. Company must be active
  If [F:CPY]YCPYACT <> 2
    YMESS = "Company not active"
    Call ADDLIG_ERR([L]YBATNBR,YSRC,[F:YBBS]YDETLIG,[F:YBBS]YFCY,[F:YBBS]YENTTYP,[F:YBBS]YJOU,[F:YBBS]YDETDES,[F:YBBS]YACC,[F:YBBS]YLIGDES,YMESS) From SPEYBBVAL
    YSTATUS = "FAILED"
  Endif

  #4. Account must be active
  Read [F:GAC]GAC0 = [F:YBBS]YCOA;[F:YBBS]YACC
  If [F:GAC]ENAFLG <> 2
    YMESS = "Account not active"
    Call ADDLIG_ERR([L]YBATNBR,YSRC,[F:YBBS]YDETLIG,[F:YBBS]YFCY,[F:YBBS]YENTTYP,[F:YBBS]YJOU,[F:YBBS]YDETDES,[F:YBBS]YACC,[F:YBBS]YLIGDES,YMESS) From SPEYBBVAL
    YSTATUS = "FAILED"
  Endif

  #5. Dimension values must be active
  Local Integer DI : DI = 0
  Local Char YDIEARR(5)(0..4)
  YDIEARR(0) = [F:YBBS]YDIE0 : YDIEARR(1) = [F:YBBS]YDIE1 : YDIEARR(2) = [F:YBBS]YDIE2
  YDIEARR(3) = [F:YBBS]YDIE3 : YDIEARR(4) = [F:YBBS]YDIE4
  Local Char YCCEARR(5)(0..4)
  YCCEARR(0) = [F:YBBS]YCCE0 : YCCEARR(1) = [F:YBBS]YCCE1 : YCCEARR(2) = [F:YBBS]YCCE2
  YCCEARR(3) = [F:YBBS]YCCE3 : YCCEARR(4) = [F:YBBS]YCCE4
  For DI = 0 To 4
    If YCCEARR(DI) <> "" and YDIEARR(DI) <> ""
      Read [F:CCE]CCE0 = YDIEARR(DI);YCCEARR(DI)
      If [F:CCE]ENAFLG <> 2
        YMESS = "Dimension selected not active"
        Call ADDLIG_ERR([L]YBATNBR,YSRC,[F:YBBS]YDETLIG,[F:YBBS]YFCY,[F:YBBS]YENTTYP,[F:YBBS]YJOU,[F:YBBS]YDETDES,[F:YBBS]YACC,[F:YBBS]YLIGDES,YMESS) From SPEYBBVAL
        YSTATUS = "FAILED"
      Endif
    Endif
  Next

  #6. Period Is Open
  Local Char QUERY(250)(0..)
  QUERY(0) = "SELECT isnull(PERSTA_0,0) From PERIOD"
  QUERY(1) -= "Where CPY_0 = '"+[F:CPY]CPY+"' and LEDTYP_0 = 1"
  QUERY(2) -= "and '"+[M:YBB0]YBATDAT+"' BETWEEN PERSTR_0 and PEREND_0 and PERSTA_0 = 2"
  #Infbox QUERY
  For (Integer PERSTA) From "5" Sql QUERY As [YLNK]
    If PERSTA <> 2
      YMESS = "Batch date is not in an open period for company"
      Call ADDLIG_ERR([L]YBATNBR,YSRC,[F:YBBS]YDETLIG,[F:YBBS]YFCY,[F:YBBS]YENTTYP,[F:YBBS]YJOU,[F:YBBS]YDETDES,[F:YBBS]YACC,[F:YBBS]YLIGDES,YMESS) From SPEYBBVAL
      YSTATUS = "FAILED"
    Endif
  Next

  #7. Simulation Balance
  QUERY(0) = "" : QUERY(1) = "" : QUERY(2) = ""

Next

  #Update Error Lines
  I = 0
  For [F:YBBE]YBBE1 Where [F:YBBE]YBATNBR =  [M:YBB0]YBATNBR
    I += 1
    [F:YBBE]YLIG = I
    [M:YBB3]YBATNBR = [F:YBBS]YBATNBR
    Rewrite [F:YBBE]
    Affzo [M:YBB3]YBATNBR
  Next

If YSTATUS = "PASS" Then
  Gosub $PST_BUSBAT
Else
  Infbox "Validations failed. See Errors tab."
Endif

#Close Tables
If clalev([F:YBBS])= 0 : Close Local File [F:YBBS] : Endif
If clalev([F:JOU])= 0  : Close Local File [F:JOU] : Endif
If clalev([F:JST])= 0  : Close Local File [F:JST] : Endif
If clalev([F:CPY])= 0  : Close Local File [F:CPY] : Endif
If clalev([F:FCY])= 0  : Close Local File [F:FCY] : Endif
If clalev([F:GAC])= 0  : Close Local File [F:GAC] : Endif
If clalev([F:CCE])= 0  : Close Local File [F:CCE] : Endif
If clalev([F:YBBE]) = 0 : Close Local File [F:YBBE] : Endif

Return
#DEW : DFCX1-142 - 5/12/2018 - END

#--------------------------------------
# Post Business Batch
#--------------------------------------
$PST_BUSBAT
#Open Tables
If clalev([F:YBBS])= 0  : Local File YBBSIM     [YBBS] : Endif
If clalev([F:YBPS]) = 0 : Local File YBBPSIM    [YBPS]  : Endif
If clalev([F:YJOU]) = 0 : Local File GJOURNAL   [YJOU]  : Endif

  #Set Batch Number
  Local Char YBATNBR(50) : [L]YBATNBR = [M:YBB0]YBATNBR
  Local Char NAME(255)   : [L]NAME =  [L]YBATNBR+"_"+format$("D:YYMMDDhhmmss",date$)
  Local Char TRACE(255)
  Local Char XMSG(250)(99)
  Local Char XMOT(250)
  Local Integer XCONTA : XCONTA = 0
  Local Char YCUR(3) : [L]YCUR = "AUD"

  #Delete post records
  Delete [F:YBPS]YBBPS0 = YBATNBR
  If clalev([F:YBBS]) = 0 : Close Local File [F:YBBS] : Endif

  #Start Trace
  Call OUVRE_TRACE("Business Batch Post") From LECFIC
  Call ECR_TRACE("Start Date: " + num$(datetime$),0) From GESECRAN

  NAME = "BBGL" + format$("D:YYMMDDhhmmss",date$)

  #OPEN File To Write GL DATA For IMPORTING
  Openo filpath('tmp',NAME,'DAT'),-1 Using [ZGL]

  Iomode adxium 50 Using [ZGL]
  Iomode adxirs chr$(13)+ chr$(10) Using [ZGL]
  Iomode adxifs ',' Using [ZGL]

  #--- Write File Start ---#

  Local Integer YPRE_TRANSNBR, YIECRE
  Local Char YPRE_IEFCY(10)
  Local Char YSNS(3)
  Local Char YLEDTYP(3) : [L]YLEDTYP = "1"
  Local Char YDACDIA(5) : [L]YDACDIA = "STDCO"
  Local Decimal YAMTCUR
  Local Char YBATDAT(10) : [L]YBATDAT = num$(format$("D:YYYYMMDD", [M:YBB0]YBATDAT))
  Local Char YSTA(1) : YSTA = "1" #Temp Status ALWAYS
  Local Char YCAT(1)
  If [M:YBB0]YBATCAT = 1 : YCAT = "1" : Endif #Actual
  If [M:YBB0]YBATCAT = 2 : YCAT = "5" : Endif #Template

  #--- Write File Start ---#
  Local Integer DI, SI
  Local Char QUERY(255)(0..)

  QUERY(0) =  "SELECT YBATNBR_0, YENTTYP_0, YJOU_0, YTRANSNBR_0, YDETDES_0, YFCY_0, YCOA_0, YACC_0, YLIGDES_0, YCTRL_0, YBP_0, YDEB_0, YCDT_0, YTAX_0, YREF_0, YPJT_0,"
  QUERY(1) -= "YDIE0_0, YCCE0_0,YDIE1_0, YCCE1_0,YDIE2_0, YCCE2_0,YDIE3_0, YCCE3_0,YDIE4_0, YCCE4_0,YGSTAMT_0, YAMTTAX_0, YLIG_0, YBAN_0, YFRMFCY_0, YTOFCY_0"
  QUERY(2) -= "From YBBSIM"
  QUERY(3) -= "Where YBATNBR_0 = '"+[L]YBATNBR+"'"
  QUERY(4) -=
& "GROUP By YFCY_0, YBATNBR_0, YENTTYP_0, YJOU_0, YTRANSNBR_0, YDETDES_0, YCOA_0, YACC_0, YLIGDES_0, YCTRL_0, YBP_0, YDEB_0, YCDT_0, YTAX_0, YREF_0, YPJT_0,YDIE0_0, YCCE0_0,YDIE1_0, YCCE1_0,"
  QUERY(5) -= "YDIE2_0, YCCE2_0,YDIE3_0, YCCE3_0,YDIE4_0, YCCE4_0,YGSTAMT_0, YAMTTAX_0, YLIG_0, YBAN_0, YFRMFCY_0, YTOFCY_0"
  QUERY(6) -= "Order By YTRANSNBR_0 ASC"

  For (Char YBATNBR, Char YENTTYP, Char YJOU, Integer YTRANSNBR, Char YDETDES, Char YFCY,
&     Char YCOA, Char YACC, Char YLIGDES, Char YCTRL, Char YBP, Decimal YDEB, Decimal YCDT,
&     Char YTAX, Char YREF, Char YPJT, Char YDIE0, Char YCCE0,Char YDIE1, Char YCCE1,
&     Char YDIE2, Char YCCE2, Char YDIE3, Char YCCE3, Char YDIE4, Char YCCE4,
&     Decimal YGSTAMT, Decimal YAMTTAX, Integer YLIG, Char YBAN, Char YFRMFCY, Char YTOFCY)
&     From "5" Sql QUERY As [YGLD]
    SI += 1
    #Get Batch Type from Journal -- We need this for the IE transaction type
    Read [F:YJOU]JOU0 = [F:YGLD]YJOU

#    If [F:YJOU]YBUSBATTYP = 1  #IE
      YIECRE = 0
      If [L]YPRE_IEFCY = "" : [L]YPRE_IEFCY = [F:YGLD]YFCY : YIECRE = 1 : Endif #Set First Readable Site for IE type
      If [L]YPRE_TRANSNBR = 0 : [L]YPRE_TRANSNBR = [F:YGLD]YTRANSNBR : Endif #Set First Transaction Number for IE type
      #Infbox "PREFCY"-num$(YPRE_IEFCY),"TABFCY"-num$([F:YGLD]YFCY),"PRETRANS"-num$(YPRE_TRANSNBR), "TABTRANS"-num$([F:YGLD]YTRANSNBR)
      #1. Same Transaction Number, different site
      If [L]YPRE_IEFCY <> [F:YGLD]YFCY and [L]YPRE_TRANSNBR = [F:YGLD]YTRANSNBR
        YIECRE = 1
        [L]YPRE_IEFCY = [F:YGLD]YFCY
      #2. Same site, different transaction number
      Elsif [L]YPRE_IEFCY = [F:YGLD]YFCY and [L]YPRE_TRANSNBR <> [F:YGLD]YTRANSNBR
        YIECRE = 1
        [L]YPRE_TRANSNBR = [F:YGLD]YTRANSNBR
      #3. Different Site, different Transaction number
      Elsif [L]YPRE_IEFCY <> [F:YGLD]YFCY and [L]YPRE_TRANSNBR <> [F:YGLD]YTRANSNBR
        YIECRE = 1
        [L]YPRE_TRANSNBR = [F:YGLD]YTRANSNBR
        [L]YPRE_IEFCY = [F:YGLD]YFCY
      Endif
      If YIECRE <> 0 #Validations for valid header passed
        #Create Header
        Local Char YNAM(4) : YNAM = format$("D:mmss",date$)
        Call CREATE_GL_HEADER([F:YGLD]YFCY, [F:YGLD]YENTTYP,
&        [F:YGLD]YBATNBR+"-"+num$([F:YGLD]YTRANSNBR)+"-"+[F:YGLD]YFCY, [M:YBB0]YBATDES,
&         YBATDAT, [F:YGLD]YJOU, YCAT, YSTA, "AUD", YDACDIA,[L]YBATNBR)
        YPRE_TRANSNBR = [F:YGLD]YTRANSNBR
        [L]DI = 0
        #Insert Post records
        [F:YBPS]YBATNBRSRC = [L]YBATNBR
        [F:YBPS]YTYP = [F:YGLD]YENTTYP
        [F:YBPS]YNUM = [F:YGLD]YBATNBR+"-"+num$([F:YGLD]YTRANSNBR)+"-"+[F:YGLD]YFCY
        [F:YBPS]YDESVCR = [M:YBB0]YBATDES
        [F:YBPS]YSTA = "Posted"
        Write [F:YBPS]
      Endif
    #Else
#      If YPRE_TRANSNBR <> [F:YGLD]YTRANSNBR
#        #Create Header
#        Local Char YNAM(4) : YNAM = format$("D:mmss",date$)
#        Call CREATE_GL_HEADER([F:YGLD]YFCY, [F:YGLD]YENTTYP, [F:YGLD]YBATNBR+"-"+num$(YTRANSNBR)+"-"+[F:YGLD]YFCY, [M:YBB0]YBATDES, YBATDAT, [F:YGLD]YJOU, YCAT, YSTA, "AUD", YDACDIA,[L]YBATNBR)
#        YPRE_TRANSNBR = [F:YGLD]YTRANSNBR
#        [L]DI = 0
#        #Insert Post records
#        [F:YBPS]YBATNBRSRC = [L]YBATNBR
#        [F:YBPS]YTYP = [F:YGLD]YENTTYP
#        [F:YBPS]YNUM = [F:YGLD]YBATNBR+"-"+num$(YTRANSNBR)+"-"+[F:YGLD]YFCY
#        [F:YBPS]YDESVCR = [M:YBB0]YBATDES
#        [F:YBPS]YSTA = "Posted"
#        Write [F:YBPS]
#      Endif
#    Endif

    If [F:YGLD]YDEB = 0 : [L]YAMTCUR = [F:YGLD]YCDT : [L]YSNS = "-1"   : Endif
    If [F:YGLD]YCDT = 0 : [L]YAMTCUR = [F:YGLD]YDEB : [L]YSNS = "1"  : Endif
    [L]DI += 1
    Call CREATE_GL_DETAIL(num$([L]DI), num$([L]DI), [F:YGLD]YFCY, [L]YLEDTYP, [F:YGLD]YCTRL,[F:YGLD]YACC,
&                       [F:YGLD]YBP, num$([L]YAMTCUR), [L]YSNS, [F:YGLD]YLIGDES, [F:YGLD]YREF, [F:YGLD]YTAX,
&                       [F:YGLD]YPJT,[F:YGLD]YFRMFCY, [F:YGLD]YTOFCY )

    #Check for Analytical Lines
    If [F:YGLD]YCCE0 <> "" or [F:YGLD]YCCE1 <> "" or [F:YGLD]YCCE2 <> ""  or [F:YGLD]YCCE3 <> ""  or [F:YGLD]YCCE4 <> "" Then
      Local Char YQTY(1) : YQTY = "1"
      [L]DI += 1
      Call CREATE_GL_ADETAIL(num$([L]DI), [F:YGLD]YDIE0, [F:YGLD]YCCE0, [F:YGLD]YDIE1, [F:YGLD]YCCE1,
&                            [F:YGLD]YDIE2, [F:YGLD]YCCE2, [F:YGLD]YDIE3, [F:YGLD]YCCE3, [F:YGLD]YDIE4,
&                            [F:YGLD]YCCE4, YQTY, num$([L]YAMTCUR))
    Endif

  #--- Write File End ---#
  Next

  #Close file before import
  Openo  Using [ZGL]

  Gosub OUVRE From GIMPOBJ

  Call IMPORTSIL("YGASTEMP", filpath('tmp',NAME,'DAT')) From GIMPOBJ
  #Log messages and error handling
  #https://sagecity.na.sage.com/support_communities/sage_erp_x3/f/sage-x3-general-discussion-forum/104136/importsil---capture-log-messages

  Call ECR_TRACE("End Date: " + num$(datetime$),0) From GESECRAN

  TRACE = GTRACE
  Raz XMSG

  Call FERME_TRACE() From LECFIC
  Call LEC_TRACE From LECFIC

  Local Integer ICR, INC
  Local Char GLCREATED(50)(1..)

  If filinfo(filpath("TRA",TRACE,"tra",0),7) > 0

    Openi filpath("TRA",TRACE,"tra",0) Using [XLL]

    Repeat
     Rdseq XMOT Using [XLL]

      If left$(XMOT,11)="Creation of"
        ICR += 1
        GLCREATED(ICR) = right$(XMOT,19)
      Endif

      If left$(XMOT,5)="<0001"
        INC += 1
        Read [F:YBPS]YBBPS0 = [L]YBATNBR
        [F:YBPS]YSTA = right$(XMOT,6)
        Rewrite [F:YBPS]
      Endif

      #If seg$(XMOT ,1,1) = "<"
      #  XMSG(XCONTA) = XMOT + chr$(10)
      #  XCONTA += 1
      #Endif

    Until fstat <> 0
    Openi Using [XLL]

  Endif

  #Set Status to 'Post Errors' after modfication
  If clalev([F:YBBH0]) = 0 : Local File YBBHEADER [F:YBBH0] : Endif
  Read [F:YBBH0]YBBH0 = [M:YBB0]YBATNBR
  If INC > 0
    [F:YBBH0]YBATSTA = 5
  Else
    [F:YBBH0]YBATSTA = 4
  Endif
  If fstat = 0
    Rewrite [F:YBBH0]
    [M:YBB0]YBATSTA = [F:YBBH0]YBATSTA
    Affzo [M:YBB0]
  Endif
  If clalev([F:YBBH0]) = 0 : Close Local File [F:YBBH0] : Endif

#Close Tables
If clalev([F:YBPS])= 0  : Close Local File [F:YBPS] : Endif
If clalev([F:YJOU]) = 0 : Close Local File [F:YJOU]  : Endif

Return


#------------------
# GL Header
#------------------
Subprog CREATE_GL_HEADER(FCY,TYP,NUM,DESVCR,ACCDAT,JOU,CAT,STA,CUR,DACDIA,BPRVCR)
Value Char FCY
Value Char TYP
Value Char NUM
Value Char DESVCR
Value Char ACCDAT
Value Char JOU
Value Char CAT
Value Char STA
Value Char CUR
Value Char DACDIA
Value Char BPRVCR

Local Char ORIGIN(1) : ORIGIN = "3"  #-- Origin 3 = Import

  Wrseq 'G,'+
&       FCY + ','+
&       TYP + ','+
&       NUM + ','+
&       DESVCR + ','+
&       ACCDAT + ','+
&       JOU + ','+
&       CAT + ','+
&       STA + ','+
&       CUR + ','+
&       DACDIA + ','+
&       ORIGIN + ','+
&       BPRVCR
& Using [ZGL]

End

#------------------
# GL Detail
#------------------
Subprog CREATE_GL_DETAIL(LIN,IDTLIN,FCYLIN,LEDTYP,SAC,ACC,BPR,AMTCUR,SNS,DES,FREREF,TAX,PJTLIN,YFRMFCY,YTOFCY)

Value Char   LIN
Value Char   IDTLIN
Value Char   FCYLIN
Value Char   LEDTYP
Value Char   SAC
Value Char   ACC
Value Char   BPR
Value Char   AMTCUR
Value Char   SNS
Value Char   DES
Value Char   FREREF
Value Char   TAX
Value Char   PJTLIN
Value Char   YFRMFCY
Value Char   YTOFCY

  Wrseq 'D,'+
&       LIN + ','+
&       IDTLIN + ','+
&       FCYLIN + ','+
&       LEDTYP + ','+
&       SAC + ','+
&       ACC + ','+
&       BPR + ','+
&       AMTCUR + ','+
&       SNS + ','+
&       DES + ','+
&       FREREF + ','+
&       TAX + ','+
&       PJTLIN + ','+
&       YFRMFCY + ','+
&       YTOFCY
& Using [ZGL]

End

#------------------
# GL Analytical
#------------------
Subprog CREATE_GL_ADETAIL(ANALIN,DIE0,CCE0,DIE1,CCE1,DIE2,CCE2,DIE3,CCE3,DIE4,CCE4,QTY,AMTCUR)

#Dimentions
Value Char     ANALIN
Value Char     DIE0
Value Char     CCE0
Value Char     DIE1
Value Char     CCE1
Value Char     DIE2
Value Char     CCE2
Value Char     DIE3
Value Char     CCE3
Value Char     DIE4
Value Char     CCE4
Value Char     QTY
Value Char     AMTCUR

  Wrseq 'A,'+
&       ANALIN + ','+
&       DIE0 + ','+
&       CCE0 + ','+
&       DIE1 + ','+
&       CCE1 + ','+
&       DIE2 + ','+
&       CCE2 + ','+
&       DIE3 + ','+
&       CCE3 + ','+
&       DIE4 + ','+
&       CCE4 + ','+
&       QTY + ','+
&       AMTCUR
& Using [ZGL]


End

