#<AdxTL>@(#)0.0.0.0 $Revision$Class Company groupings
# Supervisor
## CRUD-CLASSE ## AGRPCPY
# 2018-08-27 12:20:33 636


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File AGRPCPY [AGC_]

If !SILENCE : Call TRACE("2 --> Local Instance C_AGRPCPY") From ASYRCOM : Endif
Local Instance AGRPCPY Using C_AGRPCPY

If !SILENCE : Call TRACE("3 --> New Instance C_AGRPCPY") From ASYRCOM : Endif
AGRPCPY = NewInstance C_AGRPCPY AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [AGC_]AGC0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of AGRPCPY") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet AGRPCPY.AREAD([AGC_]GRP,[AGC_]CPY))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("AGRPCPY.GRP ="-num$(AGRPCPY.GRP)) From ASYRCOM
 Call TRACE("AGRPCPY.CPY ="-num$(AGRPCPY.CPY)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(AGRPCPY.AKEYS)
  Call TRACE("-"-num$(I)-":"-AGRPCPY.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [AGC_]
FreeGroup AGRPCPY
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(AGRPCPY,ACLE,ASTATUS,_ETAG)
Variable Instance AGRPCPY Using C_AGRPCPY
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _GRP(5)
Local Char _CPY(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_GRP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CPY = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File AGRPCPY [AGC]
Default File [F:AGC]
Read [F:AGC]AGC0 = [L]_GRP;[L]_CPY
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:AGC]UPDTICK)>0
 [L]_ETAG = num$([F:AGC]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(AGRPCPY,ACLE,ASTATUS)
Variable Instance AGRPCPY Using C_AGRPCPY
Value Char ACLE
Variable Integer ASTATUS
Local Char _GRP(5)
Local Char _CPY(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_GRP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CPY = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet AGRPCPY.AREAD([L]_GRP,[L]_CPY))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(AGRPCPY,_GRP,_CPY,ASTATUS)
Variable Instance AGRPCPY Using C_AGRPCPY
Value Char _GRP
Value Char _CPY
Variable Integer ASTATUS

If AGRPCPY = null : End : Endif

Gosub AVARIABLES From WMC00AGRPCPY
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If AGRPCPY.APARENT=null
 [L]A_I = AGRPCPY.freeSnapshot
 AGRPCPY.snapshotEnabled = 0
 AGRPCPY.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & AGRPCPY.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet AGRPCPY._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If AGRPCPY.APARENT=null
 AGRPCPY.snapshotEnabled = 1
 AGRPCPY.setAccessorEnabled = 1
Endif
LogicClose File [AGC]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet AGRPCPY._ACTION_PARAM("AREAD_BEFORE",[L]_GRP,[L]_CPY))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:AGC]
Read [F:AGC]AGC0 = [L]_GRP;[L]_CPY
If fstat
[L]A_ERROR = [L]_GRP+"~"+[L]_CPY
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(AGRPCPY,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:AGC]AUUID)>0 & [F:AGC]AUUID=NullUuid
 [F:AGC]AUUID = getUuid
Endif
SetInstance AGRPCPY With [F:AGC]
AGRPCPY.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet AGRPCPY.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



