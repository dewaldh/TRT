#<AdxTL>@(#)0.0.0.0 $Revision$Class Contacts
# Sage X3 supervisor
## CRUD-CLASSE ## CONTACT
# 2018-06-20 06:41:37 226


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(CONTACT,ASTATUS)
Variable Instance CONTACT Using C_CONTACT
Variable Integer ASTATUS

If CONTACT = null : End : Endif

Gosub _AVARIABLES From WMC00CONTACT

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CONTACT

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(CONTACT,ASTATUS)
Variable Instance CONTACT Using C_CONTACT
Variable Integer ASTATUS

If CONTACT = null : End : Endif

Gosub AVARIABLES From WMC00CONTACT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_CONTACT
Else
 Gosub AINSERT_CONTACT
Endif

Gosub _AINSERT_AFTER
[L]A_I = CONTACT.freeSnapshot
CONTACT.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet CONTACT._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet CONTACT._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet CONTACT._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If CONTACT.ASTALIN = [V]CST_ANEWDEL : Return : Endif
CONTACT.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet CONTACT.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
A_N2=1
If CONTACT.CONTACTCRM(A_N2) <> null
& and !find(CONTACT.CONTACTCRM(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
 [L]ASTATUS = max([L]ASTATUS,fmet CONTACT.CONTACTCRM(A_N2)._AINSERT_CONTROL_BEFORE)
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
A_N2=1
If CONTACT.CONTACTCRM(A_N2).ASTALIN<>[V]CST_ADEL & CONTACT.CONTACTCRM(A_N2).ASTALIN<>[V]CST_ANEWDEL
 [L]A_OK1 = 1
Endif
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(CONTACT,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"CONTACTCRM:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER
A_N2=1
If CONTACT.CONTACTCRM(A_N2) <> null
& and !find(CONTACT.CONTACTCRM(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
 [L]ASTATUS = max([L]ASTATUS,fmet CONTACT.CONTACTCRM(A_N2)._AINSERT_CONTROL_AFTER)
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
A_N2=1
If CONTACT.CONTACTCRM(A_N2).ASTALIN<>[V]CST_ADEL & CONTACT.CONTACTCRM(A_N2).ASTALIN<>[V]CST_ANEWDEL
 [L]A_OK1 = 1
Endif
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(CONTACT,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"CONTACTCRM:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

[L]ASTATUS = max([L]ASTATUS,fmet CONTACT.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_CONTACT
Trbegin [F:CNT]
 Gosub AINSERT_CONTACT
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_CONTACT
Raz [F:CNT]
[L]ASTATUS = max([L]ASTATUS,fmet CONTACT.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CONTACT.ACTION("AINSERT"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]A_TYPMAJ=[V]CST_ANEW

#-----------------------------------------------------#
A_N2=1
If CONTACT.CONTACTCRM(A_N2) <> null and 
& CONTACT.CONTACTCRM(A_N2).ASTALIN=[V]CST_ALL
CONTACT.CONTACTCRM(A_N2).ASTALIN = [V]CST_AUPD
Endif
If CONTACT.CONTACTCRM(A_N2) <> null and
& (CONTACT.CONTACTCRM(A_N2).ASTALIN=[L]A_TYPMAJ or
& CONTACT.CONTACTCRM(A_N2).ASTALIN=[V]CST_ALL)
 If CONTACT.CONTACTCRM(A_N2).ASTALIN=[L]A_TYPMAJ
  Case CONTACT.CONTACTCRM(A_N2).ASTALIN
   When [V]CST_AUPD  : [L]ASTATUS = max([L]ASTATUS,fmet CONTACT.CONTACTCRM(A_N2)._AUPDATE)
   When [V]CST_ANEW : [L]ASTATUS = max([L]ASTATUS,fmet CONTACT.CONTACTCRM(A_N2)._AINSERT)
   When [V]CST_ADEL  : [L]ASTATUS = max([L]ASTATUS,fmet CONTACT.CONTACTCRM(A_N2)._ADELETE)
  Endcase
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

[L]ASTATUS = max([L]ASTATUS,fmet CONTACT.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If CONTACT.snapshotEnabled=1
 [L]A_RETIK = CONTACT.revertUpdTick
Endif
[L]ASTATUS = max(fmet CONTACT.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(CONTACT.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 CONTACT.ASTALIN = [V]CST_ALL
Endif
Local Integer ASTATUS2
A_N2=1
If CONTACT.CONTACTCRM(A_N2) <> null
 [L]ASTATUS2 = fmet CONTACT.CONTACTCRM(A_N2)._AINSERT_AFTER
 If CONTACT.CONTACTCRM(A_N2).ASTALIN=[V]CST_ADEL or CONTACT.CONTACTCRM(A_N2).ASTALIN=[V]CST_ANEWDEL
  FreeInstance CONTACT.CONTACTCRM(A_N2)
  CONTACT.CONTACTCRM(A_N2) = null
 Endif
 [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
Endif
Return



