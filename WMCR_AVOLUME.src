#<AdxTL>@(#)0.0.0.0 $Revision$Class Volume
# Supervisor
## CRUD-CLASSE ## AVOLUME
# 2018-08-27 12:24:19 009


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File AVOLUME [AVL_]

If !SILENCE : Call TRACE("2 --> Local Instance C_AVOLUME") From ASYRCOM : Endif
Local Instance AVOLUME Using C_AVOLUME

If !SILENCE : Call TRACE("3 --> New Instance C_AVOLUME") From ASYRCOM : Endif
AVOLUME = NewInstance C_AVOLUME AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [AVL_]CODE First
If !fstat
 If !SILENCE : Call TRACE("Call program read of AVOLUME") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.AREAD([AVL_]VOLUME))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("AVOLUME.VOLUME ="-num$(AVOLUME.VOLUME)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(AVOLUME.AKEYS)
  Call TRACE("-"-num$(I)-":"-AVOLUME.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [AVL_]
FreeGroup AVOLUME
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(AVOLUME,ACLE,ASTATUS,_ETAG)
Variable Instance AVOLUME Using C_AVOLUME
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _VOLUME(30)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_VOLUME = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File AVOLUME [AVL]
Default File [F:AVL]
Read [F:AVL]CODE = [L]_VOLUME
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:AVL]UPDTICK)>0
 [L]_ETAG = num$([F:AVL]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(AVOLUME,ACLE,ASTATUS)
Variable Instance AVOLUME Using C_AVOLUME
Value Char ACLE
Variable Integer ASTATUS
Local Char _VOLUME(30)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_VOLUME = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.AREAD([L]_VOLUME))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(AVOLUME,_VOLUME,ASTATUS)
Variable Instance AVOLUME Using C_AVOLUME
Value Char _VOLUME
Variable Integer ASTATUS

If AVOLUME = null : End : Endif

Gosub AVARIABLES From WMC00AVOLUME
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If AVOLUME.APARENT=null
 [L]A_I = AVOLUME.freeSnapshot
 AVOLUME.snapshotEnabled = 0
 AVOLUME.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & AVOLUME.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet AVOLUME._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If AVOLUME.APARENT=null
 AVOLUME.snapshotEnabled = 1
 AVOLUME.setAccessorEnabled = 1
Endif
LogicClose File [AVL]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME._ACTION_PARAM("AREAD_BEFORE",[L]_VOLUME))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:AVL]
Read [F:AVL]CODE = [L]_VOLUME
If fstat
[L]A_ERROR = [L]_VOLUME
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(AVOLUME,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = [F:AVL]CODACC
If dim([F:AVL]AUUID)>0 & [F:AVL]AUUID=NullUuid
 [F:AVL]AUUID = getUuid
Endif
SetInstance AVOLUME With [F:AVL]
AVOLUME.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="AVOLUME" & ZONE="DES" & IDENT1=AVOLUME.VOLUME & IDENT2=""
 Call ASETTEXTRA(AVOLUME.AXX,AVOLUME.AllocGrp(),"DES",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 AVOLUME.AXX(maxtab(AVOLUME.AXX)).FLG = 0
Next AXX
If !len(fmet AVOLUME.AGETTEXTRA("DES"))
 Call ASETTEXTRA(AVOLUME.AXX,AVOLUME.AllocGrp(),"DES",
& fmet AVOLUME.AGETTEXTRALAN("DES",AVOLUME.ACTX.AFOLD.ALANGDEF),
& AVOLUME.ACTX.LAN) From ASYRSUB
Endif

Return



