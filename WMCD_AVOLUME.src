#<AdxTL>@(#)0.0.0.0 $Revision$Class Volume
# Supervisor
## CRUD-CLASSE ## AVOLUME
# 2018-08-27 12:24:18 909


############################################################################################
### Subprog _ADELETE
############################################################################################
Subprog _ADELETE(AVOLUME,ASTATUS)
Variable Instance AVOLUME Using C_AVOLUME
Variable Integer ASTATUS

If AVOLUME = null : End : Endif

Gosub _AVARIABLES From WMC00AVOLUME

[L]A_STRSITE = ""
[L]A_STRACC = AVOLUME.CODACC
Local Instance ALNKDELTAB Using C_ALNKDELTAB
Gosub ADELETE_AVOLUME

End

############################################################################################
### Subprog ADELETE
############################################################################################
Subprog ADELETE(AVOLUME,ASTATUS)
Variable Instance AVOLUME Using C_AVOLUME
Variable Integer ASTATUS

If AVOLUME = null : End : Endif

Gosub AVARIABLES From WMC00AVOLUME
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

Local Instance ALNKDELTAB Using C_ALNKDELTAB

[L]A_STRSITE = ""
[L]A_STRACC = AVOLUME.CODACC
Gosub ADELETE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

If !adxlog
 Gosub ADELETE_TR_AVOLUME
Else
 Gosub ADELETE_AVOLUME
Endif

$ADELETE_END
End


$ADELETE_CONTROL
Gosub _ADELETE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Verification delete
[L]ASTATUS = max([L]ASTATUS,func ASYRSUB.VERIFY_INSTANCE(AVOLUME,ALNKDELTAB))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _ADELETE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_BEFORE
If AVOLUME.ASTALIN = [V]CST_ANEWDEL : Return : Endif
AVOLUME.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_TR_AVOLUME
Trbegin [F:AVL]
 Gosub ADELETE_AVOLUME
 If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$ADELETE_AVOLUME
[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.ACTION("ADELETE_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = func ASYRSUB.DELETE_LINKS(AVOLUME,ALNKDELTAB)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00AVOLUME._MAJSQL_AVOLUME(AVOLUME))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.ACTION("ADELETE_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_ABORT
Rollback
$_ADELETE_ABORT
If AVOLUME.snapshotEnabled=1
 [L]A_RETIK = AVOLUME.revertUpdTick
Endif
[L]ASTATUS = max(fmet AVOLUME.ACTION("ADELETE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#

#-----------------------------------------------------#
$_ADELETE_AFTER
Return



