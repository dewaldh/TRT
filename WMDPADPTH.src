#<AdxTL>@(#)0.0.0.0 $Revision$
# Supervisor
## BI-DIMENSION ## Synchronization rule PADPTH

$OUVRE
Local Char FILTRE(250)
OUVTAB = GDOSSIER+".PRECEIPT" : If clalev([F:PTH])=0 : Local File =OUVTAB [PTH] : Endif
OUVTAB = GDOSSIER+".BPSUPPLIER" : If clalev([F:BPS])=0 : Local File =OUVTAB [BPS] : Endif
OUVTAB = GDOSSIER+".BPADDRESS" : If clalev([F:BPA])=0 : Local File =OUVTAB [BPA] : Endif
OUVTAB = GDOSSIER+".COMPANY" : If clalev([F:CPY])=0 : Local File =OUVTAB [CPY] : Endif
OUVTAB = "Link [PTH]"
Link [PTH] With
& [BPS]BPS0 = [F:PTH]BPSINV,
& [BPA]BPA0 = 1;[F:PTH]BPSINV;[F:PTH]BPAINV,
& [CPY]CPY0 = [F:PTH]CPY
& As [LNK_]
& Order By Key CLE = [PTH]PTHNUM
FILTRE = ""
Return

$FERME
If clalev([F:PTH]) : Close local File [PTH] : Endif
If clalev([F:BPS]) : Close local File [BPS] : Endif
If clalev([F:BPA]) : Close local File [BPA] : Endif
If clalev([F:CPY]) : Close local File [CPY] : Endif
Return

$DCLE
Local Char    DCLE(GLONAVA)(1..1)
Local Integer DTYP(1..1)
Local Integer NBDCLE
NBDCLE = 1
DCLE(1) = "PTHNUM"
DTYP(1) =  7
Return

$CHARGE_CLE
If dim([F:AAA_]PTHNUM)>0
 [F:AAA_]PTHNUM = [F:PTH]PTHNUM
Endif
Return

########################################################################
# Return the filter necessary for incremental delete in synchroonization
Subprog GET_FLTDELINC(PFLT)
Variable Clbfile PFLT
PFLT = "1=1"
Append PFLT, " & [F:AAA_]PTHNUM=[F:PTH]PTHNUM"

End

$MAJFLD
### PTHNUM
[L]FLD="PTHNUM"
[L]FORMULE='[F:PTH]PTHNUM'
If dim([F:AAA_]PTHNUM)>0
 [F:AAA_]PTHNUM = [F:PTH]PTHNUM
Endif

### PTHNUMLNK
[L]FLD="PTHNUMLNK"
[L]FORMULE='[F:PTH]PTHNUM'
If dim([F:AAA_]PTHNUMLNK)>0
 [F:AAA_]PTHNUMLNK = [F:PTH]PTHNUM
Endif

### BPSNDE
[L]FLD="BPSNDE"
[L]FORMULE='[F:PTH]BPSNDE'
If dim([F:AAA_]BPSNDE)>0
 [F:AAA_]BPSNDE = [F:PTH]BPSNDE
Endif

### RCPDAT
[L]FLD="RCPDAT"
[L]FORMULE='[F:PTH]RCPDAT'
If dim([F:AAA_]RCPDAT)>0
 [F:AAA_]RCPDAT = [F:PTH]RCPDAT
Endif

### NDEDAT
[L]FLD="NDEDAT"
[L]FORMULE='[F:PTH]NDEDAT'
If dim([F:AAA_]NDEDAT)>0
 [F:AAA_]NDEDAT = [F:PTH]NDEDAT
Endif

### MDL
[L]FLD="MDL"
[L]FORMULE='[F:PTH]MDL'
If dim([F:AAA_]MDL)>0
 [F:AAA_]MDL = [F:PTH]MDL
Endif

### EECICT
[L]FLD="EECICT"
[L]FORMULE='[F:PTH]EECICT'
If dim([F:AAA_]EECICT)>0
 [F:AAA_]EECICT = [F:PTH]EECICT
Endif

### EECSCH
[L]FLD="EECSCH"
[L]FORMULE='[F:PTH]EECSCH'
If dim([F:AAA_]EECSCH)>0
 [F:AAA_]EECSCH = [F:PTH]EECSCH
Endif

### EECSCH_LEG
[L]FLD="EECSCH_LEG"
[L]FORMULE='func TRTX3BITC.GETLEG_EECSCH([F:AAA_]EECSCH,[F:CPY]LEG)'
If dim([F:AAA_]EECSCH_LEG)>0
 [F:AAA_]EECSCH_LEG = func TRTX3BITC.GETLEG_EECSCH([F:AAA_]EECSCH,[F:CPY]LEG)
Endif

### EECNAT
[L]FLD="EECNAT"
[L]FORMULE='[F:PTH]EECNAT'
If dim([F:AAA_]EECNAT)>0
 [F:AAA_]EECNAT = [F:PTH]EECNAT
Endif

### EECNAT_LEG
[L]FLD="EECNAT_LEG"
[L]FORMULE='func TRTX3BITC.GETLEG_EECNAT([F:AAA_]EECNAT,[F:CPY]LEG)'
If dim([F:AAA_]EECNAT_LEG)>0
 [F:AAA_]EECNAT_LEG = func TRTX3BITC.GETLEG_EECNAT([F:AAA_]EECNAT,[F:CPY]LEG)
Endif

### PTE
[L]FLD="PTE"
[L]FORMULE='[F:BPS]PTE'
If dim([F:AAA_]PTE)>0
 [F:AAA_]PTE = [F:BPS]PTE
Endif

### PTE_LEG
[L]FLD="PTE_LEG"
[L]FORMULE='func TRTX3BITC.GETLEG_PTE([F:AAA_]PTE,[F:CPY]LEG)'
If dim([F:AAA_]PTE_LEG)>0
 [F:AAA_]PTE_LEG = func TRTX3BITC.GETLEG_PTE([F:AAA_]PTE,[F:CPY]LEG)
Endif

### DEP
[L]FLD="DEP"
[L]FORMULE='[F:BPS]DEP'
If dim([F:AAA_]DEP)>0
 [F:AAA_]DEP = [F:BPS]DEP
Endif

### DEP_LEG
[L]FLD="DEP_LEG"
[L]FORMULE='func TRTX3BITC.GETLEG_DEP([F:AAA_]DEP,[F:CPY]LEG)'
If dim([F:AAA_]DEP_LEG)>0
 [F:AAA_]DEP_LEG = func TRTX3BITC.GETLEG_DEP([F:AAA_]DEP,[F:CPY]LEG)
Endif

### BPINAM
[L]FLD="BPINAM"
[L]FORMULE='[F:BPS]BPSNAM'
If dim([F:AAA_]BPINAM)>0
 [F:AAA_]BPINAM = [F:BPS]BPSNAM
Endif

### BPIPOSCOD
[L]FLD="BPIPOSCOD"
[L]FORMULE='vireblc([F:BPA]POSCOD,1)'
If dim([F:AAA_]BPIPOSCOD)>0
 [F:AAA_]BPIPOSCOD = vireblc([F:BPA]POSCOD,1)
Endif

### BPICTY
[L]FLD="BPICTY"
[L]FORMULE='[F:BPA]CTY'
If dim([F:AAA_]BPICTY)>0
 [F:AAA_]BPICTY = [F:BPA]CTY
Endif

### BPICRY
[L]FLD="BPICRY"
[L]FORMULE='[F:BPA]CRY'
If dim([F:AAA_]BPICRY)>0
 [F:AAA_]BPICRY = [F:BPA]CRY
Endif

### BPTNUM
[L]FLD="BPTNUM"
[L]FORMULE='[F:PTH]BPTNUM'
If dim([F:AAA_]BPTNUM)>0
 [F:AAA_]BPTNUM = [F:PTH]BPTNUM
Endif

### FFWNUM
[L]FLD="FFWNUM"
[L]FORMULE='[F:PTH]FFWNUM'
If dim([F:AAA_]FFWNUM)>0
 [F:AAA_]FFWNUM = [F:PTH]FFWNUM
Endif

### VACBPR
[L]FLD="VACBPR"
[L]FORMULE='[F:PTH]VACBPR'
If dim([F:AAA_]VACBPR)>0
 [F:AAA_]VACBPR = [F:PTH]VACBPR
Endif

### VACBPR_LEG
[L]FLD="VACBPR_LEG"
[L]FORMULE='func TRTX3BITC.GETLEG_VACBPR([F:AAA_]VACBPR,[F:CPY]LEG)'
If dim([F:AAA_]VACBPR_LEG)>0
 [F:AAA_]VACBPR_LEG = func TRTX3BITC.GETLEG_VACBPR([F:AAA_]VACBPR,[F:CPY]LEG)
Endif

### BPONAM
[L]FLD="BPONAM"
[L]FORMULE='[F:PTH]BPONAM'
If dim([F:AAA_]BPONAM)>0
 [F:AAA_]BPONAM = [F:PTH]BPONAM
Endif

### BPOPOSCOD
[L]FLD="BPOPOSCOD"
[L]FORMULE='vireblc([F:PTH]BPOPOSCOD,1)'
If dim([F:AAA_]BPOPOSCOD)>0
 [F:AAA_]BPOPOSCOD = vireblc([F:PTH]BPOPOSCOD,1)
Endif

### BPOCTY
[L]FLD="BPOCTY"
[L]FORMULE='[F:PTH]BPOCTY'
If dim([F:AAA_]BPOCTY)>0
 [F:AAA_]BPOCTY = [F:PTH]BPOCTY
Endif

### BPOCRY
[L]FLD="BPOCRY"
[L]FORMULE='[F:PTH]BPOCRY'
If dim([F:AAA_]BPOCRY)>0
 [F:AAA_]BPOCRY = [F:PTH]BPOCRY
Endif


Return

