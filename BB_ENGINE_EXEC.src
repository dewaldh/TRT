#<AdxTL>@(#)0.0.0.0 $Revision$
# Script            : BB_ENGINGE_EXEC
# Creation date     : 02/10/2018
# Version           : 1.0.0
# Authors (Company) : DH (Leverage)
# Module            : Intercompany Engine (DFCX1-142)
#------------------------------------------------------------------------------------#
# Epic              : https://jira.leveragetech.com.au/browse/DFCX1-142
# Description       : Business Batch Engine (Validate; Post)
#                     Executed During Validation when writing to Simulation and Errors
#                     Executed During Post when creating Journal Entries
#------------------------------------------------------------------------------------#

$ACTION
  Case ACTION
    When Default
  Endcase
Return

#---------------------------------------------------------------------------------
# Cash
#---------------------------------------------------------------------------------
Funprog BT_CASH(BATNBR)
Variable Char BATNBR()

Local Char YMSG(255)
Local Integer YCOUNTER : YCOUNTER = 0

#FOREACH BUSINESS TRANSACTION LINE
If clalev([F:YBDT]) = 0  : Local File YBBDETAILTEM [YBDT]  : Endif
If clalev([F:BAN])  = 0  : Local File BANK         [BAN]   : Endif
If clalev([F:YELA]) = 0  : Local File YENTLOAAGR   [YELA]  : Endif
If clalev([F:CPY]) = 0   : Local File COMPANY      [CPY]   : Endif

  Local Integer I : I = 0
  For [F:YBDT] Where [F:YBDT]YBATNBR = BATNBR
    # If THE BANK Field IS POPULATED
    If [F:YBDT]YBAN <> "" Then
      Read [F:BAN]BAN0 = [F:YBDT]YBAN
      If [F:BAN]YBANPRNSTA = 2 Then #Principal Bank Account
        #CREATE SIMULATION LINE For THE PRINCIPAL BANK ON THE CURRENT BUSINESS TRANSACTION LINE
        #(DR/CR OPPOSITE To THE CURRENT BUSINESS TRANSACTION LINE)
        I = [F:YBDT]YDETLIG
        #Call ADDLIG_ERR
        Call ADDLIG_SIM([F:YBDT]YBATNBR,I,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&            [F:YBDT]YDETDES,[F:YBDT]YFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&            [F:YBDT]YBP,[F:YBDT]YDEB,[F:YBDT]YCDT,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&            [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4)
        If fstat <> 0 Then
          GMESSAGE = mess(18,6254,1)-"Cash Transaction Line Insert"
        Endif
      Elsif [F:BAN]YBANPRNSTA = 1 Then #Shared Bank Accounts
        #Get Linked ELA
        Read [F:YELA]YELA0 = [F:BAN]YELA
        If fstat <> 0 Then
          GMESSAGE = mess(18,6254,1)-"Cash Transaction ELA Read Line"
        Endif
        #CREATE SIMULATION LINE For THE RECIPIENT COMPANY (DR/CR OPPOSITE To THE CURRENT BUSINESS TRANSACTION LINE)
        Read [F:CPY]CPY0 = [F:YELA]YCPYREC
        If !fstat Then
          Local Decimal DEB,CRED
          If [F:YBDT]YDEB = 0 Then #Credit
            DEB = [F:YBDT]YCDT
            CRED = 0
          Elsif [F:YBDT]YCDT = 0 Then #Devit
            DEB = 0
            CRED = [F:YBDT]YDEB
          Endif
          Call ADDLIG_SIM([F:YBDT]YBATNBR,I,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&             [F:YBDT]YDETDES,[F:CPY]MAIFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&             [F:YBDT]YBP,DEB,CRED,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&             [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4)
          #CREATE SIMULATION LINE For THE PROVIDER COMPANY (DR/CR SAME As THE CURRENT BUSINESS TRANSACTION LINE)
          Read [F:CPY]CPY0 = [F:YELA]YCPYPRO
          Call ADDLIG_SIM([F:YBDT]YBATNBR,I,[F:YBDT]YENTTYP,[F:YBDT]YJOU,[F:YBDT]YTRANSNBR,
&             [F:YBDT]YDETDES,[F:CPY]MAIFCY,[F:YBDT]YCOA,[F:YBDT]YACC,[F:YBDT]YLIGDES,[F:YBDT]YCTRL,
&             [F:YBDT]YBP,[F:YBDT]YDEB,[F:YBDT]YCDT,[F:YBDT]YTAX,[F:YBDT]YREF,[F:YBDT]YPJT,[F:YBDT]YCCE0,
&             [F:YBDT]YCCE1,[F:YBDT]YCCE2,[F:YBDT]YCCE3,[F:YBDT]YCCE4)
        Endif
      Endif

    #While THE SOURCE LOAN AGREEMENT ON THE CURRENT ELA IS POPULATED
    #GET THE SOURCE LOAN AGREEMENT As THE CURRENT ELA
    #While [F:YELA]YSRCLONAGR <> ""
    #TODO: 01 - NO DATA EXISTS
      #CREATE SIMULATION LINE For THE RECIPIENT COMPANY (DR/CR OPPOSITE To THE CURRENT BUSINESS TRANSACTION LINE)
      #CREATE SIMULATION LINE For THE PROVIDER COMPANY (DR/CR SAME As THE CURRENT BUSINESS TRANSACTION LINE)
    #Wend

    Else
      Local Char MESSAGE(255) : MESSAGE = "Principall Bank Account not setup"
      Local Char YSRC(50) : YSRC = [F:YBDT]YBATNBR+"-"+num$([F:YBDT]YDETLIG)
      Local Integer YDLIG : YDLIG = [F:YBDT]YDETLIG
      Call ADDLIG_ERR([F:YBDT]YBATNBR,YSRC,YDLIG,[F:YBDT]YFCY,[F:YBDT]YENTTYP,
&          [F:YBDT]YJOU,[F:YBDT]YDETDES,[F:YBDT]YACC,[F:YBDT]YLIGDES,MESSAGE)
      YCOUNTER += 1
    Endif
  Next

End YCOUNTER

#---------------------------------------------------------------------------------
# Inter Company
#---------------------------------------------------------------------------------
Funprog BT_IE(BATNBR)
Variable Char BATNBR()
Local Integer YCOUNTER : YCOUNTER = 0

End YCOUNTER

#---------------------------------------------------------------------------------
# Journal
#---------------------------------------------------------------------------------
Funprog BT_JOURNAL(BATNBR)
Variable Char BATNBR()
Local Integer YCOUNTER : YCOUNTER = 0

End YCOUNTER

#---------------------------------------------------------------------------------
# Simulation Line Write
#---------------------------------------------------------------------------------
#**
#* Simulation Line Add
#*
#* @param Batch Number
#* @param Details Line
#* @param Entry Type
#* @param Journal
#* @param Transaction Number
#* @param Detail Description
#* @param Site
#* @param Chart of Accounts
#* @param Account
#* @param Line Description
#* @param Control
#* @param BP
#* @param Debit
#* @param Credit
#* @param Tax
#* @param Reference
#* @param Project
#* @param CCE0
#* @param CCE1
#* @param CCE2
#* @param CCE3
#* @param CCE4
#*!
Subprog ADDLIG_SIM(YBATNBR,YDETLIG, YENTTYP,YJOU,YTRANSNBR,YDETDES,YFCY,YCOA,YACC,YLIGDES,YCTRL,YBP,YDEB,YCDT,YTAX,YREF,YPJT,YCCE0,YCCE1,YCCE2,YCCE3,YCCE4)
Variable Char YBATNBR()
Variable Integer YDETLIG()
Variable Char YENTTYP()
Variable Char YJOU()
Variable Integer YTRANSNBR()
Variable Char YDETDES()
Variable Char YFCY()
Variable Char YCOA()
Variable Char YACC()
Variable Char YLIGDES()
Variable Char YCTRL()
Variable Char YBP()
Variable Decimal YDEB()
Variable Decimal YCDT()
Variable Char YTAX()
Variable Char YREF()
Variable Char YPJT()
Variable Char YCCE0()
Variable Char YCCE1()
Variable Char YCCE2()
Variable Char YCCE3()
Variable Char YCCE4()

#Open Tables
If clalev([F:YBBS]) = 0 : Local File YBBSIM [YBBS]  : Endif
Raz [F:YBBS]
[F:YBBS]YBATNBR = YBATNBR
[F:YBBS]YDETLIG = YDETLIG
[F:YBBS]YENTTYP = YENTTYP
[F:YBBS]YJOU = YJOU
[F:YBBS]YTRANSNBR = YTRANSNBR
[F:YBBS]YDETDES = YDETDES
[F:YBBS]YFCY = YFCY
[F:YBBS]YCOA = YCOA
[F:YBBS]YACC = YACC
[F:YBBS]YLIGDES = YLIGDES
[F:YBBS]YCTRL = YCTRL
[F:YBBS]YBP = YBP
[F:YBBS]YDEB = YDEB
[F:YBBS]YCDT = YCDT
[F:YBBS]YTAX = YTAX
[F:YBBS]YREF = YREF
[F:YBBS]YPJT = YPJT
[F:YBBS]YCCE0 = YCCE0
[F:YBBS]YCCE1 = YCCE1
[F:YBBS]YCCE2 = YCCE2
[F:YBBS]YCCE3 = YCCE3
[F:YBBS]YCCE4 = YCCE4
Write [F:YBBS]

End

#**
#* Error Line Add
#*
#*!

Subprog ADDLIG_ERR(YBATNBR,YSRC,YDETLIG,YFCY,YENTTYP,YJOU,YDETDES,YACC,YLIGDES,YMESS)
Variable Char YBATNBR()
Variable Char YSRC()
Variable Integer YDETLIG()
Variable Char YFCY()
Variable Char YENTTYP()
Variable Char YJOU()
Variable Char YDETDES()
Variable Char YACC()
Variable Char YLIGDES()
Variable Char YMESS()

If clalev([F:YBBE]) = 0 : Local File YBBERR [F:YBBE]  : Endif
Raz [F:YBBE]
[F:YBBE]YBATNBR = YBATNBR
[F:YBBE]YSRC = YSRC
[F:YBBE]YDETLIG = YDETLIG
[F:YBBE]YFCY = YFCY
[F:YBBE]YENTTYP = YENTTYP
[F:YBBE]YJOU = YJOU
[F:YBBE]YDETDES = YDETDES
[F:YBBE]YACC = YACC
[F:YBBE]YLIGDES = YLIGDES
[F:YBBE]YMESS = YMESS
Write [F:YBBE]

End

