#<AdxTL>@(#)0.0.0.0 $Revision$Class Purchase requests
# Supervisor
## CRUD-CLASSE ## PREQUIS
# 2018-08-27 12:42:40 014


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File PREQUIS [PSH_]

If !SILENCE : Call TRACE("2 --> Local Instance C_PREQUIS") From ASYRCOM : Endif
Local Instance PREQUIS Using C_PREQUIS

If !SILENCE : Call TRACE("3 --> New Instance C_PREQUIS") From ASYRCOM : Endif
PREQUIS = NewInstance C_PREQUIS AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [PSH_]PSH0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of PREQUIS") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet PREQUIS.AREAD([PSH_]PSHNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("PREQUIS.PSHNUM ="-num$(PREQUIS.PSHNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(PREQUIS.AKEYS)
  Call TRACE("-"-num$(I)-":"-PREQUIS.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [PSH_]
FreeGroup PREQUIS
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(PREQUIS,ACLE,ASTATUS,_ETAG)
Variable Instance PREQUIS Using C_PREQUIS
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _PSHNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PSHNUM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File PREQUIS [PSH]
Default File [F:PSH]
Read [F:PSH]PSH0 = [L]_PSHNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:PSH]UPDTICK)>0
 [L]_ETAG = num$([F:PSH]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(PREQUIS,ACLE,ASTATUS)
Variable Instance PREQUIS Using C_PREQUIS
Value Char ACLE
Variable Integer ASTATUS
Local Char _PSHNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PSHNUM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PREQUIS.AREAD([L]_PSHNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(PREQUIS,_PSHNUM,ASTATUS)
Variable Instance PREQUIS Using C_PREQUIS
Value Char _PSHNUM
Variable Integer ASTATUS

If PREQUIS = null : End : Endif

Gosub AVARIABLES From WMC00PREQUIS
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If PREQUIS.APARENT=null
 [L]A_I = PREQUIS.freeSnapshot
 PREQUIS.snapshotEnabled = 0
 PREQUIS.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & PREQUIS.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet PREQUIS._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If PREQUIS.APARENT=null
 PREQUIS.snapshotEnabled = 1
 PREQUIS.setAccessorEnabled = 1
Endif
LogicClose File [PSH] ,[PSD]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet PREQUIS._ACTION_PARAM("AREAD_BEFORE",[L]_PSHNUM))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:PSH]
Read [F:PSH]PSH0 = [L]_PSHNUM
If fstat
[L]A_ERROR = [L]_PSHNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PREQUIS,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:PSH]PSHFCY
[L]A_STRACC = ""
If dim([F:PSH]AUUID)>0 & [F:PSH]AUUID=NullUuid
 [F:PSH]AUUID = getUuid
Endif
If dim([F:PSH]CLATEX1)>0: Raz [F:PSH]CLATEX1: Endif
If dim([F:PSH]CLATEX2)>0: Raz [F:PSH]CLATEX2: Endif
SetInstance PREQUIS With [F:PSH]
PREQUIS.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:PSD]
 [L]A_N2=0
 For [F:PSD]PSD0 Where PSHNUM=[PSH]PSHNUM
  [L]A_N2 +=1
  PREQUIS.PSD(A_N2) = NewInstance  C_PREQUISD(PREQUIS.ACTX,NullUuid,[L]A_N2,PREQUIS,"PSD") AllocGroup PREQUIS
  [L]ASTATUS = max([L]ASTATUS,fmet PREQUIS.PSD(A_N2).ADDINSTANCE_BOUND)
  Callmet PREQUIS.PSD(A_N2).AREAD([F:PSD]PSHNUM,[F:PSD]PSDLIN)
  PREQUIS.PSD(A_N2).ASTALIN = [V]CST_ALL
  [L]ASTATUS = max([L]ASTATUS,fmet PREQUIS.PSD(A_N2).ASETATTRIBUTE("PSHNUM","$namProParent","PSHNUM"))
  [L]ASTATUS = max([L]ASTATUS,fmet PREQUIS.PSD(A_N2).ASETATTRIBUTE("PSDLIN","$isDisabled","true"))
 Next PSD
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
#-----------------------------------------------------#

[L]A_NEWCOL = 0
For [L]A_I=1 To 20
 [L]A_NEWCOL += 1
 PREQUIS.C_DIE(A_NEWCOL) = NewInstance  C_PREQUIS_C_DIE(PREQUIS.ACTX,NullUuid,[L]A_I,PREQUIS,"C_DIE") AllocGroup PREQUIS
 PREQUIS.C_DIE(A_NEWCOL).DIE = [F:PSH]DIE([L]A_I-1)
 PREQUIS.C_DIE(A_NEWCOL).CCE = [F:PSH]CCE([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet PREQUIS.C_DIE(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet PREQUIS.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



