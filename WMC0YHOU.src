#<AdxTL>@(#)0.0.0.0 $Revision$Class Housing Jobs
# Supervisor
## ACLA-CLASSE ## YHOU
# 2019-03-12 23:02:50 120

####################################################################
# Traitments
####################################################################
$_ADDTRT
this.AINF.TRT(1) = "WMCM_YHOU"
this.AINF.TYP(1) = 1
this.AINF.PTH(1) = ""
this.AINF.TRT(2) = "YHOU_CSPE"
this.AINF.TYP(2) = 3
this.AINF.PTH(2) = ""
this.AINF.NBTRT = 2
Return

####################################################################
#Declaration of variables
####################################################################

$DECLARE_VAR
Local Char    ACTION(50) , CURPRO(250) , VALPRO(250) , CURQRY(50) , CURPTH(250)
Local Char    AMETHOD(50) ,AOPERATION(50),AEVENT(50),ARULE(50)
Local Integer ALLSTAT,AISMET,ASTATUS
Return

####################################################################
# Methods of the class
####################################################################
# Fmethod Update Job Status
$YHOU_JOB_STAT_UPD
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "YHOU_JOB_STAT_UPD" : [L]ACTION = "YHOU_JOB_STAT_UPD" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return


####################################################################
# Global methods & standards
####################################################################
$AINIT
Gosub DECLARE_VAR
[L]AEVENT = "AINIT" : [L]ACTION = "AINIT" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# AERRORS
####################################################################

$_AERROR
Gosub DECLARE_VAR From WMC0YHOU
Local Integer ALLSTAT
Call ALLERRORS(this,_CTX,_SUPP) From ASYRSUB
For AINDCLA=1 To maxtab(this.YHJS)
 If this.YHJS(AINDCLA)<>null
  [L]ASTATUS = fmet this.YHJS(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YHJV)
 If this.YHJV(AINDCLA)<>null
  [L]ASTATUS = fmet this.YHJV(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YHJR)
 If this.YHJR(AINDCLA)<>null
  [L]ASTATUS = fmet this.YHJR(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
If this.YHJC<>null
 [L]ASTATUS = fmet this.YHJC._AERROR(_CTX,_SUPP)
Endif
If this.YHJP<>null
 [L]ASTATUS = fmet this.YHJP._AERROR(_CTX,_SUPP)
Endif
If this.YHDH<>null
 [L]ASTATUS = fmet this.YHDH._AERROR(_CTX,_SUPP)
Endif
If this.YHJF<>null
 [L]ASTATUS = fmet this.YHJF._AERROR(_CTX,_SUPP)
Endif
For AINDCLA=1 To maxtab(this.YRMA)
 If this.YRMA(AINDCLA)<>null
  [L]ASTATUS = fmet this.YRMA(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
Return

####################################################################
# Delete all errors
####################################################################

$_ADELERRORS
Gosub DECLARE_VAR From WMC0YHOU
Local Integer ALLSTAT
[L]ASTATUS = fmet this.ADELETEERROR([L]_APARAM)
For AINDCLA=1 To maxtab(this.YHJS)
 If this.YHJS(AINDCLA)<>null
  [L]ASTATUS = fmet this.YHJS(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YHJV)
 If this.YHJV(AINDCLA)<>null
  [L]ASTATUS = fmet this.YHJV(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YHJR)
 If this.YHJR(AINDCLA)<>null
  [L]ASTATUS = fmet this.YHJR(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
If this.YHJC<>null
 [L]ASTATUS = fmet this.YHJC._ADELERRORS(_APARAM)
Endif
If this.YHJP<>null
 [L]ASTATUS = fmet this.YHJP._ADELERRORS(_APARAM)
Endif
If this.YHDH<>null
 [L]ASTATUS = fmet this.YHDH._ADELERRORS(_APARAM)
Endif
If this.YHJF<>null
 [L]ASTATUS = fmet this.YHJF._ADELERRORS(_APARAM)
Endif
For AINDCLA=1 To maxtab(this.YRMA)
 If this.YRMA(AINDCLA)<>null
  [L]ASTATUS = fmet this.YRMA(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
Return

####################################################################
# _ASEARCHINFOS
####################################################################

$_ASEARCHINFOS
Gosub DECLARE_VAR From WMC0YHOU
ASTATUS= func ASYRSUB.ASEARCHINFOS(this,[L]AINS_ORI,[L]ERR_TYPE,[L]PROPERTY,[L]ASTAT,[L]SELSTAT,[L]PATH)
If [L]ERR_TYPE=[V]CST_ACURRENT : Return : Endif
For AINDCLA=1 To maxtab(this.YHJS)
 If this.YHJS(AINDCLA)<>null
  [L]ASTATUS = fmet this.YHJS(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YHJS('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YHJV)
 If this.YHJV(AINDCLA)<>null
  [L]ASTATUS = fmet this.YHJV(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YHJV('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YHJR)
 If this.YHJR(AINDCLA)<>null
  [L]ASTATUS = fmet this.YHJR(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YHJR('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
If this.YHJC<>null
 [L]ASTATUS = fmet this.YHJC._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YHJC')
Endif
If this.YHJP<>null
 [L]ASTATUS = fmet this.YHJP._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YHJP')
Endif
If this.YHDH<>null
 [L]ASTATUS = fmet this.YHDH._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YHDH')
Endif
If this.YHJF<>null
 [L]ASTATUS = fmet this.YHJF._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YHJF')
Endif
For AINDCLA=1 To maxtab(this.YRMA)
 If this.YRMA(AINDCLA)<>null
  [L]ASTATUS = fmet this.YRMA(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YRMA('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
Return

####################################################################
# AGETERRORSFROM
####################################################################

$_AGETERRORSFROM
Gosub DECLARE_VAR From WMC0YHOU
If AINS_FROM<>null
 [L]ASTATUS = fmet AINS_FROM.ASEARCHINFOS( [V]CST_ALL, "", [V]CST_AFATAL, 0)
Endif
Call AGETERRORSFROM(AINS_FROM,this,ENVIRONNEMENT) From ASYRSUB
Return

####################################################################
$ACONTROL
####################################################################
Gosub DECLARE_VAR
[L]AEVENT = "ACONTROL" : [L]ACTION = "ACONTROL" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# ADELLINE
####################################################################
$ADELLINE
Case _ACOLLECTION
 When "YHDH"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YHDH",this)
 When "YHJC"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YHJC",this)
 When "YHJF"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YHJF",this)
 When "YHJP"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YHJP",this)
 When "YHJR"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YHJR",this)
 When "YHJS"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YHJS",this)
 When "YHJV"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YHJV",this)
 When "YRMA"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YRMA",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# ADDLINE
####################################################################
$ADDLINE
Case _ACOLLECTION
 When "YHDH"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YHDH","C_YHDH",this)
 When "YHJC"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YHJC","C_YHJC",this)
 When "YHJF"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YHJF","C_YHJF",this)
 When "YHJP"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YHJP","C_YHJP",this)
 When "YHJR"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YHJR","C_YHJR",this)
 When "YHJS"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YHJS","C_YHJS",this)
 When "YHJV"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YHJV","C_YHJV",this)
 When "YRMA"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YRMA","C_YRMA",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETDIM
####################################################################
$AGETDIM
Case _ACOLLECTION
 When "YHDH"
  [L]_ALINE = 1
 When "YHJC"
  [L]_ALINE = 1
 When "YHJF"
  [L]_ALINE = 1
 When "YHJP"
  [L]_ALINE = 1
 When "YHJR"
  [L]_ALINE = 0
 When "YHJS"
  [L]_ALINE = 0
 When "YHJV"
  [L]_ALINE = 0
 When "YRMA"
  [L]_ALINE = 0
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETMIN
####################################################################
$AGETMIN
Case _ACOLLECTION
 When "YHDH"
  [L]_ALINE = 2
 When "YHJC"
  [L]_ALINE = 2
 When "YHJF"
  [L]_ALINE = 2
 When "YHJP"
  [L]_ALINE = 2
 When "YHJR"
  [L]_ALINE = 1
 When "YHJS"
  [L]_ALINE = 1
 When "YHJV"
  [L]_ALINE = 1
 When "YRMA"
  [L]_ALINE = 1
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# _ALOAD_KEYS
####################################################################
$_ALOAD_KEYS
this.AKEYS(1) = "YJBNR"
Return

####################################################################
# _ADELINSTANCE
####################################################################
$_ADELINSTANCE
[L]ASTATUS = func ASYRSUBTAB._ADELINSTANCE(this)
Return

####################################################################
# ADDINSTANCE_BOUND
####################################################################
$ADDINSTANCE_BOUND
this.YHDH(1) = NewInstance C_YHDH(this.ACTX,NullUuid,1,this,"YHDH") AllocGroup this
this.YHDH(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.YHDH(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
this.YHJC(1) = NewInstance C_YHJC(this.ACTX,NullUuid,1,this,"YHJC") AllocGroup this
this.YHJC(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.YHJC(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
this.YHJF(1) = NewInstance C_YHJF(this.ACTX,NullUuid,1,this,"YHJF") AllocGroup this
this.YHJF(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.YHJF(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
this.YHJP(1) = NewInstance C_YHJP(this.ACTX,NullUuid,1,this,"YHJP") AllocGroup this
this.YHJP(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.YHJP(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
Return



