#<AdxTL>@(#)0.0.0.0 $Revision$Class Location
# Supervisor
## CRUD-CLASSE ## TABPLACE
# 2018-08-27 13:38:21 199


############################################################################################
### Subprog AUPDATE
############################################################################################
Subprog AUPDATE(TABPLACE,ASTATUS)
Variable Instance TABPLACE Using R_TABPLACE
Variable Integer ASTATUS

If TABPLACE = null : End : Endif

Gosub AVARIABLES From WMR00TABPLACE
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If fmet TABPLACE.ACTX.AGETAFCRIGHT(TABPLACE,"GESTPC",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AUPDATE_END : Endif
If fmet TABPLACE.ACTX.AGETAFCRIGHTU(TABPLACE,"GESTPC",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AUPDATE_END
Endif

Gosub AREPCONTROL_AUPDATE
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If !adxlog
 Gosub AUPDATE_TR_TABPLACE
Else
 Gosub AUPDATE_TABPLACE
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_END : Return : Endif

Gosub _AUPDATE_AFTER
[L]A_I = TABPLACE.freeSnapshot
TABPLACE.snapshotEnabled = 1
$AUPDATE_END
End

#-----------------------------------------------------#
$AREPCONTROL_AUPDATE
TABPLACE.ASTALIN = [V]CST_AUPD
TABPLACE.TPC.ASTALIN = [V]CST_AUPD
[L]A_ASTALIN = TABPLACE.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AUPDATE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = TABPLACE.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AUPDATE_CONTROL
Gosub _AUPDATE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet TABPLACE._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet TABPLACE._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet TABPLACE._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AUPDATE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_BEFORE
If TABPLACE.TPC.ASTALIN = [V]CST_ANEWDEL : Return : Endif
TABPLACE.TPC.ASTALIN = [V]CST_AUPD
If [V]CST_ASTALIN(TABPLACE.TPC.ASTALIN)<>""
 [L]A_ASTALIN = TABPLACE.TPC.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
For A_N2=1 To maxtab(TABPLACE.TPC.BPA) : # BPADDRESS -- 2
 If TABPLACE.TPC.BPA(A_N2) <> null
& and TABPLACE.TPC.BPA(A_N2).ASTALIN<>[V]CST_ANEWDEL
  If TABPLACE.TPC.BPA(A_N2).ASTALIN<>[V]CST_ANEW & TABPLACE.TPC.ASTALIN=[V]CST_ADEL
   TABPLACE.TPC.BPA(A_N2).ASTALIN = [V]CST_ADEL
  Endif
  If TABPLACE.TPC.BPA(A_N2).ASTALIN=[V]CST_ANEW & find(TABPLACE.TPC.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL)>0
   TABPLACE.TPC.BPA(A_N2).ASTALIN = [V]CST_ANEWDEL
  Endif
  If [V]CST_ASTALIN(TABPLACE.TPC.BPA(A_N2).ASTALIN)<>""
   Case [V]CST_ASTALIN(TABPLACE.TPC.BPA(A_N2).ASTALIN)
    When [V]CST_APRGAINSERT  : [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2)._AINSERT_CONTROL_BEFORE)
    When [V]CST_APRGAUPDATE : [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2)._AUPDATE_CONTROL_BEFORE)
    When [V]CST_APRGADELETE  : [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2)._ADELETE_CONTROL_BEFORE)
   Endcase
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
  For [L]A_I=1 To maxtab(TABPLACE.TPC.BPA(A_N2).COLTEL)
   If TABPLACE.TPC.BPA(A_N2).COLTEL([L]A_I)<>null
    [L]A_ASTALIN = TABPLACE.TPC.BPA(A_N2).COLTEL([L]A_I).ASTALIN
    [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2).COLTEL([L]A_I).ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
  For [L]A_I=1 To maxtab(TABPLACE.TPC.BPA(A_N2).COLWEB)
   If TABPLACE.TPC.BPA(A_N2).COLWEB([L]A_I)<>null
    [L]A_ASTALIN = TABPLACE.TPC.BPA(A_N2).COLWEB([L]A_I).ASTALIN
    [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2).COLWEB([L]A_I).ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(TABPLACE.TPC.BPA)
 If TABPLACE.TPC.BPA(A_N2)<>null
  If TABPLACE.TPC.BPA(A_N2).ASTALIN<>[V]CST_ADEL & TABPLACE.TPC.BPA(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABPLACE.TPC,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"BPADDRESS:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_AFTER
For A_N2=1 To maxtab(TABPLACE.TPC.BPA) : # BPADDRESS -- 2
 If TABPLACE.TPC.BPA(A_N2) <> null
& and TABPLACE.TPC.BPA(A_N2).ASTALIN<>[V]CST_ANEWDEL
  If [V]CST_ASTALIN(TABPLACE.TPC.BPA(A_N2).ASTALIN)<>""
   Case [V]CST_ASTALIN(TABPLACE.TPC.BPA(A_N2).ASTALIN)
    When [V]CST_APRGAINSERT  : [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2)._AINSERT_CONTROL_AFTER)
    When [V]CST_APRGAUPDATE : [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2)._AUPDATE_CONTROL_AFTER)
    When [V]CST_APRGADELETE  : [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2)._ADELETE_CONTROL_AFTER)
   Endcase
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
  For [L]A_I=1 To maxtab(TABPLACE.TPC.BPA(A_N2).COLTEL)
   If TABPLACE.TPC.BPA(A_N2).COLTEL([L]A_I)<>null
    [L]A_ASTALIN = TABPLACE.TPC.BPA(A_N2).COLTEL([L]A_I).ASTALIN
    [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2).COLTEL([L]A_I).ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
  For [L]A_I=1 To maxtab(TABPLACE.TPC.BPA(A_N2).COLWEB)
   If TABPLACE.TPC.BPA(A_N2).COLWEB([L]A_I)<>null
    [L]A_ASTALIN = TABPLACE.TPC.BPA(A_N2).COLWEB([L]A_I).ASTALIN
    [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.BPA(A_N2).COLWEB([L]A_I).ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(TABPLACE.TPC.BPA)
 If TABPLACE.TPC.BPA(A_N2)<>null
  If TABPLACE.TPC.BPA(A_N2).ASTALIN<>[V]CST_ADEL & TABPLACE.TPC.BPA(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABPLACE.TPC,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"BPADDRESS:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

If [V]CST_ASTALIN(TABPLACE.TPC.ASTALIN)<>""
 [L]A_ASTALIN = TABPLACE.TPC.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
Return

#-----------------------------------------------------#
$AUPDATE_TR_TABPLACE
Trbegin [F:TPC]
 Gosub AUPDATE_TABPLACE
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AUPDATE_AFTER
If find(TABPLACE.TPC.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 TABPLACE.TPC.ASTALIN = [V]CST_ALL
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(TABPLACE.TPC.BPA)
 If TABPLACE.TPC.BPA(A_N2) <> null
  [L]ASTATUS2 = fmet TABPLACE.TPC.BPA(A_N2)._AUPDATE_AFTER
  If TABPLACE.TPC.BPA(A_N2).ASTALIN=[V]CST_ADEL or TABPLACE.TPC.BPA(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance TABPLACE.TPC.BPA(A_N2)
   TABPLACE.TPC.BPA(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Return

#-----------------------------------------------------#
$AUPDATE_TABPLACE
[L]A_ASTALIN = TABPLACE.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.TPC._AUPDATE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = TABPLACE.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AUPDATE_ABORT
Rollback
$_AUPDATE_ABORT
If TABPLACE.snapshotEnabled=1
 [L]A_RETIK = TABPLACE.revertUpdTick
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(TABPLACE.TPC.BPA)
 If TABPLACE.TPC.BPA(A_N2) <> null
  [L]ASTATUS2 = fmet TABPLACE.TPC.BPA(A_N2)._AUPDATE_ABORT
  If TABPLACE.TPC.BPA(A_N2).ASTALIN=[V]CST_ADEL or TABPLACE.TPC.BPA(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance TABPLACE.TPC.BPA(A_N2)
   TABPLACE.TPC.BPA(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2

[L]ASTATUS = max(fmet TABPLACE.ACTION("AUPDATE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



