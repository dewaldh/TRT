#<AdxTL>@(#)0.0.0.0 $Revision$Class Location
# Supervisor
## CRUD-CLASSE ## PHYLCTM
# 2018-08-27 13:22:53 683


############################################################################################
### Subprog AUPDATE
############################################################################################
Subprog AUPDATE(PHYLCTM,ASTATUS)
Variable Instance PHYLCTM Using R_PHYLCTM
Variable Integer ASTATUS

If PHYLCTM = null : End : Endif

Gosub AVARIABLES From WMR00PHYLCTM
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

Gosub AREPCONTROL_AUPDATE
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If !adxlog
 Gosub AUPDATE_TR_PHYLCTM
Else
 Gosub AUPDATE_PHYLCTM
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_END : Return : Endif

Gosub _AUPDATE_AFTER
[L]A_I = PHYLCTM.freeSnapshot
PHYLCTM.snapshotEnabled = 1
$AUPDATE_END
End

#-----------------------------------------------------#
$AREPCONTROL_AUPDATE
PHYLCTM.ASTALIN = [V]CST_AUPD
PHYLCTM.LCT.ASTALIN = [V]CST_AUPD
[L]A_ASTALIN = PHYLCTM.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AUPDATE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = PHYLCTM.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AUPDATE_CONTROL
Gosub _AUPDATE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet PHYLCTM._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet PHYLCTM._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet PHYLCTM._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AUPDATE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_BEFORE
If PHYLCTM.LCT.ASTALIN = [V]CST_ANEWDEL : Return : Endif
PHYLCTM.LCT.ASTALIN = [V]CST_AUPD
If [V]CST_ASTALIN(PHYLCTM.LCT.ASTALIN)<>""
 [L]A_ASTALIN = PHYLCTM.LCT.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.LCT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_AFTER

If [V]CST_ASTALIN(PHYLCTM.LCT.ASTALIN)<>""
 [L]A_ASTALIN = PHYLCTM.LCT.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.LCT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
Return

#-----------------------------------------------------#
$AUPDATE_TR_PHYLCTM
Trbegin [F:LCT]
 Gosub AUPDATE_PHYLCTM
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AUPDATE_AFTER
If find(PHYLCTM.LCT.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 PHYLCTM.LCT.ASTALIN = [V]CST_ALL
Endif
Return

#-----------------------------------------------------#
$AUPDATE_PHYLCTM
[L]A_ASTALIN = PHYLCTM.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.LCT._AUPDATE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = PHYLCTM.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AUPDATE_ABORT
Rollback
$_AUPDATE_ABORT
If PHYLCTM.snapshotEnabled=1
 [L]A_RETIK = PHYLCTM.revertUpdTick
Endif

[L]ASTATUS = max(fmet PHYLCTM.ACTION("AUPDATE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



