#<AdxTL>@(#)0.0.0.0 $Revision$
Gosub CRECST
End

$CRECST

Global Instance GZINSPJM Using C_OPPORPJM
#Global Instance GZINSPJM Using C_PJMBUD
ANOWRITE = 1

  If (GZINSPJM <> null) : FreeGroup GZINSPJM : Endif
  GZINSPJM = NewInstance C_OPPORPJM AllocGroup null

  Local Integer MY_STATUS
  [L]MY_STATUS = fmet GZINSPJM.AREAD("AD0000000000088")
#
GZINSPJM.SALFCY = "003-1"

 Local Integer INDEX
  INDEX = fmet GZINSPJM.ADDLINE("BUD", [V]CST_ALASTPOS)
  If (INDEX = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSPJM)
    GOK = 0
    GERR = 1
    Return
  Endif

Local Integer IRET
Local Char SNUMERO(20)

  #You can use the instruction SetInstance which will set propertie's values from field's values for propertie's names that are identical to a field's name of the [F] file.
  #SetInstance GZINSPJM With [F:PJBU]
GZINSPJM.BUD(INDEX).PBUFCY = "003-1"
GZINSPJM.BUD(INDEX).OPPNUM = "AD0000000000088"
GZINSPJM.BUD(INDEX).PBUCOD = "000"
#GZINSPJM.PBUDATH = ""
#GZINSPJM.PBUDATS = ""
#GZINSPJM.PBUDATO = ""
GZINSPJM.BUD(INDEX).PBUPAE = ""
GZINSPJM.BUD(INDEX).PBUSTATE = 2
GZINSPJM.BUD(INDEX).PBUELE = 2
GZINSPJM.BUD(INDEX).PBUIMP = 2
GZINSPJM.BUD(INDEX).CUR = "AUD"
#GZINSPJM.PBUSTARTDT = ""
#GZINSPJM.PBUENDDT = ""
#GZINSPJM.BUD(INDEX).KEYCONCAT = "002-70007!!000"
GZINSPJM.CUR = "AUD"
#
Call NUMERO("PBU","",date$,"",SNUMERO,IRET) From SUBANM

GZINSPJM.BUD.PBUNUM = SNUMERO
#this.PBUSTATE = 1
#
#
#
##Infbox GZINSPJM.PBUFCY
 Local Integer INDEX
  INDEX = fmet GZINSPJM.BUD.ADDLINE("BUDLIG", [V]CST_ALASTPOS)
  If (INDEX = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSPJM)
    GOK = 0
    GERR = 1
    Return
  Endif
#
#  # Use the SetInstance
#  #SetInstance GZINSPJM.BUDLIG(INDEX) With [F:PJLB]
#  #If (GERR = 1) : Return : Endif
#  #Infbox GZINSPJM.BUDLIG(INDEX).PBUCOD
GZINSPJM.BUD.BUDLIG(INDEX).OPPNUM = "AD0000000000088"
GZINSPJM.BUD.BUDLIG(INDEX).PBUCOD = "000"
GZINSPJM.BUD.BUDLIG(INDEX).PLBSEQ = 10
GZINSPJM.BUD.BUDLIG(INDEX).PCCCOD = "TEST"
GZINSPJM.BUD.BUDLIG(INDEX).PLBFCY = "003-1"
GZINSPJM.BUD.BUDLIG(INDEX).PLBDESAXX = ""
GZINSPJM.BUD.BUDLIG(INDEX).PLBU = ""
GZINSPJM.BUD.BUDLIG(INDEX).PLBQTY = 0
GZINSPJM.BUD.BUDLIG(INDEX).PLBPRI = 0
GZINSPJM.BUD.BUDLIG(INDEX).PLBAMT = 1200
GZINSPJM.BUD.BUDLIG(INDEX).PLBDATBUD = date$
GZINSPJM.BUD.BUDLIG(INDEX).PLBFLGREM = 1
GZINSPJM.BUD.BUDLIG(INDEX).PLBQTYREM = 0
GZINSPJM.BUD.BUDLIG(INDEX).PLBPRIREM = 0
#GZINSPJM.BUDLIG(INDEX).PLBDATREM =
GZINSPJM.BUD.BUDLIG(INDEX).PLBQTYEST = 0
GZINSPJM.BUD.BUDLIG(INDEX).PLBAMTEST = 1200
GZINSPJM.BUD.BUDLIG(INDEX).PLBQTYREC = 0
GZINSPJM.BUD.BUDLIG(INDEX).PLBAMTREC = 1000
GZINSPJM.BUD.BUDLIG(INDEX).CUR = "AUD"

#
#GZINSPJM.BUDLIG(INDEX).ASTALIN = [V]CST_ANEW
#
#
Local Integer INDEX1
  INDEX1 = fmet GZINSPJM.BUD.ADDLINE("PIMPL", [V]CST_ALASTPOS)
  If (INDEX1 = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSPJM)
    Infbox GMESSAGE
    Return
  Endif
#
#
## Use the SetInstance
#  #SetInstance GZINSPJM.PIMPL(INDEX) With [F:PJLB]
#  #If (GERR = 1) : Return : Endif
#  #Infbox GZINSPJM.PIMPL(INDEX).PBUCOD
#  GZINSPJM.BUD.PIMPL(INDEX1).PIMNUM = GZINSPJM.BUD.BUDLIG(INDEX).OPPNUM+"!!"+GZINSPJM.BUD.BUDLIG(INDEX).PBUCOD
  GZINSPJM.BUD.PIMPL(INDEX1).PIMDESAXX = "test jh"
  GZINSPJM.BUD.PIMPL(INDEX1).OPPNUM = GZINSPJM.BUD.BUDLIG(INDEX).OPPNUM
  GZINSPJM.BUD.PIMPL(INDEX1).PBUCOD = GZINSPJM.BUD.BUDLIG(INDEX).PBUCOD
  GZINSPJM.BUD.PIMPL(INDEX1).TASCOD = ""
  GZINSPJM.BUD.PIMPL(INDEX1).FCY = GZINSPJM.BUD.BUDLIG(INDEX).PLBFCY
  GZINSPJM.BUD.PIMPL(INDEX1).PIMTYP = 4
  GZINSPJM.BUD.PIMPL(INDEX1).PIMSTA = 1
  GZINSPJM.BUD.PIMPL(INDEX1).FINRSPFCY = GZINSPJM.BUD.BUDLIG(INDEX).PLBFCY
  GZINSPJM.BUD.PIMPL(INDEX1).CPY = "003"
  GZINSPJM.BUD.PIMPL(INDEX1).OPPSTATE = 1
  GZINSPJM.BUD.PIMPL(INDEX1).PBUSTATE = GZINSPJM.BUD(INDEX).PBUSTATE
  #GZINSPJM.BUD.PIMPL(INDEX1).TASSTATE = 1

#
#GZINSPJM.PIMPL(INDEX1).ASTALIN = [V]CST_ANEW
#
#
#
#
#
#
#


##Properties have been set, it is time to invoke the creation method of the class

  [L]MY_STATUS = fmet GZINSPJM.BUD.AINSERT()
  Infbox num$([L]MY_STATUS)
  If ([L]MY_STATUS >= [V]CST_AERROR)
    Call RECOVERS_ERROR_IN_CLASSIC(GZINSPJM)
    If GMESSAGE = AVOID.ACHAR Then

      Infbox GMESSAGE
    Endif
  Endif

#Local Integer IRET Local Char SNUMERO(20)
#Local Integer IERROR
#Local Integer IMANUAL
#Local Char SMESSAGE(250)
#Local Char SCOMPTEUR(GLONANM)
#Local Char SNUMERO(20)
#
#If [PJBU]PBUNUM = ""
#Call NUMERO("PBU","",date$,"",SNUMERO,IRET) From SUBANM
#
##IRET = func ANM_TOOL.NUMERO("", SCOMPTEUR, [PJBU]PBUFCY, date$, "", SNUMERO, SMESSAGE)
##  If IRET = [V]CST_AERROR Then
##    [L]ASTATUS = fmet this.ASETERROR("", mess(22,7770,1) - "(" + SCOMPTEUR + ") :" - SMESSAGE, [V]CST_AERROR)
##    OK = 0
##  Endif
#  [PJBU]PBUNUM = SNUMERO
#  Rewrite [PJBU]
#Infbox num$(fstat)
#Endif
#
#If [PJLB]PBUCOD <> ""
#  Rewrite [PJLB]
#  Infbox num$(fstat)
#Endif

If GZINSPJM <> null Then
    FreeGroup GZINSPJM
  Endif
  Kill GZINSPJM
  ANOWRITE = 0



Return

#------------------------------------------------------------------------------------#
#Handle Classic Errors from Class
#------------------------------------------------------------------------------------#
Subprog RECOVERS_ERROR_IN_CLASSIC(GZINSPJM)

  Variable Instance GZINSPJM Using C_OPPORPJM

  Local Integer NI
  Local Char SMESSAGE(type(GMESSAGE)-10)
  Local Integer MY_STATUS
  Local Integer IMESSAGE

  IMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_UPPER_MESSAGE(GZINSPJM, SMESSAGE)
  If IMESSAGE = [V]CST_AWARNING Then
    GMESSAGE = SMESSAGE
    GERR = 2
  Elsif IMESSAGE = [V]CST_AERROR or IMESSAGE = [V]CST_AFATAL Then
    GMESSAGE = SMESSAGE
    GOK = 0
    GERR = 1
  Endif

  [L]MY_STATUS = [V]CST_AOK
End

