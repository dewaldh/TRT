#<AdxTL>@(#)0.0.0.0 $Revision$
$YPJMCSTIMP

If clalev([F:YPJC]) = 0 : Local File YPJMCST[YPJC] : Endif
If clalev([F:YFCY]) = 0 : Local File FACILITY[YFCY] : Endif

Local Integer MY_STATUS
Local Integer IRET
Local Char SNUMERO(30)
Local Integer YMESSSCNT
Local Char YCPY


YMESSSCNT = 0

#create PJM instance
Global Instance GZINSPJM Using C_OPPORPJM

ANOWRITE = 1

#get all the records for processing
Filter [F:YPJC] Where YSTA = 2
For [F:YPJC]
  #clear any previous assignment
  If (GZINSPJM <> null) : FreeGroup GZINSPJM : Endif

  GZINSPJM = NewInstance C_OPPORPJM AllocGroup null

  If YOPPNUM = ""
    [F:YPJC]YMSG = "No project number found"
    [F:YPJC]YSTA = 5
  Endif

  #read the budget record
  [L]MY_STATUS = fmet GZINSPJM.AREAD([F:YPJC]YOPPNUM)

  If [L]MY_STATUS <> 0
    [F:YPJC]YMSG = "No project number found"
    [F:YPJC]YSTA = 5
    End
  Endif

  Local Integer INDEX

#  For I = 1 To maxtab([F:YPJC]YPBUCOD)


  ##ifn no budget number was found, create one.

    INDEX = fmet GZINSPJM.ADDLINE("BUD", [V]CST_ALASTPOS)
    If (INDEX = [V]CST_ANOTDEFINED)
      # Error management
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSPJM)
      [F:YPJC]YMSG = GMESSAGE
      [F:YPJC]YSTA = 5
    Endif

    Call NUMERO("PBU","",date$,"",SNUMERO,IRET) From SUBANM
    GZINSPJM.BUD(INDEX).PBUNUM = SNUMERO




  #get the legal company
  Read [F:YFCY]FCY0 = [F:YPJC]YPBUFCY
  If fstat <> 0
    [F:YPJC]YMSG = "Could not find the legal company for site: " + [F:YPJC]YPBUFCY
    [F:YPJC]YSTA = 5
    Goto YNEXT
  Else
    YCPY = [F:YFCY]LEGCPY
  Endif
  #
   #You can use the instruction SetInstance which will set propertie's Values from field's Values for propertie's names that are identical to a field's name of the [F] file.
    #SetInstance GZINSPJM With [F:PJBU]
  GZINSPJM.BUD(INDEX).PBUFCY = [F:YPJC]YPBUFCY
  GZINSPJM.BUD(INDEX).OPPNUM = [F:YPJC]YOPPNUM
  GZINSPJM.BUD(INDEX).PBUCOD = [F:YPJC]YPBUCOD
  GZINSPJM.BUD(INDEX).PBUPAE = [F:YPJC]YPBUPAE
  GZINSPJM.BUD(INDEX).PBUSTATE = [F:YPJC]YPBUSTATE
  GZINSPJM.BUD(INDEX).PBUELE = [F:YPJC]YPBUELE
  GZINSPJM.BUD(INDEX).PBUIMP = [F:YPJC]YPBUIMP
  GZINSPJM.BUD(INDEX).CUR = [F:YPJC]YCUR
  #GZINSPJM.PBUSTARTDT = YPBUSTARTDT
  #GZINSPJM.PBUENDDT = YPBUENDDT
  GZINSPJM.BUD(INDEX).TCHOPPIMPT = GZINSPJM.OPPIMPT
  GZINSPJM.BUD(INDEX).KEYCONCAT = [F:YPJC]YOPPNUM + func AFNC.PARAM ("SEPARCODE", "") + [F:YPJC]YPBUCOD
  #GZINSPJM.BUD(INDEX).KEYCONCAT = YOPPNUM+"!!"+YPBUCODX(I)



  GZINSPJM.CUR = [F:YPJC]YCUR

  INDEX1 = fmet GZINSPJM.BUD(INDEX).ADDLINE("BUDLIG", [V]CST_ALASTPOS)
  If (INDEX1 = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSPJM)
    [F:YPJC]YMSG = GMESSAGE
    [F:YPJC]YSTA = 5
  Endif

  ##
  ##  # Use the SetInstance


  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).OPPNUM = [F:YPJC]YOPPNUM
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PBUCOD = [F:YPJC]YPBUCOD
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBSEQ = 10
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PCCCOD = [F:YPJC]YPCCCOD
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBFCY = [F:YPJC]YPLBFCY
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBDESAXX = [F:YPJC]YPLBDESAXX
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBU = [F:YPJC]YPLBU
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBQTY = [F:YPJC]YPLBQTY
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBPRI = [F:YPJC]YPLBPRI
  If GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).YORIAMT = 0
    GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).YORIAMT = GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBAMT
  Endif
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBAMT = [F:YPJC]YPLBAMT
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBDATBUD = date$
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBFLGREM = [F:YPJC]YPLBFLGREM
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBQTYREM = [F:YPJC]YPLBQTYREM
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBPRIREM = [F:YPJC]YPLBPRIREM
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBQTYEST = [F:YPJC]YPLBQTYEST
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBAMTEST = [F:YPJC]YPLBAMTEST
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBQTYREC = [F:YPJC]YPLBQTYREC
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).PLBAMTREC = [F:YPJC]YPLBAMTREC
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).CUR = [F:YPJC]YCUR
  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).KEYCONCAT = [F:YPJC]YOPPNUM + func AFNC.PARAM ("SEPARCODE", "") + [F:YPJC]YPBUCOD
  #GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).KEYCONCAT = YOPPNUM+"!!"+YPBUCODX(I)



  GZINSPJM.BUD(INDEX).BUDLIG(INDEX1).TCHPBUSTRDT = date$

  Local Integer INDEX2

    INDEX2 = fmet GZINSPJM.BUD(INDEX).ADDLINE("PIMPL", [V]CST_ALASTPOS)
    If (INDEX2 = [V]CST_ANOTDEFINED)
      # Error management
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(GZINSPJM)
      [F:YPJC]YMSG = GMESSAGE
      [F:YPJC]YSTA = 5
    Endif



  ### Use the SetInstance
  ##  #SetInstance GZINSPJM.PIMPL(INDEX) With [F:PJLB]
    #GZINSPJM.BUD.PIMPL(INDEX2).PIMNUM = YOPPNUM(I)+"!!"+YPBUCOD(I)
    GZINSPJM.BUD(INDEX).PIMPL(INDEX2).PIMDESAXX = [F:YPJC]YPIMDESAXX
    GZINSPJM.BUD(INDEX).PIMPL(INDEX2).OPPNUM = [F:YPJC]YOPPNUM
    GZINSPJM.BUD(INDEX).PIMPL(INDEX2).PBUCOD = [F:YPJC]YPBUCOD
    GZINSPJM.BUD(INDEX).PIMPL(INDEX2).TASCOD = [F:YPJC]YTASCOD
    GZINSPJM.BUD(INDEX).PIMPL(INDEX2).FCY = [F:YPJC]YPLBFCY
    GZINSPJM.BUD(INDEX).PIMPL(INDEX2).PIMTYP = [F:YPJC]YPIMTYP
    GZINSPJM.BUD(INDEX).PIMPL(INDEX2).PIMSTA = [F:YPJC]YPIMSTA
    GZINSPJM.BUD(INDEX).PIMPL(INDEX2).FINRSPFCY = [F:YPJC]YPLBFCY
    GZINSPJM.BUD(INDEX).PIMPL(INDEX2).CPY = [F:YPJC]YCPY
    GZINSPJM.BUD(INDEX).PIMPL(INDEX2).OPPSTATE = [F:YPJC]YOPPSTATE
    GZINSPJM.BUD(INDEX).PIMPL(INDEX2).PBUSTATE = [F:YPJC]YPBUSTATE
  #
    GZINSPJM.CPY = [F:YPJC]YCPY
    GZINSPJM.SALFCY = [F:YPJC]YPLBFCY

#  Next


   [L]MY_STATUS = fmet GZINSPJM.BUD(INDEX).AINSERT()

    If ([L]MY_STATUS >= [V]CST_AERROR)
      Call RECOVERS_ERROR_IN_CLASSIC(GZINSPJM)
      #If GMESSAGE = AVOID.ACHAR Then
        [F:YPJC]YMSG = GMESSAGE
        [F:YPJC]YSTA = 5
        #WW_GRAVE = 3
        #WW_OK = 1
      #Endif
    Else
      [F:YPJC]YMSG = "Success"
        [F:YPJC]YSTA = 4
    Endif
  #
$YNEXT
Next

If GZINSPJM <> null Then
    FreeGroup GZINSPJM
  Endif
  Kill GZINSPJM
  ANOWRITE = 0
End

#------------------------------------------------------------------------------------#
#Handle Classic Errors from Class
#------------------------------------------------------------------------------------#
Subprog RECOVERS_ERROR_IN_CLASSIC(GZINSPJM)

  Variable Instance GZINSPJM Using C_OPPORPJM

  Local Integer NI
  Local Char SMESSAGE(type(GMESSAGE)-10)
  Local Integer MY_STATUS
  Local Integer IMESSAGE

  IMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_UPPER_MESSAGE(GZINSPJM, SMESSAGE)
  If IMESSAGE = [V]CST_AWARNING Then
    GMESSAGE = SMESSAGE
    GERR = 2
  Elsif IMESSAGE = [V]CST_AERROR or IMESSAGE = [V]CST_AFATAL Then
    GMESSAGE = SMESSAGE
    GOK = 0
    GERR = 1
  Endif

  [L]MY_STATUS = [V]CST_AOK
End

