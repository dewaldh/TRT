#<AdxTL>@(#)0.0.0.0 $Revision$Class ## ?IDENTQRY? SEARCH ##
# Sage X3 supervisor
#WMSRHITMFACILIT ITMFACILIT
# 2018-06-20 06:46:59 957

Funprog IS_IMPLEMENTED()
End 1
#---------------------------------------------------------------------------------------------------#
# List of tables to open
#---------------------------------------------------------------------------------------------------#
$ASEARCH_OPEN
If filinfo(filpath("FIL","ITMFACILIT","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File ITMFACILIT [ITF]
If filinfo(filpath("FIL","ITMMASTER","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File ITMMASTER [ITM]
If filinfo(filpath("FIL","ITMMVT","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File ITMMVT [ITV]
If filinfo(filpath("FIL","ITMSALES","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File ITMSALES [ITS]
Local File ITMFACILIT [ITF_]
Local Char KEY_ITF(120)(1..3)
Local Char KEY_ITM(120)(1..3)
Local Char KEY_ITV(120)(1..3)
Local Char KEY_ITS(120)(1..3)
#Empty keys :
KEY_ITF(3) = "+"
KEY_ITM(3) = ""
KEY_ITV(3) = "+"
KEY_ITS(3) = ""
ACTION = "ASEARCH_OPEN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to close
#---------------------------------------------------------------------------------------------------#
$ASEARCH_CLOSE
LogicClose File [ITF]
LogicClose File [ITM]
LogicClose File [ITV]
LogicClose File [ITS]
LogicClose File [ITF_]
ACTION = "ASEARCH_CLOSE_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to join
#---------------------------------------------------------------------------------------------------#
$ASEARCH_JOIN
Link [ITF] With
& [ITM]ITM0~=[F:ITF]ITMREF,
& [ITV]ITV0=[ITF]ITMREF;[ITF]STOFCY,
& [ITS]ITS0=[F:ITF]ITMREF
& As [LNK_]
& Where (1=1
& )
ACTION = "ASEARCH_JOIN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to join
#---------------------------------------------------------------------------------------------------#
$ASEARCH_JOIN_INC
Link [ITF] With
& [ITM]ITM0~=[F:ITF]ITMREF,
& [ITV]ITV0=[ITF]ITMREF;[ITF]STOFCY,
& [ITS]ITS0=[F:ITF]ITMREF
& As [LNK_]
& Where (UPDDATTIM > gdatetime$(QUPDDATTIM)
& )
ACTION = "ASEARCH_JOIN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# Create an instance of
#---------------------------------------------------------------------------------------------------#
$ASEARCH_CREATEINSTANCE
Local Integer ASTATUS
Local Integer FINS
Return

#---------------------------------------------------------------------------------------------------#
# Set an instance
#---------------------------------------------------------------------------------------------------#
$ASEARCH_SETINSTANCE
KEY_ITF(2) = [F:ITF]ITMREF+"+"+[F:ITF]STOFCY
KEY_ITM(2) = [F:ITM]ITMREF
KEY_ITV(2) = [F:ITV]ITMREF+"+"+[F:ITV]STOFCY
KEY_ITS(2) = [F:ITS]ITMREF

If (KEY_ITF(2) <> KEY_ITF(3)) & (KEY_ITF(1) <> KEY_ITF(2))
 If INS <> null
  [L]ASTATUS = fmet INS.ACTION("ASEARCH_TRANS_AFTER")
  #serialize INS
  Gosub ASEARCH_TO_JSON
 Endif
#Create a new instance
INS = NewInstance C_ITMFACILIT(GACTX,UIDINS,NUMLIN,null,"") AllocGroup null
INS.setaccessorEnabled = 0
SetInstance INS With [F:ITF]
FINS = 1
 KEY_ITF(1) = KEY_ITF(2)
Endif : # KEY_ITF(1) <> KEY_ITF(2)

Return

#---------------------------------------------------------------------------------------------------#
# Serialize the entity in a JSON format
#---------------------------------------------------------------------------------------------------#
$ASEARCH_TO_JSON
If FINS=0 : Return : Endif
QCOUNT += 1
Onerrgo ERROR_VALUE
Append ASND.DATA ,SEPINS1
SEPINS1 = ','+chr$(10)
Append ASND.DATA ,'{'
Append ASND.DATA ,'"ITMREF":'          +'"'+escJson(INS.ITMREF)+'"'
Append ASND.DATA ,',"STOFCY":'         +'"'+escJson(INS.STOFCY)+'"'
Append ASND.DATA ,',"REOFCY":'         +'"'+escJson(INS.REOFCY)+'"'
Append ASND.DATA ,',"PLANNER":'        +'"'+escJson(INS.PLANNER)+'"'
Append ASND.DATA ,',"BUY":'            +'"'+escJson(INS.BUY)+'"'
Append ASND.DATA ,',"CREDAT":'          + func ASYRSRH.DATE_TO_SYR(INS.CREDAT)
Append ASND.DATA ,',"CREUSR":'         +'"'+escJson(INS.CREUSR)+'"'
Append ASND.DATA ,',"UPDDAT":'          + func ASYRSRH.DATE_TO_SYR(INS.UPDDAT)
Append ASND.DATA ,',"UPDUSR":'         +'"'+escJson(INS.UPDUSR)+'"'
Append ASND.DATA ,'}'
Onerrgo
Freegroup INS
INS = null
Raz KEY_ITF(1),KEY_ITM(1),KEY_ITV(1),KEY_ITS(1)
FINS = 0
Return

#---------------------------------------------------------------------------------------------------#
# Errors
#---------------------------------------------------------------------------------------------------#
$ERROR_VALUE
SVALUE ='"<error'-errmes$(errn)+'>"'
Resume
#---------------------------------------------------------------------------------------------------#
# Link standard key
#---------------------------------------------------------------------------------------------------#
$AQUERY_PRIMARYKEYS
Local Char ASTDKEY(250)
ASTDKEY = ""
ASTDKEY += "[F:ITF]ITMREF"
ASTDKEY += ";[F:ITF]STOFCY"
ACTION = "ASEARCH_PRIMARYKEYS_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# Actions
#---------------------------------------------------------------------------------------------------#
$ASEARCH_ACTION
Local Char CURPRO(250),CURPTH(250),AMETHOD(50),AEVENT(50)
[L]AEVENT = [L]ACTION
Gosub METHODS From ITMFACILIT_CSTD
Return

#---------------------------------------------------------------------------------------------------#
# APPEND_PROTOTYPE
#---------------------------------------------------------------------------------------------------#
Funprog APPEND_PROTOTYPE(ACTX,WCLOB,PSYR)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Variable Clbfile   WCLOB
Variable Instance  PSYR     Using C_ASYR
Local Integer ERROR : ERROR = 0
Local Integer IND   : IND = 0
Local Char TRTNAME(80)
Local Char REPRESENTATION(80)
Local File ASHW    [ASW]
Filter [ASW] Where CODCLA="ITMFACILIT" & DEFREP=2
Read [ASW]ASW0 First
If !fstat
 If  [ASW]ENAFAC(0) = 2
  REPRESENTATION = [ASW]CODREP
 Else
  WCLOB ="{}"
  End ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(62,149,1),"ITMFACILIT")) 
 Endif
Endif
Close Local File [ASW]
If len(REPRESENTATION)=0
 WCLOB ="{}"
 End ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(62,149,1),"ITMFACILIT")) 
Endif
Append WCLOB,'{'
Append WCLOB,'"$baseUrl":"'+PSYR.PREFIX+'"'
Append WCLOB,',"$baseType":"'+PSYR.CNTPRE+"."+nomap+'"'
Append WCLOB,',"$classTitle":"'+func GET_RES_STRING(ACTX.LAN,1919)+'"'
Append WCLOB,',"$url":"{$baseUrl}/ITMFACILIT'+PSYR.URLREP+''+REPRESENTATION+'.$search"'
Append WCLOB,',"$prototype":"{$baseUrl}/$prototypes('+"'"+'{$representation}.$thumb'+"'"+')"'
Append WCLOB,',"$type":"{$baseType}.'+REPRESENTATION+'.$search"'
Append WCLOB,',"$facility":"{STOFCY}"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"$resources":{'
Append WCLOB,'"$type":"application/x-array"'
Append WCLOB,',"$item":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1919)+' {$key}"'
Append WCLOB,',"$key":"{ITMREF}~{STOFCY}"'
Append WCLOB,',"$url":"{$baseUrl}/ITMFACILIT('+"'"+'{$key}'+"'"+')'+PSYR.URLREP+'ITMFACILIT.searchItem"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"ITMREF":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,3651)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":20'
Append WCLOB,"}"
Append WCLOB,',"STOFCY":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1347)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"REOFCY":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,4696)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"PLANNER":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,9996)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"BUY":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1752)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"CREDAT":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1322)+'"'
Append WCLOB,',"$type":"application/x-date"'
Append WCLOB,"}"
Append WCLOB,',"CREUSR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1320)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"UPDDAT":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1326)+'"'
Append WCLOB,',"$type":"application/x-date"'
Append WCLOB,"}"
Append WCLOB,',"UPDUSR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1324)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,',"$links":{'
Append WCLOB,'"$search$details":{'
Append WCLOB,'"$title":"Detail"'
Append WCLOB,',"$default":true'
Append WCLOB,',"$url":"{$baseUrl}/ITMFACILIT('+"'"+'{$key}'+"'"+')?representation=ITMFACILIT.$details"'
Append WCLOB,',"$devices":"desktop"'
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
End ERROR
#---------------------------------------------------------------------------------------------------#
# GET_RES_STRING
#---------------------------------------------------------------------------------------------------#
Funprog GET_RES_STRING(_LAN,_ID)
Value Char _LAN
Value Integer _ID
Gosub  _GET_RES_STRING From WMSRHITMFACILITB
End RES

#---------------------------------------------------------------------------------------------------#
# GET_RES_MENU
#---------------------------------------------------------------------------------------------------#
Funprog GET_RES_MENU(_LAN,_ID)
Value Char _LAN
Value Char _ID
Gosub  _GET_RES_MENU From WMSRHITMFACILITB
End RES


