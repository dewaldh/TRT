#<AdxTL>@(#)0.0.0.0 $Revision$Class Statistical parameters
# Supervisor
## CRUD-CLASSE ## PARSTA2
# 2018-08-27 12:37:11 384


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(PARSTA2,ASTATUS)
Variable Instance PARSTA2 Using C_PARSTA2
Variable Integer ASTATUS

If PARSTA2 = null : End : Endif

Gosub _AVARIABLES From WMC00PARSTA2

[L]A_STRSITE = ""
[L]A_STRACC = PARSTA2.ACS
Gosub AINSERT_PARSTA2

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(PARSTA2,ASTATUS)
Variable Instance PARSTA2 Using C_PARSTA2
Variable Integer ASTATUS

If PARSTA2 = null : End : Endif

Gosub AVARIABLES From WMC00PARSTA2
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = PARSTA2.ACS
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_PARSTA2
Else
 Gosub AINSERT_PARSTA2
Endif

Gosub _AINSERT_AFTER
[L]A_I = PARSTA2.freeSnapshot
PARSTA2.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet PARSTA2._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet PARSTA2._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet PARSTA2._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If PARSTA2.ASTALIN = [V]CST_ANEWDEL : Return : Endif
PARSTA2.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet PARSTA2.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(PARSTA2.CRICOL)
 If PARSTA2.CRICOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet PARSTA2.CRICOL([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(PARSTA2.INTCOL)
 If PARSTA2.INTCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet PARSTA2.INTCOL([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(PARSTA2.TBLCOL)
 If PARSTA2.TBLCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet PARSTA2.TBLCOL([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

For [L]A_I=1 To maxtab(PARSTA2.CRICOL)
 If PARSTA2.CRICOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet PARSTA2.CRICOL([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(PARSTA2.INTCOL)
 If PARSTA2.INTCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet PARSTA2.INTCOL([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(PARSTA2.TBLCOL)
 If PARSTA2.TBLCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet PARSTA2.TBLCOL([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PARSTA2.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_PARSTA2
Trbegin [F:PS2]
 Gosub AINSERT_PARSTA2
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_PARSTA2
Raz [F:PS2]
[L]ASTATUS = max([L]ASTATUS,fmet PARSTA2.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00PARSTA2._MAJSQL_PARSTA2(PARSTA2))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PARSTA2.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If PARSTA2.snapshotEnabled=1
 [L]A_RETIK = PARSTA2.revertUpdTick
Endif
[L]ASTATUS = max(fmet PARSTA2.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(PARSTA2.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 PARSTA2.ASTALIN = [V]CST_ALL
Endif
For [L]A_I=1 To maxtab(PARSTA2.CRICOL)
 If PARSTA2.CRICOL([L]A_I)<>null
  If PARSTA2.CRICOL([L]A_I).ASTALIN=[V]CST_ADEL or PARSTA2.CRICOL([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance PARSTA2.CRICOL([L]A_I)
   PARSTA2.CRICOL([L]A_I) = null
  Elsif PARSTA2.CRICOL([L]A_I).ASTALIN <> [V]CST_ALL
   PARSTA2.CRICOL([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
For [L]A_I=1 To maxtab(PARSTA2.INTCOL)
 If PARSTA2.INTCOL([L]A_I)<>null
  If PARSTA2.INTCOL([L]A_I).ASTALIN=[V]CST_ADEL or PARSTA2.INTCOL([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance PARSTA2.INTCOL([L]A_I)
   PARSTA2.INTCOL([L]A_I) = null
  Elsif PARSTA2.INTCOL([L]A_I).ASTALIN <> [V]CST_ALL
   PARSTA2.INTCOL([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
For [L]A_I=1 To maxtab(PARSTA2.TBLCOL)
 If PARSTA2.TBLCOL([L]A_I)<>null
  If PARSTA2.TBLCOL([L]A_I).ASTALIN=[V]CST_ADEL or PARSTA2.TBLCOL([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance PARSTA2.TBLCOL([L]A_I)
   PARSTA2.TBLCOL([L]A_I) = null
  Elsif PARSTA2.TBLCOL([L]A_I).ASTALIN <> [V]CST_ALL
   PARSTA2.TBLCOL([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
Return



