#<AdxTL>@(#)0.0.0.0 $Revision$Class POs quantities
# Supervisor
## CRUD-CLASSE ## PORDERQ
# 2018-08-27 12:41:41 223


############################################################################################
### Subprog _ADELETE
############################################################################################
Subprog _ADELETE(PORDERQ,ASTATUS)
Variable Instance PORDERQ Using C_PORDERQ
Variable Integer ASTATUS

If PORDERQ = null : End : Endif

Gosub _AVARIABLES From WMC00PORDERQ

[L]A_STRSITE = ""
[L]A_STRACC = ""
Local Instance ALNKDELTAB Using C_ALNKDELTAB
Gosub ADELETE_PORDERQ

End

############################################################################################
### Subprog ADELETE
############################################################################################
Subprog ADELETE(PORDERQ,ASTATUS)
Variable Instance PORDERQ Using C_PORDERQ
Variable Integer ASTATUS

If PORDERQ = null : End : Endif

Gosub AVARIABLES From WMC00PORDERQ
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

Local Instance ALNKDELTAB Using C_ALNKDELTAB

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub ADELETE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

If !adxlog
 Gosub ADELETE_TR_PORDERQ
Else
 Gosub ADELETE_PORDERQ
Endif

$ADELETE_END
End


$ADELETE_CONTROL
Gosub _ADELETE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Verification delete
[L]ASTATUS = max([L]ASTATUS,func ASYRSUB.VERIFY_INSTANCE(PORDERQ,ALNKDELTAB))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _ADELETE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_BEFORE
If PORDERQ.ASTALIN = [V]CST_ANEWDEL : Return : Endif
PORDERQ.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet PORDERQ.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet PORDERQ.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_TR_PORDERQ
Trbegin [F:POQ]
 Gosub ADELETE_PORDERQ
 If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$ADELETE_PORDERQ
[L]ASTATUS = max([L]ASTATUS,fmet PORDERQ.ACTION("ADELETE_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = func ASYRSUB.DELETE_LINKS(PORDERQ,ALNKDELTAB)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

If find( PORDERQ.ASTALIN,[V]CST_ANEW,[V]CST_ADEL) | 
& (find( PORDERQ.ASTALIN,[V]CST_AUPD) & 
& fmet PORDERQ.AGETATTRIBUTE("TEXTE","$isLoaded")="true")
[L]ASTATUS = func WMC00PORDERQ._MAJSQL_PORDERQ_TEXTE(PORDERQ,PORDERQ.TEXTE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
[L]ASTATUS = max([L]ASTATUS,func WMC00PORDERQ._MAJSQL_PORDERQ(PORDERQ))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PORDERQ.ACTION("ADELETE_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_ABORT
Rollback
$_ADELETE_ABORT
If PORDERQ.snapshotEnabled=1
 [L]A_RETIK = PORDERQ.revertUpdTick
Endif
[L]ASTATUS = max(fmet PORDERQ.ACTION("ADELETE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#

#-----------------------------------------------------#
$_ADELETE_AFTER
Return



