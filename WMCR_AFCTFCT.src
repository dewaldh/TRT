#<AdxTL>@(#)0.0.0.0 $Revision$Class User function profile
# Supervisor
## CRUD-CLASSE ## AFCTFCT
# 2018-08-27 12:20:18 338


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File AFCTFCT [AFT_]

If !SILENCE : Call TRACE("2 --> Local Instance C_AFCTFCT") From ASYRCOM : Endif
Local Instance AFCTFCT Using C_AFCTFCT

If !SILENCE : Call TRACE("3 --> New Instance C_AFCTFCT") From ASYRCOM : Endif
AFCTFCT = NewInstance C_AFCTFCT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [AFT_]AFT0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of AFCTFCT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet AFCTFCT.AREAD([AFT_]PRFCOD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("AFCTFCT.PRFCOD ="-num$(AFCTFCT.PRFCOD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(AFCTFCT.AKEYS)
  Call TRACE("-"-num$(I)-":"-AFCTFCT.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [AFT_]
FreeGroup AFCTFCT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(AFCTFCT,ACLE,ASTATUS,_ETAG)
Variable Instance AFCTFCT Using C_AFCTFCT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _PRFCOD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PRFCOD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File AFCTFCT [AFT]
Default File [F:AFT]
Read [F:AFT]AFT0 = [L]_PRFCOD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:AFT]UPDTICK)>0
 [L]_ETAG = num$([F:AFT]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(AFCTFCT,ACLE,ASTATUS)
Variable Instance AFCTFCT Using C_AFCTFCT
Value Char ACLE
Variable Integer ASTATUS
Local Char _PRFCOD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PRFCOD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet AFCTFCT.AREAD([L]_PRFCOD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(AFCTFCT,_PRFCOD,ASTATUS)
Variable Instance AFCTFCT Using C_AFCTFCT
Value Char _PRFCOD
Variable Integer ASTATUS

If AFCTFCT = null : End : Endif

Gosub AVARIABLES From WMC00AFCTFCT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If AFCTFCT.APARENT=null
 [L]A_I = AFCTFCT.freeSnapshot
 AFCTFCT.snapshotEnabled = 0
 AFCTFCT.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & AFCTFCT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet AFCTFCT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If AFCTFCT.APARENT=null
 AFCTFCT.snapshotEnabled = 1
 AFCTFCT.setAccessorEnabled = 1
Endif
LogicClose File [AFT]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet AFCTFCT._ACTION_PARAM("AREAD_BEFORE",[L]_PRFCOD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:AFT]
Read [F:AFT]AFT0 = [L]_PRFCOD
If fstat
[L]A_ERROR = [L]_PRFCOD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(AFCTFCT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:AFT]AUUID)>0 & [F:AFT]AUUID=NullUuid
 [F:AFT]AUUID = getUuid
Endif
SetInstance AFCTFCT With [F:AFT]
AFCTFCT.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To 15
 If ([F:AFT]AUTETA([L]A_I-1)<>0)
  [L]A_NEWCOL += 1
  AFCTFCT.ASTA(A_NEWCOL) = NewInstance  C_AFCTFCT_ASTA(AFCTFCT.ACTX,NullUuid,[L]A_I,AFCTFCT,"ASTA") AllocGroup AFCTFCT
  AFCTFCT.ASTA(A_NEWCOL).AUTETA = [F:AFT]AUTETA([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet AFCTFCT.ASTA(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet AFCTFCT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="AFCTFCT" & ZONE="INTPRF" & IDENT1=AFCTFCT.PRFCOD & IDENT2=""
 Call ASETTEXTRA(AFCTFCT.AXX,AFCTFCT.AllocGrp(),"INTPRF",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 AFCTFCT.AXX(maxtab(AFCTFCT.AXX)).FLG = 0
Next AXX
If !len(fmet AFCTFCT.AGETTEXTRA("INTPRF"))
 Call ASETTEXTRA(AFCTFCT.AXX,AFCTFCT.AllocGrp(),"INTPRF",
& fmet AFCTFCT.AGETTEXTRALAN("INTPRF",AFCTFCT.ACTX.AFOLD.ALANGDEF),
& AFCTFCT.ACTX.LAN) From ASYRSUB
Endif

Return



