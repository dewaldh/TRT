#<AdxTL>@(#)0.0.0.0 $Revision$ 
######################################################################################################################
# Script            : SUBYPLA                                                                                        #
# Creation date     : 28/08/2018                                                                                     #
# Version           : 1.0.0                                                                                          #
# Authors (Company) : MB (Leverage)                                                                                  #
# Module            : Land Development                                                                               #
# -------------------------------------------------------------------------------------------------------------------#
# Epic              : https://jira.leveragetech.com.au/browse/DFCX1-79                                               #
# Description       : DFCX1-79 Land Development -  Planning Applications                                             #
#--------------------------------------------------------------------------------------------------------------------#
# Evolutions        :                                                                                                #
######################################################################################################################

$ACTION
Case ACTION
  When "OUVRE"        : Gosub OUVRE
  When "FERME"        : Gosub FERME
  When "RAZCRE"       : Gosub RAZCRE
  When "LIENS"        : Gosub LIENS
  When "VERIF_CRE"    : Gosub VERIF_CRE
  When "CREATION"     : Gosub CREATION
  When "APRES_CRE"    : Gosub APRES_CRE
  When "MODIF"        : Gosub MODIF
  When "APRES_MOD"    : Gosub APRES_MOD
  When "RAZDUP"       : Gosub RAZDUP
  When "AV_ANNULE"    : Gosub AV_ANNULE
  When "ANNULE"       : Gosub ANNULE
  When Default
Endcase
Return

#------------------------------------------------------------------------------------#
#Open screen
#------------------------------------------------------------------------------------#
$OUVRE
#disable the regular Classic CUD operations
ANOWRITE = 1

#nstance for your class
Global Instance YPLA_INSTANCE Using C_YPLA

Return

#------------------------------------------------------------------------------------#
#Close screen
#------------------------------------------------------------------------------------#
$FERME
#When you are leaving the transaction, you have to free the instance.
If (YPLA_INSTANCE <> null) : FreeGroup YPLA_INSTANCE : Endif
Kill YPLA_INSTANCE

Return

#------------------------------------------------------------------------------------#
#Before Create
#------------------------------------------------------------------------------------#
$RAZCRE

Local Integer MY_STATUS

If (YPLA_INSTANCE <> null) : FreeGroup YPLA_INSTANCE : Endif
YPLA_INSTANCE = NewInstance C_YPLA AllocGroup null

#Then you have to initialize the class properties by calling the AINIT method and/or setting properties manually
[L]MY_STATUS = fmet YPLA_INSTANCE.AINIT()
If ([L]MY_STATUS >= [V]CST_AERROR)
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPLA_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

#To finish you have to refresh the UI to display the values of initialized properties.
#Because it is not possible to directly transfer class property values into screen field values, you may use the file [F] as interface.
#Complete the process for properties and fields with non matching name

SetInstance [F:YPLN] With YPLA_INSTANCE
[M:YPLA]  = [F:YPLN]
[M:YPLA1] = [F:YPLN]

#[M:YEST] = YEST_INSTANCE.PROPERTY

Affzo [M:YPLA]1-99
Affzo [M:YPLA1]1-99

Return

#------------------------------------------------------------------------------------#
#Read record
#------------------------------------------------------------------------------------#
$LIENS

If (YPLA_INSTANCE <> null) : FreeGroup YPLA_INSTANCE : Endif
YPLA_INSTANCE = NewInstance C_YPLA AllocGroup null

#------------------------------------------------------------------------------------#
#Upload Related tab
nolign = 1
For [F:YRMA]YRMA0 Where [F:YRMA]YGUID = [F:YPLN]YGUID
  [M:YPLA2] = [F:YRMA]
  nolign += 1
Next
[M:YPLA2]NBLIG = nolign - 1
#------------------------------------------------------------------------------------#

Local Integer MY_STATUS
[L]MY_STATUS = fmet YPLA_INSTANCE.AREAD([M:YPLA]YPLLID)
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPLA_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif
Read [F:YPLN]YPLN0 =[M:YPLA]YPLLID
[M:YPLA1] = [F:YPLN]

Return

#------------------------------------------------------------------------------------#
#Create record
#------------------------------------------------------------------------------------#
$CREATION
Local Integer MY_STATUS

#YOU CAN USE THE INSTRUCTION SetInstance WHICH WILL SET PROPERTIE's values from field'S VALUES
#For PROPERTIE's names that are identical to a field'S NAME OF THE [F] File.
SetInstance YPLA_INSTANCE With [F:YPLN]

#SET NEW GUID VALUE FOR NEW RECORD THAT IS CREATED
YPLA_INSTANCE.YGUID   = num$(getUuid)
YPLA_INSTANCE.YPLLID  = [M:YPLA]YPLLID
If [M:YPLA]YPLLID = "" and SEQCODE <> ""
  YPLA_INSTANCE.YPLLID = SEQCODE
Endif


# Related tab (Creation)
Local Integer I
For I=1 To maxtab(YPLA_INSTANCE.YRMA)
  If (fmet YPLA_INSTANCE.ADELLINE("YRMA", YPLA_INSTANCE.YRMA(I).AORDER) <> [V]CST_AOK)
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPLA_INSTANCE)
    GOK = 0 :       GERR = 1
    Return
  Endif
Next

Local Integer I, INDEX
For I = 0 To [M:YPLA2]NBLIG - 1
  INDEX = fmet YPLA_INSTANCE.ADDLINE("YRMA", [V]CST_ALASTPOS)
  If (INDEX = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPLA_INSTANCE)
    GOK = 0 :       GERR = 1
    Return
  Endif

  nolign = I + 1
  # Need to use [F] because it is impossible to set a class from [M]
  [F:YRMA] = [M:YPLA2]
  [F:YRMA]YGUID = YPLA_INSTANCE.YGUID
  [F:YRMA]YLIGID = num$(nolign)

  # Use the SetInstance
  SetInstance YPLA_INSTANCE.YRMA(INDEX) With [F:YRMA]
Next
If (GERR = 1) : Return : Endif
# Related tab (Creation)


[L]MY_STATUS = fmet YPLA_INSTANCE.AINSERT()
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPLA_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

SetInstance [F:YPLN] With YPLA_INSTANCE
Affzo [M:YPLA]1-99
Affzo [M:YPLA1]1-99

Return

#------------------------------------------------------------------------------------#
#After create record
#------------------------------------------------------------------------------------#
$APRES_CRE

Gosub RELIT From GOBJSUB

Return

#------------------------------------------------------------------------------------#
#Modify record
#------------------------------------------------------------------------------------#
$MODIF
Local Integer MY_STATUS

SetInstance YPLA_INSTANCE With [F:YPLN]

# Related tab (Modify)
Local Integer I, INDEX
For I = 0 To [M:YPLA2]NBLIG - 1
  nolign = I + 1
  Raz [F:YRMA]

  # Retrieve the element using the screen's AUUID. If AUUID is blank, then its a new row
  INDEX=0
  If [M:YPLA2]AUUID(I) <> ""
    [F:YRMA]AUUID = toUuid([M:YPLA2]AUUID(I))
    INDEX = find(toUuid([M:YPLA2]AUUID(I)), YPLA_INSTANCE.YRMA(1..maxtab(YPLA_INSTANCE.YRMA)).AUUID)
  Endif
  If (INDEX = 0)
    # We did not find the element matching with the array line, we add a line.
    INDEX = fmet YPLA_INSTANCE.ADDLINE("YRMA", [V]CST_ALASTPOS)
    If (INDEX = [V]CST_ANOTDEFINED)
      # Error management
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPLA_INSTANCE)
      GOK = 0 :      GERR = 1
      Break
    Endif
  Endif

  # Need to use [F] because it's not possible to set a class from [M]
  [F:YRMA] = [M:YPLA2]
  [F:YRMA]YGUID = YPLA_INSTANCE.YGUID
  [F:YRMA]YLIGID = num$(nolign)


  # Use the SetInstance
  SetInstance YPLA_INSTANCE.YRMA(INDEX) With [F:YRMA]
Next
If (GERR = 1) : Return : Endif

# Now, all elements that don't have the status Updated or Created must be deleted, because it means they don't match with lines in the array
For I = 1 To maxtab(YPLA_INSTANCE.YRMA)
  If YPLA_INSTANCE.YRMA(I) <> null and find(YPLA_INSTANCE.YRMA(I).ASTALIN, [V]CST_ANEW, [V]CST_AUPD) = 0
    If (fmet YPLA_INSTANCE.ADELLINE("YRMA", YPLA_INSTANCE.YRMA(I).AORDER) <> [V]CST_AOK)
      # Error management
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPLA_INSTANCE)
      GOK = 0
      GERR = 1
      Return
    Endif
  Endif
Next
If (GERR = 1) : Return : Endif
# Related tab (Modify)

[L]MY_STATUS = fmet YPLA_INSTANCE.AUPDATE()
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPLA_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

Return

#------------------------------------------------------------------------------------#
#AFTER UPDATE
#------------------------------------------------------------------------------------#
$APRES_MOD

Gosub RELIT From GOBJSUB

Return

#------------------------------------------------------------------------------------#
#This action is called when a field of the primary key is changed
#------------------------------------------------------------------------------------#
$RAZDUP
Local Integer MY_STATUS

If (YPLA_INSTANCE <> null) : FreeGroup YPLA_INSTANCE : Endif
YPLA_INSTANCE = NewInstance C_YPRE AllocGroup null

[L]MY_STATUS = fmet YPLA_INSTANCE.AINIT()
If ([L]MY_STATUS >= [V]CST_AERROR)
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPLA_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

Return

#------------------------------------------------------------------------------------#
#Begin delete record
#------------------------------------------------------------------------------------#
$AV_ANNULE
  Local Integer ANOWRITE
  ANOWRITE = 1
Return


#------------------------------------------------------------------------------------#
#Delete record
#------------------------------------------------------------------------------------#
$ANNULE

Local Integer MY_STATUS
[L]MY_STATUS = fmet YPLA_INSTANCE.ADELETE()
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPLA_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

Return

#------------------------------------------------------------------------------------#
#Handle Classic Errors from Class
#------------------------------------------------------------------------------------#
Subprog RECOVERS_ERROR_IN_CLASSIC(YPLA_INSTANCE)

  Variable Instance YPLA_INSTANCE Using C_YPLA

  Local Integer NI
  Local Char SMESSAGE(type(GMESSAGE)-10)
  Local Integer MY_STATUS
  Local Integer IMESSAGE

  IMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_UPPER_MESSAGE(YPLA_INSTANCE, SMESSAGE)
  If IMESSAGE = [V]CST_AWARNING Then
    GMESSAGE = SMESSAGE
    GERR = 2
  Elsif IMESSAGE = [V]CST_AERROR or IMESSAGE = [V]CST_AFATAL Then
    GMESSAGE = SMESSAGE
    GOK = 0
    GERR = 1
  Endif

  [L]MY_STATUS = [V]CST_AOK
End


#------------------------------------------------------------------------------------#
#Verificatio of create record
#------------------------------------------------------------------------------------#
$VERIF_CRE

#YPRE Sequence Number
  Local Char SEQCODE
  Local Integer STAT

  Call NUMERO("YPLA","",date$,"",SEQCODE,STAT) From SUBANM
  SEQCODE = vireblc(SEQCODE,4)

  [M:YPLA]YPLLID = SEQCODE

Return

