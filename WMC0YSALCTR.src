#<AdxTL>@(#)0.0.0.0 $Revision$Class Sales contract
# Supervisor
## ACLA-CLASSE ## YSALCTR
# 2019-05-08 01:01:56 388

####################################################################
# Traitments
####################################################################
$_ADDTRT
this.AINF.TRT(1) = "WMCM_YSALCTR"
this.AINF.TYP(1) = 1
this.AINF.PTH(1) = ""
this.AINF.TRT(2) = "YSALCTR_CSPE"
this.AINF.TYP(2) = 3
this.AINF.PTH(2) = ""
this.AINF.NBTRT = 2
Return

####################################################################
#Declaration of variables
####################################################################

$DECLARE_VAR
Local Char    ACTION(50) , CURPRO(250) , VALPRO(250) , CURQRY(50) , CURPTH(250)
Local Char    AMETHOD(50) ,AOPERATION(50),AEVENT(50),ARULE(50)
Local Integer ALLSTAT,AISMET,ASTATUS
Return


####################################################################
# Global methods & standards
####################################################################
$AINIT
Gosub DECLARE_VAR
[L]AEVENT = "AINIT" : [L]ACTION = "AINIT" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# AERRORS
####################################################################

$_AERROR
Gosub DECLARE_VAR From WMC0YSALCTR
Local Integer ALLSTAT
Call ALLERRORS(this,_CTX,_SUPP) From ASYRSUB
For AINDCLA=1 To maxtab(this.YSCU)
 If this.YSCU(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSCU(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
If this.YSWF<>null
 [L]ASTATUS = fmet this.YSWF._AERROR(_CTX,_SUPP)
Endif
For AINDCLA=1 To maxtab(this.YCMT)
 If this.YCMT(AINDCLA)<>null
  [L]ASTATUS = fmet this.YCMT(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YCMA)
 If this.YCMA(AINDCLA)<>null
  [L]ASTATUS = fmet this.YCMA(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
If this.YSCV<>null
 [L]ASTATUS = fmet this.YSCV._AERROR(_CTX,_SUPP)
Endif
For AINDCLA=1 To maxtab(this.YSREB)
 If this.YSREB(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSREB(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YSREC)
 If this.YSREC(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSREC(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YSWC)
 If this.YSWC(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSWC(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YSCRC)
 If this.YSCRC(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSCRC(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YRMA)
 If this.YRMA(AINDCLA)<>null
  [L]ASTATUS = fmet this.YRMA(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YSETADJ)
 If this.YSETADJ(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSETADJ(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YBB)
 If this.YBB(AINDCLA)<>null
  [L]ASTATUS = fmet this.YBB(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
Return

####################################################################
# Delete all errors
####################################################################

$_ADELERRORS
Gosub DECLARE_VAR From WMC0YSALCTR
Local Integer ALLSTAT
[L]ASTATUS = fmet this.ADELETEERROR([L]_APARAM)
For AINDCLA=1 To maxtab(this.YSCU)
 If this.YSCU(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSCU(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
If this.YSWF<>null
 [L]ASTATUS = fmet this.YSWF._ADELERRORS(_APARAM)
Endif
For AINDCLA=1 To maxtab(this.YCMT)
 If this.YCMT(AINDCLA)<>null
  [L]ASTATUS = fmet this.YCMT(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YCMA)
 If this.YCMA(AINDCLA)<>null
  [L]ASTATUS = fmet this.YCMA(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
If this.YSCV<>null
 [L]ASTATUS = fmet this.YSCV._ADELERRORS(_APARAM)
Endif
For AINDCLA=1 To maxtab(this.YSREB)
 If this.YSREB(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSREB(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YSREC)
 If this.YSREC(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSREC(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YSWC)
 If this.YSWC(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSWC(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YSCRC)
 If this.YSCRC(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSCRC(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YRMA)
 If this.YRMA(AINDCLA)<>null
  [L]ASTATUS = fmet this.YRMA(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YSETADJ)
 If this.YSETADJ(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSETADJ(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YBB)
 If this.YBB(AINDCLA)<>null
  [L]ASTATUS = fmet this.YBB(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
Return

####################################################################
# _ASEARCHINFOS
####################################################################

$_ASEARCHINFOS
Gosub DECLARE_VAR From WMC0YSALCTR
ASTATUS= func ASYRSUB.ASEARCHINFOS(this,[L]AINS_ORI,[L]ERR_TYPE,[L]PROPERTY,[L]ASTAT,[L]SELSTAT,[L]PATH)
If [L]ERR_TYPE=[V]CST_ACURRENT : Return : Endif
For AINDCLA=1 To maxtab(this.YSCU)
 If this.YSCU(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSCU(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YSCU('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
If this.YSWF<>null
 [L]ASTATUS = fmet this.YSWF._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YSWF')
Endif
For AINDCLA=1 To maxtab(this.YCMT)
 If this.YCMT(AINDCLA)<>null
  [L]ASTATUS = fmet this.YCMT(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YCMT('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YCMA)
 If this.YCMA(AINDCLA)<>null
  [L]ASTATUS = fmet this.YCMA(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YCMA('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
If this.YSCV<>null
 [L]ASTATUS = fmet this.YSCV._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YSCV')
Endif
For AINDCLA=1 To maxtab(this.YSREB)
 If this.YSREB(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSREB(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YSREB('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YSREC)
 If this.YSREC(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSREC(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YSREC('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YSWC)
 If this.YSWC(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSWC(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YSWC('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YSCRC)
 If this.YSCRC(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSCRC(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YSCRC('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YRMA)
 If this.YRMA(AINDCLA)<>null
  [L]ASTATUS = fmet this.YRMA(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YRMA('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YSETADJ)
 If this.YSETADJ(AINDCLA)<>null
  [L]ASTATUS = fmet this.YSETADJ(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YSETADJ('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.YBB)
 If this.YBB(AINDCLA)<>null
  [L]ASTATUS = fmet this.YBB(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'YBB('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
Return

####################################################################
# AGETERRORSFROM
####################################################################

$_AGETERRORSFROM
Gosub DECLARE_VAR From WMC0YSALCTR
If AINS_FROM<>null
 [L]ASTATUS = fmet AINS_FROM.ASEARCHINFOS( [V]CST_ALL, "", [V]CST_AFATAL, 0)
Endif
Call AGETERRORSFROM(AINS_FROM,this,ENVIRONNEMENT) From ASYRSUB
Return

####################################################################
$ACONTROL
####################################################################
Gosub DECLARE_VAR
[L]AEVENT = "ACONTROL" : [L]ACTION = "ACONTROL" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# ADELLINE
####################################################################
$ADELLINE
Case _ACOLLECTION
 When "YBB"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YBB",this)
 When "YCMA"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YCMA",this)
 When "YCMT"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YCMT",this)
 When "YRMA"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YRMA",this)
 When "YSCRC"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YSCRC",this)
 When "YSCU"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YSCU",this)
 When "YSCV"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YSCV",this)
 When "YSETADJ"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YSETADJ",this)
 When "YSREB"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YSREB",this)
 When "YSREC"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YSREC",this)
 When "YSWC"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YSWC",this)
 When "YSWF"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"YSWF",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# ADDLINE
####################################################################
$ADDLINE
Case _ACOLLECTION
 When "YBB"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YBB","C_YBBT",this)
 When "YCMA"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YCMA","C_YCMA",this)
 When "YCMT"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YCMT","C_YCMT",this)
 When "YRMA"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YRMA","C_YRMA",this)
 When "YSCRC"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YSCRC","C_YSCRC",this)
 When "YSCU"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YSCU","C_YSCU",this)
 When "YSCV"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YSCV","C_YSCV",this)
 When "YSETADJ"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YSETADJ","C_YSETADJ",this)
 When "YSREB"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YSREB","C_YSREB",this)
 When "YSREC"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YSREC","C_YSREC",this)
 When "YSWC"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YSWC","C_YSWC",this)
 When "YSWF"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"YSWF","C_YSWF",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETDIM
####################################################################
$AGETDIM
Case _ACOLLECTION
 When "YBB"
  [L]_ALINE = 0
 When "YCMA"
  [L]_ALINE = 0
 When "YCMT"
  [L]_ALINE = 0
 When "YRMA"
  [L]_ALINE = 0
 When "YSCRC"
  [L]_ALINE = 0
 When "YSCU"
  [L]_ALINE = 0
 When "YSCV"
  [L]_ALINE = 1
 When "YSETADJ"
  [L]_ALINE = 0
 When "YSREB"
  [L]_ALINE = 0
 When "YSREC"
  [L]_ALINE = 0
 When "YSWC"
  [L]_ALINE = 0
 When "YSWF"
  [L]_ALINE = 1
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETMIN
####################################################################
$AGETMIN
Case _ACOLLECTION
 When "YBB"
  [L]_ALINE = 1
 When "YCMA"
  [L]_ALINE = 1
 When "YCMT"
  [L]_ALINE = 1
 When "YRMA"
  [L]_ALINE = 1
 When "YSCRC"
  [L]_ALINE = 1
 When "YSCU"
  [L]_ALINE = 1
 When "YSCV"
  [L]_ALINE = 1
 When "YSETADJ"
  [L]_ALINE = 1
 When "YSREB"
  [L]_ALINE = 1
 When "YSREC"
  [L]_ALINE = 1
 When "YSWC"
  [L]_ALINE = 1
 When "YSWF"
  [L]_ALINE = 2
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# _ALOAD_KEYS
####################################################################
$_ALOAD_KEYS
this.AKEYS(1) = "YSLCID"
Return

####################################################################
# _ADELINSTANCE
####################################################################
$_ADELINSTANCE
[L]ASTATUS = func ASYRSUBTAB._ADELINSTANCE(this)
Return

####################################################################
# ADDINSTANCE_BOUND
####################################################################
$ADDINSTANCE_BOUND
this.YSWF(1) = NewInstance C_YSWF(this.ACTX,NullUuid,1,this,"YSWF") AllocGroup this
this.YSWF(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.YSWF(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
Return



