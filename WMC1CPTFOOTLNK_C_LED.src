#<AdxTL>@(#)0.0.0.0 $Revision$Class Analytical accounting lines
# Supervisor
## ACLA-CLASSE ## CPTFOOTLNK_C_LED
# 2018-08-27 12:30:30 488


####################################################################
# Labels of the main class and methods 
####################################################################

####################################################################
# 1 : LED Ledger ( Field LED 3)
####################################################################

$SET_LED
If [L]_AOLDVAL<>this.LED
 Call _ASTATUSPARENT(this) From ASYRSUB
Endif
Gosub CONTROL_LED
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
If [L]_AOLDVAL<>this.LED
 Gosub PROPAGATE_LED
Endif
Return

$INIT_LED
Gosub DECLARE_VAR From WMC0CPTFOOTLNK_C_LED
[L]CURPRO = "LED"
[L]ARULE = "INIT" : [L]ACTION = "INIT" : Gosub ACTION From ASYRSUB
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return
 
$CONTROL_LED
Gosub DECLARE_VAR From WMC0CPTFOOTLNK_C_LED
[L]CURPRO = "LED"
[L]ASTATUS = fmet this.ADELETEERROR([L]CURPRO)
Gosub _AFORMAT_LED                   : If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AOTHERS_LED                   : If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

$_AMANDATORY_LED
[L]CURPRO = "LED"
If fmet this.AGETATTRIBUTE([L]CURPRO,"$isMandatory")="true" & vireblc(this.LED,2)=""
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(this,[L]CURPRO,0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,mess(10,123,1)) :  Return : # Mandatory field
Endif
Return

$_AFORMAT_LED
[L]CURPRO = "LED"
If vireblc(this.LED,2)<>vireblc(format$("K:3c",this.LED),2)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(this,[L]CURPRO,0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,mess(149,100,1)) :  Return : # Incorrect Format
Endif
Return

$_AOTHERS_LED
[L]CURPRO = "LED"
If vireblc(this.LED,2)<>""
 If fmet this.AGETATTRIBUTE([L]CURPRO,"$namProParent")=""
  [L]ASTATUS =  func WMTYPLED.ACTRLREF(this,"LED",this.LED,this.LED,"")
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Else
  If this.LED<>evalue("this.APARENT."+fmet this.AGETATTRIBUTE([L]CURPRO,"$namProParent"))
   [L]ASTATUS = func ASYRSUB._ASETSTATUS(this,[L]CURPRO,0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,mess(83,123,1)) :  Return : # Invalid value
  Endif
 Endif
Endif
[L]ARULE = "CONTROL" : [L]ACTION = "CONTROL" : Gosub ACTION From ASYRSUB
Return

$_AOTHERS_REF_LED
[L]CURPRO = "LED"
Return

$PROPAGATE_LED
this.isReadonly = 0
[L]CURPRO = "LED"
Gosub _LNKPRO_LED
[L]ARULE = "PROPAGATE" : [L]ACTION = "PROPAGATE" : Gosub ACTION From ASYRSUB
this.isReadonly = 1
Return

$LNKPRO_LED
Gosub DECLARE_VAR From WMC0CPTFOOTLNK_C_LED
[L]CURPRO = "LED"
$_LNKPRO_LED
If vireblc(this.LED,2)<>""
 # Link GLED
 Local File GLED [WLED]
 Read [F:WLED]LED0 = this.LED
 If !fstat
  Local File ATEXTRA [WAXX]
  Local Char ILAN(GLONLAN)
  For ILAN=this.ACTX.LAN, this.ACTX.AFOLD.ALANGDEF
   For [F:WAXX] Where CODFIC="GLED" & ZONE="SHOTRA" & IDENT1=[F:WLED]LED & IDENT2="" & LANGUE = ILAN
    [L]ASTATUS = fmet this.ASETATTRIBUTE("LED","$title",[WAXX]TEXTE)
    Break 2
   Next WAXX
  Next ILAN
  LogicClose File [WAXX]
  Local File ATEXTRA [WAXX]
  Local Char ILAN(GLONLAN)
  For ILAN=this.ACTX.LAN, this.ACTX.AFOLD.ALANGDEF
   For [F:WAXX] Where CODFIC="GLED" & ZONE="DESTRA" & IDENT1=[F:WLED]LED & IDENT2="" & LANGUE = ILAN
    [L]ASTATUS = fmet this.ASETATTRIBUTE("LED","$description",[WAXX]TEXTE)
    Break 2
   Next WAXX
  Next ILAN
  LogicClose File [WAXX]
 Endif
 LogicClose File [WLED]
Endif
Return




