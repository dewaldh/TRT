#<AdxTL>@(#)0.0.0.0 $Revision$

#**
#* Label for coding event of CRUD
#* @param CURPTH Local Char(250), contains the class path
#* @param AEVENT Local Char(20), contains the event code
#* @return ASTATUS Local Integer
#*!
$EVENTS
Case [L]CURPTH
  When ""
    Case [L]AEVENT
      When "AINIT"

        #ELA Sequence Number
        Local Integer OK
        Local Char MESSAGE(250)
        OK = func ANM_TOOL.NUMERO(GACTX,"YELAS","",date$,"",this.YLONAGR,MESSAGE)
        If OK = [V]CST_AERROR : ASTATUS = fmet this.ASETERROR("",MESSAGE-"YELA_CSPE-x000",OK) : Endif

        #Default Enable Flag to YES
        this.YENAFLG = 2

    Endcase
Endcase
Return

#**
#* Label for coding action on INIT, GET, CONTROL and PROPAGATE
#* @param CURPRO Local Char(50), contains the property code
#* @param ARULE Local Char(20), contains the action code requested
#* @return ASTATUS Local Integer
#*!
$PROPERTIES
Case [L]CURPRO
      When Default
#      When "YCPYPRO"                       : Gosub YCPYPRO
#      When "YCPYREC"                       : Gosub YCPYREC
#      When "YFCYPRO"                       : Gosub YFCYPRO
#      When "YACCPRO"                       : Gosub YACCPRO
#      When "YACCREC"                       : Gosub YACCREC
#      When "YFCYREC"                       : Gosub YFCYREC
#      When "YDEFFLG"                       : Gosub YDEFFLG
#      When "YPRODIE"                       : Gosub YPRODIE
#      When "YPRODIE1"                      : Gosub YPRODIE1
#      When "YPRODIE2"                      : Gosub YPRODIE2
#      When "YPRODIE3"                      : Gosub YPRODIE3
#      When "YPRODIE4"                      : Gosub YPRODIE4
#      When "YPRODIE5"                      : Gosub YPRODIE5
#      When "YPRODIE6"                      : Gosub YPRODIE6
#      When "YPRODIE7"                      : Gosub YPRODIE7
#      When "YPRODIE8"                      : Gosub YPRODIE8
#      When "YRECDIE"                       : Gosub YRECDIE
#      When "YRECDIE1"                      : Gosub YRECDIE1
#      When "YRECDIE2"                      : Gosub YRECDIE2
#      When "YRECDIE3"                      : Gosub YRECDIE3
#      When "YRECDIE4"                      : Gosub YRECDIE4
#      When "YRECDIE5"                      : Gosub YRECDIE5
#      When "YRECDIE6"                      : Gosub YRECDIE6
#      When "YRECDIE7"                      : Gosub YRECDIE7
#      When "YRECDIE8"                      : Gosub YRECDIE8
Endcase
Return

$YCPYPRO
    Case [L]ARULE #VALEUR
    When "CONTROL"   : Gosub YCPYPRO_CONTROL
    Endcase
Return

$YCPYREC
    Case [L]ARULE #VALEUR
    When "CONTROL"   : Gosub YCPYREC_CONTROL
    Endcase
Return

$YFCYPRO
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YFCYPRO_CONTROL
    Endcase
Return

$YACCPRO
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YACCPRO_CONTROL
    Endcase
Return

$YACCREC
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YACCREC_CONTROL
    Endcase
Return

$YFCYREC
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YFCYREC_CONTROL
    Endcase
Return

$YDEFFLG
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YDEFFLG_CONTROL
    Endcase
Return

$YPRODIE
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YPRODIE_CONTROL
    Endcase
Return

$YPRODIE1
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YPRODIE1_CONTROL
    Endcase
Return

$YPRODIE2
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YPRODIE2_CONTROL
    Endcase
Return

$YPRODIE3
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YPRODIE3_CONTROL
    Endcase
Return

$YPRODIE4
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YPRODIE4_CONTROL
    Endcase
Return

$YPRODIE5
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YPRODIE5_CONTROL
    Endcase
Return

$YPRODIE6
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YPRODIE6_CONTROL
    Endcase
Return

$YPRODIE7
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YPRODIE7_CONTROL
    Endcase
Return

$YPRODIE8
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YPRODIE8_CONTROL
    Endcase
Return

$YRECDIE
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YRECDIE_CONTROL
    Endcase
Return

$YRECDIE1
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YRECDIE1_CONTROL
    Endcase
Return

$YRECDIE2
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YRECDIE2_CONTROL
    Endcase
Return

$YRECDIE3
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YRECDIE3_CONTROL
    Endcase
Return

$YRECDIE4
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YRECDIE4_CONTROL
    Endcase
Return

$YRECDIE5
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YRECDIE5_CONTROL
    Endcase
Return

$YRECDIE6
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YRECDIE6_CONTROL
    Endcase
Return

$YRECDIE7
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YRECDIE7_CONTROL
    Endcase
Return

$YRECDIE8
    Case [L]ARULE #VALEUR
    When "PROPAGATE"   : Gosub YRECDIE8_CONTROL
    Endcase
Return

$YCPYPRO_CONTROL
  #Open table
  If !clalev ([F:CPY]) : Local File COMPANY [F:CPY] : Endif

  #Read record
  Read [F:CPY]CPY0  = this.YCPYPRO
  If fstat = 0
    If [F:CPY]YCPYACT = 1
#      Callmet this.ASETERROR("","This company is not active" , [V]CST_AERROR)
      [L]ASTATUS = fmet this.ASETERROR("","This company is not active", [V]CST_AERROR)
    Endif
  Endif

  If this.YCPYPRO = this.YCPYREC
#    Callmet this.ASETERROR("","Provider company can not be same as Recipient" , [V]CST_AERROR)
    [L]ASTATUS = fmet this.ASETERROR("","Provider company can not be same as Recipient", [V]CST_AERROR)
  Endif

Return

$YCPYREC_CONTROL
  #Open table
  If !clalev ([F:CPY]) : Local File COMPANY [F:CPY] : Endif

  #Read record
  Read [F:CPY]CPY0  = this.YCPYREC
  If fstat = 0
    If [F:CPY]YCPYACT = 1
#      Callmet this.ASETERROR("","This company is not active" , [V]CST_AERROR)
      [L]ASTATUS = fmet this.ASETERROR("","This company is not active", [V]CST_AERROR)
    Endif
  Endif

  If this.YCPYREC = this.YCPYPRO
#    Callmet this.ASETERROR("","Recipient company can not be same as Provider" , [V]CST_AERROR)
    [L]ASTATUS = fmet this.ASETERROR("","Recipient company can not be same as Provider", [V]CST_AERROR)
  Endif

Return

$YFCYPRO_CONTROL
  #Open table
  If !clalev ([F:FCY])   : Local File FACILITY [F:FCY]   : Endif
  If !clalev ([F:YGLED]) : Local File GLED     [F:YGLED] : Endif
  If !clalev ([F:YCPY])  : Local File COMPANY  [F:YCPY]  : Endif
  If !clalev ([F:YGACM]) : Local File GACM     [F:YGACM] : Endif

  #Read record
  Read [F:FCY]FCY0  = this.YFCYPRO
  If [F:FCY]FINFLG = 1
#      Callmet this.ASETERROR("","This is not a valid site" , [V]CST_AERROR)
      [L]ASTATUS = fmet this.ASETERROR("","This is not a valid site", [V]CST_AERROR)
  Endif

  Read [F:FCY]FCY1  = this.YCPYPRO ; this.YFCYPRO
  If fstat = 5
#      Callmet this.ASETERROR("","Site not linked to Company" , [V]CST_AERROR)
      [L]ASTATUS = fmet this.ASETERROR("","Site not linked to Company", [V]CST_AERROR)
  Endif

  If this.YFCYPRO = this.YFCYREC
#      Callmet this.ASETERROR("","Provider site cannot be the same as Recipient site" , [V]CST_AERROR)
      [L]ASTATUS = fmet this.ASETERROR("","Provider site cannot be the same as Recipient site", [V]CST_AERROR)
  Endif


  Read [F:YCPY]CPY0 = this.YCPYPRO
  If fstat = 0
    Read [F:YGACM]GCM0 = [F:YCPY]ACM
    If fstat = 0
      Read [F:YGLED]LED0 = [F:YGACM]LED
      this.YCOAPRO = [F:YGLED]COA
    Endif
  Endif


Return

$YACCPRO_CONTROL

  #Open table
  If !clalev ([F:YGAC])  : Local File GACCOUNT [F:YGAC]  : Endif
  If !clalev ([F:YCPY])  : Local File COMPANY  [F:YCPY]  : Endif
  If !clalev ([F:YGACM]) : Local File GACM     [F:YGACM] : Endif
  If !clalev ([F:YGLED]) : Local File GLED     [F:YGLED] : Endif

  Local Integer YCHK

  Read [F:YCPY]CPY0 = this.YCPYPRO
  If fstat = 0
    Read [F:YGACM]GCM0 = [F:YCPY]ACM
    If fstat = 0
      Case [F:YGACM]GENLEDTYP
      When 1  : Read [F:YGLED]LED0 = [F:YGACM]LED(0)
      When 2  : Read [F:YGLED]LED0 = [F:YGACM]LED(1)
      When 3  : Read [F:YGLED]LED0 = [F:YGACM]LED(2)
      When 4  : Read [F:YGLED]LED0 = [F:YGACM]LED(3)
      When 5  : Read [F:YGLED]LED0 = [F:YGACM]LED(4)
      When 6  : Read [F:YGLED]LED0 = [F:YGACM]LED(5)
      When 7  : Read [F:YGLED]LED0 = [F:YGACM]LED(6)
      When 8  : Read [F:YGLED]LED0 = [F:YGACM]LED(7)
      When 9  : Read [F:YGLED]LED0 = [F:YGACM]LED(8)
      When 10 : Read [F:YGLED]LED0 = [F:YGACM]LED(9)
      Endcase

      YCHK = 1

      If fstat = 0
          Read [F:YGAC]GAC0 = [F:YGLED]COA ; this.YACCPRO
          If fstat = 0
            For [F:YGAC]
              If [F:YGAC]ACC = this.YACCPRO
                YCHK = 2
                Break
              Endif
            Next
          Else
#            Callmet this.ASETERROR("","This is not a valid account" , [V]CST_AERROR)
            [L]ASTATUS = fmet this.ASETERROR("","This is not a valid account", [V]CST_AERROR)
          Endif

      If [F:YGAC]SAC = 2
        YCHK = 1
      Endif

      If YCHK = 1
#        Callmet this.ASETERROR("","This is not a valid account" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid account", [V]CST_AERROR)
      Else
      this.YPROVACCNAM = [F:YGAC]DES
      Endif

      Endif

    Endif
  Endif


Return

$YACCREC_CONTROL

  #Open table
  If !clalev ([F:YGAC])  : Local File GACCOUNT [F:YGAC]  : Endif
  If !clalev ([F:YCPY])  : Local File COMPANY  [F:YCPY]  : Endif
  If !clalev ([F:YGACM]) : Local File GACM     [F:YGACM] : Endif
  If !clalev ([F:YGLED]) : Local File GLED     [F:YGLED] : Endif

  Local Integer YCHK
#  Callmet this.ASETERROR("","test" , [V]CST_AERROR)
  Read [F:YCPY]CPY0 = this.YCPYREC

  If fstat = 0
    Read [F:YGACM]GCM0 = [F:YCPY]ACM
    If fstat = 0
      Case [F:YGACM]GENLEDTYP
      When 1  : Read [F:YGLED]LED0 = [F:YGACM]LED(0)
      When 2  : Read [F:YGLED]LED0 = [F:YGACM]LED(1)
      When 3  : Read [F:YGLED]LED0 = [F:YGACM]LED(2)
      When 4  : Read [F:YGLED]LED0 = [F:YGACM]LED(3)
      When 5  : Read [F:YGLED]LED0 = [F:YGACM]LED(4)
      When 6  : Read [F:YGLED]LED0 = [F:YGACM]LED(5)
      When 7  : Read [F:YGLED]LED0 = [F:YGACM]LED(6)
      When 8  : Read [F:YGLED]LED0 = [F:YGACM]LED(7)
      When 9  : Read [F:YGLED]LED0 = [F:YGACM]LED(8)
      When 10 : Read [F:YGLED]LED0 = [F:YGACM]LED(9)
      Endcase

      YCHK = 1

      If fstat = 0
          Read [F:YGAC]GAC0 = [F:YGLED]COA ; this.YACCREC
          If fstat = 0
            For [F:YGAC]
              If [F:YGAC]ACC = this.YACCREC
                YCHK = 2
                Break
              Endif
            Next
          Else
#            Callmet this.ASETERROR("","This is not a valid account" , [V]CST_AERROR)
            [L]ASTATUS = fmet this.ASETERROR("","This is not a valid account", [V]CST_AERROR)
          Endif

      If [F:YGAC]SAC = 2
        YCHK = 1
      Endif

      If YCHK = 1
#        Callmet this.ASETERROR("","This is not a valid account" , [V]CST_AERROR)
         [L]ASTATUS = fmet this.ASETERROR("","This is not a valid account", [V]CST_AERROR)
      Else
      this.YRECACCNAM = [F:YGAC]DES
#      this.YRECCHART  = [F:YGLED]COA
      Endif

      Endif

    Endif
  Endif


Return

$YFCYREC_CONTROL
  #Open table
  If !clalev ([F:FCY])   : Local File FACILITY [F:FCY] : Endif
  If !clalev ([F:YELA])  : Local File YENTLOAAGR     [F:YELA] : Endif
  If !clalev ([F:YGLED]) : Local File GLED     [F:YGLED] : Endif
  If !clalev ([F:YCPY])  : Local File COMPANY  [F:YCPY]  : Endif
  If !clalev ([F:YGACM]) : Local File GACM     [F:YGACM] : Endif

#  Filter [F:YELA] Where  [F:YELA]YFCYREC = this.YFCYREC
#  If [F:YELA]YENAFLG = 1  and [F:YELA]YDEFFLG = 1
#    this.YDEFFLG = 2
#  Endif

  If rowcount([F:YELA]) = 0
#    Callmet this.ASETERROR("","test" , [V]CST_AERROR)
    this.YDEFFLG = 2
  Endif


  #Read record
  Read [F:FCY]FCY0  = this.YFCYREC
  If [F:FCY]FINFLG = 1
#      Callmet this.ASETERROR("","This is not a valid site" , [V]CST_AERROR)
      [L]ASTATUS = fmet this.ASETERROR("","This is not a valid site", [V]CST_AERROR)
  Endif

  Read [F:FCY]FCY1  = this.YCPYREC ; this.YFCYREC
  If fstat = 5
#      Callmet this.ASETERROR("","Site not linked to Company" , [V]CST_AERROR)
      [L]ASTATUS = fmet this.ASETERROR("","Site not linked to Company", [V]CST_AERROR)
  Endif

  If this.YFCYREC = this.YFCYPRO
#      Callmet this.ASETERROR("","Recipient site cannot be the same as Provider site" , [V]CST_AERROR)
      [L]ASTATUS = fmet this.ASETERROR("","Recipient site cannot be the same as Provider site", [V]CST_AERROR)
  Endif

  Read [F:YCPY]CPY0 = this.YCPYREC
  If fstat = 0
    Read [F:YGACM]GCM0 = [F:YCPY]ACM
    If fstat = 0
      Read [F:YGLED]LED0 = [F:YGACM]LED
      this.YCOAREC = [F:YGLED]COA
    Endif
  Endif

Return

$YDEFFLG_CONTROL
  #Open table

  If !clalev ([F:YELA]) : Local File YENTLOAAGR     [F:YELA] : Endif

  Filter [F:YELA] Where [F:YELA]YFCYREC = this.YFCYREC
#  Read [F:YELA]YELA1 = this.YFCYREC
  For [F:YELA]
  If [F:YELA]YDEFFLG = 2
    this.YDEFFLG = 1
    Callmet this.ASETERROR("","Default agreement exists" , [V]CST_AERROR)
#    [L]ASTATUS = fmet this.ASETERROR("","Default agreement exists", [V]CST_AERROR)
  Endif
  Next
Return

$YPRODIE_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YPRODIETYP ; this.YPRODIE
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return

$YPRODIE1_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YPRODIETYP ; this.YPRODIE1
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return

$YPRODIE2_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YPRODIETYP ; this.YPRODIE2
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return

$YPRODIE3_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YPRODIETYP ; this.YPRODIE3
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return

$YPRODIE4_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YPRODIETYP ; this.YPRODIE4
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return

$YPRODIE5_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YPRODIETYP ; this.YPRODIE5
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return

$YPRODIE6_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YPRODIETYP ; this.YPRODIE6
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return

$YPRODIE7_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YPRODIETYP ; this.YPRODIE7
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return

$YPRODIE8_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YPRODIETYP ; this.YPRODIE8
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return


$YRECDIE_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YRECDIETYP ; this.YRECDIE
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return

$YRECDIE1_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YRECDIETYP ; this.YRECDIE1
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return


$YRECDIE2_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YRECDIETYP ; this.YRECDIE2
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return


$YRECDIE3_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YRECDIETYP ; this.YRECDIE3
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return


$YRECDIE4_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YRECDIETYP ; this.YRECDIE4
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return


$YRECDIE5_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YRECDIETYP ; this.YRECDIE5
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return


$YRECDIE6_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YRECDIETYP ; this.YRECDIE6
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return


$YRECDIE7_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YRECDIETYP ; this.YRECDIE7
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return

$YRECDIE8_CONTROL

  If !clalev ([F:YCCE]) : Local File CACCE     [F:YCCE] : Endif

  Read [F:YCCE]CCE0 = this.YRECDIETYP ; this.YRECDIE8
  If fstat = 0
      If [F:YCCE]ENAFLG <> 2
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif

      If [F:YCCE]VLYEND > gdat$(1,1,1754)
      If [F:YCCE]VLYEND < date$
#        Callmet this.ASETERROR("","This is not a valid Dimension Value" , [V]CST_AERROR)
        [L]ASTATUS = fmet this.ASETERROR("","This is not a valid Dimension Value", [V]CST_AERROR)
      Endif
      Endif

  Endif

Return



#**
#* Label for coding your methods
#* @param AMETHOD Local Char(20), contains the method code
#* @return ARET_VALUE (the type of the return value is declared in the method)
#*!
$METHODS
Case [L]AMETHOD
Endcase

#  Case [L]CURPTH
#      When ""
#     Case [L]ACTION
#      When "AINSERT_BEFORE"          : Gosub AINSERT_BEFORE
#     Endcase
#  Endcase

Return


#$AINSERT_BEFORE
#
#
#
#Return


#**
#* Label for coding your operations
#* @param AOPERATION Local Char(20), contains the operation code
#* @return ARET_VALUE (the type of the return value is declared in the method)
#*!
$OPERATIONS
#Case [L]AOPERATION
#Endcase
Return

