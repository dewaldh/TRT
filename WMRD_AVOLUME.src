#<AdxTL>@(#)0.0.0.0 $Revision$Class Volume
# Supervisor
## CRUD-CLASSE ## AVOLUME
# 2018-08-27 13:04:13 220


############################################################################################
### Subprog ADELETE
############################################################################################
Subprog ADELETE(AVOLUME,ASTATUS)
Variable Instance AVOLUME Using R_AVOLUME
Variable Integer ASTATUS

If AVOLUME = null : End : Endif

Gosub AVARIABLES From WMR00AVOLUME
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

Local Instance ALNKDELTAB Using C_ALNKDELTAB

If fmet AVOLUME.ACTX.AGETAFCRIGHT(AVOLUME,"GESAVL",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto ADELETE_END : Endif
If fmet AVOLUME.ACTX.AGETAFCRIGHTD(AVOLUME,"GESAVL",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto ADELETE_END
Endif
If fmet AVOLUME.ACTX.AGETACSRIGHTM(AVOLUME,[L]A_STRACC,[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR
 Goto ADELETE_END
  Endif
  
  Gosub AREPCONTROL_ADELETE
  If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif
  
If !adxlog
 Gosub ADELETE_TR_AVOLUME
Else
 Gosub ADELETE_AVOLUME
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_END : Return : Endif

$ADELETE_END
End

#-----------------------------------------------------#
$AREPCONTROL_ADELETE
AVOLUME.ASTALIN = [V]CST_ADEL
AVOLUME.AVOLUME.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub ADELETE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$ADELETE_CONTROL
Gosub _ADELETE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Verification delete
[L]ASTATUS = max([L]ASTATUS,func ASYRSUB.VERIFY_INSTANCE(AVOLUME.AVOLUME,ALNKDELTAB))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _ADELETE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_BEFORE
If AVOLUME.AVOLUME.ASTALIN = [V]CST_ANEWDEL : Return : Endif
AVOLUME.AVOLUME.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.AVOLUME.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.AVOLUME.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_TR_AVOLUME
Trbegin [F:AVL]
 Gosub ADELETE_AVOLUME
 If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_ADELETE_AFTER
Return

#-----------------------------------------------------#
$ADELETE_AVOLUME
[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.ACTION("ADELETE_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.AVOLUME._ADELETE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AVOLUME.ACTION("ADELETE_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_ABORT
Rollback
$_ADELETE_ABORT
If AVOLUME.snapshotEnabled=1
 [L]A_RETIK = AVOLUME.revertUpdTick
Endif
[L]ASTATUS = max(fmet AVOLUME.ACTION("ADELETE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



