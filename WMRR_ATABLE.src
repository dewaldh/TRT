#<AdxTL>@(#)0.0.0.0 $Revision$Class Data dictionary
# Supervisor
## CRUD-CLASSE ## ATABLE
# 2018-08-27 13:03:14 979


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ATABLE [ATB_]

If !SILENCE : Call TRACE("2 --> Local Instance R_ATABLE") From ASYRCOM : Endif
Local Instance ATABLE Using R_ATABLE

If !SILENCE : Call TRACE("3 --> New Instance R_ATABLE") From ASYRCOM : Endif
ATABLE = NewInstance R_ATABLE AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ATB_]CODFIC First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ATABLE") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.AREAD([ATB_]CODFIC))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ATABLE.ATB.CODFIC ="-num$(ATABLE.ATB.CODFIC)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ATABLE.ATB.AKEYS)
  Call TRACE("-"-num$(I)-":"-ATABLE.ATB.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ATB_]
FreeGroup ATABLE
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ATABLE,ACLE,ASTATUS,_ETAG)
Variable Instance ATABLE Using R_ATABLE
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CODFIC(12)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODFIC = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File ATABLE [ATB]
Default File [F:ATB]
Read [F:ATB]CODFIC = [L]_CODFIC
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ATB]UPDTICK)>0
 [L]_ETAG = num$([F:ATB]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ATABLE,ACLE,ASTATUS)
Variable Instance ATABLE Using R_ATABLE
Value Char ACLE
Variable Integer ASTATUS
Local Char _CODFIC(12)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODFIC = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ATABLE.AREAD([L]_CODFIC))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ATABLE,_CODFIC,ASTATUS)
Variable Instance ATABLE Using R_ATABLE
Value Char _CODFIC
Variable Integer ASTATUS

If ATABLE = null : End : Endif

Gosub AVARIABLES From WMR00ATABLE
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ATABLE.APARENT=null
 [L]A_I = ATABLE.freeSnapshot
 ATABLE.snapshotEnabled = 0
 ATABLE.setAccessorEnabled = 0
Endif

If fmet ATABLE.ACTX.AGETAFCRIGHT(ATABLE,"GESATB",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:ATB]
Read [F:ATB]CODFIC = [L]_CODFIC
If fstat
[L]A_ERROR = [L]_CODFIC
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ATABLE,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet ATABLE.ACTX.AGETAFCRIGHTR(ATABLE,"GESATB",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet ATABLE.ACTX.ASTACRITROLE(ATABLE,[L]_CODFIC
& ,"ATB","ATB",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

ATABLE.ATB.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATB.AREAD([L]_CODFIC))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ATABLE.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ATABLE._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ATABLE.APARENT=null
 ATABLE.snapshotEnabled = 1
 ATABLE.setAccessorEnabled = 1
Endif
LogicClose File [ATB] ,[ATZ] ,[ATI] ,[ATA] ,[AMP]
End



