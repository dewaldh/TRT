#<AdxTL>@(#)0.0.0.0 $Revision$Class Payment balance decl details
# Supervisor
## CRUD-CLASSE ## PBDGEND
# 2018-08-27 13:21:21 249


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(PBDGEND,ASTATUS)
Variable Instance PBDGEND Using R_PBDGEND
Variable Integer ASTATUS

If PBDGEND = null : End : Endif

Gosub AVARIABLES From WMR00PBDGEND
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

Gosub AREPCONTROL_AINSERT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_PBDGEND
Else
 Gosub AINSERT_PBDGEND
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = PBDGEND.freeSnapshot
PBDGEND.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
PBDGEND.ASTALIN = [V]CST_ANEW
PBDGEND.PBDGEND.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet PBDGEND.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PBDGEND.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet PBDGEND._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet PBDGEND._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet PBDGEND._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If PBDGEND.PBDGEND.ASTALIN = [V]CST_ANEWDEL : Return : Endif
PBDGEND.PBDGEND.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet PBDGEND.PBDGEND.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet PBDGEND.PBDGEND.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_PBDGEND
Trbegin [F:PBDGEND]
 Gosub AINSERT_PBDGEND
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(PBDGEND.PBDGEND.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 PBDGEND.PBDGEND.ASTALIN = [V]CST_ALL
Endif
Return

#-----------------------------------------------------#
$AINSERT_PBDGEND
[L]ASTATUS = max([L]ASTATUS,fmet PBDGEND.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PBDGEND.PBDGEND._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PBDGEND.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If PBDGEND.snapshotEnabled=1
 [L]A_RETIK = PBDGEND.revertUpdTick
Endif
[L]ASTATUS = max(fmet PBDGEND.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



