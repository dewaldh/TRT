#<AdxTL>@(#)0.0.0.0 $Revision$ 
######################################################################################################################
# Script            : SUBYLDP                                                                                        #
# Creation date     : 28/08/2018                                                                                     #
# Version           : 1.0.0                                                                                          #
# Authors (Company) : MB (Leverage)                                                                                  #
# Module            : Land Development                                                                               #
# -------------------------------------------------------------------------------------------------------------------#
# Epic              : https://jira.leveragetech.com.au/browse/DFCX1-79                                               #
# Description       : DFCX1-79 Land Development -  Land Purchase                                                     #
#--------------------------------------------------------------------------------------------------------------------#
# Evolutions        :                                                                                                #
######################################################################################################################

$ACTION
Case ACTION
  When "OUVRE"        : Gosub OUVRE
  When "FERME"        : Gosub FERME
  When "SETBOUT"      : Gosub SETBOUT
  When "RAZCRE"       : Gosub RAZCRE
  When "LIENS"        : Gosub LIENS
  When "VERIF_CRE"    : Gosub VERIF_CRE
  When "CREATION"     : Gosub CREATION
  When "APRES_CRE"    : Gosub APRES_CRE
  When "VERIF_MOD"    : Gosub VERIF_MOD
  When "MODIF"        : Gosub MODIF
  When "APRES_MOD"    : Gosub APRES_MOD
  When "RAZDUP"       : Gosub RAZDUP
  When "AV_ANNULE"    : Gosub AV_ANNULE
  When "ANNULE"       : Gosub ANNULE
  When Default
Endcase



Return

#------------------------------------------------------------------------------------#
#Open screen
#------------------------------------------------------------------------------------#
$OUVRE
#disable the regular Classic CUD operations
ANOWRITE = 1

#nstance for your class
Global Instance YLNDPUR_INSTANCE Using C_YLNDPUR

Return

#------------------------------------------------------------------------------------#
#Close screen
#------------------------------------------------------------------------------------#
$FERME
#When you are leaving the transaction, you have to free the instance.
If (YLNDPUR_INSTANCE <> null) : FreeGroup YLNDPUR_INSTANCE : Endif
Kill YLNDPUR_INSTANCE

Return


#------------------------------------------------------------------------------------#
#Setup screen
#------------------------------------------------------------------------------------#
$SETBOUT

  If GREP='C' or GREP='D'  :     Call VIREBOUT(CHAINE,"1") From GOBJET  :   Endif

  # Activate Create Developer/PM PJM button if the field is deactive
  If [M:YLDP1]YPJMFLG = 2  :
    Call VIREBOUT(CHAINE,"1") From GOBJET
    Diszo [M:YLDP1]YLNDOWN
  Endif

Return

#------------------------------------------------------------------------------------#
#Before Create
#------------------------------------------------------------------------------------#
$RAZCRE

Local Integer MY_STATUS

If (YLNDPUR_INSTANCE <> null) : FreeGroup YLNDPUR_INSTANCE : Endif
YLNDPUR_INSTANCE = NewInstance C_YLNDPUR AllocGroup null

#Then you have to initialize the class properties by calling the AINIT method and/or setting properties manually
[L]MY_STATUS = fmet YLNDPUR_INSTANCE.AINIT()
If ([L]MY_STATUS >= [V]CST_AERROR)
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YLNDPUR_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

#To finish you have to refresh the UI to display the values of initialized properties.
#Because it is not possible to directly transfer class property values into screen field values, you may use the file [F] as interface.
#Complete the process for properties and fields with non matching name

SetInstance [F:YLDP] With YLNDPUR_INSTANCE
[M:YLDP]  = [F:YLDP]
[M:YLDP1] = [F:YLDP]

#[M:YEST] = YEST_INSTANCE.PROPERTY

Affzo [M:YLDP]1-99
Affzo [M:YLDP1]1-99


Return

#------------------------------------------------------------------------------------#
#Read record
#------------------------------------------------------------------------------------#
$LIENS

If (YLNDPUR_INSTANCE <> null) : FreeGroup YLNDPUR_INSTANCE : Endif
YLNDPUR_INSTANCE = NewInstance C_YLNDPUR AllocGroup null
Local Integer MY_STATUS
[L]MY_STATUS = fmet YLNDPUR_INSTANCE.AREAD([M:YLDP]YLNDPURID)
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YLNDPUR_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif
Read [F:YLDP]YLDP0 = [M:YLDP]YLNDPURID
[M:YLDP1] = [F:YLDP]


#------------------------------------------------------------------------------------#
# Allocation

  Filter [F:YLDM] Where YLNDPURID = [M:YLDP]YLNDPURID
  nolign = 0
  For [F:YLDM]
    nolign += 1
    [M:YLDP2] = [F:YLDM]
  Next
  [M:YLDP2]NBLIG = nolign

  Filter [F:YLDS] Where YLNDPURID = [M:YLDP]YLNDPURID
  nolign = 0
  For [F:YLDS]
    nolign += 1
    [M:YLDP2] = [F:YLDS]
  Next
  [M:YLDP2]NBLIG1 = nolign

  Affzo [M:YLDP2]
#------------------------------------------------------------------------------------#

#------------------------------------------------------------------------------------#
#Upload Related tab
nolign = 1
For [F:YRMA]YRMA0 Where [F:YRMA]YGUID = [F:YLDP]YGUID
  [M:YLDP3] = [F:YRMA]
  nolign += 1
Next
[M:YLDP3]NBLIG = nolign - 1
#------------------------------------------------------------------------------------#

Return

#------------------------------------------------------------------------------------#
#Create record
#------------------------------------------------------------------------------------#
$CREATION
Local Integer MY_STATUS

#YOU CAN USE THE INSTRUCTION SetInstance WHICH WILL SET PROPERTIE's values from field'S VALUES
#For PROPERTIE's names that are identical to a field'S NAME OF THE [F] File.
SetInstance YLNDPUR_INSTANCE With [F:YLDP]

#SET NEW GUID VALUE FOR NEW RECORD THAT IS CREATED
YLNDPUR_INSTANCE.YGUID   = num$(getUuid)

YLNDPUR_INSTANCE.YLNDPURID = [M:YLDP]YLNDPURID
If [M:YLDP]YLNDPURID = "" and SEQCODE <> ""
  YLNDPUR_INSTANCE.YLNDPURID = SEQCODE
Endif

# create record in YGUID table for Code in misc. table 6012
If func AFNC.ACTIV("YOBJ") = 1
  Call SAVE_GUID("006",YLNDPUR_INSTANCE.YLNDPURID,YLNDPUR_INSTANCE.YGUID) From SPEYGUID
Endif

# Related tab (Creation)
Local Integer I
For I=1 To maxtab(YLNDPUR_INSTANCE.YRMA)
  If (fmet YLNDPUR_INSTANCE.ADELLINE("YRMA", YLNDPUR_INSTANCE.YRMA(I).AORDER) <> [V]CST_AOK)
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YLNDPUR_INSTANCE)
    GOK = 0 :       GERR = 1
    Return
  Endif
Next

Local Integer I, INDEX
For I = 0 To [M:YLDP3]NBLIG - 1
  INDEX = fmet YLNDPUR_INSTANCE.ADDLINE("YRMA", [V]CST_ALASTPOS)
  If (INDEX = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YLNDPUR_INSTANCE)
    GOK = 0 :       GERR = 1
    Return
  Endif

  nolign = I + 1
  # Need to use [F] because it is impossible to set a class from [M]
  [F:YRMA] = [M:YLDP3]
  [F:YRMA]YGUID = YLNDPUR_INSTANCE.YGUID
  [F:YRMA]YLIGID = num$(nolign)

  # Use the SetInstance
  SetInstance YLNDPUR_INSTANCE.YRMA(INDEX) With [F:YRMA]
Next
If (GERR = 1) : Return : Endif
# Related tab (Creation)

[L]MY_STATUS = fmet YLNDPUR_INSTANCE.AINSERT()
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YLNDPUR_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

# Allocation tab
Gosub ALLOCATION_CRE


SetInstance [F:YLDP] With YLNDPUR_INSTANCE
Affzo [M:YLDP]1-99
Affzo [M:YLDP1]1-99
Affzo [M:YLDP2]1-99

Return

#------------------------------------------------------------------------------------#
# Update allocation tab
#------------------------------------------------------------------------------------#
$ALLOCATION_CRE

For nolign=1 To [M:YLDP2]NBLIG1
  [F:YLDS] = [M:YLDP2]
  [F:YLDS]YNBR = nolign
  [F:YLDS]YLNDPURID = [M:YLDP]YLNDPURID
  Write [YLDS]
  If fstat
    GOK = 0 : Call FSTA("YLDS") From GLOCK : Break
  Endif
Next nolign

For nolign=1 To [M:YLDP2]NBLIG
  [F:YLDM] = [M:YLDP2]
  [F:YLDM]YLINE = nolign
  [F:YLDM]YLNDPURID = [M:YLDP]YLNDPURID
  Write [YLDM]
  If fstat
    GOK = 0 : Call FSTA("YLDM") From GLOCK : Break
  Endif
Next nolign

If GOK<1 : Return : Endif

Affzo [M:YLDP2]NBLIG, NBLIG1

Return

#------------------------------------------------------------------------------------#
#After create record
#------------------------------------------------------------------------------------#
$APRES_CRE

Gosub RELIT From GOBJSUB

Return

#------------------------------------------------------------------------------------#
#Modify record
#------------------------------------------------------------------------------------#
$MODIF
Local Integer MY_STATUS

Read [F:YLDP]YLDP0 = [M:YLDP]YLNDPURID          # Without this It does not allow to delete last raw of Related

SetInstance YLNDPUR_INSTANCE With [F:YLDP]

# Related tab (Modify)
Local Integer I, INDEX
For I = 0 To [M:YLDP3]NBLIG - 1
  nolign = I + 1
  Raz [F:YRMA]

  # Retrieve the element using the screen's AUUID. If AUUID is blank, then its a new row
  INDEX=0
  INDEX = fmet YLNDPUR_INSTANCE.ADDLINE("YRMA", [V]CST_ALASTPOS)
  If (INDEX = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YLNDPUR_INSTANCE)
    GOK = 0 :      GERR = 1
    Break
  Endif

  # Need to use [F] because it's not possible to set a class from [M]
  [F:YRMA] = [M:YLDP3]
  [F:YRMA]YGUID = YLNDPUR_INSTANCE.YGUID
  [F:YRMA]YLIGID = num$(nolign)


  # Use the SetInstance
  SetInstance YLNDPUR_INSTANCE.YRMA(INDEX) With [F:YRMA]
Next
If (GERR = 1) : Return : Endif

# Now, all elements that don't have the status Updated or Created must be deleted, because it means they don't match with lines in the array
For I = 1 To maxtab(YLNDPUR_INSTANCE.YRMA)
  If YLNDPUR_INSTANCE.YRMA(I) <> null and find(YLNDPUR_INSTANCE.YRMA(I).ASTALIN, [V]CST_ANEW, [V]CST_AUPD) = 0
    If (fmet YLNDPUR_INSTANCE.ADELLINE("YRMA", YLNDPUR_INSTANCE.YRMA(I).AORDER) <> [V]CST_AOK)
      # Error management
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YLNDPUR_INSTANCE)
      GOK = 0
      GERR = 1
      Return
    Endif
  Endif
Next
If (GERR = 1) : Return : Endif
# Related tab (Modify)

[L]MY_STATUS = fmet YLNDPUR_INSTANCE.AUPDATE()
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YLNDPUR_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif


#------------------------------------------------------------------------------------#
# Allocation tab

  Delete [F:YLDS] Where YLNDPURID=[M:YLDP]YLNDPURID
  Delete [F:YLDM] Where YLNDPURID=[M:YLDP]YLNDPURID
  If fstat=1
   GOK = -1 : GLOCK = "$ANAVFIL"-[M:YLDP]YLNDPURID : Return
  Endif
  Gosub ALLOCATION_CRE

#------------------------------------------------------------------------------------#

Return

#------------------------------------------------------------------------------------#
#AFTER UPDATE
#------------------------------------------------------------------------------------#
$APRES_MOD

Gosub RELIT From GOBJSUB

Return

#------------------------------------------------------------------------------------#
#This action is called when a field of the primary key is changed
#------------------------------------------------------------------------------------#
$RAZDUP
Local Integer MY_STATUS

If (YLNDPUR_INSTANCE <> null) : FreeGroup YLNDPUR_INSTANCE : Endif
YLNDPUR_INSTANCE = NewInstance C_YLNDPUR AllocGroup null

[L]MY_STATUS = fmet YLNDPUR_INSTANCE.AINIT()
If ([L]MY_STATUS >= [V]CST_AERROR)
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YLNDPUR_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

Return

#------------------------------------------------------------------------------------#
#Begin delete record
#------------------------------------------------------------------------------------#
$AV_ANNULE
  Local Integer ANOWRITE
  ANOWRITE = 1
Return

#------------------------------------------------------------------------------------#
#Delete record
#------------------------------------------------------------------------------------#
$ANNULE

Local Integer MY_STATUS
[L]MY_STATUS = fmet YLNDPUR_INSTANCE.ADELETE()
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YLNDPUR_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

#------------------------------------------------------------------------------------#
# Allocation tab

  Delete [F:YLDS] Where YLNDPURID=[M:YLDP]YLNDPURID
  Delete [F:YLDM] Where YLNDPURID=[M:YLDP]YLNDPURID
  If fstat=1
   GOK = -1 : GLOCK = "$ANAVFIL"-[M:YLDP]YLNDPURID : Return
  Endif

#------------------------------------------------------------------------------------#

Return

#------------------------------------------------------------------------------------#
#Handle Classic Errors from Class
#------------------------------------------------------------------------------------#
Subprog RECOVERS_ERROR_IN_CLASSIC(YLNDPUR_INSTANCE)

  Variable Instance YLNDPUR_INSTANCE Using C_YLNDPUR

  Local Integer NI
  Local Char SMESSAGE(type(GMESSAGE)-10)
  Local Integer MY_STATUS
  Local Integer IMESSAGE

  IMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_UPPER_MESSAGE(YLNDPUR_INSTANCE, SMESSAGE)
  If IMESSAGE = [V]CST_AWARNING Then
    GMESSAGE = SMESSAGE
    GERR = 2
  Elsif IMESSAGE = [V]CST_AERROR or IMESSAGE = [V]CST_AFATAL Then
    GMESSAGE = SMESSAGE
    GOK = 0
    GERR = 1
  Endif

  [L]MY_STATUS = [V]CST_AOK
End


#------------------------------------------------------------------------------------#
#Verificatio of create record
#------------------------------------------------------------------------------------#
$VERIF_CRE

#YLDP Sequence Number
  Local Char SEQCODE
  Local Integer STAT

  Call NUMERO("YLDP","",date$,"",SEQCODE,STAT) From SUBANM
  SEQCODE = vireblc(left$(SEQCODE,8),4)       #   First 8 digits and remove space

  [M:YLDP]YLNDPURID = SEQCODE
  [M:YLDP]YJOBACTFLG = 2
  # DFCX1-169 MZ: Creation Rules
  Call VERIF_RULES()

Return


#------------------------------------------------------------------------------------#
#Verificatio of modified record
#------------------------------------------------------------------------------------#
$VERIF_MOD


  # DFCX1-169 MZ: Creation Rules
  Call VERIF_RULES()

Return


#------------------------------------------------------------------------------------#
#
#------------------------------------------------------------------------------------#
Subprog VERIF_RULES()

# DFCX1-169 MZ: Creation Rules
If func AFNC.ACTIV("YLAND")

  If !clalev([F:YEST2])     : Local File  YESTA [YEST2]    : Endif

  # If Job Code is empty and the Job Active flag is set to true, create a dimension value in the Dimension Type

  Local Char YDIE
  YDIE = func AFNC.PARAM ("YDEVDTY","")   # Read dimension type from general parameter
  If !clalev([F:YCCE])      :   Local File CACCE [YCCE]     :   Endif
  If !clalev([F:YATX])      :   Local File ATEXTRA [YATX]   :  Endif

  Filter [F:YCCE] Where DIE = YDIE
  Filter [F:YATX] Where CODFIC = 'CACCE'

  If YDIE <> ""
    If [M:YLDP]YJOBCOD = ""

      If [M:YLDP]YJOBACTFLG = 2
        Local Char YNAMEFILE(255)
        YNAMEFILE = "YLAND_YCCELAND_" + [M:YLDP]YLNDPURID
        Openo filpath('TMP',YNAMEFILE,"CSV") Using [F_YCCE]
        adxifs=','
        adxirs= chr$(13)+chr$(10)

        Read [F:YEST2]YEST0 = [M:YLDP1]YESTID

        Wrseq YDIE , [M:YLDP]YLNDPURID , [M:YLDP]YDES , [M:YLDP]YDES , [F:YEST2]YESTCPYGRP , [M:YLDP]YJOBACTFLG , "0,2,0" Using [F_YCCE]
        Openo Using [F_YCCE]

        Call OUVRE_TRACE("Job code Dimension import through Development LOT") From LECFIC  # Open log file
        Call IMPORTSIL("YCCELAND", filpath('TMP',YNAMEFILE,"CSV")) From GIMPOBJ     # Import

        Read [F:YCCE]CCE0 = YDIE;[M:YLDP]YLNDPURID
        If !fstat
          [M:YLDP]YJOBCOD = [M:YLDP]YLNDPURID
        Else
          Call RECOVERS_ERROR_IN_CLASSIC(YLNDPUR_INSTANCE)
          If GMESSAGE = AVOID.ACHAR Then
            GMESSAGE = mess(11,6255,1)       # Job code has not created successfully. Please create that manually and assign
            GERR = 2
          Endif
        Endif
      Endif   # [M:YLDP]YJOBACTFLG = 2

    # If the Job Code is populated,
    # ensure the active flage of dimension value is same as job active flag and the Description is the same as the Estate Description.
    Else  # [M:YLDP]YJOBCOD <> ""
      Read [F:YCCE]CCE0 = YDIE;[M:YLDP]YJOBCOD
      Read [F:YATX]AXX0 = 'CACCE';'DESTRA';GLANGUE;YDIE;[M:YLDP]YJOBCOD

      If !fstat
        If [F:YCCE]ENAFLG <> [M:YLDP]YJOBACTFLG
          Trbegin [F:YCCE]
          [F:YCCE]ENAFLG = [M:YLDP]YJOBACTFLG
          Rewrite [F:YCCE]
          If !fstat
            Commit
            Call RECOVERS_ERROR_IN_CLASSIC(YLNDPUR_INSTANCE)
            If GMESSAGE = AVOID.ACHAR Then
              GMESSAGE = mess(6,6255,1)       # Activate flag of Job code Dimesnion was different System updated dimension
              GERR = 2
            Endif
          Else
            Rollback
            Call RECOVERS_ERROR_IN_CLASSIC(YLNDPUR_INSTANCE)
            If GMESSAGE = AVOID.ACHAR Then
              GMESSAGE = mess(7,6255,1)       # Activate flag of Job code Dimesnion was different System could not update that
              GERR = 2
            Endif
          Endif
        Endif # [F:YCCE]ENAFLG <> [M:YLDP]YJOBACTFLG

        If [F:YCCE]DES <> [M:YLDP]YDES
          Trbegin [F:YCCE]
          [F:YCCE]DES = [M:YLDP]YDES
          [F:YATX]TEXTE = [M:YLDP]YDES
          Rewrite [F:YCCE]
          Rewrite [F:YATX]
          If !fstat
            Commit
            Call RECOVERS_ERROR_IN_CLASSIC(YLNDPUR_INSTANCE)
            If GMESSAGE = AVOID.ACHAR Then
              GMESSAGE = mess(8,6255,1)       # Description of Job code Dimesnion was different and system updated dimension.
              GERR = 2
            Endif
          Else
            Rollback
            Call RECOVERS_ERROR_IN_CLASSIC(YLNDPUR_INSTANCE)
            If GMESSAGE = AVOID.ACHAR Then
              GMESSAGE = mess(9,6255,1)       # Description of Job code Dimesnion was different and system updated dimension.
              GERR = 2
            Endif
          Endif
        Endif   # [F:YCCE]DES <> [M:YLDP]YLDPCPYGRP

      Else
        Call RECOVERS_ERROR_IN_CLASSIC(YLNDPUR_INSTANCE)
        If GMESSAGE = AVOID.ACHAR Then
          GMESSAGE = mess(10,6255,1)       # Job code does not exists on Dimenstion list.
          GERR = 1
        Endif
      Endif #   Read [F:YCCE]CCE0 = YDIE;[M:YLDP]YJOBCOD

    Endif # [M:YLDP]YJOBCOD = ""

  Else  # YDIE = ""
    Call RECOVERS_ERROR_IN_CLASSIC(YLNDPUR_INSTANCE)
    If GMESSAGE = AVOID.ACHAR Then
      GMESSAGE = mess(2,6255,1)       # Dimension type has not configured on General parameter.
      GERR = 1
    Endif
  Endif # YDIE <> ""

  # Add Land owner into Estate and group company
  If !clalev([F:YFGR])        :   Local File FACGROUP [YFGR]  : Endif

  Look [F:YFGR]FGR0 = [F:YEST2]YESTCPYGRP;[M:YLDP1]YLNDOWN
  If fstat and [F:YEST2]YESTCPYGRP <> "" and [M:YLDP1]YLNDOWN <> ""   # Record does not exist and Group company and Site is exist
    Trbegin [F:YFGR]
      [F:YFGR]CPY = [F:YEST2]YESTCPYGRP
      [F:YFGR]FCY = [M:YLDP1]YLNDOWN
    Write [F:YFGR]
    If !fstat
      Commit
    Else
      Rollback
      Call RECOVERS_ERROR_IN_CLASSIC(YEST_INSTANCE)
      If GMESSAGE = AVOID.ACHAR Then
        GMESSAGE = mess(19,6255,1)       # System could not link Land owner to Estate group company. Please maintain that manually
        GERR = 2
      Endif
    Endif

  Endif     # fstat and [F:YEST2]YESTCPYGRP <> "" and [M:YLDP1]YLNDOWN <> ""

Endif
# DFCX1-169 MZ: Creation rules

End

