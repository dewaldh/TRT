#<AdxTL>@(#)0.0.0.0 $Revision$
#<AdxTL>@(#)0.0.0.0 $Revision$
###################################################################################################
# Classe PIMPL
###################################################################################################
# PROGS
###################################################################################################
Funprog GET_PIMDESAXX(CTX, PIMNUM)
Variable Instance CTX Using OBJECT
Value Char PIMNUM

Local Char SARENDRE(GLONDCO)

  Raz SARENDRE
  Call LECTEXTRA_SYR(CTX, AVOID.ACHAR, SARENDRE, "PIMPL", "PIMDESAXX", PIMNUM, AVOID.ACHAR) From ATEXTRA
End SARENDRE

###################################################################################################
Funprog GET_PIMNUM_PJM(ACTX, SOPPNUM)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Value Char SOPPNUM

Local Char SARENDRE(250)

  SARENDRE = SOPPNUM
End SARENDRE

###################################################################################################
Funprog GET_PIMNUM_TASK(ACTX, SOPPNUM, STASCOD)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Value Char SOPPNUM
Value Char STASCOD

Local Char SARENDRE(250)
Local Char SSEPARCODE(1)

  SSEPARCODE = fmet ACTX.APARAM.AGETVALCHAR([V]CST_ALEVFOLD, ACTX.AFOLDER, "SEPARCODE")
  SARENDRE = SOPPNUM + SSEPARCODE + STASCOD
End SARENDRE

###################################################################################################
Funprog GET_PIMNUM_BUDGET(ACTX, SOPPNUM, SPBUCOD)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Value Char SOPPNUM
Value Char SPBUCOD

Local Char SARENDRE(250)
Local Char SSEPARCODE(1)

  SSEPARCODE = fmet ACTX.APARAM.AGETVALCHAR([V]CST_ALEVFOLD, ACTX.AFOLDER, "SEPARCODE")
  #DFCX1-171 Project Budget Code Seperators
  #Standard Line below commented to prevent SSEPARCODE from been used twice and address
  #SARENDRE = SOPPNUM + SSEPARCODE + SSEPARCODE + SPBUCOD
  SARENDRE = SOPPNUM + SSEPARCODE + SPBUCOD
End SARENDRE

###################################################################################################
Funprog PJM_KEY_SPLIT(ACTX, INPKEY, PROJECT, BUDGET, TASK)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Value Char INPKEY ()
Variable Char PROJECT ()
Variable Char BUDGET ()
Variable Char TASK ()

Local Char SSEPARCODE(1)
Local Integer NI
Local Integer NE

  SSEPARCODE = fmet ACTX.APARAM.AGETVALCHAR([V]CST_ALEVFOLD, ACTX.AFOLDER, "SEPARCODE")
  Raz PROJECT
  Raz BUDGET
  Raz TASK
  If instr(1,INPKEY,SSEPARCODE) = 0 Then
    PROJECT = INPKEY
  Else
    NI = instr(1,INPKEY,SSEPARCODE)
    PROJECT = left$(INPKEY,instr(1,INPKEY,SSEPARCODE)-1)
    NE = instr(NI+1,INPKEY,SSEPARCODE)
    If !NE
      TASK = right$(INPKEY,NI+1)
    Else
      TASK = seg$(INPKEY,NI+1,NE-1)
      NI = instr(NE+1,INPKEY,SSEPARCODE)
      BUDGET = seg$(INPKEY,NE+1,len(INPKEY))
    Endif
  Endif
End [V]CST_AOK

###################################################################################################
Funprog PJM_KEY_SPLIT_OPPNUM(ACTX, INPKEY)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Value Char INPKEY ()

Local Char BUDGET(GLONPBU)
Local Char TASK(GLONTAC)
Local Char PROJECT(GLONOPP)
Local Integer IRET

  Raz PROJECT
  If INPKEY <> AVOID.ACHAR Then
    IRET = func PJM_KEY_SPLIT(ACTX, INPKEY, PROJECT, BUDGET, TASK)
  Endif
End PROJECT

###################################################################################################
Funprog PJM_KEY_SPLIT_TASCOD(ACTX, INPKEY)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Value Char INPKEY ()

Local Char BUDGET(GLONPBU)
Local Char TASK(GLONTAC)
Local Char PROJECT(GLONOPP)
Local Integer IRET

  Raz PROJECT
  If INPKEY <> AVOID.ACHAR Then
    IRET = func PJM_KEY_SPLIT(ACTX, INPKEY, PROJECT, BUDGET, TASK)
  Endif
End TASK

###################################################################################################
Funprog PJM_KEY_SPLIT_PBUCOD(ACTX, INPKEY)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Value Char INPKEY ()

Local Char BUDGET(GLONPBU)
Local Char TASK(GLONTAC)
Local Char PROJECT(GLONOPP)
Local Integer IRET

  Raz PROJECT
  If INPKEY <> AVOID.ACHAR Then
    IRET = func PJM_KEY_SPLIT(ACTX, INPKEY, PROJECT, BUDGET, TASK)
  Endif
End BUDGET

###################################################################################################
Funprog GET_PIMSTA_VALUE(ACTX, PROJECT, BUDGET, TASK, SMESSAGE)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Variable Char PROJECT
Variable Char BUDGET
Variable Char TASK
Variable Char SMESSAGE

Local Integer IARENDRE
Local Char SPIMPL(GLONPIM)

  IARENDRE = 0
  Raz SMESSAGE
  If (BUDGET <> AVOID.ACHAR and TASK <> AVOID.ACHAR) or PROJECT = AVOID.ACHAR Then
    SMESSAGE = mess(9,135,1)
  Else
    # -------------------------
    Local File PIMPL [PIM]
    # -------------------------
    If BUDGET <> AVOID.ACHAR Then
      SPIMPL = func GET_PIMNUM_BUDGET(ACTX, PROJECT, BUDGET)
    Elsif TASK <> AVOID.ACHAR Then
      SPIMPL = func GET_PIMNUM_TASK(ACTX, PROJECT, TASK)
    Else
      SPIMPL = func GET_PIMNUM_PJM(ACTX, PROJECT)
    Endif
    # -------------------------
    Read [PIM]PIM0=SPIMPL
    If fstat Then
      SMESSAGE = mess(243,107,1) - SPIMPL
    Else
      IARENDRE = [F:PIM]PIMSTA
    Endif
    # -------------------------
  Endif
End IARENDRE

###################################################################################################
Funprog IS_USED_IN_ERP(SPIMNUM)
Value Char SPIMNUM

Local Integer IARENDRE

  # Issue X3-4071/119443 - 2016-10-27 by FGR
  IARENDRE = [V]CST_ANO
  # -----------------------------------------------------------------
  Local File PJMTIMEMP [PTE]
  Filter [PTE] Where [F:PTE]PIMTASCOD = SPIMNUM or [F:PTE]PIMPBUCOD = SPIMNUM or [F:PTE]OPPNUM = SPIMNUM
  For [PTE]
    IARENDRE = [V]CST_AYES
    Break
  Next
  Filter [PTE]
  # -----------------------------------------------------------------
End IARENDRE

###################################################################################################
Funprog PIM_FORMAT(AINSTANCE, APRONAME, AVALUE)
Variable Instance AINSTANCE Using OBJECT
Value    Char     APRONAME
Variable Char     AVALUE

Local Integer IARENDRE

  # Issue X3-7020/119602 - 2016-11-10 by FGR : comment
  IARENDRE = [V]CST_AOK
  AVALUE = toupper(AVALUE)
End IARENDRE

