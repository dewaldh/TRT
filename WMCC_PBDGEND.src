#<AdxTL>@(#)0.0.0.0 $Revision$Class Payment balance decl details
# Supervisor
## CRUD-CLASSE ## PBDGEND
# 2018-08-27 12:37:44 325


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(PBDGEND,ASTATUS)
Variable Instance PBDGEND Using C_PBDGEND
Variable Integer ASTATUS

If PBDGEND = null : End : Endif

Gosub _AVARIABLES From WMC00PBDGEND

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_PBDGEND

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(PBDGEND,ASTATUS)
Variable Instance PBDGEND Using C_PBDGEND
Variable Integer ASTATUS

If PBDGEND = null : End : Endif

Gosub AVARIABLES From WMC00PBDGEND
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_PBDGEND
Else
 Gosub AINSERT_PBDGEND
Endif

Gosub _AINSERT_AFTER
[L]A_I = PBDGEND.freeSnapshot
PBDGEND.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet PBDGEND._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet PBDGEND._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet PBDGEND._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If PBDGEND.ASTALIN = [V]CST_ANEWDEL : Return : Endif
PBDGEND.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet PBDGEND.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet PBDGEND.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_PBDGEND
Trbegin [F:PBDGEND]
 Gosub AINSERT_PBDGEND
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_PBDGEND
Raz [F:PBDGEND]
[L]ASTATUS = max([L]ASTATUS,fmet PBDGEND.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00PBDGEND._MAJSQL_PBDGEND(PBDGEND))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PBDGEND.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If PBDGEND.snapshotEnabled=1
 [L]A_RETIK = PBDGEND.revertUpdTick
Endif
[L]ASTATUS = max(fmet PBDGEND.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(PBDGEND.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 PBDGEND.ASTALIN = [V]CST_ALL
Endif
Return



