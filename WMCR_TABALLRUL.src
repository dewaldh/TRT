#<AdxTL>@(#)0.0.0.0 $Revision$Class Allocation and issue rules
# Supervisor
## CRUD-CLASSE ## TABALLRUL
# 2018-08-27 12:50:38 012


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABALLRUL [TRU_]

If !SILENCE : Call TRACE("2 --> Local Instance C_TABALLRUL") From ASYRCOM : Endif
Local Instance TABALLRUL Using C_TABALLRUL

If !SILENCE : Call TRACE("3 --> New Instance C_TABALLRUL") From ASYRCOM : Endif
TABALLRUL = NewInstance C_TABALLRUL AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TRU_]TRU0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TABALLRUL") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TABALLRUL.AREAD([TRU_]TRUCOD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TABALLRUL.TRUCOD ="-num$(TABALLRUL.TRUCOD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TABALLRUL.AKEYS)
  Call TRACE("-"-num$(I)-":"-TABALLRUL.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TRU_]
FreeGroup TABALLRUL
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TABALLRUL,ACLE,ASTATUS,_ETAG)
Variable Instance TABALLRUL Using C_TABALLRUL
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _TRUCOD(6)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_TRUCOD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File TABALLRUL [TRU]
Default File [F:TRU]
Read [F:TRU]TRU0 = [L]_TRUCOD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TRU]UPDTICK)>0
 [L]_ETAG = num$([F:TRU]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TABALLRUL,ACLE,ASTATUS)
Variable Instance TABALLRUL Using C_TABALLRUL
Value Char ACLE
Variable Integer ASTATUS
Local Char _TRUCOD(6)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_TRUCOD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TABALLRUL.AREAD([L]_TRUCOD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TABALLRUL,_TRUCOD,ASTATUS)
Variable Instance TABALLRUL Using C_TABALLRUL
Value Char _TRUCOD
Variable Integer ASTATUS

If TABALLRUL = null : End : Endif

Gosub AVARIABLES From WMC00TABALLRUL
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TABALLRUL.APARENT=null
 [L]A_I = TABALLRUL.freeSnapshot
 TABALLRUL.snapshotEnabled = 0
 TABALLRUL.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & TABALLRUL.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet TABALLRUL._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If TABALLRUL.APARENT=null
 TABALLRUL.snapshotEnabled = 1
 TABALLRUL.setAccessorEnabled = 1
Endif
LogicClose File [TRU]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet TABALLRUL._ACTION_PARAM("AREAD_BEFORE",[L]_TRUCOD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:TRU]
Read [F:TRU]TRU0 = [L]_TRUCOD
If fstat
[L]A_ERROR = [L]_TRUCOD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABALLRUL,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:TRU]AUUID)>0 & [F:TRU]AUUID=NullUuid
 [F:TRU]AUUID = getUuid
Endif
If dim([F:TRU]TEX)>0: Raz [F:TRU]TEX: Endif
SetInstance TABALLRUL With [F:TRU]
TABALLRUL.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To 10
 If ([F:TRU]STAFLT([L]A_I-1)<>0 or [F:TRU]DOCFLT([L]A_I-1)<>0 or [F:TRU]STUFLT([L]A_I-1)<>0 or [F:TRU]PCUFLT([L]A_I-1)<>0
& or [F:TRU]LOCFLT([L]A_I-1)<>0 or [F:TRU]COEFLT([L]A_I-1)<>0 or [F:TRU]COESOR([L]A_I-1)<>0)
  [L]A_NEWCOL += 1
  TABALLRUL.CSTAFLT(A_NEWCOL) = NewInstance  C_TABALLRUL_CSTAFLT(TABALLRUL.ACTX,NullUuid,[L]A_I,TABALLRUL,"CSTAFLT") AllocGroup TABALLRUL
  TABALLRUL.CSTAFLT(A_NEWCOL).STAFLT = [F:TRU]STAFLT([L]A_I-1)
  TABALLRUL.CSTAFLT(A_NEWCOL).DOCFLT = [F:TRU]DOCFLT([L]A_I-1)
  TABALLRUL.CSTAFLT(A_NEWCOL).STUFLT = [F:TRU]STUFLT([L]A_I-1)
  TABALLRUL.CSTAFLT(A_NEWCOL).PCUFLT = [F:TRU]PCUFLT([L]A_I-1)
  TABALLRUL.CSTAFLT(A_NEWCOL).LOCFLT = [F:TRU]LOCFLT([L]A_I-1)
  TABALLRUL.CSTAFLT(A_NEWCOL).COEFLT = [F:TRU]COEFLT([L]A_I-1)
  TABALLRUL.CSTAFLT(A_NEWCOL).COESOR = [F:TRU]COESOR([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet TABALLRUL.CSTAFLT(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet TABALLRUL.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="TABALLRUL" & ZONE="TRUAXX" & IDENT1=TABALLRUL.TRUCOD & IDENT2=""
 Call ASETTEXTRA(TABALLRUL.AXX,TABALLRUL.AllocGrp(),"TRUAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 TABALLRUL.AXX(maxtab(TABALLRUL.AXX)).FLG = 0
Next AXX
If !len(fmet TABALLRUL.AGETTEXTRA("TRUAXX"))
 Call ASETTEXTRA(TABALLRUL.AXX,TABALLRUL.AllocGrp(),"TRUAXX",
& fmet TABALLRUL.AGETTEXTRALAN("TRUAXX",TABALLRUL.ACTX.AFOLD.ALANGDEF),
& TABALLRUL.ACTX.LAN) From ASYRSUB
Endif

Return



