#<AdxTL>@(#)0.0.0.0 $Revision$Class Price update definition
# Supervisor
## CRUD-CLASSE ## SINCENT
# 2018-08-27 12:46:14 608


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File SINCENT [SNE_]

If !SILENCE : Call TRACE("2 --> Local Instance C_SINCENT") From ASYRCOM : Endif
Local Instance SINCENT Using C_SINCENT

If !SILENCE : Call TRACE("3 --> New Instance C_SINCENT") From ASYRCOM : Endif
SINCENT = NewInstance C_SINCENT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [SNE_]SNE0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of SINCENT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet SINCENT.AREAD([SNE_]COD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("SINCENT.COD ="-num$(SINCENT.COD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(SINCENT.AKEYS)
  Call TRACE("-"-num$(I)-":"-SINCENT.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [SNE_]
FreeGroup SINCENT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(SINCENT,ACLE,ASTATUS,_ETAG)
Variable Instance SINCENT Using C_SINCENT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _COD(7)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File SINCENT [SNE]
Default File [F:SNE]
Read [F:SNE]SNE0 = [L]_COD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:SNE]UPDTICK)>0
 [L]_ETAG = num$([F:SNE]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(SINCENT,ACLE,ASTATUS)
Variable Instance SINCENT Using C_SINCENT
Value Char ACLE
Variable Integer ASTATUS
Local Char _COD(7)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SINCENT.AREAD([L]_COD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(SINCENT,_COD,ASTATUS)
Variable Instance SINCENT Using C_SINCENT
Value Char _COD
Variable Integer ASTATUS

If SINCENT = null : End : Endif

Gosub AVARIABLES From WMC00SINCENT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If SINCENT.APARENT=null
 [L]A_I = SINCENT.freeSnapshot
 SINCENT.snapshotEnabled = 0
 SINCENT.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & SINCENT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet SINCENT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If SINCENT.APARENT=null
 SINCENT.snapshotEnabled = 1
 SINCENT.setAccessorEnabled = 1
Endif
LogicClose File [SNE]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet SINCENT._ACTION_PARAM("AREAD_BEFORE",[L]_COD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:SNE]
Read [F:SNE]SNE0 = [L]_COD
If fstat
[L]A_ERROR = [L]_COD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(SINCENT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:SNE]AUUID)>0 & [F:SNE]AUUID=NullUuid
 [F:SNE]AUUID = getUuid
Endif
SetInstance SINCENT With [F:SNE]
SINCENT.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To min(10,SINCENT.NBTBL)
 [L]A_NEWCOL += 1
 SINCENT.C_TBL(A_NEWCOL) = NewInstance  C_SINCENT_C_TBL(SINCENT.ACTX,NullUuid,[L]A_I,SINCENT,"C_TBL") AllocGroup SINCENT
 SINCENT.C_TBL(A_NEWCOL).TBL = [F:SNE]TBL([L]A_I-1)
 SINCENT.C_TBL(A_NEWCOL).EXPLNK = [F:SNE]EXPLNK([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet SINCENT.C_TBL(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To min(20,SINCENT.NBVAR)
 [L]A_NEWCOL += 1
 SINCENT.C_VARCOD(A_NEWCOL) = NewInstance  C_SINCENT_C_VARCOD(SINCENT.ACTX,NullUuid,[L]A_I,SINCENT,"C_VARCOD") AllocGroup SINCENT
 SINCENT.C_VARCOD(A_NEWCOL).VARCOD = [F:SNE]VARCOD([L]A_I-1)
 SINCENT.C_VARCOD(A_NEWCOL).VARDES = [F:SNE]VARDES([L]A_I-1)
 SINCENT.C_VARCOD(A_NEWCOL).VARTYP = [F:SNE]VARTYP([L]A_I-1)
 SINCENT.C_VARCOD(A_NEWCOL).VARLNG = [F:SNE]VARLNG([L]A_I-1)
 SINCENT.C_VARCOD(A_NEWCOL).VARDEF = [F:SNE]VARDEF([L]A_I-1)
 SINCENT.C_VARCOD(A_NEWCOL).VARCTL = [F:SNE]VARCTL([L]A_I-1)
 SINCENT.C_VARCOD(A_NEWCOL).VARLAS = [F:SNE]VARLAS([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet SINCENT.C_VARCOD(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet SINCENT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="SINCENT" & ZONE="DESAXX" & IDENT1=SINCENT.COD & IDENT2=""
 Call ASETTEXTRA(SINCENT.AXX,SINCENT.AllocGrp(),"DESAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 SINCENT.AXX(maxtab(SINCENT.AXX)).FLG = 0
Next AXX
If !len(fmet SINCENT.AGETTEXTRA("DESAXX"))
 Call ASETTEXTRA(SINCENT.AXX,SINCENT.AllocGrp(),"DESAXX",
& fmet SINCENT.AGETTEXTRALAN("DESAXX",SINCENT.ACTX.AFOLD.ALANGDEF),
& SINCENT.ACTX.LAN) From ASYRSUB
Endif
For [AXX] Where CODFIC="SINCENT" & ZONE="VARDESAXX" & IDENT1="COD" & IDENT2="VARCOD"
 Call ASETTEXTRA(SINCENT.AXX,SINCENT.AllocGrp(),"VARDESAXX",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 SINCENT.AXX(maxtab(SINCENT.AXX)).FLG = 0
Next AXX
If !len(fmet SINCENT.AGETTEXTRA("VARDESAXX"))
 Call ASETTEXTRA(SINCENT.AXX,SINCENT.AllocGrp(),"VARDESAXX",
& fmet SINCENT.AGETTEXTRALAN("VARDESAXX",SINCENT.ACTX.AFOLD.ALANGDEF),
& SINCENT.ACTX.LAN) From ASYRSUB
Endif

Return



