#<AdxTL>@(#)0.0.0.0 $Revision$Class Expense note photo
# Supervisor
## CRUD-CLASSE ## BLOBEXPENS
# 2018-08-27 12:24:39 972


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File BLOBEXPENSES [BEXP_]

If !SILENCE : Call TRACE("2 --> Local Instance C_BLOBEXPENS") From ASYRCOM : Endif
Local Instance BLOBEXPENS Using C_BLOBEXPENS

If !SILENCE : Call TRACE("3 --> New Instance C_BLOBEXPENS") From ASYRCOM : Endif
BLOBEXPENS = NewInstance C_BLOBEXPENS AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [BEXP_]BEXP0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of BLOBEXPENS") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet BLOBEXPENS.AREAD([BEXP_]ACCNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("BLOBEXPENS.ACCNUM ="-num$(BLOBEXPENS.ACCNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(BLOBEXPENS.AKEYS)
  Call TRACE("-"-num$(I)-":"-BLOBEXPENS.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [BEXP_]
FreeGroup BLOBEXPENS
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(BLOBEXPENS,ACLE,ASTATUS,_ETAG)
Variable Instance BLOBEXPENS Using C_BLOBEXPENS
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Integer _ACCNUM
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ACCNUM = val([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File BLOBEXPENSES [BEXP]
Default File [F:BEXP]
Read [F:BEXP]BEXP0 = [L]_ACCNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:BEXP]UPDTICK)>0
 [L]_ETAG = num$([F:BEXP]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(BLOBEXPENS,ACLE,ASTATUS)
Variable Instance BLOBEXPENS Using C_BLOBEXPENS
Value Char ACLE
Variable Integer ASTATUS
Local Integer _ACCNUM
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ACCNUM = val([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet BLOBEXPENS.AREAD([L]_ACCNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(BLOBEXPENS,_ACCNUM,ASTATUS)
Variable Instance BLOBEXPENS Using C_BLOBEXPENS
Value Integer _ACCNUM
Variable Integer ASTATUS

If BLOBEXPENS = null : End : Endif

Gosub AVARIABLES From WMC00BLOBEXPENS
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If BLOBEXPENS.APARENT=null
 [L]A_I = BLOBEXPENS.freeSnapshot
 BLOBEXPENS.snapshotEnabled = 0
 BLOBEXPENS.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & BLOBEXPENS.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet BLOBEXPENS._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If BLOBEXPENS.APARENT=null
 BLOBEXPENS.snapshotEnabled = 1
 BLOBEXPENS.setAccessorEnabled = 1
Endif
LogicClose File [BEXP]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet BLOBEXPENS._ACTION_PARAM("AREAD_BEFORE",[L]_ACCNUM))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:BEXP]
Read [F:BEXP]BEXP0 = [L]_ACCNUM
If fstat
[L]A_ERROR = num$([L]_ACCNUM)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(BLOBEXPENS,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:BEXP]AUUID)>0 & [F:BEXP]AUUID=NullUuid
 [F:BEXP]AUUID = getUuid
Endif
If dim([F:BEXP]BLOB)>0: Raz [F:BEXP]BLOB: Endif
SetInstance BLOBEXPENS With [F:BEXP]
BLOBEXPENS.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet BLOBEXPENS.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



