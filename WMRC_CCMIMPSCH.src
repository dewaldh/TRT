#<AdxTL>@(#)0.0.0.0 $Revision$Class Impact analysis-Subcontract
# Supervisor
## CRUD-CLASSE ## CCMIMPSCH
# 2018-08-27 13:12:04 919


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(CCMIMPSCH,ASTATUS)
Variable Instance CCMIMPSCH Using R_CCMIMPSCH
Variable Integer ASTATUS

If CCMIMPSCH = null : End : Endif

Gosub AVARIABLES From WMR00CCMIMPSCH
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

Gosub AREPCONTROL_AINSERT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_CCMIMPSCH
Else
 Gosub AINSERT_CCMIMPSCH
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = CCMIMPSCH.freeSnapshot
CCMIMPSCH.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
CCMIMPSCH.ASTALIN = [V]CST_ANEW
CCMIMPSCH.CCMSCH.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSCH.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSCH.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet CCMIMPSCH._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet CCMIMPSCH._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet CCMIMPSCH._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If CCMIMPSCH.CCMSCH.ASTALIN = [V]CST_ANEWDEL : Return : Endif
CCMIMPSCH.CCMSCH.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSCH.CCMSCH.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSCH.CCMSCH.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_CCMIMPSCH
Trbegin [F:CCMSCH]
 Gosub AINSERT_CCMIMPSCH
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(CCMIMPSCH.CCMSCH.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 CCMIMPSCH.CCMSCH.ASTALIN = [V]CST_ALL
Endif
Return

#-----------------------------------------------------#
$AINSERT_CCMIMPSCH
[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSCH.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSCH.CCMSCH._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSCH.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If CCMIMPSCH.snapshotEnabled=1
 [L]A_RETIK = CCMIMPSCH.revertUpdTick
Endif
[L]ASTATUS = max(fmet CCMIMPSCH.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



