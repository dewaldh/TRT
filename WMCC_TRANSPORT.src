#<AdxTL>@(#)0.0.0.0 $Revision$Class Transport
# Supervisor
## CRUD-CLASSE ## TRANSPORT
# 2018-08-27 12:54:31 838


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(TRANSPORT,ASTATUS)
Variable Instance TRANSPORT Using C_TRANSPORT
Variable Integer ASTATUS

If TRANSPORT = null : End : Endif

Gosub _AVARIABLES From WMC00TRANSPORT

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_TRANSPORT

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(TRANSPORT,ASTATUS)
Variable Instance TRANSPORT Using C_TRANSPORT
Variable Integer ASTATUS

If TRANSPORT = null : End : Endif

Gosub AVARIABLES From WMC00TRANSPORT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_TRANSPORT
Else
 Gosub AINSERT_TRANSPORT
Endif

Gosub _AINSERT_AFTER
[L]A_I = TRANSPORT.freeSnapshot
TRANSPORT.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet TRANSPORT._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet TRANSPORT._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet TRANSPORT._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If TRANSPORT.ASTALIN = [V]CST_ANEWDEL : Return : Endif
TRANSPORT.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(TRANSPORT.EVT) : # EVENTTRNP -- 2
 If TRANSPORT.EVT(A_N2) <> null
& and !find(TRANSPORT.EVT(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.EVT(A_N2)._AINSERT_CONTROL_BEFORE)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(TRANSPORT.SHIPD) : # SHIPDOC -- 3
 If TRANSPORT.SHIPD(A_N2) <> null
& and !find(TRANSPORT.SHIPD(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.SHIPD(A_N2)._AINSERT_CONTROL_BEFORE)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(TRANSPORT.SHIPT) : # SHIPTRACK -- 4
 If TRANSPORT.SHIPT(A_N2) <> null
& and !find(TRANSPORT.SHIPT(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.SHIPT(A_N2)._AINSERT_CONTROL_BEFORE)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER
For A_N2=1 To maxtab(TRANSPORT.EVT) : # EVENTTRNP -- 2
 If TRANSPORT.EVT(A_N2) <> null
& and !find(TRANSPORT.EVT(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.EVT(A_N2)._AINSERT_CONTROL_AFTER)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(TRANSPORT.SHIPD) : # SHIPDOC -- 3
 If TRANSPORT.SHIPD(A_N2) <> null
& and !find(TRANSPORT.SHIPD(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.SHIPD(A_N2)._AINSERT_CONTROL_AFTER)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(TRANSPORT.SHIPT) : # SHIPTRACK -- 4
 If TRANSPORT.SHIPT(A_N2) <> null
& and !find(TRANSPORT.SHIPT(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.SHIPT(A_N2)._AINSERT_CONTROL_AFTER)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_TRANSPORT
Trbegin [F:TRNP]
 Gosub AINSERT_TRANSPORT
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_TRANSPORT
Raz [F:TRNP]
[L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00TRANSPORT._MAJSQL_TRANSPORT(TRANSPORT))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]A_TYPMAJ=[V]CST_ANEW

#-----------------------------------------------------#
For A_N2=1 To maxtab(TRANSPORT.EVT)
 If TRANSPORT.EVT(A_N2) <> null and
& (TRANSPORT.EVT(A_N2).ASTALIN=[L]A_TYPMAJ or
& TRANSPORT.EVT(A_N2).ASTALIN=[V]CST_ALL)
  If TRANSPORT.EVT(A_N2).ASTALIN=[L]A_TYPMAJ
   Case TRANSPORT.EVT(A_N2).ASTALIN
    When [V]CST_AUPD  : [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.EVT(A_N2)._AUPDATE)
    When [V]CST_ANEW : [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.EVT(A_N2)._AINSERT)
    When [V]CST_ADEL  : [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.EVT(A_N2)._ADELETE)
   Endcase
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

#-----------------------------------------------------#
For A_N2=1 To maxtab(TRANSPORT.SHIPD)
 If TRANSPORT.SHIPD(A_N2) <> null and
& (TRANSPORT.SHIPD(A_N2).ASTALIN=[L]A_TYPMAJ or
& TRANSPORT.SHIPD(A_N2).ASTALIN=[V]CST_ALL)
  If TRANSPORT.SHIPD(A_N2).ASTALIN=[L]A_TYPMAJ
   Case TRANSPORT.SHIPD(A_N2).ASTALIN
    When [V]CST_AUPD  : [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.SHIPD(A_N2)._AUPDATE)
    When [V]CST_ANEW : [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.SHIPD(A_N2)._AINSERT)
    When [V]CST_ADEL  : [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.SHIPD(A_N2)._ADELETE)
   Endcase
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

#-----------------------------------------------------#
For A_N2=1 To maxtab(TRANSPORT.SHIPT)
 If TRANSPORT.SHIPT(A_N2) <> null and
& (TRANSPORT.SHIPT(A_N2).ASTALIN=[L]A_TYPMAJ or
& TRANSPORT.SHIPT(A_N2).ASTALIN=[V]CST_ALL)
  If TRANSPORT.SHIPT(A_N2).ASTALIN=[L]A_TYPMAJ
   Case TRANSPORT.SHIPT(A_N2).ASTALIN
    When [V]CST_AUPD  : [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.SHIPT(A_N2)._AUPDATE)
    When [V]CST_ANEW : [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.SHIPT(A_N2)._AINSERT)
    When [V]CST_ADEL  : [L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.SHIPT(A_N2)._ADELETE)
   Endcase
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

[L]ASTATUS = max([L]ASTATUS,fmet TRANSPORT.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If TRANSPORT.snapshotEnabled=1
 [L]A_RETIK = TRANSPORT.revertUpdTick
Endif
[L]ASTATUS = max(fmet TRANSPORT.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(TRANSPORT.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 TRANSPORT.ASTALIN = [V]CST_ALL
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(TRANSPORT.EVT)
 If TRANSPORT.EVT(A_N2) <> null
  [L]ASTATUS2 = fmet TRANSPORT.EVT(A_N2)._AINSERT_AFTER
  If TRANSPORT.EVT(A_N2).ASTALIN=[V]CST_ADEL or TRANSPORT.EVT(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance TRANSPORT.EVT(A_N2)
   TRANSPORT.EVT(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Local Integer ASTATUS2
For A_N2=1 To maxtab(TRANSPORT.SHIPD)
 If TRANSPORT.SHIPD(A_N2) <> null
  [L]ASTATUS2 = fmet TRANSPORT.SHIPD(A_N2)._AINSERT_AFTER
  If TRANSPORT.SHIPD(A_N2).ASTALIN=[V]CST_ADEL or TRANSPORT.SHIPD(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance TRANSPORT.SHIPD(A_N2)
   TRANSPORT.SHIPD(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Local Integer ASTATUS2
For A_N2=1 To maxtab(TRANSPORT.SHIPT)
 If TRANSPORT.SHIPT(A_N2) <> null
  [L]ASTATUS2 = fmet TRANSPORT.SHIPT(A_N2)._AINSERT_AFTER
  If TRANSPORT.SHIPT(A_N2).ASTALIN=[V]CST_ADEL or TRANSPORT.SHIPT(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance TRANSPORT.SHIPT(A_N2)
   TRANSPORT.SHIPT(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Return



