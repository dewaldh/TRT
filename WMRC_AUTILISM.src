#<AdxTL>@(#)0.0.0.0 $Revision$Class Users
# Supervisor
## CRUD-CLASSE ## AUTILISM
# 2018-08-27 13:03:54 928


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(AUTILISM,ASTATUS)
Variable Instance AUTILISM Using R_AUTILISM
Variable Integer ASTATUS

If AUTILISM = null : End : Endif

Gosub AVARIABLES From WMR00AUTILISM
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If fmet AUTILISM.ACTX.AGETAFCRIGHT(AUTILISM,"GESAUS",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END : Endif
If fmet AUTILISM.ACTX.AGETAFCRIGHTC(AUTILISM,"GESAUS",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END
Endif
If fmet AUTILISM.ACTX.AGETACSRIGHTM(AUTILISM,[L]A_STRACC,[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR
 Goto AINSERT_END
  Endif
  
  Gosub AREPCONTROL_AINSERT
  If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
  
If !adxlog
 Gosub AINSERT_TR_AUTILISM
Else
 Gosub AINSERT_AUTILISM
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = AUTILISM.freeSnapshot
AUTILISM.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
AUTILISM.ASTALIN = [V]CST_ANEW
AUTILISM.AUS.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet AUTILISM.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AUTILISM.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet AUTILISM._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet AUTILISM._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet AUTILISM._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If AUTILISM.AUS.ASTALIN = [V]CST_ANEWDEL : Return : Endif
AUTILISM.AUS.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet AUTILISM.AUS.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(AUTILISM.AUS.FNCCOL)
 If AUTILISM.AUS.FNCCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet AUTILISM.AUS.FNCCOL([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
A_N2=1
If AUTILISM.AUS.BPA(A_N2) <> null
& and !find(AUTILISM.AUS.BPA(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(AUTILISM.AUS.BID) : # BID -- 3
 If AUTILISM.AUS.BID(A_N2) <> null
& and !find(AUTILISM.AUS.BID(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER
A_N2=1
If AUTILISM.AUS.BPA(A_N2) <> null
& and !find(AUTILISM.AUS.BPA(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(AUTILISM.AUS.BID) : # BID -- 3
 If AUTILISM.AUS.BID(A_N2) <> null
& and !find(AUTILISM.AUS.BID(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [L]A_I=1 To maxtab(AUTILISM.AUS.FNCCOL)
 If AUTILISM.AUS.FNCCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet AUTILISM.AUS.FNCCOL([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]ASTATUS = max([L]ASTATUS,fmet AUTILISM.AUS.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_AUTILISM
Trbegin [F:AUS]
 Gosub AINSERT_AUTILISM
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(AUTILISM.AUS.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 AUTILISM.AUS.ASTALIN = [V]CST_ALL
Endif
For [L]A_I=1 To maxtab(AUTILISM.AUS.FNCCOL)
 If AUTILISM.AUS.FNCCOL([L]A_I)<>null
  If AUTILISM.AUS.FNCCOL([L]A_I).ASTALIN=[V]CST_ADEL or AUTILISM.AUS.FNCCOL([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance AUTILISM.AUS.FNCCOL([L]A_I)
   AUTILISM.AUS.FNCCOL([L]A_I) = null
  Elsif AUTILISM.AUS.FNCCOL([L]A_I).ASTALIN <> [V]CST_ALL
   AUTILISM.AUS.FNCCOL([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
Local Integer ASTATUS2
A_N2=1
If AUTILISM.AUS.BPA(A_N2) <> null
 If AUTILISM.AUS.BPA(A_N2).ASTALIN=[V]CST_ADEL or AUTILISM.AUS.BPA(A_N2).ASTALIN=[V]CST_ANEWDEL
  FreeInstance AUTILISM.AUS.BPA(A_N2)
  AUTILISM.AUS.BPA(A_N2) = null
 Elsif AUTILISM.AUS.BPA(A_N2).ASTALIN <> [V]CST_ALL
  AUTILISM.AUS.BPA(A_N2).ASTALIN = [V]CST_ALL
  For [L]A_I=1 To maxtab(AUTILISM.AUS.BPA(A_N2).COLTEL)
   If AUTILISM.AUS.BPA(A_N2).COLTEL([L]A_I)<>null
    If AUTILISM.AUS.BPA(A_N2).COLTEL([L]A_I).ASTALIN=[V]CST_ADEL or AUTILISM.AUS.BPA(A_N2).COLTEL([L]A_I).ASTALIN=[V]CST_ANEWDEL
     FreeInstance AUTILISM.AUS.BPA(A_N2).COLTEL([L]A_I)
     AUTILISM.AUS.BPA(A_N2).COLTEL([L]A_I) = null
    Elsif AUTILISM.AUS.BPA(A_N2).COLTEL([L]A_I).ASTALIN <> [V]CST_ALL
     AUTILISM.AUS.BPA(A_N2).COLTEL([L]A_I).ASTALIN = [V]CST_ALL
    Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
  For [L]A_I=1 To maxtab(AUTILISM.AUS.BPA(A_N2).COLWEB)
   If AUTILISM.AUS.BPA(A_N2).COLWEB([L]A_I)<>null
    If AUTILISM.AUS.BPA(A_N2).COLWEB([L]A_I).ASTALIN=[V]CST_ADEL or AUTILISM.AUS.BPA(A_N2).COLWEB([L]A_I).ASTALIN=[V]CST_ANEWDEL
     FreeInstance AUTILISM.AUS.BPA(A_N2).COLWEB([L]A_I)
     AUTILISM.AUS.BPA(A_N2).COLWEB([L]A_I) = null
    Elsif AUTILISM.AUS.BPA(A_N2).COLWEB([L]A_I).ASTALIN <> [V]CST_ALL
     AUTILISM.AUS.BPA(A_N2).COLWEB([L]A_I).ASTALIN = [V]CST_ALL
    Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
 Endif
 [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(AUTILISM.AUS.BID)
 If AUTILISM.AUS.BID(A_N2) <> null
  [L]ASTATUS2 = fmet AUTILISM.AUS.BID(A_N2)._AINSERT_AFTER
  If AUTILISM.AUS.BID(A_N2).ASTALIN=[V]CST_ADEL or AUTILISM.AUS.BID(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance AUTILISM.AUS.BID(A_N2)
   AUTILISM.AUS.BID(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Return

#-----------------------------------------------------#
$AINSERT_AUTILISM
[L]ASTATUS = max([L]ASTATUS,fmet AUTILISM.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AUTILISM.AUS._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AUTILISM.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If AUTILISM.snapshotEnabled=1
 [L]A_RETIK = AUTILISM.revertUpdTick
Endif
[L]ASTATUS = max(fmet AUTILISM.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



