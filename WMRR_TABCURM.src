#<AdxTL>@(#)0.0.0.0 $Revision$Class Currencies
# Supervisor
## CRUD-CLASSE ## TABCURM
# 2018-08-27 13:37:11 992


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABCUR [TCU_]

If !SILENCE : Call TRACE("2 --> Local Instance R_TABCURM") From ASYRCOM : Endif
Local Instance TABCURM Using R_TABCURM

If !SILENCE : Call TRACE("3 --> New Instance R_TABCURM") From ASYRCOM : Endif
TABCURM = NewInstance R_TABCURM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TCU_]TCU0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TABCUR") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TABCURM.AREAD([TCU_]CUR))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TABCURM.TABCUR.CUR ="-num$(TABCURM.TABCUR.CUR)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TABCURM.TABCUR.AKEYS)
  Call TRACE("-"-num$(I)-":"-TABCURM.TABCUR.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TCU_]
FreeGroup TABCURM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TABCURM,ACLE,ASTATUS,_ETAG)
Variable Instance TABCURM Using R_TABCURM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CUR(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CUR = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File TABCUR [TCU]
Default File [F:TCU]
Read [F:TCU]TCU0 = [L]_CUR
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TCU]UPDTICK)>0
 [L]_ETAG = num$([F:TCU]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TABCURM,ACLE,ASTATUS)
Variable Instance TABCURM Using R_TABCURM
Value Char ACLE
Variable Integer ASTATUS
Local Char _CUR(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CUR = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TABCURM.AREAD([L]_CUR))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TABCURM,_CUR,ASTATUS)
Variable Instance TABCURM Using R_TABCURM
Value Char _CUR
Variable Integer ASTATUS

If TABCURM = null : End : Endif

Gosub AVARIABLES From WMR00TABCURM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TABCURM.APARENT=null
 [L]A_I = TABCURM.freeSnapshot
 TABCURM.snapshotEnabled = 0
 TABCURM.setAccessorEnabled = 0
Endif

If fmet TABCURM.ACTX.AGETAFCRIGHT(TABCURM,"GESTCU",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:TCU]
Read [F:TCU]TCU0 = [L]_CUR
If fstat
[L]A_ERROR = [L]_CUR
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABCURM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet TABCURM.ACTX.AGETAFCRIGHTR(TABCURM,"GESTCU",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet TABCURM.ACTX.ASTACRITROLE(TABCURM,[L]_CUR
& ,"TCU","TCU",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABCURM.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

TABCURM.TABCUR.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet TABCURM.TABCUR.AREAD([L]_CUR))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABCURM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & TABCURM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet TABCURM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If TABCURM.APARENT=null
 TABCURM.snapshotEnabled = 1
 TABCURM.setAccessorEnabled = 1
Endif
LogicClose File [TCU]
End



