#<AdxTL>@(#)0.0.0.0 $Revision$Class Carriers
# Supervisor
## CRUD-CLASSE ## BPCARRIER
# 2018-08-27 12:25:18 068


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File BPCARRIER [BPT_]

If !SILENCE : Call TRACE("2 --> Local Instance C_BPCARRIER") From ASYRCOM : Endif
Local Instance BPCARRIER Using C_BPCARRIER

If !SILENCE : Call TRACE("3 --> New Instance C_BPCARRIER") From ASYRCOM : Endif
BPCARRIER = NewInstance C_BPCARRIER AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [BPT_]BPT0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of BPCARRIER") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet BPCARRIER.AREAD([BPT_]BPTNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("BPCARRIER.BPTNUM ="-num$(BPCARRIER.BPTNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(BPCARRIER.AKEYS)
  Call TRACE("-"-num$(I)-":"-BPCARRIER.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [BPT_]
FreeGroup BPCARRIER
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(BPCARRIER,ACLE,ASTATUS,_ETAG)
Variable Instance BPCARRIER Using C_BPCARRIER
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _BPTNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BPTNUM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File BPCARRIER [BPT]
Default File [F:BPT]
Read [F:BPT]BPT0 = [L]_BPTNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:BPT]UPDTICK)>0
 [L]_ETAG = num$([F:BPT]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(BPCARRIER,ACLE,ASTATUS)
Variable Instance BPCARRIER Using C_BPCARRIER
Value Char ACLE
Variable Integer ASTATUS
Local Char _BPTNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BPTNUM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet BPCARRIER.AREAD([L]_BPTNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(BPCARRIER,_BPTNUM,ASTATUS)
Variable Instance BPCARRIER Using C_BPCARRIER
Value Char _BPTNUM
Variable Integer ASTATUS

If BPCARRIER = null : End : Endif

Gosub AVARIABLES From WMC00BPCARRIER
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If BPCARRIER.APARENT=null
 [L]A_I = BPCARRIER.freeSnapshot
 BPCARRIER.snapshotEnabled = 0
 BPCARRIER.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & BPCARRIER.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet BPCARRIER._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If BPCARRIER.APARENT=null
 BPCARRIER.snapshotEnabled = 1
 BPCARRIER.setAccessorEnabled = 1
Endif
LogicClose File [BPT]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet BPCARRIER._ACTION_PARAM("AREAD_BEFORE",[L]_BPTNUM))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:BPT]
Read [F:BPT]BPT0 = [L]_BPTNUM
If fstat
[L]A_ERROR = [L]_BPTNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(BPCARRIER,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:BPT]AUUID)>0 & [F:BPT]AUUID=NullUuid
 [F:BPT]AUUID = getUuid
Endif
SetInstance BPCARRIER With [F:BPT]
BPCARRIER.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To 20
 If ([F:BPT]CFY([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  BPCARRIER.C_CFY(A_NEWCOL) = NewInstance  C_BPCARRIER_C_CFY(BPCARRIER.ACTX,NullUuid,[L]A_I,BPCARRIER,"C_CFY") AllocGroup BPCARRIER
  BPCARRIER.C_CFY(A_NEWCOL).CFY = [F:BPT]CFY([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet BPCARRIER.C_CFY(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To min(50,BPCARRIER.NBPLI)
 [L]A_NEWCOL += 1
 BPCARRIER.C_PLIMAX(A_NEWCOL) = NewInstance  C_BPCARRIER_C_PLIMAX(BPCARRIER.ACTX,NullUuid,[L]A_I,BPCARRIER,"C_PLIMAX") AllocGroup BPCARRIER
 BPCARRIER.C_PLIMAX(A_NEWCOL).PLIMAX = [F:BPT]PLIMAX([L]A_I-1)
 BPCARRIER.C_PLIMAX(A_NEWCOL).PLIBKT = [F:BPT]PLIBKT([L]A_I-1)
 BPCARRIER.C_PLIMAX(A_NEWCOL).PLIUOMRND = [F:BPT]PLIUOMRND([L]A_I-1)
 [L]ASTATUS = max([L]ASTATUS,fmet BPCARRIER.C_PLIMAX(A_NEWCOL).ACTION("AREAD_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 5
 If ([F:BPT]TSDFRE([L]A_I-1)<>0)
  [L]A_NEWCOL += 1
  BPCARRIER.C_TSDFRE(A_NEWCOL) = NewInstance  C_BPCARRIER_C_TSDFRE(BPCARRIER.ACTX,NullUuid,[L]A_I,BPCARRIER,"C_TSDFRE") AllocGroup BPCARRIER
  BPCARRIER.C_TSDFRE(A_NEWCOL).TSDFRE = [F:BPT]TSDFRE([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet BPCARRIER.C_TSDFRE(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet BPCARRIER.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



