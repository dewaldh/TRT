#<AdxTL>@(#)0.0.0.0 $Revision$Class Data type rules
# Supervisor
## CRUD-CLASSE ## ATYPERUL
# 2018-08-27 12:23:48 745


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ATYPERUL [ATYR_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ATYPERUL") From ASYRCOM : Endif
Local Instance ATYPERUL Using C_ATYPERUL

If !SILENCE : Call TRACE("3 --> New Instance C_ATYPERUL") From ASYRCOM : Endif
ATYPERUL = NewInstance C_ATYPERUL AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ATYR_]ATYR0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ATYPERUL") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ATYPERUL.AREAD([ATYR_]CODTYP,[ATYR_]TYPRUL,[ATYR_]TRTRUL,[ATYR_]PRGRUL))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ATYPERUL.CODTYP ="-num$(ATYPERUL.CODTYP)) From ASYRCOM
 Call TRACE("ATYPERUL.TYPRUL ="-num$(ATYPERUL.TYPRUL)) From ASYRCOM
 Call TRACE("ATYPERUL.TRTRUL ="-num$(ATYPERUL.TRTRUL)) From ASYRCOM
 Call TRACE("ATYPERUL.PRGRUL ="-num$(ATYPERUL.PRGRUL)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ATYPERUL.AKEYS)
  Call TRACE("-"-num$(I)-":"-ATYPERUL.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ATYR_]
FreeGroup ATYPERUL
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ATYPERUL,ACLE,ASTATUS,_ETAG)
Variable Instance ATYPERUL Using C_ATYPERUL
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CODTYP(8)
Local Tinyint _TYPRUL
Local Char _TRTRUL(30)
Local Char _PRGRUL(30)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODTYP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_TYPRUL = val([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_TRTRUL = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_PRGRUL = num$([L]CLE(4)) : Endif
Raz [L]_ETAG
Local File ATYPERUL [ATYR]
Default File [F:ATYR]
Read [F:ATYR]ATYR0 = [L]_CODTYP;[L]_TYPRUL;[L]_TRTRUL;[L]_PRGRUL
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ATYR]UPDTICK)>0
 [L]_ETAG = num$([F:ATYR]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ATYPERUL,ACLE,ASTATUS)
Variable Instance ATYPERUL Using C_ATYPERUL
Value Char ACLE
Variable Integer ASTATUS
Local Char _CODTYP(8)
Local Tinyint _TYPRUL
Local Char _TRTRUL(30)
Local Char _PRGRUL(30)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODTYP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_TYPRUL = val([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_TRTRUL = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_PRGRUL = num$([L]CLE(4)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ATYPERUL.AREAD([L]_CODTYP,[L]_TYPRUL,[L]_TRTRUL,[L]_PRGRUL))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ATYPERUL,_CODTYP,_TYPRUL,_TRTRUL,_PRGRUL,ASTATUS)
Variable Instance ATYPERUL Using C_ATYPERUL
Value Char _CODTYP
Value Tinyint _TYPRUL
Value Char _TRTRUL
Value Char _PRGRUL
Variable Integer ASTATUS

If ATYPERUL = null : End : Endif

Gosub AVARIABLES From WMC00ATYPERUL
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ATYPERUL.APARENT=null
 [L]A_I = ATYPERUL.freeSnapshot
 ATYPERUL.snapshotEnabled = 0
 ATYPERUL.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ATYPERUL.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ATYPERUL._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ATYPERUL.APARENT=null
 ATYPERUL.snapshotEnabled = 1
 ATYPERUL.setAccessorEnabled = 1
Endif
LogicClose File [ATYR] ,[ATYRP]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet ATYPERUL._ACTION_PARAM("AREAD_BEFORE",[L]_CODTYP,[L]_TYPRUL,[L]_TRTRUL,[L]_PRGRUL))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:ATYR]
Read [F:ATYR]ATYR0 = [L]_CODTYP;[L]_TYPRUL;[L]_TRTRUL;[L]_PRGRUL
If fstat
[L]A_ERROR = [L]_CODTYP+"~"+num$([L]_TYPRUL)+"~"+[L]_TRTRUL+"~"+[L]_PRGRUL
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ATYPERUL,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:ATYR]AUUID)>0 & [F:ATYR]AUUID=NullUuid
 [F:ATYR]AUUID = getUuid
Endif
SetInstance ATYPERUL With [F:ATYR]
ATYPERUL.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:ATYRP]
 [L]A_N2=0
 For [F:ATYRP]ATYRP0 Where CODTYP=[F:ATYR]CODTYP & TYPRUL=[F:ATYR]TYPRUL & TRTRUL=[F:ATYR]TRTRUL & PRGRUL=[F:ATYR]PRGRUL
  [L]A_N2 +=1
  ATYPERUL.ACOLRPAR(A_N2) = NewInstance  C_ATYPERPAR(ATYPERUL.ACTX,NullUuid,[L]A_N2,ATYPERUL,"ACOLRPAR") AllocGroup ATYPERUL
  [L]ASTATUS = max([L]ASTATUS,fmet ATYPERUL.ACOLRPAR(A_N2).ADDINSTANCE_BOUND)
  Callmet ATYPERUL.ACOLRPAR(A_N2).AREAD([F:ATYRP]CODTYP,[F:ATYRP]TYPRUL,[F:ATYRP]TRTRUL,[F:ATYRP]PRGRUL,[F:ATYRP]PARCOD)
  ATYPERUL.ACOLRPAR(A_N2).ASTALIN = [V]CST_ALL
  [L]ASTATUS = max([L]ASTATUS,fmet ATYPERUL.ACOLRPAR(A_N2).ASETATTRIBUTE("CODTYP","$isDisabled","true"))
  [L]ASTATUS = max([L]ASTATUS,fmet ATYPERUL.ACOLRPAR(A_N2).ASETATTRIBUTE("TYPRUL","$isDisabled","true"))
  [L]ASTATUS = max([L]ASTATUS,fmet ATYPERUL.ACOLRPAR(A_N2).ASETATTRIBUTE("TRTRUL","$isDisabled","true"))
  [L]ASTATUS = max([L]ASTATUS,fmet ATYPERUL.ACOLRPAR(A_N2).ASETATTRIBUTE("PRGRUL","$isDisabled","true"))
  [L]ASTATUS = max([L]ASTATUS,fmet ATYPERUL.ACOLRPAR(A_N2).ASETATTRIBUTE("PARCOD","$isDisabled","true"))
 Next ATYRP
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
#-----------------------------------------------------#

[L]ASTATUS = max([L]ASTATUS,fmet ATYPERUL.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



