#<AdxTL>@(#)0.0.0.0 $Revision$
# Supervisor
## BI-DIMENSION ## Synchronization rule PADPOP

$OUVRE
Local Char FILTRE(250)
OUVTAB = GDOSSIER+".PORDERP" : If clalev([F:POP])=0 : Local File =OUVTAB [POP] : Endif
OUVTAB = GDOSSIER+".PORDER" : If clalev([F:POH])=0 : Local File =OUVTAB [POH] : Endif
OUVTAB = GDOSSIER+".COMPANY" : If clalev([F:CPY])=0 : Local File =OUVTAB [CPY] : Endif
OUVTAB = GDOSSIER+".BITMPPORDERP" : If clalev([F:BIPOP])=0 : Local File =OUVTAB [BIPOP] : Endif
OUVTAB = "Link [POP]"
Link [POP] With
& [POH]POH0 ~= [F:POP]POHNUM,
& [CPY]CPY0 = [F:POH]CPY,
& [BIPOP]BIPOP0 ~= adxuid(1);[F:POP]POHNUM;[F:POP]POPLIN;[F:POP]POPSEQ
& As [LNK_]
& Order By Key CLE = [POP]POHNUM;[POP]POPLIN;[POP]POPSEQ
FILTRE = ""
Return

$FERME
If clalev([F:POP]) : Close local File [POP] : Endif
If clalev([F:POH]) : Close local File [POH] : Endif
If clalev([F:CPY]) : Close local File [CPY] : Endif
If clalev([F:BIPOP]) : Close local File [BIPOP] : Endif
Return

$DCLE
Local Char    DCLE(GLONAVA)(1..3)
Local Integer DTYP(1..3)
Local Integer NBDCLE
NBDCLE = 3
DCLE(1) = "POHNUM"
DTYP(1) =  7
DCLE(2) = "POPLIN"
DTYP(2) =  3
DCLE(3) = "POPSEQ"
DTYP(3) =  3
Return

$CHARGE_CLE
If dim([F:AAA_]POHNUM)>0
 [F:AAA_]POHNUM = [F:POP]POHNUM
Endif
If dim([F:AAA_]POPLIN)>0
 [F:AAA_]POPLIN = [F:POP]POPLIN
Endif
If dim([F:AAA_]POPSEQ)>0
 [F:AAA_]POPSEQ = [F:POP]POPSEQ
Endif
Return

########################################################################
# Return the filter necessary for incremental delete in synchroonization
Subprog GET_FLTDELINC(PFLT)
Variable Clbfile PFLT
PFLT = "1=1"
Append PFLT, " & [F:AAA_]POHNUM=[F:POP]POHNUM"
Append PFLT, " & [F:AAA_]POPLIN=[F:POP]POPLIN"
Append PFLT, " & [F:AAA_]POPSEQ=[F:POP]POPSEQ"

End

$MAJFLD
### POHNUM
[L]FLD="POHNUM"
[L]FORMULE='[F:POP]POHNUM'
If dim([F:AAA_]POHNUM)>0
 [F:AAA_]POHNUM = [F:POP]POHNUM
Endif

### POPLIN
[L]FLD="POPLIN"
[L]FORMULE='[F:POP]POPLIN'
If dim([F:AAA_]POPLIN)>0
 [F:AAA_]POPLIN = [F:POP]POPLIN
Endif

### POPSEQ
[L]FLD="POPSEQ"
[L]FORMULE='[F:POP]POPSEQ'
If dim([F:AAA_]POPSEQ)>0
 [F:AAA_]POPSEQ = [F:POP]POPSEQ
Endif

### VAT
[L]FLD="VAT"
[L]FORMULE='[F:POP]VAT(0)'
If dim([F:AAA_]VAT)>0
 [F:AAA_]VAT = [F:POP]VAT(0)
Endif

### VAT_LEG
[L]FLD="VAT_LEG"
[L]FORMULE='func TRTX3BITC.GETLEG_VAT([F:AAA_]VAT,[F:CPY]LEG)'
If dim([F:AAA_]VAT_LEG)>0
 [F:AAA_]VAT_LEG = func TRTX3BITC.GETLEG_VAT([F:AAA_]VAT,[F:CPY]LEG)
Endif

### ITMDES1
[L]FLD="ITMDES1"
[L]FORMULE='[F:POP]ITMDES1'
If dim([F:AAA_]ITMDES1)>0
 [F:AAA_]ITMDES1 = [F:POP]ITMDES1
Endif

### GROPRI
[L]FLD="GROPRI"
[L]FORMULE='[F:POP]GROPRI'
If dim([F:AAA_]GROPRI)>0
 [F:AAA_]GROPRI = [F:POP]GROPRI
Endif

### NETPRI
[L]FLD="NETPRI"
[L]FORMULE='[F:POP]NETPRI'
If dim([F:AAA_]NETPRI)>0
 [F:AAA_]NETPRI = [F:POP]NETPRI
Endif

### LINBUY
[L]FLD="LINBUY"
[L]FORMULE="string$([F:POP]LINBUY<>'',[F:POP]LINBUY)+string$([F:POP]LINBUY='',[F:POH]BUY)"
If dim([F:AAA_]LINBUY)>0
 [F:AAA_]LINBUY = string$([F:POP]LINBUY<>'',[F:POP]LINBUY)+string$([F:POP]LINBUY='',[F:POH]BUY)
Endif

### ORICRY
[L]FLD="ORICRY"
[L]FORMULE='[F:POP]ORICRY'
If dim([F:AAA_]ORICRY)>0
 [F:AAA_]ORICRY = [F:POP]ORICRY
Endif

### QUAFLG
[L]FLD="QUAFLG"
[L]FORMULE='[F:POP]QUAFLG'
If dim([F:AAA_]QUAFLG)>0
 [F:AAA_]QUAFLG = [F:POP]QUAFLG
Endif


Return

