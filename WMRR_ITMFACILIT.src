#<AdxTL>@(#)0.0.0.0 $Revision$Class Products-sites
# Supervisor
## CRUD-CLASSE ## ITMFACILIT
# 2018-08-27 13:18:31 294


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ITMFACILIT [ITF_]

If !SILENCE : Call TRACE("2 --> Local Instance R_ITMFACILIT") From ASYRCOM : Endif
Local Instance ITMFACILIT Using R_ITMFACILIT

If !SILENCE : Call TRACE("3 --> New Instance R_ITMFACILIT") From ASYRCOM : Endif
ITMFACILIT = NewInstance R_ITMFACILIT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ITF_]ITF0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ITMFACILIT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ITMFACILIT.AREAD([ITF_]ITMREF,[ITF_]STOFCY))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ITMFACILIT.ITF.ITMREF ="-num$(ITMFACILIT.ITF.ITMREF)) From ASYRCOM
 Call TRACE("ITMFACILIT.ITF.STOFCY ="-num$(ITMFACILIT.ITF.STOFCY)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ITMFACILIT.ITF.AKEYS)
  Call TRACE("-"-num$(I)-":"-ITMFACILIT.ITF.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ITF_]
FreeGroup ITMFACILIT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ITMFACILIT,ACLE,ASTATUS,_ETAG)
Variable Instance ITMFACILIT Using R_ITMFACILIT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _ITMREF(20)
Local Char _STOFCY(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMREF = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_STOFCY = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File ITMFACILIT [ITF]
Default File [F:ITF]
Read [F:ITF]ITF0 = [L]_ITMREF;[L]_STOFCY
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ITF]UPDTICK)>0
 [L]_ETAG = num$([F:ITF]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ITMFACILIT,ACLE,ASTATUS)
Variable Instance ITMFACILIT Using R_ITMFACILIT
Value Char ACLE
Variable Integer ASTATUS
Local Char _ITMREF(20)
Local Char _STOFCY(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMREF = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_STOFCY = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ITMFACILIT.AREAD([L]_ITMREF,[L]_STOFCY))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ITMFACILIT,_ITMREF,_STOFCY,ASTATUS)
Variable Instance ITMFACILIT Using R_ITMFACILIT
Value Char _ITMREF
Value Char _STOFCY
Variable Integer ASTATUS

If ITMFACILIT = null : End : Endif

Gosub AVARIABLES From WMR00ITMFACILIT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ITMFACILIT.APARENT=null
 [L]A_I = ITMFACILIT.freeSnapshot
 ITMFACILIT.snapshotEnabled = 0
 ITMFACILIT.setAccessorEnabled = 0
Endif

If fmet ITMFACILIT.ACTX.AGETAFCRIGHT(ITMFACILIT,"GESITF",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:ITF]
Read [F:ITF]ITF0 = [L]_ITMREF;[L]_STOFCY
If fstat
[L]A_ERROR = [L]_ITMREF+"~"+[L]_STOFCY
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ITMFACILIT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:ITF]STOFCY
[L]A_STRACC = ""
If fmet ITMFACILIT.ACTX.AGETAFCRIGHTR(ITMFACILIT,"GESITF",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet ITMFACILIT.ACTX.ASTACRITROLE(ITMFACILIT,[L]_ITMREF+"~"+[L]_STOFCY
& ,"ITF","ITF",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet ITMFACILIT.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

ITMFACILIT.ITF.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet ITMFACILIT.ITF.AREAD([L]_ITMREF,[L]_STOFCY))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ITMFACILIT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ITMFACILIT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ITMFACILIT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ITMFACILIT.APARENT=null
 ITMFACILIT.snapshotEnabled = 1
 ITMFACILIT.setAccessorEnabled = 1
Endif
LogicClose File [ITF] ,[ITM] ,[ITV] ,[ITS]
End



