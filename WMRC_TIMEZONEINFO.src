#<AdxTL>@(#)0.0.0.0 $Revision$Class Time zones
# Supervisor
## CRUD-CLASSE ## TIMEZONEINFO
# 2018-08-27 13:45:52 166


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(TIMEZONEINFO,ASTATUS)
Variable Instance TIMEZONEINFO Using R_TIMEZONEINFO
Variable Integer ASTATUS

If TIMEZONEINFO = null : End : Endif

Gosub AVARIABLES From WMR00TIMEZONEINFO
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

Gosub AREPCONTROL_AINSERT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_TIMEZONEINFO
Else
 Gosub AINSERT_TIMEZONEINFO
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = TIMEZONEINFO.freeSnapshot
TIMEZONEINFO.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
TIMEZONEINFO.ASTALIN = [V]CST_ANEW
TIMEZONEINFO.TZI.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet TIMEZONEINFO.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TIMEZONEINFO.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet TIMEZONEINFO._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet TIMEZONEINFO._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet TIMEZONEINFO._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If TIMEZONEINFO.TZI.ASTALIN = [V]CST_ANEWDEL : Return : Endif
TIMEZONEINFO.TZI.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet TIMEZONEINFO.TZI.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet TIMEZONEINFO.TZI.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_TIMEZONEINFO
Trbegin [F:TZI]
 Gosub AINSERT_TIMEZONEINFO
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(TIMEZONEINFO.TZI.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 TIMEZONEINFO.TZI.ASTALIN = [V]CST_ALL
Endif
Return

#-----------------------------------------------------#
$AINSERT_TIMEZONEINFO
[L]ASTATUS = max([L]ASTATUS,fmet TIMEZONEINFO.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TIMEZONEINFO.TZI._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TIMEZONEINFO.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If TIMEZONEINFO.snapshotEnabled=1
 [L]A_RETIK = TIMEZONEINFO.revertUpdTick
Endif
[L]ASTATUS = max(fmet TIMEZONEINFO.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



