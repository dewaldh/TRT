#<AdxTL>@(#)0.0.0.0 $Revision$Class Routing codes
# Sage X3 supervisor
## CRUD-CLASSE ## TABROUALT
# 2018-03-26 01:28:29 859


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABROUALT [TRO_]

If !SILENCE : Call TRACE("2 --> Local Instance R_TABROUALT") From ASYRCOM : Endif
Local Instance TABROUALT Using R_TABROUALT

If !SILENCE : Call TRACE("3 --> New Instance R_TABROUALT") From ASYRCOM : Endif
TABROUALT = NewInstance R_TABROUALT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TRO_]TRO0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TABROUALT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TABROUALT.AREAD([TRO_]ROUALT))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TABROUALT.TRO.ROUALT ="-num$(TABROUALT.TRO.ROUALT)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TABROUALT.TRO.AKEYS)
  Call TRACE("-"-num$(I)-":"-TABROUALT.TRO.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TRO_]
FreeGroup TABROUALT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TABROUALT,ACLE,ASTATUS,_ETAG)
Variable Instance TABROUALT Using R_TABROUALT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Shortint _ROUALT
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ROUALT = val([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File TABROUALT [TRO]
Default File [F:TRO]
Read [F:TRO]TRO0 = [L]_ROUALT
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TRO]UPDTICK)>0
 [L]_ETAG = num$([F:TRO]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TABROUALT,ACLE,ASTATUS)
Variable Instance TABROUALT Using R_TABROUALT
Value Char ACLE
Variable Integer ASTATUS
Local Shortint _ROUALT
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ROUALT = val([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TABROUALT.AREAD([L]_ROUALT))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TABROUALT,_ROUALT,ASTATUS)
Variable Instance TABROUALT Using R_TABROUALT
Value Shortint _ROUALT
Variable Integer ASTATUS

If TABROUALT = null : End : Endif

Gosub AVARIABLES From WMR00TABROUALT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TABROUALT.APARENT=null
 [L]A_I = TABROUALT.freeSnapshot
 TABROUALT.snapshotEnabled = 0
 TABROUALT.setAccessorEnabled = 0
Endif

If fmet TABROUALT.ACTX.AGETAFCRIGHT(TABROUALT,"GESTRO",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:TRO]
Read [F:TRO]TRO0 = [L]_ROUALT
If fstat
[L]A_ERROR = num$([L]_ROUALT)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABROUALT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:TRO]FCY
[L]A_STRACC = [F:TRO]ACSCOD
If fmet TABROUALT.ACTX.AGETAFCRIGHTR(TABROUALT,"GESTRO",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet TABROUALT.ACTX.AGETACSRIGHTC(TABROUALT,[L]A_STRACC,[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR
 Goto AREAD_END
  Endif
If fmet TABROUALT.ACTX.ASTACRITROLE(TABROUALT,num$([L]_ROUALT)
& ,"TRO","TRO",[V]CST_ATRUE)>=[V]CST_AERROR
   [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
  Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet TABROUALT.ACTION("AREAD_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  TABROUALT.TRO.setAccessorEnabled = 0
  [L]ASTATUS = max([L]ASTATUS,fmet TABROUALT.TRO.AREAD([L]_ROUALT))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet TABROUALT.ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  If [L]ASTATUS<[V]CST_AERROR & TABROUALT.APARENT=null
   # Load Link
   [L]ASTATUS = max([L]ASTATUS,fmet TABROUALT._ALNKPRO)
   If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  Endif
  
  $AREAD_END
  If TABROUALT.APARENT=null
   TABROUALT.snapshotEnabled = 1
   TABROUALT.setAccessorEnabled = 1
  Endif
  LogicClose File [TRO]
  End
  


