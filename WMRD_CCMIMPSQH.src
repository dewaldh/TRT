#<AdxTL>@(#)0.0.0.0 $Revision$Class Impact analysis-Sales quotes
# Supervisor
## CRUD-CLASSE ## CCMIMPSQH
# 2018-08-27 13:12:18 167


############################################################################################
### Subprog ADELETE
############################################################################################
Subprog ADELETE(CCMIMPSQH,ASTATUS)
Variable Instance CCMIMPSQH Using R_CCMIMPSQH
Variable Integer ASTATUS

If CCMIMPSQH = null : End : Endif

Gosub AVARIABLES From WMR00CCMIMPSQH
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

Local Instance ALNKDELTAB Using C_ALNKDELTAB

If fmet CCMIMPSQH.ACTX.AGETAFCRIGHT(CCMIMPSQH,"GESCCM",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto ADELETE_END : Endif
If fmet CCMIMPSQH.ACTX.AGETAFCRIGHTD(CCMIMPSQH,"GESCCM",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto ADELETE_END
Endif

Gosub AREPCONTROL_ADELETE
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

If !adxlog
 Gosub ADELETE_TR_CCMIMPSQH
Else
 Gosub ADELETE_CCMIMPSQH
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_END : Return : Endif

$ADELETE_END
End

#-----------------------------------------------------#
$AREPCONTROL_ADELETE
CCMIMPSQH.ASTALIN = [V]CST_ADEL
CCMIMPSQH.CCMISQH.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQH.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub ADELETE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQH.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$ADELETE_CONTROL
Gosub _ADELETE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Verification delete
[L]ASTATUS = max([L]ASTATUS,func ASYRSUB.VERIFY_INSTANCE(CCMIMPSQH.CCMISQH,ALNKDELTAB))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _ADELETE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_BEFORE
If CCMIMPSQH.CCMISQH.ASTALIN = [V]CST_ANEWDEL : Return : Endif
CCMIMPSQH.CCMISQH.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQH.CCMISQH.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQH.CCMISQH.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_TR_CCMIMPSQH
Trbegin [F:CCMISQH]
 Gosub ADELETE_CCMIMPSQH
 If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_ADELETE_AFTER
Return

#-----------------------------------------------------#
$ADELETE_CCMIMPSQH
[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQH.ACTION("ADELETE_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQH.CCMISQH._ADELETE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMIMPSQH.ACTION("ADELETE_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_ABORT
Rollback
$_ADELETE_ABORT
If CCMIMPSQH.snapshotEnabled=1
 [L]A_RETIK = CCMIMPSQH.revertUpdTick
Endif
[L]ASTATUS = max(fmet CCMIMPSQH.ACTION("ADELETE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



