#<AdxTL>@(#)0.0.0.0 $Revision$Class Account classes
# Supervisor
## CRUD-CLASSE ## GACCCLS
# 2018-08-27 12:32:11 223


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File GACCCLS [CLS_]

If !SILENCE : Call TRACE("2 --> Local Instance C_GACCCLS") From ASYRCOM : Endif
Local Instance GACCCLS Using C_GACCCLS

If !SILENCE : Call TRACE("3 --> New Instance C_GACCCLS") From ASYRCOM : Endif
GACCCLS = NewInstance C_GACCCLS AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [CLS_]CLS0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of GACCCLS") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet GACCCLS.AREAD([CLS_]LEG,[CLS_]CLSCOD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("GACCCLS.LEG ="-num$(GACCCLS.LEG)) From ASYRCOM
 Call TRACE("GACCCLS.CLSCOD ="-num$(GACCCLS.CLSCOD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(GACCCLS.AKEYS)
  Call TRACE("-"-num$(I)-":"-GACCCLS.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [CLS_]
FreeGroup GACCCLS
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(GACCCLS,ACLE,ASTATUS,_ETAG)
Variable Instance GACCCLS Using C_GACCCLS
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _LEG(20)
Local Char _CLSCOD(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_LEG = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CLSCOD = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File GACCCLS [CLS]
Default File [F:CLS]
Read [F:CLS]CLS0 = [L]_LEG;[L]_CLSCOD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:CLS]UPDTICK)>0
 [L]_ETAG = num$([F:CLS]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(GACCCLS,ACLE,ASTATUS)
Variable Instance GACCCLS Using C_GACCCLS
Value Char ACLE
Variable Integer ASTATUS
Local Char _LEG(20)
Local Char _CLSCOD(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_LEG = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CLSCOD = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet GACCCLS.AREAD([L]_LEG,[L]_CLSCOD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(GACCCLS,_LEG,_CLSCOD,ASTATUS)
Variable Instance GACCCLS Using C_GACCCLS
Value Char _LEG
Value Char _CLSCOD
Variable Integer ASTATUS

If GACCCLS = null : End : Endif

Gosub AVARIABLES From WMC00GACCCLS
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If GACCCLS.APARENT=null
 [L]A_I = GACCCLS.freeSnapshot
 GACCCLS.snapshotEnabled = 0
 GACCCLS.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & GACCCLS.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet GACCCLS._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If GACCCLS.APARENT=null
 GACCCLS.snapshotEnabled = 1
 GACCCLS.setAccessorEnabled = 1
Endif
LogicClose File [CLS]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet GACCCLS._ACTION_PARAM("AREAD_BEFORE",[L]_LEG,[L]_CLSCOD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:CLS]
Read [F:CLS]CLS0 = [L]_LEG;[L]_CLSCOD
If fstat
[L]A_ERROR = [L]_LEG+"~"+[L]_CLSCOD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(GACCCLS,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:CLS]AUUID)>0 & [F:CLS]AUUID=NullUuid
 [F:CLS]AUUID = getUuid
Endif
SetInstance GACCCLS With [F:CLS]
GACCCLS.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet GACCCLS.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="GACCCLS" & ZONE="DESTRA" & IDENT1=GACCCLS.LEG & IDENT2=GACCCLS.CLSCOD
 Call ASETTEXTRA(GACCCLS.AXX,GACCCLS.AllocGrp(),"DESTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 GACCCLS.AXX(maxtab(GACCCLS.AXX)).FLG = 0
Next AXX
If !len(fmet GACCCLS.AGETTEXTRA("DESTRA"))
 Call ASETTEXTRA(GACCCLS.AXX,GACCCLS.AllocGrp(),"DESTRA",
& fmet GACCCLS.AGETTEXTRALAN("DESTRA",GACCCLS.ACTX.AFOLD.ALANGDEF),
& GACCCLS.ACTX.LAN) From ASYRSUB
Endif

Return



