#<AdxTL>@(#)0.0.0.0 $Revision$Class Expenses not approved
# Supervisor
## CRUD-CLASSE ## EXPENENTM
# 2018-08-27 13:14:29 954


############################################################################################
### Subprog ADELETE
############################################################################################
Subprog ADELETE(EXPENENTM,ASTATUS)
Variable Instance EXPENENTM Using R_EXPENENTM
Variable Integer ASTATUS

If EXPENENTM = null : End : Endif

Gosub AVARIABLES From WMR00EXPENENTM
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

Local Instance ALNKDELTAB Using C_ALNKDELTAB

If fmet EXPENENTM.ACTX.AGETAFCRIGHT(EXPENENTM,"GESEXS",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto ADELETE_END : Endif
If fmet EXPENENTM.ACTX.AGETAFCRIGHTD(EXPENENTM,"GESEXS",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto ADELETE_END
Endif

Gosub AREPCONTROL_ADELETE
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

If !adxlog
 Gosub ADELETE_TR_EXPENENTM
Else
 Gosub ADELETE_EXPENENTM
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_END : Return : Endif

$ADELETE_END
End

#-----------------------------------------------------#
$AREPCONTROL_ADELETE
EXPENENTM.ASTALIN = [V]CST_ADEL
EXPENENTM.EXS.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub ADELETE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$ADELETE_CONTROL
Gosub _ADELETE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Verification delete
[L]ASTATUS = max([L]ASTATUS,func ASYRSUB.VERIFY_INSTANCE(EXPENENTM.EXS,ALNKDELTAB))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _ADELETE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_BEFORE
If EXPENENTM.EXS.ASTALIN = [V]CST_ANEWDEL : Return : Endif
EXPENENTM.EXS.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.EXS.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENENTM.EXS.CODEXPENS)
 If EXPENENTM.EXS.CODEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.EXS.CODEXPENS([L]A_I).ACTION("ADELETE_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENENTM.EXS.DIMCEN)
 If EXPENENTM.EXS.DIMCEN([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.EXS.DIMCEN([L]A_I).ACTION("ADELETE_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENENTM.EXS.LNKRATLED)
 If EXPENENTM.EXS.LNKRATLED([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.EXS.LNKRATLED([L]A_I).ACTION("ADELETE_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENENTM.EXS.RATEXPENS)
 If EXPENENTM.EXS.RATEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.EXS.RATEXPENS([L]A_I).ACTION("ADELETE_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_AFTER

For [L]A_I=1 To maxtab(EXPENENTM.EXS.CODEXPENS)
 If EXPENENTM.EXS.CODEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.EXS.CODEXPENS([L]A_I).ACTION("ADELETE_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENENTM.EXS.DIMCEN)
 If EXPENENTM.EXS.DIMCEN([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.EXS.DIMCEN([L]A_I).ACTION("ADELETE_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENENTM.EXS.LNKRATLED)
 If EXPENENTM.EXS.LNKRATLED([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.EXS.LNKRATLED([L]A_I).ACTION("ADELETE_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(EXPENENTM.EXS.RATEXPENS)
 If EXPENENTM.EXS.RATEXPENS([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.EXS.RATEXPENS([L]A_I).ACTION("ADELETE_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.EXS.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_TR_EXPENENTM
Trbegin [F:EXS]
 Gosub ADELETE_EXPENENTM
 If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_ADELETE_AFTER
Return

#-----------------------------------------------------#
$ADELETE_EXPENENTM
[L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.ACTION("ADELETE_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.EXS._ADELETE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet EXPENENTM.ACTION("ADELETE_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_ABORT
Rollback
$_ADELETE_ABORT
If EXPENENTM.snapshotEnabled=1
 [L]A_RETIK = EXPENENTM.revertUpdTick
Endif
[L]ASTATUS = max(fmet EXPENENTM.ACTION("ADELETE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



