#<AdxTL>@(#)0.0.0.0 $Revision$Class Task
# Supervisor
## ACLA-CLASSE ## PJMTSK
# 2018-08-27 12:40:35 725

####################################################################
# Traitments
####################################################################
$_ADDTRT
this.AINF.TRT(1) = "WMCM_PJMTSK"
this.AINF.TYP(1) = 1
this.AINF.PTH(1) = ""
this.AINF.TRT(2) = "PJMTSK_CSTD"
this.AINF.TYP(2) = 1
this.AINF.PTH(2) = ""
this.AINF.NBTRT = 2
Return

####################################################################
#Declaration of variables
####################################################################

$DECLARE_VAR
Local Char    ACTION(50) , CURPRO(250) , VALPRO(250) , CURQRY(50) , CURPTH(250)
Local Char    AMETHOD(50) ,AOPERATION(50),AEVENT(50),ARULE(50)
Local Integer ALLSTAT,AISMET,ASTATUS
Return

####################################################################
# Methods of the class
####################################################################
# Fmethod Return type
$CONV_ML2252_TO_ML2254
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "CONV_ML2252_TO_ML2254" : [L]ACTION = "CONV_ML2252_TO_ML2254" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Copy
$COPY
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "COPY" : [L]ACTION = "COPY" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Return type
$GET_PIMTYP_FROM_TCACOD
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "GET_PIMTYP_FROM_TCACOD" : [L]ACTION = "GET_PIMTYP_FROM_TCACOD" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Number of lines
$RITT_COUNT
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RITT_COUNT" : [L]ACTION = "RITT_COUNT" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Product
$RITT_EXISTING
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RITT_EXISTING" : [L]ACTION = "RITT_EXISTING" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Return index
$RITT_GET_INDEX
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RITT_GET_INDEX" : [L]ACTION = "RITT_GET_INDEX" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Return index
$RITT_GET_INDEX_ITMREF
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RITT_GET_INDEX_ITMREF" : [L]ACTION = "RITT_GET_INDEX_ITMREF" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Technical properties init.
$RITT_INIT_TECH_PROP
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RITT_INIT_TECH_PROP" : [L]ACTION = "RITT_INIT_TECH_PROP" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Close operation
$RTKO_CLOSING
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RTKO_CLOSING" : [L]ACTION = "RTKO_CLOSING" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Number of lines
$RTKO_COUNT
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RTKO_COUNT" : [L]ACTION = "RTKO_COUNT" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Operation effective date
$RTKO_EFF_DATE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RTKO_EFF_DATE" : [L]ACTION = "RTKO_EFF_DATE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Operation
$RTKO_EXISTING
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RTKO_EXISTING" : [L]ACTION = "RTKO_EXISTING" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Get effective rate
$RTKO_GET_COST_EFFECTIVE_RATE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RTKO_GET_COST_EFFECTIVE_RATE" : [L]ACTION = "RTKO_GET_COST_EFFECTIVE_RATE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Get cost type
$RTKO_GET_COST_TYPE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RTKO_GET_COST_TYPE" : [L]ACTION = "RTKO_GET_COST_TYPE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Get effective date
$RTKO_GET_EFFECTIVE_DATE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RTKO_GET_EFFECTIVE_DATE" : [L]ACTION = "RTKO_GET_EFFECTIVE_DATE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Get index
$RTKO_GET_INDEX
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RTKO_GET_INDEX" : [L]ACTION = "RTKO_GET_INDEX" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Progress
$RTKO_GET_PROGRESS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RTKO_GET_PROGRESS" : [L]ACTION = "RTKO_GET_PROGRESS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Technical properties init.
$RTKO_INIT_TECH_PROP
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RTKO_INIT_TECH_PROP" : [L]ACTION = "RTKO_INIT_TECH_PROP" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Reactivate operation
$RTKO_REACTIVATE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RTKO_REACTIVATE" : [L]ACTION = "RTKO_REACTIVATE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Suspend operation
$RTKO_SUSPENSION
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "RTKO_SUSPENSION" : [L]ACTION = "RTKO_SUSPENSION" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Delete saleable lines
$SPLD_DEL_ALL_LINES
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "SPLD_DEL_ALL_LINES" : [L]ACTION = "SPLD_DEL_ALL_LINES" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Saleable products
$SPLD_EXISTING
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "SPLD_EXISTING" : [L]ACTION = "SPLD_EXISTING" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Saleable product
$SPLD_GET_INDEX
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "SPLD_GET_INDEX" : [L]ACTION = "SPLD_GET_INDEX" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Technical properties init.
$SPLD_INIT_TECH_PROP
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "SPLD_INIT_TECH_PROP" : [L]ACTION = "SPLD_INIT_TECH_PROP" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Time entry
$TIMEENTRY
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "TIMEENTRY" : [L]ACTION = "TIMEENTRY" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return


####################################################################
# Global methods & standards
####################################################################
$AINIT
Gosub DECLARE_VAR
[L]AEVENT = "AINIT" : [L]ACTION = "AINIT" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# AERRORS
####################################################################

$_AERROR
Gosub DECLARE_VAR From WMC0PJMTSK
Local Integer ALLSTAT
Call ALLERRORS(this,_CTX,_SUPP) From ASYRSUB
For AINDCLA=1 To maxtab(this.RITT)
 If this.RITT(AINDCLA)<>null
  [L]ASTATUS = fmet this.RITT(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.RTKO)
 If this.RTKO(AINDCLA)<>null
  [L]ASTATUS = fmet this.RTKO(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
If this.PIMPL<>null
 [L]ASTATUS = fmet this.PIMPL._AERROR(_CTX,_SUPP)
Endif
For AINDCLA=1 To maxtab(this.SPLD)
 If this.SPLD(AINDCLA)<>null
  [L]ASTATUS = fmet this.SPLD(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
Return

####################################################################
# Delete all errors
####################################################################

$_ADELERRORS
Gosub DECLARE_VAR From WMC0PJMTSK
Local Integer ALLSTAT
[L]ASTATUS = fmet this.ADELETEERROR([L]_APARAM)
For AINDCLA=1 To maxtab(this.RITT)
 If this.RITT(AINDCLA)<>null
  [L]ASTATUS = fmet this.RITT(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.RTKO)
 If this.RTKO(AINDCLA)<>null
  [L]ASTATUS = fmet this.RTKO(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
If this.PIMPL<>null
 [L]ASTATUS = fmet this.PIMPL._ADELERRORS(_APARAM)
Endif
For AINDCLA=1 To maxtab(this.SPLD)
 If this.SPLD(AINDCLA)<>null
  [L]ASTATUS = fmet this.SPLD(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
Return

####################################################################
# _ASEARCHINFOS
####################################################################

$_ASEARCHINFOS
Gosub DECLARE_VAR From WMC0PJMTSK
ASTATUS= func ASYRSUB.ASEARCHINFOS(this,[L]AINS_ORI,[L]ERR_TYPE,[L]PROPERTY,[L]ASTAT,[L]SELSTAT,[L]PATH)
If [L]ERR_TYPE=[V]CST_ACURRENT : Return : Endif
For AINDCLA=1 To maxtab(this.RITT)
 If this.RITT(AINDCLA)<>null
  [L]ASTATUS = fmet this.RITT(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'RITT('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.RTKO)
 If this.RTKO(AINDCLA)<>null
  [L]ASTATUS = fmet this.RTKO(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'RTKO('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
If this.PIMPL<>null
 [L]ASTATUS = fmet this.PIMPL._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'PIMPL')
Endif
For AINDCLA=1 To maxtab(this.SPLD)
 If this.SPLD(AINDCLA)<>null
  [L]ASTATUS = fmet this.SPLD(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'SPLD('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
Return

####################################################################
# AGETERRORSFROM
####################################################################

$_AGETERRORSFROM
Gosub DECLARE_VAR From WMC0PJMTSK
If AINS_FROM<>null
 [L]ASTATUS = fmet AINS_FROM.ASEARCHINFOS( [V]CST_ALL, "", [V]CST_AFATAL, 0)
Endif
Call AGETERRORSFROM(AINS_FROM,this,ENVIRONNEMENT) From ASYRSUB
Return

####################################################################
# RICH MEDIA
####################################################################
$AREAD_CLB
Case [L]_PRONAME
 When "TASDESTEX"
  If fmet this.AGETATTRIBUTE("TASDESTEX","$isLoaded")<>"true"
   Gosub READ_CLB_TASDESTEX
  Else
   [L]_CLB = this.TASDESTEX
  Endif
  If [L]_CNT=''
   [L]ASTATUS = fmet this.ASETATTRIBUTE("TASDESTEX","$contentType","text/plain")
   [L]_CNT = "text/plain"
  Endif
 When "TASCOMTEX"
  If fmet this.AGETATTRIBUTE("TASCOMTEX","$isLoaded")<>"true"
   Gosub READ_CLB_TASCOMTEX
  Else
   [L]_CLB = this.TASCOMTEX
  Endif
  If [L]_CNT=''
   [L]ASTATUS = fmet this.ASETATTRIBUTE("TASCOMTEX","$contentType","text/plain")
   [L]_CNT = "text/plain"
  Endif
Endcase
Return

$READ_CLB_TASDESTEX
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File PJMCLOB [WPJCB]
Else
Local File =this.ACTX.AFOLDER+".PJMCLOB" [WPJCB]
Endif
Raz [L]_CLB
Raz [L]_CNT
Gosub DECODE_KEYVAL From ASYRLOB
[F:WPJCB]CODBLB = [L]_KEYVALTAB(1)
[F:WPJCB]IDENT1 = [L]_KEYVALTAB(2)
[F:WPJCB]IDENT2 = [L]_KEYVALTAB(3)
[F:WPJCB]IDENT3 = [L]_KEYVALTAB(4)
[F:WPJCB]IDENT4 = [L]_KEYVALTAB(5)
Read [WPJCB] =
If !fstat
 [L]_CLB = [F:WPJCB]CLOB
Endif
LogicClose File [WPJCB]
Return

$READ_EXI_TASDESTEX
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File PJMCLOB [WPJCB]
Else
Local File =this.ACTX.AFOLDER+".PJMCLOB" [WPJCB]
Endif
Local Tinyint _EXI : [L]_EXI=1
[F:WPJCB]CODBLB = "PJMTSK"
[F:WPJCB]IDENT1 = "TASDESTEX"
[F:WPJCB]IDENT2 = this.OPPNUM
[F:WPJCB]IDENT3 = this.TASCOD
[F:WPJCB]IDENT4 = AVOID.ACHAR
Look [WPJCB] =
If fstat
 [L]_EXI=0
Endif
LogicClose File [WPJCB]
Return

$READ_CLB_TASCOMTEX
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File PJMCLOB [WPJCB]
Else
Local File =this.ACTX.AFOLDER+".PJMCLOB" [WPJCB]
Endif
Raz [L]_CLB
Raz [L]_CNT
Gosub DECODE_KEYVAL From ASYRLOB
[F:WPJCB]CODBLB = [L]_KEYVALTAB(1)
[F:WPJCB]IDENT1 = [L]_KEYVALTAB(2)
[F:WPJCB]IDENT2 = [L]_KEYVALTAB(3)
[F:WPJCB]IDENT3 = [L]_KEYVALTAB(4)
[F:WPJCB]IDENT4 = [L]_KEYVALTAB(5)
Read [WPJCB] =
If !fstat
 [L]_CLB = [F:WPJCB]CLOB
Endif
LogicClose File [WPJCB]
Return

$READ_EXI_TASCOMTEX
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File PJMCLOB [WPJCB]
Else
Local File =this.ACTX.AFOLDER+".PJMCLOB" [WPJCB]
Endif
Local Tinyint _EXI : [L]_EXI=1
[F:WPJCB]CODBLB = "PJMTSK"
[F:WPJCB]IDENT1 = "TASCOMTEX"
[F:WPJCB]IDENT2 = this.OPPNUM
[F:WPJCB]IDENT3 = this.TASCOD
[F:WPJCB]IDENT4 = AVOID.ACHAR
Look [WPJCB] =
If fstat
 [L]_EXI=0
Endif
LogicClose File [WPJCB]
Return

####################################################################
$ACONTROL
####################################################################
Gosub DECLARE_VAR
[L]AEVENT = "ACONTROL" : [L]ACTION = "ACONTROL" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# ADELLINE
####################################################################
$ADELLINE
Case _ACOLLECTION
 When "PIMPL"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"PIMPL",this)
 When "RITT"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"RITT",this)
 When "RTKO"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"RTKO",this)
 When "SPLD"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"SPLD",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# ADDLINE
####################################################################
$ADDLINE
Case _ACOLLECTION
 When "PIMPL"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"PIMPL","C_PIMPL",this)
 When "RITT"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"RITT","C_PJMTSKITM",this)
 When "RTKO"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"RTKO","C_PJMTSKOPE",this)
 When "SPLD"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"SPLD","C_PJMSALITMD",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETDIM
####################################################################
$AGETDIM
Case _ACOLLECTION
 When "PIMPL"
  [L]_ALINE = 1
 When "RITT"
  [L]_ALINE = 0
 When "RTKO"
  [L]_ALINE = 0
 When "SPLD"
  [L]_ALINE = 0
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETMIN
####################################################################
$AGETMIN
Case _ACOLLECTION
 When "PIMPL"
  [L]_ALINE = 2
 When "RITT"
  [L]_ALINE = 1
 When "RTKO"
  [L]_ALINE = 1
 When "SPLD"
  [L]_ALINE = 1
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# _ALOAD_KEYS
####################################################################
$_ALOAD_KEYS
this.AKEYS(1) = "OPPNUM"
this.AKEYS(2) = "TASCOD"
Return

####################################################################
# _ADELINSTANCE
####################################################################
$_ADELINSTANCE
[L]ASTATUS = func ASYRSUBTAB._ADELINSTANCE(this)
Return

####################################################################
# ADDINSTANCE_BOUND
####################################################################
$ADDINSTANCE_BOUND
this.PIMPL(1) = NewInstance C_PIMPL(this.ACTX,NullUuid,1,this,"PIMPL") AllocGroup this
this.PIMPL(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.PIMPL(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
Return



