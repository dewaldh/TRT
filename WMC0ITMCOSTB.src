#<AdxTL>@(#)0.0.0.0 $Revision$Class Products-costs
# Supervisor
## ACLA-CLASSE ## ITMCOSTB
# 2018-08-27 12:34:43 982

####################################################################
# Traitments
####################################################################
$_ADDTRT
Return

####################################################################
#Declaration of variables
####################################################################

$DECLARE_VAR
Local Char    ACTION(50) , CURPRO(250) , VALPRO(250) , CURQRY(50) , CURPTH(250)
Local Char    AMETHOD(50) ,AOPERATION(50),AEVENT(50),ARULE(50)
Local Integer ALLSTAT,AISMET,ASTATUS
Return


####################################################################
# Global methods & standards
####################################################################
$AINIT
Gosub DECLARE_VAR
[L]AEVENT = "AINIT" : [L]ACTION = "AINIT" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# AERRORS
####################################################################

$_AERROR
Gosub DECLARE_VAR From WMC0ITMCOSTB
Local Integer ALLSTAT
Call ALLERRORS(this,_CTX,_SUPP) From ASYRSUB
For AINDCLA=1 To 20
 If this.L_MATCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_MATCST(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To 15
 If this.L_MACCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_MACCST(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To 15
 If this.L_LABCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_LABCST(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To 20
 If this.L_MATLEVCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_MATLEVCST(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To 15
 If this.L_MACLEVCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_MACLEVCST(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To 15
 If this.L_LABLEVCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_LABLEVCST(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
If this.ITM<>null
 [L]ASTATUS = fmet this.ITM._AERROR(_CTX,_SUPP)
Endif
If this.ITF<>null
 [L]ASTATUS = fmet this.ITF._AERROR(_CTX,_SUPP)
Endif
Return

####################################################################
# Delete all errors
####################################################################

$_ADELERRORS
Gosub DECLARE_VAR From WMC0ITMCOSTB
Local Integer ALLSTAT
[L]ASTATUS = fmet this.ADELETEERROR([L]_APARAM)
For AINDCLA=1 To 20
 If this.L_MATCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_MATCST(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To 15
 If this.L_MACCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_MACCST(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To 15
 If this.L_LABCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_LABCST(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To 20
 If this.L_MATLEVCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_MATLEVCST(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To 15
 If this.L_MACLEVCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_MACLEVCST(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To 15
 If this.L_LABLEVCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_LABLEVCST(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
If this.ITM<>null
 [L]ASTATUS = fmet this.ITM._ADELERRORS(_APARAM)
Endif
If this.ITF<>null
 [L]ASTATUS = fmet this.ITF._ADELERRORS(_APARAM)
Endif
Return

####################################################################
# _ASEARCHINFOS
####################################################################

$_ASEARCHINFOS
Gosub DECLARE_VAR From WMC0ITMCOSTB
ASTATUS= func ASYRSUB.ASEARCHINFOS(this,[L]AINS_ORI,[L]ERR_TYPE,[L]PROPERTY,[L]ASTAT,[L]SELSTAT,[L]PATH)
If [L]ERR_TYPE=[V]CST_ACURRENT : Return : Endif
For AINDCLA=1 To 20
 If this.L_MATCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_MATCST(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'L_MATCST('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To 15
 If this.L_MACCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_MACCST(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'L_MACCST('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To 15
 If this.L_LABCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_LABCST(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'L_LABCST('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To 20
 If this.L_MATLEVCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_MATLEVCST(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'L_MATLEVCST('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To 15
 If this.L_MACLEVCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_MACLEVCST(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'L_MACLEVCST('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To 15
 If this.L_LABLEVCST(AINDCLA)<>null
  [L]ASTATUS = fmet this.L_LABLEVCST(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'L_LABLEVCST('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
If this.ITM<>null
 [L]ASTATUS = fmet this.ITM._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'ITM')
Endif
If this.ITF<>null
 [L]ASTATUS = fmet this.ITF._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'ITF')
Endif
Return

####################################################################
# AGETERRORSFROM
####################################################################

$_AGETERRORSFROM
Gosub DECLARE_VAR From WMC0ITMCOSTB
If AINS_FROM<>null
 [L]ASTATUS = fmet AINS_FROM.ASEARCHINFOS( [V]CST_ALL, "", [V]CST_AFATAL, 0)
Endif
Call AGETERRORSFROM(AINS_FROM,this,ENVIRONNEMENT) From ASYRSUB
Return

####################################################################
$ACONTROL
####################################################################
Gosub DECLARE_VAR
[L]AEVENT = "ACONTROL" : [L]ACTION = "ACONTROL" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# ADELLINE
####################################################################
$ADELLINE
Case _ACOLLECTION
 When "ITF"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"ITF",this)
 When "ITM"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"ITM",this)
 When "L_LABCST"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"L_LABCST",this)
 When "L_LABLEVCST"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"L_LABLEVCST",this)
 When "L_MACCST"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"L_MACCST",this)
 When "L_MACLEVCST"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"L_MACLEVCST",this)
 When "L_MATCST"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"L_MATCST",this)
 When "L_MATLEVCST"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"L_MATLEVCST",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# ADDLINE
####################################################################
$ADDLINE
Case _ACOLLECTION
 When "ITF"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"ITF","C_ITMFACILIT",this)
 When "ITM"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"ITM","C_ITMMASTER",this)
 When "L_LABCST"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"L_LABCST","C_ITMCOSTB_L_LABCST",this)
 When "L_LABLEVCST"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"L_LABLEVCST","C_ITMCOSTB_L_LABLEVCST",this)
 When "L_MACCST"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"L_MACCST","C_ITMCOSTB_L_MACCST",this)
 When "L_MACLEVCST"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"L_MACLEVCST","C_ITMCOSTB_L_MACLEVCST",this)
 When "L_MATCST"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"L_MATCST","C_ITMCOSTB_L_MATCST",this)
 When "L_MATLEVCST"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"L_MATLEVCST","C_ITMCOSTB_L_MATLEVCST",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETDIM
####################################################################
$AGETDIM
Case _ACOLLECTION
 When "ITF"
  [L]_ALINE = 1
 When "ITM"
  [L]_ALINE = 1
 When "L_LABCST"
  [L]_ALINE = 15
 When "L_LABLEVCST"
  [L]_ALINE = 15
 When "L_MACCST"
  [L]_ALINE = 15
 When "L_MACLEVCST"
  [L]_ALINE = 15
 When "L_MATCST"
  [L]_ALINE = 20
 When "L_MATLEVCST"
  [L]_ALINE = 20
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETMIN
####################################################################
$AGETMIN
Case _ACOLLECTION
 When "ITF"
  [L]_ALINE = 2
 When "ITM"
  [L]_ALINE = 2
 When "L_LABCST"
  [L]_ALINE = 3
 When "L_LABLEVCST"
  [L]_ALINE = 3
 When "L_MACCST"
  [L]_ALINE = 3
 When "L_MACLEVCST"
  [L]_ALINE = 3
 When "L_MATCST"
  [L]_ALINE = 3
 When "L_MATLEVCST"
  [L]_ALINE = 3
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# _ALOAD_KEYS
####################################################################
$_ALOAD_KEYS
this.AKEYS(1) = "STOFCY"
this.AKEYS(2) = "ITMREF"
this.AKEYS(3) = "CSTTYP"
this.AKEYS(4) = "ITCSEQ"
this.AKEYS(5) = "UID"
Return

####################################################################
# _ADELINSTANCE
####################################################################
$_ADELINSTANCE
[L]ASTATUS = func ASYRSUBTAB._ADELINSTANCE(this)
Return

####################################################################
# ADDINSTANCE_BOUND
####################################################################
$ADDINSTANCE_BOUND
this.ITF(1) = NewInstance C_ITMFACILIT(this.ACTX,NullUuid,1,this,"ITF") AllocGroup this
this.ITF(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.ITF(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
this.ITF.ITM(1) = NewInstance C_ITMMASTER(this.ACTX,NullUuid,1,this.ITF,"ITM") AllocGroup this
this.ITF.ITM(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.ITF.ITM(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
this.ITF.ITM.ITS(1) = NewInstance C_ITMSALES(this.ACTX,NullUuid,1,this.ITF.ITM,"ITS") AllocGroup this
this.ITF.ITM.ITS(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.ITF.ITM.ITS(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
this.ITF.ITS(1) = NewInstance C_ITMSALES(this.ACTX,NullUuid,1,this.ITF,"ITS") AllocGroup this
this.ITF.ITS(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.ITF.ITS(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
this.ITM(1) = NewInstance C_ITMMASTER(this.ACTX,NullUuid,1,this,"ITM") AllocGroup this
this.ITM(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.ITM(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
this.ITM.ITS(1) = NewInstance C_ITMSALES(this.ACTX,NullUuid,1,this.ITM,"ITS") AllocGroup this
this.ITM.ITS(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.ITM.ITS(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
Return



