#<AdxTL>@(#)0.0.0.0 $Revision$Class ## ?IDENTQRY? SEARCH ##
# Supervisor
#WMSRHOPPOR OPPOR
# 2018-12-07 00:55:38 997

Funprog IS_IMPLEMENTED()
End 1
#---------------------------------------------------------------------------------------------------#
# List of tables to open
#---------------------------------------------------------------------------------------------------#
$ASEARCH_OPEN
If filinfo(filpath("FIL","OPPOR","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File OPPOR [OPP]
If filinfo(filpath("FIL","OPPORCRM","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File OPPORCRM [CRM]
If filinfo(filpath("FIL","OPPORCPP","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File OPPORCPP [CPP]
If filinfo(filpath("FIL","OPPORSBB","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File OPPORSBB [SBB]
If filinfo(filpath("FIL","PIMPL","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File PIMPL [PIMPL]
If filinfo(filpath("FIL","OPPORPJM","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File OPPORPJM [PJM]
If filinfo(filpath("FIL","YRELMAST","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File YRELMAST [YRMA]
Local File OPPOR [OPP_]
Local Char KEY_OPP(120)(1..3)
Local Char KEY_CRM(120)(1..3)
Local Char KEY_CPP(120)(1..3)
Local Char KEY_SBB(120)(1..3)
Local Char KEY_PIMPL(120)(1..3)
Local Char KEY_PJM(120)(1..3)
Local Char KEY_YRMA(120)(1..3)
#Empty keys :
KEY_OPP(3) = ""
KEY_CRM(3) = ""
KEY_CPP(3) = "+"
KEY_SBB(3) = "+"
KEY_PIMPL(3) = ""
KEY_PJM(3) = ""
KEY_YRMA(3) = "+"
ACTION = "ASEARCH_OPEN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to close
#---------------------------------------------------------------------------------------------------#
$ASEARCH_CLOSE
LogicClose File [OPP]
LogicClose File [CRM]
LogicClose File [CPP]
LogicClose File [SBB]
LogicClose File [PIMPL]
LogicClose File [PJM]
LogicClose File [YRMA]
LogicClose File [OPP_]
ACTION = "ASEARCH_CLOSE_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to join
#---------------------------------------------------------------------------------------------------#
$ASEARCH_JOIN
Link [OPP] With
& [CRM]OPPCRM0=[F:OPP]OPPNUM,
& [CPP]OCP0=[F:OPP]OPPNUM,
& [SBB]OBB0=[F:OPP]OPPNUM,
& [PIMPL]PIM0~=[F:OPP]OPPNUM,
& [PJM]OPPPJM0=[F:OPP]OPPNUM,
& [YRMA]YRMA0=[F:OPP]YGUID
& As [LNK_]
& Where (1=1
& )
ACTION = "ASEARCH_JOIN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to join
#---------------------------------------------------------------------------------------------------#
$ASEARCH_JOIN_INC
Link [OPP] With
& [CRM]OPPCRM0=[F:OPP]OPPNUM,
& [CPP]OCP0=[F:OPP]OPPNUM,
& [SBB]OBB0=[F:OPP]OPPNUM,
& [PIMPL]PIM0~=[F:OPP]OPPNUM,
& [PJM]OPPPJM0=[F:OPP]OPPNUM,
& [YRMA]YRMA0=[F:OPP]YGUID
& As [LNK_]
& Where (UPDDATTIM > gdatetime$(QUPDDATTIM)
& )
ACTION = "ASEARCH_JOIN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# Create an instance of
#---------------------------------------------------------------------------------------------------#
$ASEARCH_CREATEINSTANCE
Local Integer ASTATUS
Local Integer FINS
Return

#---------------------------------------------------------------------------------------------------#
# Set an instance
#---------------------------------------------------------------------------------------------------#
$ASEARCH_SETINSTANCE
KEY_OPP(2) = [F:OPP]OPPNUM
KEY_CRM(2) = [F:CRM]OPPNUM
KEY_CPP(2) = [F:CPP]OPPNUM+"+"+[F:CPP]CPP
KEY_SBB(2) = [F:SBB]OPPNUM+"+"+[F:SBB]SBBPJT
KEY_PIMPL(2) = [F:PIMPL]PIMNUM
KEY_PJM(2) = [F:PJM]OPPNUM
KEY_YRMA(2) = [F:YRMA]YGUID+"+"+[F:YRMA]YLIGID

If (KEY_OPP(2) <> KEY_OPP(3)) & (KEY_OPP(1) <> KEY_OPP(2))
 If INS <> null
  [L]ASTATUS = fmet INS.ACTION("ASEARCH_TRANS_AFTER")
  #serialize INS
  Gosub ASEARCH_TO_JSON
 Endif
#Create a new instance
INS = NewInstance C_OPPOR(GACTX,UIDINS,NUMLIN,null,"") AllocGroup null
INS.setaccessorEnabled = 0
SetInstance INS With [F:OPP]
FINS = 1
 KEY_OPP(1) = KEY_OPP(2)
Endif : # KEY_OPP(1) <> KEY_OPP(2)

Return

#---------------------------------------------------------------------------------------------------#
# Serialize the entity in a JSON format
#---------------------------------------------------------------------------------------------------#
$ASEARCH_TO_JSON
If FINS=0 : Return : Endif
QCOUNT += 1
Onerrgo ERROR_VALUE
Append ASND.DATA ,SEPINS1
SEPINS1 = ','+chr$(10)
Append ASND.DATA ,'{'
Append ASND.DATA ,'"SALFCY":'          +'"'+escJson(INS.SALFCY)+'"'
Append ASND.DATA ,',"OPPNUM":'         +'"'+escJson(INS.OPPNUM)+'"'
Append ASND.DATA ,',"OPPCMP":'         +'"'+escJson(INS.OPPCMP)+'"'
Append ASND.DATA ,',"OPPMCN":'         +'"'+escJson(INS.OPPMCN)+'"'
Append ASND.DATA ,',"CUR":'            +'"'+escJson(INS.CUR)+'"'
Append ASND.DATA ,',"OPPREP":'         +'"'+escJson(INS.OPPREP)+'"'
Append ASND.DATA ,',"OPPOPGTYP":'      +'"'+escJson(INS.OPPOPGTYP)+'"'
Append ASND.DATA ,'}'
Onerrgo
Freegroup INS
INS = null
Raz KEY_OPP(1),KEY_CRM(1),KEY_CPP(1),KEY_SBB(1),KEY_PIMPL(1),KEY_PJM(1),KEY_YRMA(1)
FINS = 0
Return

#---------------------------------------------------------------------------------------------------#
# Errors
#---------------------------------------------------------------------------------------------------#
$ERROR_VALUE
SVALUE ='"<error'-errmes$(errn)+'>"'
Resume
#---------------------------------------------------------------------------------------------------#
# Link standard key
#---------------------------------------------------------------------------------------------------#
$AQUERY_PRIMARYKEYS
Local Char ASTDKEY(250)
ASTDKEY = ""
ASTDKEY += "[F:OPP]OPPNUM"
ACTION = "ASEARCH_PRIMARYKEYS_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# Actions
#---------------------------------------------------------------------------------------------------#
$ASEARCH_ACTION
Local Char CURPRO(250),CURPTH(250),AMETHOD(50),AEVENT(50)
[L]AEVENT = [L]ACTION
Gosub METHODS From OPPOR_CSTD
Gosub METHODS From OPPOR_CSPE
Return

#---------------------------------------------------------------------------------------------------#
# APPEND_PROTOTYPE
#---------------------------------------------------------------------------------------------------#
Funprog APPEND_PROTOTYPE(ACTX,WCLOB,PSYR)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Variable Clbfile   WCLOB
Variable Instance  PSYR     Using C_ASYR
Local Integer ERROR : ERROR = 0
Local Integer IND   : IND = 0
Local Char TRTNAME(80)
Local Char REPRESENTATION(80)
Local File ASHW    [ASW]
Filter [ASW] Where CODCLA="OPPOR" & DEFREP=2
Read [ASW]ASW0 First
If !fstat
 If  [ASW]ENAFAC(0) = 2
  REPRESENTATION = [ASW]CODREP
 Else
  WCLOB ="{}"
  End ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(62,149,1),"OPPOR")) 
 Endif
Endif
Close Local File [ASW]
If len(REPRESENTATION)=0
 WCLOB ="{}"
 End ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(62,149,1),"OPPOR")) 
Endif
Append WCLOB,'{'
Append WCLOB,'"$baseUrl":"'+PSYR.PREFIX+'"'
Append WCLOB,',"$baseType":"'+PSYR.CNTPRE+"."+nomap+'"'
Append WCLOB,',"$classTitle":"'+func GET_RES_STRING(ACTX.LAN,18260)+'"'
Append WCLOB,',"$url":"{$baseUrl}/OPPOR'+PSYR.URLREP+''+REPRESENTATION+'.$search"'
Append WCLOB,',"$prototype":"{$baseUrl}/$prototypes('+"'"+'{$representation}.$thumb'+"'"+')"'
Append WCLOB,',"$type":"{$baseType}.'+REPRESENTATION+'.$search"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"$resources":{'
Append WCLOB,'"$type":"application/x-array"'
Append WCLOB,',"$item":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,18260)+' {$key}"'
Append WCLOB,',"$key":"{OPPNUM}"'
Append WCLOB,',"$url":"{$baseUrl}/OPPOR('+"'"+'{$key}'+"'"+')'+PSYR.URLREP+'OPPOR.searchItem"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"SALFCY":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,5060)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"OPPNUM":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,24791)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":30'
Append WCLOB,"}"
Append WCLOB,',"OPPCMP":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,19569)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,',"OPPMCN":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,14420)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,',"CUR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,323)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":3'
Append WCLOB,"}"
Append WCLOB,',"OPPREP":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,2929)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,',"OPPOPGTYP":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,16488)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":8'
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,',"$links":{'
Append WCLOB,"}"
Append WCLOB,"}"
End ERROR
#---------------------------------------------------------------------------------------------------#
# GET_RES_STRING
#---------------------------------------------------------------------------------------------------#
Funprog GET_RES_STRING(_LAN,_ID)
Value Char _LAN
Value Integer _ID
Gosub  _GET_RES_STRING From WMSRHOPPORB
End RES

#---------------------------------------------------------------------------------------------------#
# GET_RES_MENU
#---------------------------------------------------------------------------------------------------#
Funprog GET_RES_MENU(_LAN,_ID)
Value Char _LAN
Value Char _ID
Gosub  _GET_RES_MENU From WMSRHOPPORB
End RES


