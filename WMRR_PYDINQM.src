#<AdxTL>@(#)0.0.0.0 $Revision$Class Allocated payments
# Supervisor
## CRUD-CLASSE ## PYDINQM
# 2018-08-27 13:27:23 097


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File PAYMENTD [PYD_]

If !SILENCE : Call TRACE("2 --> Local Instance R_PYDINQM") From ASYRCOM : Endif
Local Instance PYDINQM Using R_PYDINQM

If !SILENCE : Call TRACE("3 --> New Instance R_PYDINQM") From ASYRCOM : Endif
PYDINQM = NewInstance R_PYDINQM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [PYD_]PYD0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of PYDINQ") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet PYDINQM.AREAD([PYD_]NUM,[PYD_]LIN))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("PYDINQM.PYD.NUM ="-num$(PYDINQM.PYD.NUM)) From ASYRCOM
 Call TRACE("PYDINQM.PYD.LIN ="-num$(PYDINQM.PYD.LIN)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(PYDINQM.PYD.AKEYS)
  Call TRACE("-"-num$(I)-":"-PYDINQM.PYD.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [PYD_]
FreeGroup PYDINQM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(PYDINQM,ACLE,ASTATUS,_ETAG)
Variable Instance PYDINQM Using R_PYDINQM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _NUM(20)
Local Shortint _LIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_NUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LIN = val([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File PAYMENTD [PYD]
Default File [F:PYD]
Read [F:PYD]PYD0 = [L]_NUM;[L]_LIN
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:PYD]UPDTICK)>0
 [L]_ETAG = num$([F:PYD]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(PYDINQM,ACLE,ASTATUS)
Variable Instance PYDINQM Using R_PYDINQM
Value Char ACLE
Variable Integer ASTATUS
Local Char _NUM(20)
Local Shortint _LIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_NUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LIN = val([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PYDINQM.AREAD([L]_NUM,[L]_LIN))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(PYDINQM,_NUM,_LIN,ASTATUS)
Variable Instance PYDINQM Using R_PYDINQM
Value Char _NUM
Value Shortint _LIN
Variable Integer ASTATUS

If PYDINQM = null : End : Endif

Gosub AVARIABLES From WMR00PYDINQM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If PYDINQM.APARENT=null
 [L]A_I = PYDINQM.freeSnapshot
 PYDINQM.snapshotEnabled = 0
 PYDINQM.setAccessorEnabled = 0
Endif

If fmet PYDINQM.ACTX.AGETAFCRIGHT(PYDINQM,"GESPAY",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:PYD]
Read [F:PYD]PYD0 = [L]_NUM;[L]_LIN
If fstat
[L]A_ERROR = [L]_NUM+"~"+num$([L]_LIN)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PYDINQM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet PYDINQM.ACTX.AGETAFCRIGHTR(PYDINQM,"GESPAY",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet PYDINQM.ACTX.ASTACRITROLE(PYDINQM,[L]_NUM+"~"+num$([L]_LIN)
& ,"PAY","PYD",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet PYDINQM.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

PYDINQM.PYD.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet PYDINQM.PYD.AREAD([L]_NUM,[L]_LIN))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PYDINQM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & PYDINQM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet PYDINQM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If PYDINQM.APARENT=null
 PYDINQM.snapshotEnabled = 1
 PYDINQM.setAccessorEnabled = 1
Endif
LogicClose File [PYD] ,[PYH]
End



