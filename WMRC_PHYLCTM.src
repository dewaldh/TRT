#<AdxTL>@(#)0.0.0.0 $Revision$Class Location
# Supervisor
## CRUD-CLASSE ## PHYLCTM
# 2018-08-27 13:22:53 391


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(PHYLCTM,ASTATUS)
Variable Instance PHYLCTM Using R_PHYLCTM
Variable Integer ASTATUS

If PHYLCTM = null : End : Endif

Gosub AVARIABLES From WMR00PHYLCTM
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

Gosub AREPCONTROL_AINSERT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_PHYLCTM
Else
 Gosub AINSERT_PHYLCTM
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = PHYLCTM.freeSnapshot
PHYLCTM.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
PHYLCTM.ASTALIN = [V]CST_ANEW
PHYLCTM.LCT.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet PHYLCTM._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet PHYLCTM._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet PHYLCTM._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If PHYLCTM.LCT.ASTALIN = [V]CST_ANEWDEL : Return : Endif
PHYLCTM.LCT.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.LCT.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.LCT.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_PHYLCTM
Trbegin [F:LCT]
 Gosub AINSERT_PHYLCTM
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(PHYLCTM.LCT.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 PHYLCTM.LCT.ASTALIN = [V]CST_ALL
Endif
Return

#-----------------------------------------------------#
$AINSERT_PHYLCTM
[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.LCT._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PHYLCTM.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If PHYLCTM.snapshotEnabled=1
 [L]A_RETIK = PHYLCTM.revertUpdTick
Endif
[L]ASTATUS = max(fmet PHYLCTM.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



