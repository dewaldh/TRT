#<AdxTL>@(#)0.0.0.0 $Revision$Class Formula wizard setup
# Supervisor
## CRUD-CLASSE ## AVARLOC
# 2018-08-27 13:03:58 675


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(AVARLOC,ASTATUS)
Variable Instance AVARLOC Using R_AVARLOC
Variable Integer ASTATUS

If AVARLOC = null : End : Endif

Gosub AVARIABLES From WMR00AVARLOC
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

Gosub AREPCONTROL_AINSERT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_AVARLOC
Else
 Gosub AINSERT_AVARLOC
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = AVARLOC.freeSnapshot
AVARLOC.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
AVARLOC.ASTALIN = [V]CST_ANEW
AVARLOC.AVR.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet AVARLOC._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet AVARLOC._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet AVARLOC._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If AVARLOC.AVR.ASTALIN = [V]CST_ANEWDEL : Return : Endif
AVARLOC.AVR.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.AVR.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.AVR.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_AVARLOC
Gosub AINSERT_AVARLOC
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(AVARLOC.AVR.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 AVARLOC.AVR.ASTALIN = [V]CST_ALL
Endif
Return

#-----------------------------------------------------#
$AINSERT_AVARLOC
[L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.AVR._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
$_AINSERT_ABORT
If AVARLOC.snapshotEnabled=1
 [L]A_RETIK = AVARLOC.revertUpdTick
Endif
[L]ASTATUS = max(fmet AVARLOC.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



