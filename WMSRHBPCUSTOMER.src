#<AdxTL>@(#)0.0.0.0 $Revision$Class ## ?IDENTQRY? SEARCH ##
# Supervisor
#WMSRHBPCUSTOMER BPCUSTOMER
# 2018-08-27 12:25:47 584

Funprog IS_IMPLEMENTED()
End 1
#---------------------------------------------------------------------------------------------------#
# List of tables to open
#---------------------------------------------------------------------------------------------------#
$ASEARCH_OPEN
If filinfo(filpath("FIL","BPCUSTOMER","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File BPCUSTOMER [BPC]
If filinfo(filpath("FIL","BPARTNER","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File BPARTNER [BPR]
If filinfo(filpath("FIL","BPDLVCUST","fde",-1),1) <0  : ERROR=[V]CST_AERROR : Return : Endif 
Local File BPDLVCUST [BPD]
Local File BPCUSTOMER [BPC_]
Local Char KEY_BPC(120)(1..3)
Local Char KEY_BPR(120)(1..3)
Local Char KEY_BPD(120)(1..3)
#Empty keys :
KEY_BPC(3) = ""
KEY_BPR(3) = ""
KEY_BPD(3) = "+"
ACTION = "ASEARCH_OPEN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to close
#---------------------------------------------------------------------------------------------------#
$ASEARCH_CLOSE
LogicClose File [BPC]
LogicClose File [BPR]
LogicClose File [BPD]
LogicClose File [BPC_]
ACTION = "ASEARCH_CLOSE_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to join
#---------------------------------------------------------------------------------------------------#
$ASEARCH_JOIN
Link [BPC] With
& [BPR]BPR0~=[F:BPC]BPCNUM,
& [BPD]BPD0=[F:BPC]BPCNUM
& As [LNK_]
& Where (1=1
& )
ACTION = "ASEARCH_JOIN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# List of tables to join
#---------------------------------------------------------------------------------------------------#
$ASEARCH_JOIN_INC
Link [BPC] With
& [BPR]BPR0~=[F:BPC]BPCNUM,
& [BPD]BPD0=[F:BPC]BPCNUM
& As [LNK_]
& Where (UPDDATTIM > gdatetime$(QUPDDATTIM)
& )
ACTION = "ASEARCH_JOIN_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# Create an instance of
#---------------------------------------------------------------------------------------------------#
$ASEARCH_CREATEINSTANCE
Local Integer ASTATUS
Local Integer FINS
Local Integer CI1
Local Integer CJ1
Local Char    SEPINS1(2) : SEPINS1=""
Local Char IS1(1)

Return

#---------------------------------------------------------------------------------------------------#
# Set an instance
#---------------------------------------------------------------------------------------------------#
$ASEARCH_SETINSTANCE
KEY_BPC(2) = [F:BPC]BPCNUM
KEY_BPR(2) = [F:BPR]BPRNUM
KEY_BPD(2) = [F:BPD]BPCNUM+"+"+[F:BPD]BPAADD

If (KEY_BPC(2) <> KEY_BPC(3)) & (KEY_BPC(1) <> KEY_BPC(2))
 If INS <> null
  [L]ASTATUS = fmet INS.ACTION("ASEARCH_TRANS_AFTER")
  #serialize INS
  Gosub ASEARCH_TO_JSON
 Endif
#Create a new instance
INS = NewInstance C_BPCUSTOMER(GACTX,UIDINS,NUMLIN,null,"") AllocGroup null
INS.setaccessorEnabled = 0
SetInstance INS With [F:BPC]
FINS = 1
Local Integer REP_MAX:REP_MAX0
CJ1=1
For CI1 = 0 To dim([F:BPC]REP)-1
 Break ([F:BPC]REP(CI1)="")
 REP_MAX+=1
 #Create a new instance
 INS.C_REP(CJ1) = NewInstance C_BPCUSTOMER_C_REP(GACTX,UIDINS,NUMLIN,INS,"") AllocGroup INS
 INS.C_REP(CJ1).setaccessorEnabled = 0
 INS.C_REP(CJ1).REP=[F:BPC]REP(CI1)
 CJ1+=1
Next CI1
 KEY_BPC(1) = KEY_BPC(2)
Endif : # KEY_BPC(1) <> KEY_BPC(2)

Return

#---------------------------------------------------------------------------------------------------#
# Serialize the entity in a JSON format
#---------------------------------------------------------------------------------------------------#
$ASEARCH_TO_JSON
If FINS=0 : Return : Endif
QCOUNT += 1
Onerrgo ERROR_VALUE
Append ASND.DATA ,SEPINS1
SEPINS1 = ','+chr$(10)
Append ASND.DATA ,'{'
Append ASND.DATA ,'"BPCNUM":'          +'"'+escJson(INS.BPCNUM)+'"'
Append ASND.DATA ,',"BPCNAM":'         +'"'+escJson(INS.BPCNAM)+'"'
Append ASND.DATA ,',"BPCSHO":'         +'"'+escJson(INS.BPCSHO)+'"'
Append ASND.DATA ,',"BPCINV":'         +'"'+escJson(INS.BPCINV)+'"'
Append ASND.DATA ,',"BPCPYR":'         +'"'+escJson(INS.BPCPYR)+'"'
Append ASND.DATA ,',"BPCGRU":'         +'"'+escJson(INS.BPCGRU)+'"'
Append ASND.DATA ,',"BPCRSK":'         +'"'+escJson(INS.BPCRSK)+'"'
Append ASND.DATA ,',"CNTNAM":'         +'"'+escJson(INS.CNTNAM)+'"'
Append ASND.DATA ,',"FCTNUM":'         +'"'+escJson(INS.FCTNUM)+'"'
Append ASND.DATA ,',"CUR":'            +'"'+escJson(INS.CUR)+'"'
Append ASND.DATA ,',"PTE":'            +'"'+escJson(INS.PTE)+'"'
Append ASND.DATA ,',"DEP":'            +'"'+escJson(INS.DEP)+'"'
Append ASND.DATA ,',"BPCCDTISR":'      +'"'+escJson(INS.BPCCDTISR)+'"'
Append ASND.DATA ,',"CREUSR":'         +'"'+escJson(INS.CREUSR)+'"'
Append ASND.DATA ,',"CREDAT":'          + func ASYRSRH.DATE_TO_SYR(INS.CREDAT)
Append ASND.DATA ,',"UPDUSR":'         +'"'+escJson(INS.UPDUSR)+'"'
Append ASND.DATA ,',"UPDDAT":'          + func ASYRSRH.DATE_TO_SYR(INS.UPDDAT)
IS1=""
CJ1=1
Append ASND.DATA ,',"C_REP":['
For CI1=1 To REP_MAX
 Append ASND.DATA ,IS1+'{'
 Append ASND.DATA ,'"REP":'             +'"'+escJson(INS.C_REP(CJ1).REP)+'"'
 Append ASND.DATA ,'}'
 IS1=","
 CJ1+=1
Next CI1
Append ASND.DATA , "]"
Append ASND.DATA ,'}'
Onerrgo
Freegroup INS
INS = null
Raz KEY_BPC(1),KEY_BPR(1),KEY_BPD(1)
FINS = 0
Return

#---------------------------------------------------------------------------------------------------#
# Errors
#---------------------------------------------------------------------------------------------------#
$ERROR_VALUE
SVALUE ='"<error'-errmes$(errn)+'>"'
Resume
#---------------------------------------------------------------------------------------------------#
# Link standard key
#---------------------------------------------------------------------------------------------------#
$AQUERY_PRIMARYKEYS
Local Char ASTDKEY(250)
ASTDKEY = ""
ASTDKEY += "[F:BPC]BPCNUM"
ACTION = "ASEARCH_PRIMARYKEYS_AFTER" : Gosub ASEARCH_ACTION
Return

#---------------------------------------------------------------------------------------------------#
# Actions
#---------------------------------------------------------------------------------------------------#
$ASEARCH_ACTION
Local Char CURPRO(250),CURPTH(250),AMETHOD(50),AEVENT(50)
[L]AEVENT = [L]ACTION
 Gosub METHODS From BPCUSTOMER_CSTD
Gosub METHODS From BPCUSTOMER_CSTD
Return

#---------------------------------------------------------------------------------------------------#
# APPEND_PROTOTYPE
#---------------------------------------------------------------------------------------------------#
Funprog APPEND_PROTOTYPE(ACTX,WCLOB,PSYR)
Variable Instance ACTX Using =[V]CST_C_NAME_CLASS_CONTEXT
Variable Clbfile   WCLOB
Variable Instance  PSYR     Using C_ASYR
Local Integer ERROR : ERROR = 0
Local Integer IND   : IND = 0
Local Char TRTNAME(80)
Local Char REPRESENTATION(80)
Local File ASHW    [ASW]
Filter [ASW] Where CODCLA="BPCUSTOMER" & DEFREP=2
Read [ASW]ASW0 First
If !fstat
 If  [ASW]ENAFAC(0) = 2
  REPRESENTATION = [ASW]CODREP
 Else
  WCLOB ="{}"
  End ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(62,149,1),"BPCUSTOMER")) 
 Endif
Endif
Close Local File [ASW]
If len(REPRESENTATION)=0
 WCLOB ="{}"
 End ERROR = func ASYRSUB._ASETSTATUS(ACTX,"",0,[V]CST_AERROR,[V]CST_AHTTP_NOT_FOUND,func ASYRFNC.MES1(mess(62,149,1),"BPCUSTOMER")) 
Endif
Append WCLOB,'{'
Append WCLOB,'"$baseUrl":"'+PSYR.PREFIX+'"'
Append WCLOB,',"$baseType":"'+PSYR.CNTPRE+"."+nomap+'"'
Append WCLOB,',"$classTitle":"'+func GET_RES_STRING(ACTX.LAN,1503)+'"'
Append WCLOB,',"$url":"{$baseUrl}/BPCUSTOMER'+PSYR.URLREP+''+REPRESENTATION+'.$search"'
Append WCLOB,',"$prototype":"{$baseUrl}/$prototypes('+"'"+'{$representation}.$thumb'+"'"+')"'
Append WCLOB,',"$type":"{$baseType}.'+REPRESENTATION+'.$search"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"$resources":{'
Append WCLOB,'"$type":"application/x-array"'
Append WCLOB,',"$item":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1503)+' {$key}"'
Append WCLOB,',"$key":"{BPCNUM}"'
Append WCLOB,',"$url":"{$baseUrl}/BPCUSTOMER('+"'"+'{$key}'+"'"+')'+PSYR.URLREP+'BPCUSTOMER.searchItem"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"BPCNUM":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,3662)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,',"BPCNAM":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1644)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":35'
Append WCLOB,"}"
Append WCLOB,',"BPCSHO":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,4010)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":10'
Append WCLOB,"}"
Append WCLOB,',"BPCINV":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1647)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,',"BPCPYR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1649)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,',"BPCGRU":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1651)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,',"BPCRSK":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,26784)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,',"CNTNAM":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,9789)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":35'
Append WCLOB,"}"
Append WCLOB,',"FCTNUM":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,3669)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,',"CUR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,323)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":3'
Append WCLOB,"}"
Append WCLOB,',"PTE":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,3624)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,',"DEP":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1669)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":5'
Append WCLOB,"}"
Append WCLOB,',"BPCCDTISR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,38131)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,',"CREUSR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1320)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"CREDAT":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1322)+'"'
Append WCLOB,',"$type":"application/x-date"'
Append WCLOB,"}"
Append WCLOB,',"UPDUSR":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1324)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,"}"
Append WCLOB,',"UPDDAT":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,1326)+'"'
Append WCLOB,',"$type":"application/x-date"'
Append WCLOB,"}"
Append WCLOB,',"C_REP":{'
Append WCLOB,'"$type":"application/x-array"'
Append WCLOB,',"$minItems":0'
Append WCLOB,',"$maxItems":2'
Append WCLOB,',"$item":{'
Append WCLOB,'"$type":"application/json"'
Append WCLOB,',"$properties":{'
Append WCLOB,'"REP":{'
Append WCLOB,'"$title":"'+func GET_RES_STRING(ACTX.LAN,2929)+'"'
Append WCLOB,',"$capabilities":"sort,filter"'
Append WCLOB,',"$type":"application/x-string"'
Append WCLOB,',"$maxLength":15'
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,',"$links":{'
Append WCLOB,'"$search$details":{'
Append WCLOB,'"$title":"Detail"'
Append WCLOB,',"$default":true'
Append WCLOB,',"$url":"{$baseUrl}/BPCUSTOMER('+"'"+'{$key}'+"'"+')?representation=BPCUSTOMER.$details"'
Append WCLOB,',"$devices":"desktop"'
Append WCLOB,"}"
Append WCLOB,"}"
Append WCLOB,"}"
End ERROR
#---------------------------------------------------------------------------------------------------#
# GET_RES_STRING
#---------------------------------------------------------------------------------------------------#
Funprog GET_RES_STRING(_LAN,_ID)
Value Char _LAN
Value Integer _ID
Gosub  _GET_RES_STRING From WMSRHBPCUSTOMERB
End RES

#---------------------------------------------------------------------------------------------------#
# GET_RES_MENU
#---------------------------------------------------------------------------------------------------#
Funprog GET_RES_MENU(_LAN,_ID)
Value Char _LAN
Value Char _ID
Gosub  _GET_RES_MENU From WMSRHBPCUSTOMERB
End RES


