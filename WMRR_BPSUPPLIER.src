#<AdxTL>@(#)0.0.0.0 $Revision$Class Suppliers
# Supervisor
## CRUD-CLASSE ## BPSUPPLIER
# 2018-08-27 13:06:49 378


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File BPSUPPLIER [BPS_]

If !SILENCE : Call TRACE("2 --> Local Instance R_BPSUPPLIER") From ASYRCOM : Endif
Local Instance BPSUPPLIER Using R_BPSUPPLIER

If !SILENCE : Call TRACE("3 --> New Instance R_BPSUPPLIER") From ASYRCOM : Endif
BPSUPPLIER = NewInstance R_BPSUPPLIER AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [BPS_]BPS0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of BPSUPPLIER") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.AREAD([BPS_]BPSNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("BPSUPPLIER.BPS.BPSNUM ="-num$(BPSUPPLIER.BPS.BPSNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(BPSUPPLIER.BPS.AKEYS)
  Call TRACE("-"-num$(I)-":"-BPSUPPLIER.BPS.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [BPS_]
FreeGroup BPSUPPLIER
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(BPSUPPLIER,ACLE,ASTATUS,_ETAG)
Variable Instance BPSUPPLIER Using R_BPSUPPLIER
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _BPSNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BPSNUM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File BPSUPPLIER [BPS]
Default File [F:BPS]
Read [F:BPS]BPS0 = [L]_BPSNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:BPS]UPDTICK)>0
 [L]_ETAG = num$([F:BPS]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(BPSUPPLIER,ACLE,ASTATUS)
Variable Instance BPSUPPLIER Using R_BPSUPPLIER
Value Char ACLE
Variable Integer ASTATUS
Local Char _BPSNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BPSNUM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.AREAD([L]_BPSNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(BPSUPPLIER,_BPSNUM,ASTATUS)
Variable Instance BPSUPPLIER Using R_BPSUPPLIER
Value Char _BPSNUM
Variable Integer ASTATUS

If BPSUPPLIER = null : End : Endif

Gosub AVARIABLES From WMR00BPSUPPLIER
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If BPSUPPLIER.APARENT=null
 [L]A_I = BPSUPPLIER.freeSnapshot
 BPSUPPLIER.snapshotEnabled = 0
 BPSUPPLIER.setAccessorEnabled = 0
Endif

If fmet BPSUPPLIER.ACTX.AGETAFCRIGHT(BPSUPPLIER,"GESBPS",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:BPS]
Read [F:BPS]BPS0 = [L]_BPSNUM
If fstat
[L]A_ERROR = [L]_BPSNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(BPSUPPLIER,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet BPSUPPLIER.ACTX.AGETAFCRIGHTR(BPSUPPLIER,"GESBPS",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet BPSUPPLIER.ACTX.ASTACRITROLE(BPSUPPLIER,[L]_BPSNUM
& ,"BPS","BPS",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

BPSUPPLIER.BPS.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.BPS.AREAD([L]_BPSNUM))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & BPSUPPLIER.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet BPSUPPLIER._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If BPSUPPLIER.APARENT=null
 BPSUPPLIER.snapshotEnabled = 1
 BPSUPPLIER.setAccessorEnabled = 1
Endif
LogicClose File [BPS] ,[BPR]
End



