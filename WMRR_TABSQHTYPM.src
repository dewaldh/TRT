#<AdxTL>@(#)0.0.0.0 $Revision$Class Quote types
# Supervisor
## CRUD-CLASSE ## TABSQHTYPM
# 2018-08-27 13:38:49 603


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABSQHTYP [TSQ_]

If !SILENCE : Call TRACE("2 --> Local Instance R_TABSQHTYPM") From ASYRCOM : Endif
Local Instance TABSQHTYPM Using R_TABSQHTYPM

If !SILENCE : Call TRACE("3 --> New Instance R_TABSQHTYPM") From ASYRCOM : Endif
TABSQHTYPM = NewInstance R_TABSQHTYPM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TSQ_]TSQ0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TABSQHTYP") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TABSQHTYPM.AREAD([TSQ_]SQHTYP,[TSQ_]LEG))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TABSQHTYPM.TSQ.SQHTYP ="-num$(TABSQHTYPM.TSQ.SQHTYP)) From ASYRCOM
 Call TRACE("TABSQHTYPM.TSQ.LEG ="-num$(TABSQHTYPM.TSQ.LEG)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TABSQHTYPM.TSQ.AKEYS)
  Call TRACE("-"-num$(I)-":"-TABSQHTYPM.TSQ.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TSQ_]
FreeGroup TABSQHTYPM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TABSQHTYPM,ACLE,ASTATUS,_ETAG)
Variable Instance TABSQHTYPM Using R_TABSQHTYPM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _SQHTYP(5)
Local Char _LEG(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SQHTYP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File TABSQHTYP [TSQ]
Default File [F:TSQ]
Read [F:TSQ]TSQ0 = [L]_SQHTYP;[L]_LEG
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TSQ]UPDTICK)>0
 [L]_ETAG = num$([F:TSQ]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TABSQHTYPM,ACLE,ASTATUS)
Variable Instance TABSQHTYPM Using R_TABSQHTYPM
Value Char ACLE
Variable Integer ASTATUS
Local Char _SQHTYP(5)
Local Char _LEG(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SQHTYP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TABSQHTYPM.AREAD([L]_SQHTYP,[L]_LEG))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TABSQHTYPM,_SQHTYP,_LEG,ASTATUS)
Variable Instance TABSQHTYPM Using R_TABSQHTYPM
Value Char _SQHTYP
Value Char _LEG
Variable Integer ASTATUS

If TABSQHTYPM = null : End : Endif

Gosub AVARIABLES From WMR00TABSQHTYPM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TABSQHTYPM.APARENT=null
 [L]A_I = TABSQHTYPM.freeSnapshot
 TABSQHTYPM.snapshotEnabled = 0
 TABSQHTYPM.setAccessorEnabled = 0
Endif

If fmet TABSQHTYPM.ACTX.AGETAFCRIGHT(TABSQHTYPM,"GESTSQ",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:TSQ]
Read [F:TSQ]TSQ0 = [L]_SQHTYP;[L]_LEG
If fstat
[L]A_ERROR = [L]_SQHTYP+"~"+[L]_LEG
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABSQHTYPM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet TABSQHTYPM.ACTX.AGETAFCRIGHTR(TABSQHTYPM,"GESTSQ",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet TABSQHTYPM.ACTX.ASTACRITROLE(TABSQHTYPM,[L]_SQHTYP+"~"+[L]_LEG
& ,"TSQ","TSQ",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABSQHTYPM.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

TABSQHTYPM.TSQ.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet TABSQHTYPM.TSQ.AREAD([L]_SQHTYP,[L]_LEG))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABSQHTYPM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & TABSQHTYPM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet TABSQHTYPM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If TABSQHTYPM.APARENT=null
 TABSQHTYPM.snapshotEnabled = 1
 TABSQHTYPM.setAccessorEnabled = 1
Endif
LogicClose File [TSQ]
End



