#<AdxTL>@(#)0.0.0.0 $Revision$Class Folders
# Supervisor
## CRUD-CLASSE ## ADOSSIER
# 2018-08-27 12:20:07 556


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ADOSSIER [ADS_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ADOSSIER") From ASYRCOM : Endif
Local Instance ADOSSIER Using C_ADOSSIER

If !SILENCE : Call TRACE("3 --> New Instance C_ADOSSIER") From ASYRCOM : Endif
ADOSSIER = NewInstance C_ADOSSIER AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ADS_]DOSSIER First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ADOSSIER") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ADOSSIER.AREAD([ADS_]DOSSIER))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ADOSSIER.DOSSIER ="-num$(ADOSSIER.DOSSIER)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ADOSSIER.AKEYS)
  Call TRACE("-"-num$(I)-":"-ADOSSIER.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ADS_]
FreeGroup ADOSSIER
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ADOSSIER,ACLE,ASTATUS,_ETAG)
Variable Instance ADOSSIER Using C_ADOSSIER
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _DOSSIER(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_DOSSIER = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File ADOSSIER [ADS]
Default File [F:ADS]
Read [F:ADS]DOSSIER = [L]_DOSSIER
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ADS]UPDTICK)>0
 [L]_ETAG = num$([F:ADS]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ADOSSIER,ACLE,ASTATUS)
Variable Instance ADOSSIER Using C_ADOSSIER
Value Char ACLE
Variable Integer ASTATUS
Local Char _DOSSIER(10)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_DOSSIER = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ADOSSIER.AREAD([L]_DOSSIER))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ADOSSIER,_DOSSIER,ASTATUS)
Variable Instance ADOSSIER Using C_ADOSSIER
Value Char _DOSSIER
Variable Integer ASTATUS

If ADOSSIER = null : End : Endif

Gosub AVARIABLES From WMC00ADOSSIER
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ADOSSIER.APARENT=null
 [L]A_I = ADOSSIER.freeSnapshot
 ADOSSIER.snapshotEnabled = 0
 ADOSSIER.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ADOSSIER.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ADOSSIER._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ADOSSIER.APARENT=null
 ADOSSIER.snapshotEnabled = 1
 ADOSSIER.setAccessorEnabled = 1
Endif
LogicClose File [ADS]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet ADOSSIER._ACTION_PARAM("AREAD_BEFORE",[L]_DOSSIER))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:ADS]
Read [F:ADS]DOSSIER = [L]_DOSSIER
If fstat
[L]A_ERROR = [L]_DOSSIER
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ADOSSIER,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:ADS]AUUID)>0 & [F:ADS]AUUID=NullUuid
 [F:ADS]AUUID = getUuid
Endif
SetInstance ADOSSIER With [F:ADS]
ADOSSIER.ASTALIN = [V]CST_ALL

[L]A_NEWCOL = 0
For [L]A_I=1 To dim([F:ADS]DOSLEG)
 If ([F:ADS]DOSLEG([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  ADOSSIER.ADOSLEG(A_NEWCOL) = NewInstance  C_ADOSSIER_ADOSLEG(ADOSSIER.ACTX,NullUuid,[L]A_I,ADOSSIER,"ADOSLEG") AllocGroup ADOSSIER
  ADOSSIER.ADOSLEG(A_NEWCOL).DOSLEG = [F:ADS]DOSLEG([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet ADOSSIER.ADOSLEG(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To dim([F:ADS]LAN)
 If ([F:ADS]LAN([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  ADOSSIER.ALAN(A_NEWCOL) = NewInstance  C_ADOSSIER_ALAN(ADOSSIER.ACTX,NullUuid,[L]A_I,ADOSSIER,"ALAN") AllocGroup ADOSSIER
  ADOSSIER.ALAN(A_NEWCOL).LAN = [F:ADS]LAN([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet ADOSSIER.ALAN(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To dim([F:ADS]MODULE)
 If ([F:ADS]MODULE([L]A_I-1)<>0)
  [L]A_NEWCOL += 1
  ADOSSIER.AMODULE(A_NEWCOL) = NewInstance  C_ADOSSIER_AMODULE(ADOSSIER.ACTX,NullUuid,[L]A_I,ADOSSIER,"AMODULE") AllocGroup ADOSSIER
  ADOSSIER.AMODULE(A_NEWCOL).MODULE = [F:ADS]MODULE([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet ADOSSIER.AMODULE(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet ADOSSIER.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



