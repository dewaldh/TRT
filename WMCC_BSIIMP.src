#<AdxTL>@(#)0.0.0.0 $Revision$Class Bank statement import
# Supervisor
## CRUD-CLASSE ## BSIIMP
# 2018-08-27 12:26:56 784


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(BSIIMP,ASTATUS)
Variable Instance BSIIMP Using C_BSIIMP
Variable Integer ASTATUS

If BSIIMP = null : End : Endif

Gosub _AVARIABLES From WMC00BSIIMP

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_BSIIMP

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(BSIIMP,ASTATUS)
Variable Instance BSIIMP Using C_BSIIMP
Variable Integer ASTATUS

If BSIIMP = null : End : Endif

Gosub AVARIABLES From WMC00BSIIMP
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_BSIIMP
Else
 Gosub AINSERT_BSIIMP
Endif

Gosub _AINSERT_AFTER
[L]A_I = BSIIMP.freeSnapshot
BSIIMP.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet BSIIMP._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet BSIIMP._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet BSIIMP._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If BSIIMP.ASTALIN = [V]CST_ANEWDEL : Return : Endif
BSIIMP.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet BSIIMP.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(BSIIMP.LINES) : # BSIIMPD -- 2
 If BSIIMP.LINES(A_N2) <> null
& and !find(BSIIMP.LINES(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet BSIIMP.LINES(A_N2).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
 For A_N3=1 To maxtab(BSIIMP.LINES(A_N2).SUBDETAILS) : # BSIIMPDS -- 3
  If BSIIMP.LINES(A_N2).SUBDETAILS(A_N3) <> null
& and !find(BSIIMP.LINES(A_N2).SUBDETAILS(A_N3).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
   [L]ASTATUS = max([L]ASTATUS,fmet BSIIMP.LINES(A_N2).SUBDETAILS(A_N3).ACTION("AINSERT_CONTROL_BEFORE"))
   If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
  Endif
 Next A_N3
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER
For A_N2=1 To maxtab(BSIIMP.LINES) : # BSIIMPD -- 2
 If BSIIMP.LINES(A_N2) <> null
& and !find(BSIIMP.LINES(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet BSIIMP.LINES(A_N2).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
 For A_N3=1 To maxtab(BSIIMP.LINES(A_N2).SUBDETAILS) : # BSIIMPDS -- 3
  If BSIIMP.LINES(A_N2).SUBDETAILS(A_N3) <> null
& and !find(BSIIMP.LINES(A_N2).SUBDETAILS(A_N3).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
   [L]ASTATUS = max([L]ASTATUS,fmet BSIIMP.LINES(A_N2).SUBDETAILS(A_N3).ACTION("AINSERT_CONTROL_AFTER"))
   If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
  Endif
 Next A_N3
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet BSIIMP.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_BSIIMP
Trbegin [F:BSIIMP]
 Gosub AINSERT_BSIIMP
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_BSIIMP
Raz [F:BSIIMP]
[L]ASTATUS = max([L]ASTATUS,fmet BSIIMP.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00BSIIMP._MAJSQL_BSIIMP(BSIIMP))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]A_TYPMAJ=[V]CST_ANEW

#-----------------------------------------------------#
For A_N2=1 To maxtab(BSIIMP.LINES)
 If BSIIMP.LINES(A_N2) <> null and
& (BSIIMP.LINES(A_N2).ASTALIN=[L]A_TYPMAJ or
& BSIIMP.LINES(A_N2).ASTALIN=[V]CST_ALL)
  If BSIIMP.LINES(A_N2).ASTALIN=[L]A_TYPMAJ
   Raz [F:BSIIMPD]
   [L]ASTATUS = max([L]ASTATUS,fmet BSIIMP.LINES(A_N2).ACTION("AINSERT_BEFORE"))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   [L]ASTATUS = func WMC00BSIIMP._MAJSQL_BSIIMPD(BSIIMP.LINES(A_N2))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   [L]ASTATUS = max([L]ASTATUS,fmet BSIIMP.LINES(A_N2).ACTION("AINSERT_AFTER"))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 #-----------------------#
 For A_N3=1 To maxtab(BSIIMP.LINES(A_N2).SUBDETAILS)
  If BSIIMP.LINES(A_N2).SUBDETAILS(A_N3) <> null and
& (BSIIMP.LINES(A_N2).SUBDETAILS(A_N3).ASTALIN=[L]A_TYPMAJ or
& BSIIMP.LINES(A_N2).SUBDETAILS(A_N3).ASTALIN=[V]CST_ALL)
   If BSIIMP.LINES(A_N2).SUBDETAILS(A_N3).ASTALIN=[L]A_TYPMAJ
    Raz [F:BSIIMPS]
    [L]ASTATUS = max([L]ASTATUS,fmet BSIIMP.LINES(A_N2).SUBDETAILS(A_N3).ACTION("AINSERT_BEFORE"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
    [L]ASTATUS = func WMC00BSIIMP._MAJSQL_BSIIMPDS(BSIIMP.LINES(A_N2).SUBDETAILS(A_N3))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
    [L]ASTATUS = max([L]ASTATUS,fmet BSIIMP.LINES(A_N2).SUBDETAILS(A_N3).ACTION("AINSERT_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Endif
  If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
 Next A_N3
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 #-----------------------#
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

[L]ASTATUS = max([L]ASTATUS,fmet BSIIMP.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If BSIIMP.snapshotEnabled=1
 [L]A_RETIK = BSIIMP.revertUpdTick
Endif
[L]ASTATUS = max(fmet BSIIMP.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(BSIIMP.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 BSIIMP.ASTALIN = [V]CST_ALL
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(BSIIMP.LINES)
 If BSIIMP.LINES(A_N2) <> null
  Local Integer ASTATUS2
  For A_N3=1 To maxtab(BSIIMP.LINES(A_N2).SUBDETAILS)
   If BSIIMP.LINES(A_N2).SUBDETAILS(A_N3) <> null
    If BSIIMP.LINES(A_N2).SUBDETAILS(A_N3).ASTALIN=[V]CST_ADEL or BSIIMP.LINES(A_N2).SUBDETAILS(A_N3).ASTALIN=[V]CST_ANEWDEL
     FreeInstance BSIIMP.LINES(A_N2).SUBDETAILS(A_N3)
     BSIIMP.LINES(A_N2).SUBDETAILS(A_N3) = null
    Elsif BSIIMP.LINES(A_N2).SUBDETAILS(A_N3).ASTALIN <> [V]CST_ALL
     BSIIMP.LINES(A_N2).SUBDETAILS(A_N3).ASTALIN = [V]CST_ALL
    Endif
    [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
   Endif
  Next A_N3
  If BSIIMP.LINES(A_N2).ASTALIN=[V]CST_ADEL or BSIIMP.LINES(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance BSIIMP.LINES(A_N2)
   BSIIMP.LINES(A_N2) = null
  Elsif BSIIMP.LINES(A_N2).ASTALIN <> [V]CST_ALL
   BSIIMP.LINES(A_N2).ASTALIN = [V]CST_ALL
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Return



