#<AdxTL>@(#)0.0.0.0 $Revision$Class Table dictionary
# Sage X3 supervisor
## CRUD-CLASSE ## ATABLE
# 2018-06-20 06:34:25 653


############################################################################################
### Subprog _ADELETE
############################################################################################
Subprog _ADELETE(ATABLE,ASTATUS)
Variable Instance ATABLE Using C_ATABLE
Variable Integer ASTATUS

If ATABLE = null : End : Endif

Gosub _AVARIABLES From WMC00ATABLE

[L]A_STRSITE = ""
[L]A_STRACC = ""
Local Instance ALNKDELTAB Using C_ALNKDELTAB
Gosub ADELETE_ATABLE

End

############################################################################################
### Subprog ADELETE
############################################################################################
Subprog ADELETE(ATABLE,ASTATUS)
Variable Instance ATABLE Using C_ATABLE
Variable Integer ASTATUS

If ATABLE = null : End : Endif

Gosub AVARIABLES From WMC00ATABLE
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

Local Instance ALNKDELTAB Using C_ALNKDELTAB

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub ADELETE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

If !adxlog
 Gosub ADELETE_TR_ATABLE
Else
 Gosub ADELETE_ATABLE
Endif

$ADELETE_END
End


$ADELETE_CONTROL
Gosub _ADELETE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Verification delete
[L]ASTATUS = max([L]ASTATUS,func ASYRSUB.VERIFY_INSTANCE(ATABLE,ALNKDELTAB))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _ADELETE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_BEFORE
If ATABLE.ASTALIN = [V]CST_ANEWDEL : Return : Endif
ATABLE.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(ATABLE.ATZ) : # ATABZON -- 2
 If ATABLE.ATZ(A_N2) <> null
& and ATABLE.ATZ(A_N2).ASTALIN<>[V]CST_ANEWDEL
  If ATABLE.ATZ(A_N2).ASTALIN<>[V]CST_ANEW
   ATABLE.ATZ(A_N2).ASTALIN = [V]CST_ADEL
   [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).ACTION("ADELETE_CONTROL_BEFORE"))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
 For A_N3=1 To maxtab(ATABLE.ATZ(A_N2).AMP) : # AMSKPAR -- 5
  If ATABLE.ATZ(A_N2).AMP(A_N3) <> null
& and ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN<>[V]CST_ANEWDEL
   If ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN<>[V]CST_ANEW
    ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN = [V]CST_ADEL
    [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).AMP(A_N3).ACTION("ADELETE_CONTROL_BEFORE"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Endif
 Next A_N3
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(ATABLE.ATI) : # ATABIND -- 3
 If ATABLE.ATI(A_N2) <> null
& and ATABLE.ATI(A_N2).ASTALIN<>[V]CST_ANEWDEL
  If ATABLE.ATI(A_N2).ASTALIN<>[V]CST_ANEW
   ATABLE.ATI(A_N2).ASTALIN = [V]CST_ADEL
   [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATI(A_N2).ACTION("ADELETE_CONTROL_BEFORE"))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(ATABLE.ATA) : # ATABAUD -- 4
 If ATABLE.ATA(A_N2) <> null
& and ATABLE.ATA(A_N2).ASTALIN<>[V]CST_ANEWDEL
  If ATABLE.ATA(A_N2).ASTALIN<>[V]CST_ANEW
   ATABLE.ATA(A_N2).ASTALIN = [V]CST_ADEL
   [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATA(A_N2).ACTION("ADELETE_CONTROL_BEFORE"))
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_AFTER
For A_N2=1 To maxtab(ATABLE.ATZ) : # ATABZON -- 2
 If ATABLE.ATZ(A_N2) <> null
& and ATABLE.ATZ(A_N2).ASTALIN<>[V]CST_ANEWDEL
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).ACTION("ADELETE_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
 For A_N3=1 To maxtab(ATABLE.ATZ(A_N2).AMP) : # AMSKPAR -- 5
  If ATABLE.ATZ(A_N2).AMP(A_N3) <> null
& and ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN<>[V]CST_ANEWDEL
   [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).AMP(A_N3).ACTION("ADELETE_CONTROL_AFTER"))
   If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
  Endif
 Next A_N3
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(ATABLE.ATI) : # ATABIND -- 3
 If ATABLE.ATI(A_N2) <> null
& and ATABLE.ATI(A_N2).ASTALIN<>[V]CST_ANEWDEL
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATI(A_N2).ACTION("ADELETE_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(ATABLE.ATA) : # ATABAUD -- 4
 If ATABLE.ATA(A_N2) <> null
& and ATABLE.ATA(A_N2).ASTALIN<>[V]CST_ANEWDEL
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATA(A_N2).ACTION("ADELETE_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_TR_ATABLE
Trbegin [F:ATB]
 Gosub ADELETE_ATABLE
 If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$ADELETE_ATABLE
[L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ACTION("ADELETE_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

#-----------------------------------------------------#
For A_N2=1 To maxtab(ATABLE.ATZ)
 If ATABLE.ATZ(A_N2) <> null
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).ACTION("ADELETE_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  #-----------------------#
  For A_N3=1 To maxtab(ATABLE.ATZ(A_N2).AMP)
   If ATABLE.ATZ(A_N2).AMP(A_N3) <> null
    [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).AMP(A_N3).ACTION("ADELETE_BEFORE"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
    ATABLE.ATZ(A_N2).AMP(A_N3).ASTALIN=[V]CST_ADEL
    [L]ASTATUS = func WMC00ATABLE._MAJSQL_AMSKPAR(ATABLE.ATZ(A_N2).AMP(A_N3))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
    [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).AMP(A_N3).ACTION("ADELETE_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Next A_N3
  If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
  #-----------------------#
  ATABLE.ATZ(A_N2).ASTALIN=[V]CST_ADEL
  [L]ASTATUS = func WMC00ATABLE._MAJSQL_ATABZON(ATABLE.ATZ(A_N2))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATZ(A_N2).ACTION("ADELETE_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

#-----------------------------------------------------#
For A_N2=1 To maxtab(ATABLE.ATI)
 If ATABLE.ATI(A_N2) <> null
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATI(A_N2).ACTION("ADELETE_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  ATABLE.ATI(A_N2).ASTALIN=[V]CST_ADEL
  [L]ASTATUS = func WMC00ATABLE._MAJSQL_ATABIND(ATABLE.ATI(A_N2))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATI(A_N2).ACTION("ADELETE_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

#-----------------------------------------------------#
For A_N2=1 To maxtab(ATABLE.ATA)
 If ATABLE.ATA(A_N2) <> null
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATA(A_N2).ACTION("ADELETE_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  ATABLE.ATA(A_N2).ASTALIN=[V]CST_ADEL
  [L]ASTATUS = func WMC00ATABLE._MAJSQL_ATABAUD(ATABLE.ATA(A_N2))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  [L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ATA(A_N2).ACTION("ADELETE_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

[L]ASTATUS = func ASYRSUB.DELETE_LINKS(ATABLE,ALNKDELTAB)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Call PUT_CFG(ATABLE,"FICCFG",ATABLE.FICCFG,ATABLE.CODFIC) From SUBATB
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]ASTATUS = max([L]ASTATUS,func WMC00ATABLE._MAJSQL_ATABLE(ATABLE))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ATABLE.ACTION("ADELETE_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_ABORT
Rollback
$_ADELETE_ABORT
If ATABLE.snapshotEnabled=1
 [L]A_RETIK = ATABLE.revertUpdTick
Endif
[L]ASTATUS = max(fmet ATABLE.ACTION("ADELETE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#

#-----------------------------------------------------#
$_ADELETE_AFTER
Return



