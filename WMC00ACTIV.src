#<AdxTL>@(#)0.0.0.0 $Revision$Class Activity codes
# Supervisor
## CRUD-CLASSE ## ACTIV
# 2018-08-27 12:19:24 139

Gosub TEST From WMCR_ACTIV : End

############################################################################################
## C : Subprog AINSERT(INSTANCE)
## D : Subprog ADELETE(INSTANCE)
## R : Subprog AREAD(INSTANCE,CODACT)
## U : Subprog AUPDATE(INSTANCE)
############################################################################################
# ACTIV : ACTIV
# ADOSACT : ACTIV ADOSACT
############################################################################################

############################################################################################
### AVARIABLES
############################################################################################
$AVARIABLES
[L]ASTATUS =max([L]ASTATUS,fmet ACTIV._ADELERRORS([V]CST_ALLERRORS))
$_AVARIABLES
Local    Integer     A_LEVEL,A_I,A_NEWCOL,A_N1,A_N2,A_S2
Local    Integer    ASTATUS,A_RETIK,A_TYPMAJ,A_ASTALIN
Local    Char        A_STRSITE(GLONFCY),A_STRACC(GLONACS),CURPRO(50),A_PARENT(50),A_PATH(200),A_ABR(GLONABR),A_ERROR(250)
Local    Uuident    A_UUID

[L]A_LEVEL    = ACTIV.ACTX.LEVWML
[L]ASTATUS  = 0

Onerrgo ERR_OPENTAB
If find(ACTIV.ACTX.AFOLDER,nomap,"")>0
 Local File ACTIV [ACV]
 Local File ADOSACT [ADA]
 Local File ATEXTE [ATX]
Else
 Local File =ACTIV.ACTX.AFOLDER+".ACTIV" [ACV]
 Local File =ACTIV.ACTX.AFOLDER+".ADOSACT" [ADA]
 Local File =ACTIV.ACTX.AFOLDER+".ATEXTE" [ATX]
Endif
Onerrgo
Return

$ERR_OPENTAB
[L]ASTATUS = max([L]ASTATUS,fmet ACTIV.ASETERROR("",errp+"("+num$(errl)+")"-mess(6,123,1)-num$(errn)-errmes$(errn)-errm,[V]CST_AERROR))
Resume

############################################################################################
### Link
############################################################################################
$AOPEN_LINK
Gosub AVARIABLES
Link [ACV] With
& [ADA]ADA0 ~= GACTX.AFOLDER;[F:ACV]CODACT
& As [LNK_]
Return

############################################################################################
### ACTIV(WACV)
############################################################################################
Funprog  _MAJSQL_ACTIV(WACV)
Variable Instance WACV Using C_ACTIV
Local Integer ASTATUS,A_I,A_J
Default File [F:ACV]
If WACV.ASTALIN=[V]CST_ANEW
 Call INICRE(WACV) From ASYRSUB
 SetInstance [F:ACV] With WACV
 Call NUMBER(fmet WACV.AGETTEXT("LIBACT"),[F:ACV]LIBACT,WACV) From ASYRDIV
 Write [F:ACV]
 If fstat
  Call FSTA("ACV",WACV,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WACV.updTick = [F:ACV]updTick
Elsif WACV.ASTALIN=[V]CST_ALL or WACV.ASTALIN=[V]CST_AUPD
 Call INIUPD(WACV) From ASYRSUB
 SetInstance [F:ACV] With WACV
 Call NUMBER(fmet WACV.AGETTEXT("LIBACT"),[F:ACV]LIBACT,WACV) From ASYRDIV
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WACV,"ACTIV")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:ACV]CODACT = [F:ACV]CODACT
 If fstat
  Call FSTA("ACV",WACV,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WACV.updTick = [F:ACV]updTick
Elsif WACV.ASTALIN=[V]CST_ADEL
 SetInstance [F:ACV] With WACV
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WACV,"ACTIV")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:ACV]CODACT = [F:ACV]CODACT
 If fstat
  Call FSTA("ACV",WACV,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK

############################################################################################
### ADOSACT(WADA)
############################################################################################
Funprog  _MAJSQL_ADOSACT(WADA)
Variable Instance WADA Using C_ADOSACT
Local Integer ASTATUS,A_I,A_J
Default File [F:ADA]
If WADA.ASTALIN=[V]CST_ANEW
 Call INICRE(WADA) From ASYRSUB
 SetInstance [F:ADA] With WADA
 Write [F:ADA]
 If fstat
  Call FSTA("ADA",WADA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WADA.updTick = [F:ADA]updTick
Elsif WADA.ASTALIN=[V]CST_ALL or WADA.ASTALIN=[V]CST_AUPD
 Call INIUPD(WADA) From ASYRSUB
 SetInstance [F:ADA] With WADA
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WADA,"ADOSACT")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:ADA]ADA0 = [F:ADA]DOSSIER;[F:ADA]CODACT
 If fstat
  Call FSTA("ADA",WADA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WADA.updTick = [F:ADA]updTick
Elsif WADA.ASTALIN=[V]CST_ADEL
 SetInstance [F:ADA] With WADA
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WADA,"ADOSACT")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:ADA]ADA0 = [F:ADA]DOSSIER;[F:ADA]CODACT
 If fstat
  Call FSTA("ADA",WADA,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK



