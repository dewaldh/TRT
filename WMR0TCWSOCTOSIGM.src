#<AdxTL>@(#)0.0.0.0 $Revision$Class Open orders to be signed
# Supervisor
## ACLA-CLASSE ## TCWSOCTOSIGM
# 2018-08-27 13:43:02 192


####################################################################
# Actions
####################################################################

$ACTION
Local    Char     CURSTR(30) , CODTRT(30)(1..16)
Local    Integer  TYPTRT(1..16) , NBRTRT , INDTRT
[L]CURSTR = "TCWSOCTOSIGM"

Gosub ACTION From ASYRSUB
Return

####################################################################
# Traitments
####################################################################
$_ADDTRT
this.AINF.TRT(1) = "TCWSOCTOSIGM_RSTD"
this.AINF.TYP(1) = 1
this.AINF.PTH(1) = ""
this.AINF.TRT(2) = "WMRS_TCWSOCTOSIGM"
this.AINF.TYP(2) = 1
this.AINF.PTH(2) = ""
this.AINF.NBTRT = 2
Return

####################################################################
#Declaration of variables
####################################################################

$DECLARE_VAR
Local Char    ACTION(50) , CURPRO(250) , VALPRO(250) , CURQRY(50) , CURPTH(250)
Local Char    AMETHOD(50) ,AOPERATION(50),AEVENT(50),ARULE(50)
Local Integer ALLSTAT,AISMET,ASTATUS
Return

####################################################################
# Global methods & standards
####################################################################
$AINIT
Gosub DECLARE_VAR
[L]AEVENT = "AINIT" : [L]ACTION = "AINIT" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
$ACONTROL
####################################################################
Gosub DECLARE_VAR
[L]AEVENT = "ACONTROL" : [L]ACTION = "ACONTROL" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# AERRORS
####################################################################

$_AERROR
Gosub DECLARE_VAR From WMR0TCWSOCTOSIGM
Local Integer ALLSTAT
Call ALLERRORS(this,_CTX,_SUPP) From ASYRSUB
For AINDCLA=1 To 9
 If this.SIG(AINDCLA)<>null
  [L]ASTATUS = fmet this.SIG(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
If this.AWS<>null
 [L]ASTATUS = fmet this.AWS._AERROR(_CTX,_SUPP)
Endif
Return

####################################################################
# Delete all errors
####################################################################

$_ADELERRORS
Gosub DECLARE_VAR From WMR0TCWSOCTOSIGM
Local Integer ALLSTAT
[L]ASTATUS = fmet this.ADELETEERROR([L]_APARAM)
For AINDCLA=1 To 9
 If this.SIG(AINDCLA)<>null
  [L]ASTATUS = fmet this.SIG(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
If this.AWS<>null
 [L]ASTATUS = fmet this.AWS._ADELERRORS(_APARAM)
Endif
Return

####################################################################
# ADELLINE
####################################################################
$ADELLINE
Case _ACOLLECTION
 When "SIG"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"SIG",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# ADDLINE
####################################################################
$ADDLINE
Case _ACOLLECTION
 When "SIG"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"SIG","R_TCWSOCTOSIGM_SIG",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETDIM
####################################################################
$AGETDIM
Case _ACOLLECTION
 When "SIG"
  [L]_ALINE = 9
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETMIN
####################################################################
$AGETMIN
Case _ACOLLECTION
 When "SIG"
  [L]_ALINE = 2
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# EXEC OPERATION
####################################################################
Subprog EXE_OPERATION(WCLA,_OPERATION,ACLBRETURN,ACLE,ATBPAR,TBVAL)
Variable Instance WCLA Using OBJECT
Value    Char _OPERATION
Variable Clbfile ACLBRETURN
Value    Char ACLE
Variable Char ATBPAR()(1..)
Variable Char TBVAL()(1..)
Local Integer ASTATUS
Case [L]_OPERATION
 When "OPE_SIGNACTION"
  # Keys
  Local Char _DEST(250)
  # Keys
  Local Char _CHRONO(250)
  Gosub SET_CLE From ASYRSUB
  [L]_DEST = num$([L]CLE(1))
  [L]_CHRONO = num$([L]CLE(2))
  # Parameters value
  Local Char _PACTION(250)
  [L]_PACTION = func ASYRSUB.PARAM_CHAR("PACTION",ATBPAR,TBVAL)
  Local Char _PEMAIL(250)
  [L]_PEMAIL = func ASYRSUB.PARAM_CHAR("PEMAIL",ATBPAR,TBVAL)
  # Call operation
  Local Integer ARETURN
  [L]ARETURN = fmet WCLA.OPE_SIGNACTION([L]_DEST,[L]_CHRONO,[L]_PACTION,[L]_PEMAIL)
  [L]ACLBRETURN='{ "$type":"application/x-integer", "$value":'
  [L]ACLBRETURN+=num$([L]ARETURN)
  [L]ACLBRETURN+=' } '
 When Default
Endcase 
End

####################################################################
# EXEC METHOD
####################################################################
Subprog EXE_METHOD(WCLA,_METHOD,NAME_INSTANCE,ATBPAR,TBVAL)
Variable Instance WCLA Using OBJECT
Value    Char  NAME_INSTANCE
Value    Char _METHOD
Variable Char ATBPAR()(1..)
Variable Char TBVAL()(1..)
Local Integer ASTATUS
Case [L]_METHOD
 When Default
Endcase 
End

####################################################################
# _ADELINSTANCE
####################################################################
$_ADELINSTANCE
[L]ASTATUS = func ASYRSUBTAB._ADELINSTANCE(this)
Return

####################################################################
# ADDINSTANCE_BOUND
####################################################################
$ADDINSTANCE_BOUND
this.AWS = NewInstance C_TCWSOC(this.ACTX,NullUuid,0,this,"AWS") AllocGroup this
this.AWS.ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.AWS.ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
this.AWS.SOH(1) = NewInstance C_SOPENORDER(this.ACTX,NullUuid,1,this.AWS,"SOH") AllocGroup this
this.AWS.SOH(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.AWS.SOH(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
Return



