#<AdxTL>@(#)0.0.0.0 $Revision$Class Transport lead time
# Supervisor
## CRUD-CLASSE ## TABPLACETIME
# 2018-08-27 13:38:25 863


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(TABPLACETIME,ASTATUS)
Variable Instance TABPLACETIME Using R_TABPLACETIME
Variable Integer ASTATUS

If TABPLACETIME = null : End : Endif

Gosub AVARIABLES From WMR00TABPLACETIME
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If fmet TABPLACETIME.ACTX.AGETAFCRIGHT(TABPLACETIME,"GESTPCT",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END : Endif
If fmet TABPLACETIME.ACTX.AGETAFCRIGHTC(TABPLACETIME,"GESTPCT",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END
Endif

Gosub AREPCONTROL_AINSERT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_TABPLACETIME
Else
 Gosub AINSERT_TABPLACETIME
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = TABPLACETIME.freeSnapshot
TABPLACETIME.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
TABPLACETIME.ASTALIN = [V]CST_ANEW
TABPLACETIME.TPCT.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet TABPLACETIME.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABPLACETIME.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet TABPLACETIME._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet TABPLACETIME._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet TABPLACETIME._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If TABPLACETIME.TPCT.ASTALIN = [V]CST_ANEWDEL : Return : Endif
TABPLACETIME.TPCT.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet TABPLACETIME.TPCT.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

[L]ASTATUS = max([L]ASTATUS,fmet TABPLACETIME.TPCT.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_TABPLACETIME
Trbegin [F:TPCT]
 Gosub AINSERT_TABPLACETIME
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(TABPLACETIME.TPCT.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 TABPLACETIME.TPCT.ASTALIN = [V]CST_ALL
Endif
Return

#-----------------------------------------------------#
$AINSERT_TABPLACETIME
[L]ASTATUS = max([L]ASTATUS,fmet TABPLACETIME.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABPLACETIME.TPCT._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABPLACETIME.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If TABPLACETIME.snapshotEnabled=1
 [L]A_RETIK = TABPLACETIME.revertUpdTick
Endif
[L]ASTATUS = max(fmet TABPLACETIME.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



