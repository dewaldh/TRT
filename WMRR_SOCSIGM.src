#<AdxTL>@(#)0.0.0.0 $Revision$Class Signed open orders
# Supervisor
## CRUD-CLASSE ## SOCSIGM
# 2018-08-27 13:29:50 485


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File AWRKHISSUI [AWS_]

If !SILENCE : Call TRACE("2 --> Local Instance R_SOCSIGM") From ASYRCOM : Endif
Local Instance SOCSIGM Using R_SOCSIGM

If !SILENCE : Call TRACE("3 --> New Instance R_SOCSIGM") From ASYRCOM : Endif
SOCSIGM = NewInstance R_SOCSIGM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [AWS_]AWS2 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TCAWRKHISSUI") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet SOCSIGM.AREAD([AWS_]DEST,[AWS_]CHRONO))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("SOCSIGM.AWS.DEST ="-num$(SOCSIGM.AWS.DEST)) From ASYRCOM
 Call TRACE("SOCSIGM.AWS.CHRONO ="-num$(SOCSIGM.AWS.CHRONO)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(SOCSIGM.AWS.AKEYS)
  Call TRACE("-"-num$(I)-":"-SOCSIGM.AWS.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [AWS_]
FreeGroup SOCSIGM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(SOCSIGM,ACLE,ASTATUS,_ETAG)
Variable Instance SOCSIGM Using R_SOCSIGM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _DEST(5)
Local Char _CHRONO(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_DEST = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CHRONO = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File AWRKHISSUI [AWS]
Default File [F:AWS]
Read [F:AWS]AWS2 = [L]_DEST;[L]_CHRONO
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:AWS]UPDTICK)>0
 [L]_ETAG = num$([F:AWS]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(SOCSIGM,ACLE,ASTATUS)
Variable Instance SOCSIGM Using R_SOCSIGM
Value Char ACLE
Variable Integer ASTATUS
Local Char _DEST(5)
Local Char _CHRONO(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_DEST = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CHRONO = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SOCSIGM.AREAD([L]_DEST,[L]_CHRONO))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(SOCSIGM,_DEST,_CHRONO,ASTATUS)
Variable Instance SOCSIGM Using R_SOCSIGM
Value Char _DEST
Value Char _CHRONO
Variable Integer ASTATUS

If SOCSIGM = null : End : Endif

Gosub AVARIABLES From WMR00SOCSIGM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If SOCSIGM.APARENT=null
 [L]A_I = SOCSIGM.freeSnapshot
 SOCSIGM.snapshotEnabled = 0
 SOCSIGM.setAccessorEnabled = 0
Endif

If fmet SOCSIGM.ACTX.AGETAFCRIGHT(SOCSIGM,"SYRWRKPLN",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:AWS]
Read [F:AWS]AWS2 = [L]_DEST;[L]_CHRONO
If fstat
[L]A_ERROR = [L]_DEST+"~"+[L]_CHRONO
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(SOCSIGM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet SOCSIGM.ACTX.AGETAFCRIGHTR(SOCSIGM,"SYRWRKPLN",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif

[L]ASTATUS = max([L]ASTATUS,fmet SOCSIGM.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

SOCSIGM.AWS.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet SOCSIGM.AWS.AREAD([L]_DEST,[L]_CHRONO))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet SOCSIGM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & SOCSIGM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet SOCSIGM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If SOCSIGM.APARENT=null
 SOCSIGM.snapshotEnabled = 1
 SOCSIGM.setAccessorEnabled = 1
Endif
LogicClose File [AWS]
End



