#<AdxTL>@(#)0.0.0.0 $Revision$Class Returns
# Supervisor
## CRUD-CLASSE ## SRHBPCM
# 2018-08-27 13:35:40 259


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File SRETURND [SRD_]

If !SILENCE : Call TRACE("2 --> Local Instance R_SRHBPCM") From ASYRCOM : Endif
Local Instance SRHBPCM Using R_SRHBPCM

If !SILENCE : Call TRACE("3 --> New Instance R_SRHBPCM") From ASYRCOM : Endif
SRHBPCM = NewInstance R_SRHBPCM AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [SRD_]SRD0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of SRHBPCM") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet SRHBPCM.AREAD([SRD_]SRHNUM,[SRD_]SRDLIN))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("SRHBPCM.SRD.SRHNUM ="-num$(SRHBPCM.SRD.SRHNUM)) From ASYRCOM
 Call TRACE("SRHBPCM.SRD.SRDLIN ="-num$(SRHBPCM.SRD.SRDLIN)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(SRHBPCM.SRD.AKEYS)
  Call TRACE("-"-num$(I)-":"-SRHBPCM.SRD.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [SRD_]
FreeGroup SRHBPCM
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(SRHBPCM,ACLE,ASTATUS,_ETAG)
Variable Instance SRHBPCM Using R_SRHBPCM
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _SRHNUM(20)
Local Integer _SRDLIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SRHNUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_SRDLIN = val([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File SRETURND [SRD]
Default File [F:SRD]
Read [F:SRD]SRD0 = [L]_SRHNUM;[L]_SRDLIN
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:SRD]UPDTICK)>0
 [L]_ETAG = num$([F:SRD]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(SRHBPCM,ACLE,ASTATUS)
Variable Instance SRHBPCM Using R_SRHBPCM
Value Char ACLE
Variable Integer ASTATUS
Local Char _SRHNUM(20)
Local Integer _SRDLIN
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_SRHNUM = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_SRDLIN = val([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SRHBPCM.AREAD([L]_SRHNUM,[L]_SRDLIN))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(SRHBPCM,_SRHNUM,_SRDLIN,ASTATUS)
Variable Instance SRHBPCM Using R_SRHBPCM
Value Char _SRHNUM
Value Integer _SRDLIN
Variable Integer ASTATUS

If SRHBPCM = null : End : Endif

Gosub AVARIABLES From WMR00SRHBPCM
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If SRHBPCM.APARENT=null
 [L]A_I = SRHBPCM.freeSnapshot
 SRHBPCM.snapshotEnabled = 0
 SRHBPCM.setAccessorEnabled = 0
Endif

If fmet SRHBPCM.ACTX.AGETAFCRIGHT(SRHBPCM,"GESSRH",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:SRD]
Read [F:SRD]SRD0 = [L]_SRHNUM;[L]_SRDLIN
If fstat
[L]A_ERROR = [L]_SRHNUM+"~"+num$([L]_SRDLIN)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(SRHBPCM,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:SRD]STOFCY
[L]A_STRACC = ""
If fmet SRHBPCM.ACTX.AGETAFCRIGHTR(SRHBPCM,"GESSRH",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet SRHBPCM.ACTX.ASTACRITROLE(SRHBPCM,[L]_SRHNUM+"~"+num$([L]_SRDLIN)
& ,"SRH","SRD",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet SRHBPCM.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

SRHBPCM.SRD.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet SRHBPCM.SRD.AREAD([L]_SRHNUM,[L]_SRDLIN))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet SRHBPCM.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & SRHBPCM.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet SRHBPCM._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If SRHBPCM.APARENT=null
 SRHBPCM.snapshotEnabled = 1
 SRHBPCM.setAccessorEnabled = 1
Endif
LogicClose File [SRD] ,[SRH]
End



