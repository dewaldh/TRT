#<AdxTL>@(#)0.0.0.0 $Revision$Class Currency table
# Supervisor
## CRUD-CLASSE ## ACUR
# 2018-08-27 12:19:36 473


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABCUR [TCU_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ACUR") From ASYRCOM : Endif
Local Instance ACUR Using C_ACUR

If !SILENCE : Call TRACE("3 --> New Instance C_ACUR") From ASYRCOM : Endif
ACUR = NewInstance C_ACUR AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TCU_]TCU0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ACUR") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ACUR.AREAD([TCU_]CUR))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ACUR.CUR ="-num$(ACUR.CUR)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ACUR.AKEYS)
  Call TRACE("-"-num$(I)-":"-ACUR.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TCU_]
FreeGroup ACUR
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ACUR,ACLE,ASTATUS,_ETAG)
Variable Instance ACUR Using C_ACUR
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CUR(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CUR = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File TABCUR [TCU]
Default File [F:TCU]
Read [F:TCU]TCU0 = [L]_CUR
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TCU]UPDTICK)>0
 [L]_ETAG = num$([F:TCU]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ACUR,ACLE,ASTATUS)
Variable Instance ACUR Using C_ACUR
Value Char ACLE
Variable Integer ASTATUS
Local Char _CUR(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CUR = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ACUR.AREAD([L]_CUR))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ACUR,_CUR,ASTATUS)
Variable Instance ACUR Using C_ACUR
Value Char _CUR
Variable Integer ASTATUS

If ACUR = null : End : Endif

Gosub AVARIABLES From WMC00ACUR
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ACUR.APARENT=null
 [L]A_I = ACUR.freeSnapshot
 ACUR.snapshotEnabled = 0
 ACUR.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif


$AREAD_END
LogicClose File [TCU]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet ACUR._ACTION_PARAM("AREAD_BEFORE",[L]_CUR))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:TCU]
Read [F:TCU]TCU0 = [L]_CUR
If fstat
[L]A_ERROR = [L]_CUR
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ACUR,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:TCU]AUUID)>0 & [F:TCU]AUUID=NullUuid
 [F:TCU]AUUID = getUuid
Endif
SetInstance ACUR With [F:TCU]
ACUR.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet ACUR.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="TABCUR" & ZONE="INTDES" & IDENT1=ACUR.CUR & IDENT2=""
 Call ASETTEXTRA(ACUR.AXX,ACUR.AllocGrp(),"INTDES",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 ACUR.AXX(maxtab(ACUR.AXX)).FLG = 0
Next AXX
If !len(fmet ACUR.AGETTEXTRA("INTDES"))
 Call ASETTEXTRA(ACUR.AXX,ACUR.AllocGrp(),"INTDES",
& fmet ACUR.AGETTEXTRALAN("INTDES",ACUR.ACTX.AFOLD.ALANGDEF),
& ACUR.ACTX.LAN) From ASYRSUB
Endif
For [AXX] Where CODFIC="TABCUR" & ZONE="INTSHO" & IDENT1=ACUR.CUR & IDENT2=""
 Call ASETTEXTRA(ACUR.AXX,ACUR.AllocGrp(),"INTSHO",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 ACUR.AXX(maxtab(ACUR.AXX)).FLG = 0
Next AXX
If !len(fmet ACUR.AGETTEXTRA("INTSHO"))
 Call ASETTEXTRA(ACUR.AXX,ACUR.AllocGrp(),"INTSHO",
& fmet ACUR.AGETTEXTRALAN("INTSHO",ACUR.ACTX.AFOLD.ALANGDEF),
& ACUR.ACTX.LAN) From ASYRSUB
Endif

Return



