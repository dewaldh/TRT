#<AdxTL>@(#)0.0.0.0 $Revision$Class Parameters
# Sage X3 supervisor
## ACLA-CLASSE ## TECALLITM
# 2018-06-20 07:06:45 615

####################################################################
# Traitments
####################################################################
$_ADDTRT
this.AINF.TRT(1) = "TECALLITM_CSTD"
this.AINF.TYP(1) = 1
this.AINF.PTH(1) = ""
this.AINF.NBTRT = 1
Return

####################################################################
#Declaration of variables
####################################################################

$DECLARE_VAR
Local Char    ACTION(50) , CURPRO(250) , VALPRO(250) , CURQRY(50) , CURPTH(250)
Local Char    AMETHOD(50) ,AOPERATION(50),AEVENT(50),ARULE(50)
Local Integer ALLSTAT,AISMET,ASTATUS
Return

####################################################################
# Methods of the class
####################################################################
# Fmethod Add line
$MANUAL_ADD_LINE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "MANUAL_ADD_LINE" : [L]ACTION = "MANUAL_ADD_LINE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Add line
$MANUF_ADD_LINE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "MANUF_ADD_LINE" : [L]ACTION = "MANUF_ADD_LINE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Add line
$SAL_ADD_LINE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "SAL_ADD_LINE" : [L]ACTION = "SAL_ADD_LINE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Existing
$_EXIST_KEYCONCAT
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "_EXIST_KEYCONCAT" : [L]ACTION = "_EXIST_KEYCONCAT" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Concatenation
$_GET_KEYCONCAT
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "_GET_KEYCONCAT" : [L]ACTION = "_GET_KEYCONCAT" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod To process
$_LOAD_ONE_OPPNUM
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "_LOAD_ONE_OPPNUM" : [L]ACTION = "_LOAD_ONE_OPPNUM" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Copy
$_RITT_COPY
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "_RITT_COPY" : [L]ACTION = "_RITT_COPY" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return


####################################################################
# AERRORS
####################################################################

$_AERROR
Gosub DECLARE_VAR From WMC0TECALLITM
Local Integer ALLSTAT
Call ALLERRORS(this,_CTX,_SUPP) From ASYRSUB
For AINDCLA=1 To 300
 If this.RITT(AINDCLA)<>null
  [L]ASTATUS = fmet this.RITT(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
Return

####################################################################
# Delete all errors
####################################################################

$_ADELERRORS
Gosub DECLARE_VAR From WMC0TECALLITM
Local Integer ALLSTAT
[L]ASTATUS = fmet this.ADELETEERROR([L]_APARAM)
For AINDCLA=1 To 300
 If this.RITT(AINDCLA)<>null
  [L]ASTATUS = fmet this.RITT(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
Return

####################################################################
# _ASEARCHINFOS
####################################################################

$_ASEARCHINFOS
Gosub DECLARE_VAR From WMC0TECALLITM
ASTATUS= func ASYRSUB.ASEARCHINFOS(this,[L]AINS_ORI,[L]ERR_TYPE,[L]PROPERTY,[L]ASTAT,[L]SELSTAT,[L]PATH)
If [L]ERR_TYPE=[V]CST_ACURRENT : Return : Endif
For AINDCLA=1 To 300
 If this.RITT(AINDCLA)<>null
  [L]ASTATUS = fmet this.RITT(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'RITT('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
Return

####################################################################
# AGETERRORSFROM
####################################################################

$_AGETERRORSFROM
Gosub DECLARE_VAR From WMC0TECALLITM
If AINS_FROM<>null
 [L]ASTATUS = fmet AINS_FROM.ASEARCHINFOS( [V]CST_ALL, "", [V]CST_AFATAL, 0)
Endif
Call AGETERRORSFROM(AINS_FROM,this,ENVIRONNEMENT) From ASYRSUB
Return

####################################################################
# ADELLINE
####################################################################
$ADELLINE
Case _ACOLLECTION
 When "RITT"
  If this.RITT([L]ALINE)<>null : FreeInstance this.RITT([L]ALINE) : this.RITT([L]ALINE) = null :Endif
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# ADDLINE
####################################################################
$ADDLINE
Case _ACOLLECTION
 When "RITT"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"RITT","C_TECALLITM_RITT",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETDIM
####################################################################
$AGETDIM
Case _ACOLLECTION
 When "RITT"
  [L]_ALINE = 300
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETMIN
####################################################################
$AGETMIN
Case _ACOLLECTION
 When "RITT"
  [L]_ALINE = 1
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# _ADELINSTANCE
####################################################################
$_ADELINSTANCE
[L]ASTATUS = func ASYRSUBTAB._ADELINSTANCE(this)
Return

####################################################################
# ADDINSTANCE_BOUND
####################################################################
$ADDINSTANCE_BOUND
Return



