#<AdxTL>@(#)0.0.0.0 $Revision$Class Stat grp
# Supervisor
## CRUD-CLASSE ## STAT
# 2018-08-27 13:35:43 782


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File PARSTA2 [PS2_]

If !SILENCE : Call TRACE("2 --> Local Instance R_STAT") From ASYRCOM : Endif
Local Instance STAT Using R_STAT

If !SILENCE : Call TRACE("3 --> New Instance R_STAT") From ASYRCOM : Endif
STAT = NewInstance R_STAT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [PS2_]PS20 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of STAT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet STAT.AREAD([PS2_]COD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("STAT.STAT.COD ="-num$(STAT.STAT.COD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(STAT.STAT.AKEYS)
  Call TRACE("-"-num$(I)-":"-STAT.STAT.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [PS2_]
FreeGroup STAT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(STAT,ACLE,ASTATUS,_ETAG)
Variable Instance STAT Using R_STAT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _COD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File PARSTA2 [PS2]
Default File [F:PS2]
Read [F:PS2]PS20 = [L]_COD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:PS2]UPDTICK)>0
 [L]_ETAG = num$([F:PS2]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(STAT,ACLE,ASTATUS)
Variable Instance STAT Using R_STAT
Value Char ACLE
Variable Integer ASTATUS
Local Char _COD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet STAT.AREAD([L]_COD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(STAT,_COD,ASTATUS)
Variable Instance STAT Using R_STAT
Value Char _COD
Variable Integer ASTATUS

If STAT = null : End : Endif

Gosub AVARIABLES From WMR00STAT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If STAT.APARENT=null
 [L]A_I = STAT.freeSnapshot
 STAT.snapshotEnabled = 0
 STAT.setAccessorEnabled = 0
Endif

[L]ASTATUS = max([L]ASTATUS,fmet STAT.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

STAT.STAT.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet STAT.STAT.AREAD([L]_COD))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet STAT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & STAT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet STAT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If STAT.APARENT=null
 STAT.snapshotEnabled = 1
 STAT.setAccessorEnabled = 1
Endif
LogicClose File [PS2]
End



