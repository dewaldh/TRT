#<AdxTL>@(#)0.0.0.0 $Revision$Class Logistical tracking template
# Supervisor
## CRUD-CLASSE ## TRACKTPL
# 2018-08-27 13:45:56 526


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TRACKTPLH [TKTH_]

If !SILENCE : Call TRACE("2 --> Local Instance R_TRACKTPL") From ASYRCOM : Endif
Local Instance TRACKTPL Using R_TRACKTPL

If !SILENCE : Call TRACE("3 --> New Instance R_TRACKTPL") From ASYRCOM : Endif
TRACKTPL = NewInstance R_TRACKTPL AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TKTH_]TKTH0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TRACKTPLH") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.AREAD([TKTH_]TRKNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TRACKTPL.TKTH.TRKNUM ="-num$(TRACKTPL.TKTH.TRKNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TRACKTPL.TKTH.AKEYS)
  Call TRACE("-"-num$(I)-":"-TRACKTPL.TKTH.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TKTH_]
FreeGroup TRACKTPL
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TRACKTPL,ACLE,ASTATUS,_ETAG)
Variable Instance TRACKTPL Using R_TRACKTPL
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _TRKNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_TRKNUM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File TRACKTPLH [TKTH]
Default File [F:TKTH]
Read [F:TKTH]TKTH0 = [L]_TRKNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TKTH]UPDTICK)>0
 [L]_ETAG = num$([F:TKTH]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TRACKTPL,ACLE,ASTATUS)
Variable Instance TRACKTPL Using R_TRACKTPL
Value Char ACLE
Variable Integer ASTATUS
Local Char _TRKNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_TRKNUM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.AREAD([L]_TRKNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TRACKTPL,_TRKNUM,ASTATUS)
Variable Instance TRACKTPL Using R_TRACKTPL
Value Char _TRKNUM
Variable Integer ASTATUS

If TRACKTPL = null : End : Endif

Gosub AVARIABLES From WMR00TRACKTPL
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TRACKTPL.APARENT=null
 [L]A_I = TRACKTPL.freeSnapshot
 TRACKTPL.snapshotEnabled = 0
 TRACKTPL.setAccessorEnabled = 0
Endif

If fmet TRACKTPL.ACTX.AGETAFCRIGHT(TRACKTPL,"TRACKTPL",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:TKTH]
Read [F:TKTH]TKTH0 = [L]_TRKNUM
If fstat
[L]A_ERROR = [L]_TRKNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TRACKTPL,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet TRACKTPL.ACTX.AGETAFCRIGHTR(TRACKTPL,"TRACKTPL",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif

[L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

TRACKTPL.TKTH.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.TKTH.AREAD([L]_TRKNUM))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & TRACKTPL.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If TRACKTPL.APARENT=null
 TRACKTPL.snapshotEnabled = 1
 TRACKTPL.setAccessorEnabled = 1
Endif
LogicClose File [TKTH] ,[TKTD]
End



