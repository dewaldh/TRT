#<AdxTL>@(#)0.0.0.0 $Revision$Class Documentation
# Supervisor
## CRUD-CLASSE ## ADOCUMENT
# 2018-08-27 12:19:47 685


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ADOCUMENT [ADO_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ADOCUMENT") From ASYRCOM : Endif
Local Instance ADOCUMENT Using C_ADOCUMENT

If !SILENCE : Call TRACE("3 --> New Instance C_ADOCUMENT") From ASYRCOM : Endif
ADOCUMENT = NewInstance C_ADOCUMENT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ADO_]ADO0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ADOCUMENT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.AREAD([ADO_]LAN,[ADO_]TYP,[ADO_]COD,[ADO_]LEV,[ADO_]SUBLEV))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ADOCUMENT.LAN ="-num$(ADOCUMENT.LAN)) From ASYRCOM
 Call TRACE("ADOCUMENT.TYP ="-num$(ADOCUMENT.TYP)) From ASYRCOM
 Call TRACE("ADOCUMENT.COD ="-num$(ADOCUMENT.COD)) From ASYRCOM
 Call TRACE("ADOCUMENT.LEV ="-num$(ADOCUMENT.LEV)) From ASYRCOM
 Call TRACE("ADOCUMENT.SUBLEV ="-num$(ADOCUMENT.SUBLEV)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ADOCUMENT.AKEYS)
  Call TRACE("-"-num$(I)-":"-ADOCUMENT.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ADO_]
FreeGroup ADOCUMENT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ADOCUMENT,ACLE,ASTATUS,_ETAG)
Variable Instance ADOCUMENT Using C_ADOCUMENT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _LAN(3)
Local Char _TYP(20)
Local Char _COD(30)
Local Shortint _LEV
Local Integer _SUBLEV
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_LAN = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_TYP = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_COD = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_LEV = val([L]CLE(4)) : Endif
If [L]CLE(5)<>"" : [L]_SUBLEV = val([L]CLE(5)) : Endif
Raz [L]_ETAG
Local File ADOCUMENT [ADO]
Default File [F:ADO]
Read [F:ADO]ADO0 = [L]_LAN;[L]_TYP;[L]_COD;[L]_LEV;[L]_SUBLEV
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ADO]UPDTICK)>0
 [L]_ETAG = num$([F:ADO]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ADOCUMENT,ACLE,ASTATUS)
Variable Instance ADOCUMENT Using C_ADOCUMENT
Value Char ACLE
Variable Integer ASTATUS
Local Char _LAN(3)
Local Char _TYP(20)
Local Char _COD(30)
Local Shortint _LEV
Local Integer _SUBLEV
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_LAN = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_TYP = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_COD = num$([L]CLE(3)) : Endif
If [L]CLE(4)<>"" : [L]_LEV = val([L]CLE(4)) : Endif
If [L]CLE(5)<>"" : [L]_SUBLEV = val([L]CLE(5)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.AREAD([L]_LAN,[L]_TYP,[L]_COD,[L]_LEV,[L]_SUBLEV))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ADOCUMENT,_LAN,_TYP,_COD,_LEV,_SUBLEV,ASTATUS)
Variable Instance ADOCUMENT Using C_ADOCUMENT
Value Char _LAN
Value Char _TYP
Value Char _COD
Value Shortint _LEV
Value Integer _SUBLEV
Variable Integer ASTATUS

If ADOCUMENT = null : End : Endif

Gosub AVARIABLES From WMC00ADOCUMENT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ADOCUMENT.APARENT=null
 [L]A_I = ADOCUMENT.freeSnapshot
 ADOCUMENT.snapshotEnabled = 0
 ADOCUMENT.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ADOCUMENT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ADOCUMENT.APARENT=null
 ADOCUMENT.snapshotEnabled = 1
 ADOCUMENT.setAccessorEnabled = 1
Endif
LogicClose File [ADO] ,[ADH]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT._ACTION_PARAM("AREAD_BEFORE",[L]_LAN,[L]_TYP,[L]_COD,[L]_LEV,[L]_SUBLEV))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:ADO]
Read [F:ADO]ADO0 = [L]_LAN;[L]_TYP;[L]_COD;[L]_LEV;[L]_SUBLEV
If fstat
[L]A_ERROR = [L]_LAN+"~"+[L]_TYP+"~"+[L]_COD+"~"+num$([L]_LEV)+"~"+num$([L]_SUBLEV)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ADOCUMENT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:ADO]AUUID)>0 & [F:ADO]AUUID=NullUuid
 [F:ADO]AUUID = getUuid
Endif
SetInstance ADOCUMENT With [F:ADO]
ADOCUMENT.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:ADH]
 [L]A_N2=1
 Read [F:ADH]ADH0 = [F:ADO]LAN;[F:ADO]TYP;[F:ADO]COD;[F:ADO]LEV;[F:ADO]SUBLEV
 If !fstat
  ADOCUMENT.ADH(A_N2) = NewInstance  C_ADOCCLB(ADOCUMENT.ACTX,NullUuid,[L]A_N2,ADOCUMENT,"ADH") AllocGroup ADOCUMENT
  [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ADH(A_N2).ADDINSTANCE_BOUND)
  If dim([F:ADH]AUUID)>0 & [F:ADH]AUUID=NullUuid
   [F:ADH]AUUID = getUuid
  Endif
  SetInstance ADOCUMENT.ADH(A_N2) With [F:ADH]
  [L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ADH(A_N2).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
  ADOCUMENT.ADH(A_N2).ASTALIN = [V]CST_ALL
 Endif
Endif
#-----------------------------------------------------#

[L]ASTATUS = max([L]ASTATUS,fmet ADOCUMENT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



