#<AdxTL>@(#)0.0.0.0 $Revision$Class Routings
# Sage X3 supervisor
## CRUD-CLASSE ## ROUTING
# 2018-03-26 01:19:03 708


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ROUTING [ROH_]

If !SILENCE : Call TRACE("2 --> Local Instance R_ROUTING") From ASYRCOM : Endif
Local Instance ROUTING Using R_ROUTING

If !SILENCE : Call TRACE("3 --> New Instance R_ROUTING") From ASYRCOM : Endif
ROUTING = NewInstance R_ROUTING AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ROH_]ROH0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ROUTING") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ROUTING.AREAD([ROH_]ITMREF,[ROH_]ROUALT,[ROH_]FCY))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ROUTING.ROH.ITMREF ="-num$(ROUTING.ROH.ITMREF)) From ASYRCOM
 Call TRACE("ROUTING.ROH.ROUALT ="-num$(ROUTING.ROH.ROUALT)) From ASYRCOM
 Call TRACE("ROUTING.ROH.FCY ="-num$(ROUTING.ROH.FCY)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ROUTING.ROH.AKEYS)
  Call TRACE("-"-num$(I)-":"-ROUTING.ROH.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ROH_]
FreeGroup ROUTING
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ROUTING,ACLE,ASTATUS,_ETAG)
Variable Instance ROUTING Using R_ROUTING
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _ITMREF(20)
Local Shortint _ROUALT
Local Char _FCY(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMREF = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_ROUALT = val([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_FCY = num$([L]CLE(3)) : Endif
Raz [L]_ETAG
Local File ROUTING [ROH]
Default File [F:ROH]
Read [F:ROH]ROH0 = [L]_ITMREF;[L]_ROUALT;[L]_FCY
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ROH]UPDTICK)>0
 [L]_ETAG = num$([F:ROH]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ROUTING,ACLE,ASTATUS)
Variable Instance ROUTING Using R_ROUTING
Value Char ACLE
Variable Integer ASTATUS
Local Char _ITMREF(20)
Local Shortint _ROUALT
Local Char _FCY(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMREF = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_ROUALT = val([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_FCY = num$([L]CLE(3)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ROUTING.AREAD([L]_ITMREF,[L]_ROUALT,[L]_FCY))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ROUTING,_ITMREF,_ROUALT,_FCY,ASTATUS)
Variable Instance ROUTING Using R_ROUTING
Value Char _ITMREF
Value Shortint _ROUALT
Value Char _FCY
Variable Integer ASTATUS

If ROUTING = null : End : Endif

Gosub AVARIABLES From WMR00ROUTING
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ROUTING.APARENT=null
 [L]A_I = ROUTING.freeSnapshot
 ROUTING.snapshotEnabled = 0
 ROUTING.setAccessorEnabled = 0
Endif

If fmet ROUTING.ACTX.AGETAFCRIGHT(ROUTING,"GESROU",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:ROH]
Read [F:ROH]ROH0 = [L]_ITMREF;[L]_ROUALT;[L]_FCY
If fstat
[L]A_ERROR = [L]_ITMREF+"~"+num$([L]_ROUALT)+"~"+[L]_FCY
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ROUTING,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:ROH]FCY
[L]A_STRACC = [F:ROH]ACSCOD
If fmet ROUTING.ACTX.AGETAFCRIGHTR(ROUTING,"GESROU",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet ROUTING.ACTX.AGETACSRIGHTC(ROUTING,[L]A_STRACC,[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR
 Goto AREAD_END
  Endif
If fmet ROUTING.ACTX.ASTACRITROLE(ROUTING,[L]_ITMREF+"~"+num$([L]_ROUALT)+"~"+[L]_FCY
& ,"ROU","ROH",[V]CST_ATRUE)>=[V]CST_AERROR
   [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
  Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet ROUTING.ACTION("AREAD_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  ROUTING.ROH.setAccessorEnabled = 0
  [L]ASTATUS = max([L]ASTATUS,fmet ROUTING.ROH.AREAD([L]_ITMREF,[L]_ROUALT,[L]_FCY))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet ROUTING.ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  If [L]ASTATUS<[V]CST_AERROR & ROUTING.APARENT=null
   # Load Link
   [L]ASTATUS = max([L]ASTATUS,fmet ROUTING._ALNKPRO)
   If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  Endif
  
  $AREAD_END
  If ROUTING.APARENT=null
   ROUTING.snapshotEnabled = 1
   ROUTING.setAccessorEnabled = 1
  Endif
  LogicClose File [ROH] ,[ROO] ,[ROS]
  End
  


