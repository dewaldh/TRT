#<AdxTL>@(#)0.0.0.0 $Revision$Class Purchase request
# Supervisor
## CRUD-CLASSE ## PREQUIS
# 2018-08-27 13:26:00 033


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File PREQUIS [PSH_]

If !SILENCE : Call TRACE("2 --> Local Instance R_PREQUIS") From ASYRCOM : Endif
Local Instance PREQUIS Using R_PREQUIS

If !SILENCE : Call TRACE("3 --> New Instance R_PREQUIS") From ASYRCOM : Endif
PREQUIS = NewInstance R_PREQUIS AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [PSH_]PSH0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of PREQUIS") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet PREQUIS.AREAD([PSH_]PSHNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("PREQUIS.PSH.PSHNUM ="-num$(PREQUIS.PSH.PSHNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(PREQUIS.PSH.AKEYS)
  Call TRACE("-"-num$(I)-":"-PREQUIS.PSH.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [PSH_]
FreeGroup PREQUIS
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(PREQUIS,ACLE,ASTATUS,_ETAG)
Variable Instance PREQUIS Using R_PREQUIS
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _PSHNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PSHNUM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File PREQUIS [PSH]
Default File [F:PSH]
Read [F:PSH]PSH0 = [L]_PSHNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:PSH]UPDTICK)>0
 [L]_ETAG = num$([F:PSH]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(PREQUIS,ACLE,ASTATUS)
Variable Instance PREQUIS Using R_PREQUIS
Value Char ACLE
Variable Integer ASTATUS
Local Char _PSHNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PSHNUM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PREQUIS.AREAD([L]_PSHNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(PREQUIS,_PSHNUM,ASTATUS)
Variable Instance PREQUIS Using R_PREQUIS
Value Char _PSHNUM
Variable Integer ASTATUS

If PREQUIS = null : End : Endif

Gosub AVARIABLES From WMR00PREQUIS
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If PREQUIS.APARENT=null
 [L]A_I = PREQUIS.freeSnapshot
 PREQUIS.snapshotEnabled = 0
 PREQUIS.setAccessorEnabled = 0
Endif

If fmet PREQUIS.ACTX.AGETAFCRIGHT(PREQUIS,"GESPSH",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:PSH]
Read [F:PSH]PSH0 = [L]_PSHNUM
If fstat
[L]A_ERROR = [L]_PSHNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PREQUIS,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:PSH]PSHFCY
[L]A_STRACC = ""
If fmet PREQUIS.ACTX.AGETAFCRIGHTR(PREQUIS,"GESPSH",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet PREQUIS.ACTX.ASTACRITROLE(PREQUIS,[L]_PSHNUM
& ,"PSH","PSH",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet PREQUIS.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

PREQUIS.PSH.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet PREQUIS.PSH.AREAD([L]_PSHNUM))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PREQUIS.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & PREQUIS.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet PREQUIS._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If PREQUIS.APARENT=null
 PREQUIS.snapshotEnabled = 1
 PREQUIS.setAccessorEnabled = 1
Endif
LogicClose File [PSH] ,[PSD]
End



