#<AdxTL>@(#)0.0.0.0 $Revision$Class Payment types
# Supervisor
## CRUD-CLASSE ## TABPAYTYP
# 2018-08-27 12:52:17 762


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File TABPAYTYP [TPY_]

If !SILENCE : Call TRACE("2 --> Local Instance C_TABPAYTYP") From ASYRCOM : Endif
Local Instance TABPAYTYP Using C_TABPAYTYP

If !SILENCE : Call TRACE("3 --> New Instance C_TABPAYTYP") From ASYRCOM : Endif
TABPAYTYP = NewInstance C_TABPAYTYP AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [TPY_]TPY0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of TABPAYTYP") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.AREAD([TPY_]PAYTYP,[TPY_]LEG))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("TABPAYTYP.PAYTYP ="-num$(TABPAYTYP.PAYTYP)) From ASYRCOM
 Call TRACE("TABPAYTYP.LEG ="-num$(TABPAYTYP.LEG)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(TABPAYTYP.AKEYS)
  Call TRACE("-"-num$(I)-":"-TABPAYTYP.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [TPY_]
FreeGroup TABPAYTYP
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(TABPAYTYP,ACLE,ASTATUS,_ETAG)
Variable Instance TABPAYTYP Using C_TABPAYTYP
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _PAYTYP(5)
Local Char _LEG(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PAYTYP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File TABPAYTYP [TPY]
Default File [F:TPY]
Read [F:TPY]TPY0 = [L]_PAYTYP;[L]_LEG
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:TPY]UPDTICK)>0
 [L]_ETAG = num$([F:TPY]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(TABPAYTYP,ACLE,ASTATUS)
Variable Instance TABPAYTYP Using C_TABPAYTYP
Value Char ACLE
Variable Integer ASTATUS
Local Char _PAYTYP(5)
Local Char _LEG(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PAYTYP = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.AREAD([L]_PAYTYP,[L]_LEG))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(TABPAYTYP,_PAYTYP,_LEG,ASTATUS)
Variable Instance TABPAYTYP Using C_TABPAYTYP
Value Char _PAYTYP
Value Char _LEG
Variable Integer ASTATUS

If TABPAYTYP = null : End : Endif

Gosub AVARIABLES From WMC00TABPAYTYP
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If TABPAYTYP.APARENT=null
 [L]A_I = TABPAYTYP.freeSnapshot
 TABPAYTYP.snapshotEnabled = 0
 TABPAYTYP.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & TABPAYTYP.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If TABPAYTYP.APARENT=null
 TABPAYTYP.snapshotEnabled = 1
 TABPAYTYP.setAccessorEnabled = 1
Endif
LogicClose File [TPY] ,[TFC]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP._ACTION_PARAM("AREAD_BEFORE",[L]_PAYTYP,[L]_LEG))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:TPY]
Read [F:TPY]TPY0 = [L]_PAYTYP;[L]_LEG
If fstat
[L]A_ERROR = [L]_PAYTYP+"~"+[L]_LEG
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TABPAYTYP,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = [F:TPY]ACS
If dim([F:TPY]AUUID)>0 & [F:TPY]AUUID=NullUuid
 [F:TPY]AUUID = getUuid
Endif
SetInstance TABPAYTYP With [F:TPY]
TABPAYTYP.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:TFC]
 [L]A_N2=0
 For [F:TFC]TFC3 Where MODULE=9 & CODPAR=[F:TPY]PAYTYP
  [L]A_N2 +=1
  TABPAYTYP.TFC(A_N2) = NewInstance  C_TABFILCASH(TABPAYTYP.ACTX,NullUuid,[L]A_N2,TABPAYTYP,"TFC") AllocGroup TABPAYTYP
  [L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.TFC(A_N2).ADDINSTANCE_BOUND)
  Callmet TABPAYTYP.TFC(A_N2).AREAD([F:TFC]MODULE,[F:TFC]CODCAS,[F:TFC]CODPAR)
  TABPAYTYP.TFC(A_N2).ASTALIN = [V]CST_ALL
  [L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.TFC(A_N2).ASETATTRIBUTE("MODULE","$isDisabled","true"))
  [L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.TFC(A_N2).ASETATTRIBUTE("CODPAR","$isDisabled","true"))
  [L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.TFC(A_N2).ASETATTRIBUTE("CODCAS","$isDisabled","true"))
 Next TFC
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
#-----------------------------------------------------#

[L]A_NEWCOL = 0
For [L]A_I=1 To 30
 If ([F:TPY]DACSUP([L]A_I-1)<>0 or [F:TPY]ZONSUP([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  TABPAYTYP.LISDACSUP(A_NEWCOL) = NewInstance  C_TABPAYTYP_LISDACSUP(TABPAYTYP.ACTX,NullUuid,[L]A_I,TABPAYTYP,"LISDACSUP") AllocGroup TABPAYTYP
  TABPAYTYP.LISDACSUP(A_NEWCOL).DACSUP = [F:TPY]DACSUP([L]A_I-1)
  TABPAYTYP.LISDACSUP(A_NEWCOL).ZONSUP = [F:TPY]ZONSUP([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.LISDACSUP(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]A_NEWCOL = 0
For [L]A_I=1 To 10
 If ([F:TPY]PAM([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  TABPAYTYP.LISPAM(A_NEWCOL) = NewInstance  C_TABPAYTYP_LISPAM(TABPAYTYP.ACTX,NullUuid,[L]A_I,TABPAYTYP,"LISPAM") AllocGroup TABPAYTYP
  TABPAYTYP.LISPAM(A_NEWCOL).PAM = [F:TPY]PAM([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.LISPAM(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet TABPAYTYP.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="TABPAYTYP" & ZONE="DESTRA" & IDENT1=TABPAYTYP.PAYTYP & IDENT2=TABPAYTYP.LEG
 Call ASETTEXTRA(TABPAYTYP.AXX,TABPAYTYP.AllocGrp(),"DESTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 TABPAYTYP.AXX(maxtab(TABPAYTYP.AXX)).FLG = 0
Next AXX
If !len(fmet TABPAYTYP.AGETTEXTRA("DESTRA"))
 Call ASETTEXTRA(TABPAYTYP.AXX,TABPAYTYP.AllocGrp(),"DESTRA",
& fmet TABPAYTYP.AGETTEXTRALAN("DESTRA",TABPAYTYP.ACTX.AFOLD.ALANGDEF),
& TABPAYTYP.ACTX.LAN) From ASYRSUB
Endif
For [AXX] Where CODFIC="TABPAYTYP" & ZONE="SHOTRA" & IDENT1=TABPAYTYP.PAYTYP & IDENT2=TABPAYTYP.LEG
 Call ASETTEXTRA(TABPAYTYP.AXX,TABPAYTYP.AllocGrp(),"SHOTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 TABPAYTYP.AXX(maxtab(TABPAYTYP.AXX)).FLG = 0
Next AXX
If !len(fmet TABPAYTYP.AGETTEXTRA("SHOTRA"))
 Call ASETTEXTRA(TABPAYTYP.AXX,TABPAYTYP.AllocGrp(),"SHOTRA",
& fmet TABPAYTYP.AGETTEXTRALAN("SHOTRA",TABPAYTYP.ACTX.AFOLD.ALANGDEF),
& TABPAYTYP.ACTX.LAN) From ASYRSUB
Endif

Return



