#<AdxTL>@(#)0.0.0.0 $Revision$Class Purchase return
# Supervisor
## CRUD-CLASSE ## PRETURN
# 2018-08-27 13:26:25 772


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File PRETURN [PNH_]

If !SILENCE : Call TRACE("2 --> Local Instance R_PRETURN") From ASYRCOM : Endif
Local Instance PRETURN Using R_PRETURN

If !SILENCE : Call TRACE("3 --> New Instance R_PRETURN") From ASYRCOM : Endif
PRETURN = NewInstance R_PRETURN AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [PNH_]PNH0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of PRETURN") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet PRETURN.AREAD([PNH_]PNHNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("PRETURN.PNH.PNHNUM ="-num$(PRETURN.PNH.PNHNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(PRETURN.PNH.AKEYS)
  Call TRACE("-"-num$(I)-":"-PRETURN.PNH.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [PNH_]
FreeGroup PRETURN
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(PRETURN,ACLE,ASTATUS,_ETAG)
Variable Instance PRETURN Using R_PRETURN
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _PNHNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PNHNUM = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File PRETURN [PNH]
Default File [F:PNH]
Read [F:PNH]PNH0 = [L]_PNHNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:PNH]UPDTICK)>0
 [L]_ETAG = num$([F:PNH]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(PRETURN,ACLE,ASTATUS)
Variable Instance PRETURN Using R_PRETURN
Value Char ACLE
Variable Integer ASTATUS
Local Char _PNHNUM(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_PNHNUM = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PRETURN.AREAD([L]_PNHNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(PRETURN,_PNHNUM,ASTATUS)
Variable Instance PRETURN Using R_PRETURN
Value Char _PNHNUM
Variable Integer ASTATUS

If PRETURN = null : End : Endif

Gosub AVARIABLES From WMR00PRETURN
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If PRETURN.APARENT=null
 [L]A_I = PRETURN.freeSnapshot
 PRETURN.snapshotEnabled = 0
 PRETURN.setAccessorEnabled = 0
Endif

If fmet PRETURN.ACTX.AGETAFCRIGHT(PRETURN,"GESPNH",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:PNH]
Read [F:PNH]PNH0 = [L]_PNHNUM
If fstat
[L]A_ERROR = [L]_PNHNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PRETURN,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:PNH]PNHFCY
[L]A_STRACC = ""
If fmet PRETURN.ACTX.AGETAFCRIGHTR(PRETURN,"GESPNH",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet PRETURN.ACTX.ASTACRITROLE(PRETURN,[L]_PNHNUM
& ,"PNH","PNH",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet PRETURN.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

PRETURN.PNH.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet PRETURN.PNH.AREAD([L]_PNHNUM))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PRETURN.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & PRETURN.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet PRETURN._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If PRETURN.APARENT=null
 PRETURN.snapshotEnabled = 1
 PRETURN.setAccessorEnabled = 1
Endif
LogicClose File [PNH] ,[PND] ,[CAL] ,[STJ] ,[PTD]
End



