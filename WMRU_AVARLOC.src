#<AdxTL>@(#)0.0.0.0 $Revision$Class Formula wizard setup
# Supervisor
## CRUD-CLASSE ## AVARLOC
# 2018-08-27 13:03:58 972


############################################################################################
### Subprog AUPDATE
############################################################################################
Subprog AUPDATE(AVARLOC,ASTATUS)
Variable Instance AVARLOC Using R_AVARLOC
Variable Integer ASTATUS

If AVARLOC = null : End : Endif

Gosub AVARIABLES From WMR00AVARLOC
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

Gosub AREPCONTROL_AUPDATE
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If !adxlog
 Gosub AUPDATE_TR_AVARLOC
Else
 Gosub AUPDATE_AVARLOC
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_END : Return : Endif

Gosub _AUPDATE_AFTER
[L]A_I = AVARLOC.freeSnapshot
AVARLOC.snapshotEnabled = 1
$AUPDATE_END
End

#-----------------------------------------------------#
$AREPCONTROL_AUPDATE
AVARLOC.ASTALIN = [V]CST_AUPD
AVARLOC.AVR.ASTALIN = [V]CST_AUPD
[L]A_ASTALIN = AVARLOC.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AUPDATE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = AVARLOC.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AUPDATE_CONTROL
Gosub _AUPDATE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet AVARLOC._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet AVARLOC._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet AVARLOC._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AUPDATE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_BEFORE
If AVARLOC.AVR.ASTALIN = [V]CST_ANEWDEL : Return : Endif
AVARLOC.AVR.ASTALIN = [V]CST_AUPD
If [V]CST_ASTALIN(AVARLOC.AVR.ASTALIN)<>""
 [L]A_ASTALIN = AVARLOC.AVR.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.AVR.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_AFTER

If [V]CST_ASTALIN(AVARLOC.AVR.ASTALIN)<>""
 [L]A_ASTALIN = AVARLOC.AVR.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.AVR.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
Return

#-----------------------------------------------------#
$AUPDATE_TR_AVARLOC
Gosub AUPDATE_AVARLOC
If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_ABORT : Return : Endif
Return

#-----------------------------------------------------#
$_AUPDATE_AFTER
If find(AVARLOC.AVR.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 AVARLOC.AVR.ASTALIN = [V]CST_ALL
Endif
Return

#-----------------------------------------------------#
$AUPDATE_AVARLOC
[L]A_ASTALIN = AVARLOC.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.AVR._AUPDATE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = AVARLOC.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet AVARLOC.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AUPDATE_ABORT
$_AUPDATE_ABORT
If AVARLOC.snapshotEnabled=1
 [L]A_RETIK = AVARLOC.revertUpdTick
Endif

[L]ASTATUS = max(fmet AVARLOC.ACTION("AUPDATE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



