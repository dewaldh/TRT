#<AdxTL>@(#)0.0.0.0 $Revision$Class Project budget
# Supervisor
## CRUD-CLASSE ## PJMBUD
# 2018-08-27 12:39:48 165


############################################################################################
### Subprog _AINSERT
############################################################################################
Subprog _AINSERT(PJMBUD,ASTATUS)
Variable Instance PJMBUD Using C_PJMBUD
Variable Integer ASTATUS

If PJMBUD = null : End : Endif

Gosub _AVARIABLES From WMC00PJMBUD

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_PJMBUD

End

#-----------------------------------------------------#

############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(PJMBUD,ASTATUS)
Variable Instance PJMBUD Using C_PJMBUD
Variable Integer ASTATUS

If PJMBUD = null : End : Endif

Gosub AVARIABLES From WMC00PJMBUD
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_PJMBUD
Else
 Gosub AINSERT_PJMBUD
Endif

Gosub _AINSERT_AFTER
[L]A_I = PJMBUD.freeSnapshot
PJMBUD.snapshotEnabled = 1
$AINSERT_END
End

#-----------------------------------------------------#

$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet PJMBUD._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet PJMBUD._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet PJMBUD._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If PJMBUD.ASTALIN = [V]CST_ANEWDEL : Return : Endif
PJMBUD.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(PJMBUD.BUDLIG) : # PJMBUDLIG -- 2
 If PJMBUD.BUDLIG(A_N2) <> null
& and !find(PJMBUD.BUDLIG(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.BUDLIG(A_N2)._AINSERT_CONTROL_BEFORE)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
A_N2=1
If PJMBUD.PIMPL(A_N2) <> null
& and !find(PJMBUD.PIMPL(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
 [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.PIMPL(A_N2)._AINSERT_CONTROL_BEFORE)
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
A_N2=1
If PJMBUD.PIMPL(A_N2).ASTALIN<>[V]CST_ADEL & PJMBUD.PIMPL(A_N2).ASTALIN<>[V]CST_ANEWDEL
 [L]A_OK1 = 1
Endif
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PJMBUD,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"PIMPL:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
For A_N2=1 To maxtab(PJMBUD.SPLD) : # PJMSALITMD -- 4
 If PJMBUD.SPLD(A_N2) <> null
& and !find(PJMBUD.SPLD(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.SPLD(A_N2)._AINSERT_CONTROL_BEFORE)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER
For A_N2=1 To maxtab(PJMBUD.BUDLIG) : # PJMBUDLIG -- 2
 If PJMBUD.BUDLIG(A_N2) <> null
& and !find(PJMBUD.BUDLIG(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.BUDLIG(A_N2)._AINSERT_CONTROL_AFTER)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
A_N2=1
If PJMBUD.PIMPL(A_N2) <> null
& and !find(PJMBUD.PIMPL(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
 [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.PIMPL(A_N2)._AINSERT_CONTROL_AFTER)
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
A_N2=1
If PJMBUD.PIMPL(A_N2).ASTALIN<>[V]CST_ADEL & PJMBUD.PIMPL(A_N2).ASTALIN<>[V]CST_ANEWDEL
 [L]A_OK1 = 1
Endif
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PJMBUD,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"PIMPL:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
For A_N2=1 To maxtab(PJMBUD.SPLD) : # PJMSALITMD -- 4
 If PJMBUD.SPLD(A_N2) <> null
& and !find(PJMBUD.SPLD(A_N2).ASTALIN,[V]CST_ANEWDEL,[V]CST_ADEL)
  [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.SPLD(A_N2)._AINSERT_CONTROL_AFTER)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_PJMBUD
Trbegin [F:PJBU]
 Gosub AINSERT_PJMBUD
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$AINSERT_PJMBUD
Raz [F:PJBU]
[L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

If find( PJMBUD.ASTALIN,[V]CST_ANEW,[V]CST_ADEL) | 
& (find( PJMBUD.ASTALIN,[V]CST_AUPD) & 
& fmet PJMBUD.AGETATTRIBUTE("PBUDESTEX","$isLoaded")="true")
[L]ASTATUS = func WMC00PJMBUD._MAJSQL_PJMBUD_PBUDESTEX(PJMBUD,PJMBUD.PBUDESTEX)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
If find( PJMBUD.ASTALIN,[V]CST_ANEW,[V]CST_ADEL) | 
& (find( PJMBUD.ASTALIN,[V]CST_AUPD) & 
& fmet PJMBUD.AGETATTRIBUTE("PBUCOMTEX","$isLoaded")="true")
[L]ASTATUS = func WMC00PJMBUD._MAJSQL_PJMBUD_PBUCOMTEX(PJMBUD,PJMBUD.PBUCOMTEX)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
[L]ASTATUS = max([L]ASTATUS,func WMC00PJMBUD._MAJSQL_PJMBUD(PJMBUD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]A_TYPMAJ=[V]CST_ANEW

#-----------------------------------------------------#
For A_N2=1 To maxtab(PJMBUD.BUDLIG)
 If PJMBUD.BUDLIG(A_N2) <> null and
& (PJMBUD.BUDLIG(A_N2).ASTALIN=[L]A_TYPMAJ or
& PJMBUD.BUDLIG(A_N2).ASTALIN=[V]CST_ALL)
  If PJMBUD.BUDLIG(A_N2).ASTALIN=[L]A_TYPMAJ
   Case PJMBUD.BUDLIG(A_N2).ASTALIN
    When [V]CST_AUPD  : [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.BUDLIG(A_N2)._AUPDATE)
    When [V]CST_ANEW : [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.BUDLIG(A_N2)._AINSERT)
    When [V]CST_ADEL  : [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.BUDLIG(A_N2)._ADELETE)
   Endcase
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

#-----------------------------------------------------#
A_N2=1
If PJMBUD.PIMPL(A_N2) <> null and 
& PJMBUD.PIMPL(A_N2).ASTALIN=[V]CST_ALL
PJMBUD.PIMPL(A_N2).ASTALIN = [V]CST_AUPD
Endif
If PJMBUD.PIMPL(A_N2) <> null and
& (PJMBUD.PIMPL(A_N2).ASTALIN=[L]A_TYPMAJ or
& PJMBUD.PIMPL(A_N2).ASTALIN=[V]CST_ALL)
 If PJMBUD.PIMPL(A_N2).ASTALIN=[L]A_TYPMAJ
  Case PJMBUD.PIMPL(A_N2).ASTALIN
   When [V]CST_AUPD  : [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.PIMPL(A_N2)._AUPDATE)
   When [V]CST_ANEW : [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.PIMPL(A_N2)._AINSERT)
   When [V]CST_ADEL  : [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.PIMPL(A_N2)._ADELETE)
  Endcase
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

#-----------------------------------------------------#
For A_N2=1 To maxtab(PJMBUD.SPLD)
 If PJMBUD.SPLD(A_N2) <> null and
& (PJMBUD.SPLD(A_N2).ASTALIN=[L]A_TYPMAJ or
& PJMBUD.SPLD(A_N2).ASTALIN=[V]CST_ALL)
  If PJMBUD.SPLD(A_N2).ASTALIN=[L]A_TYPMAJ
   Case PJMBUD.SPLD(A_N2).ASTALIN
    When [V]CST_AUPD  : [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.SPLD(A_N2)._AUPDATE)
    When [V]CST_ANEW : [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.SPLD(A_N2)._AINSERT)
    When [V]CST_ADEL  : [L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.SPLD(A_N2)._ADELETE)
   Endcase
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
 If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

[L]ASTATUS = max([L]ASTATUS,fmet PJMBUD.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If PJMBUD.snapshotEnabled=1
 [L]A_RETIK = PJMBUD.revertUpdTick
Endif
[L]ASTATUS = max(fmet PJMBUD.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#


#-----------------------------------------------------#
$_AINSERT_AFTER
If find(PJMBUD.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 PJMBUD.ASTALIN = [V]CST_ALL
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(PJMBUD.BUDLIG)
 If PJMBUD.BUDLIG(A_N2) <> null
  [L]ASTATUS2 = fmet PJMBUD.BUDLIG(A_N2)._AINSERT_AFTER
  If PJMBUD.BUDLIG(A_N2).ASTALIN=[V]CST_ADEL or PJMBUD.BUDLIG(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance PJMBUD.BUDLIG(A_N2)
   PJMBUD.BUDLIG(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Local Integer ASTATUS2
A_N2=1
If PJMBUD.PIMPL(A_N2) <> null
 [L]ASTATUS2 = fmet PJMBUD.PIMPL(A_N2)._AINSERT_AFTER
 If PJMBUD.PIMPL(A_N2).ASTALIN=[V]CST_ADEL or PJMBUD.PIMPL(A_N2).ASTALIN=[V]CST_ANEWDEL
  FreeInstance PJMBUD.PIMPL(A_N2)
  PJMBUD.PIMPL(A_N2) = null
 Endif
 [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(PJMBUD.SPLD)
 If PJMBUD.SPLD(A_N2) <> null
  [L]ASTATUS2 = fmet PJMBUD.SPLD(A_N2)._AINSERT_AFTER
  If PJMBUD.SPLD(A_N2).ASTALIN=[V]CST_ADEL or PJMBUD.SPLD(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance PJMBUD.SPLD(A_N2)
   PJMBUD.SPLD(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Return



