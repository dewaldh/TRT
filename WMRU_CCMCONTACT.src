#<AdxTL>@(#)0.0.0.0 $Revision$Class Contact
# Supervisor
## CRUD-CLASSE ## CCMCONTACT
# 2018-08-27 13:11:06 959


############################################################################################
### Subprog AUPDATE
############################################################################################
Subprog AUPDATE(CCMCONTACT,ASTATUS)
Variable Instance CCMCONTACT Using R_CCMCONTACT
Variable Integer ASTATUS

If CCMCONTACT = null : End : Endif

Gosub AVARIABLES From WMR00CCMCONTACT
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If fmet CCMCONTACT.ACTX.AGETAFCRIGHT(CCMCONTACT,"GESCCM",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AUPDATE_END : Endif
If fmet CCMCONTACT.ACTX.AGETAFCRIGHTU(CCMCONTACT,"GESCCM",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AUPDATE_END
Endif

Gosub AREPCONTROL_AUPDATE
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If !adxlog
 Gosub AUPDATE_TR_CCMCONTACT
Else
 Gosub AUPDATE_CCMCONTACT
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_END : Return : Endif

Gosub _AUPDATE_AFTER
[L]A_I = CCMCONTACT.freeSnapshot
CCMCONTACT.snapshotEnabled = 1
$AUPDATE_END
End

#-----------------------------------------------------#
$AREPCONTROL_AUPDATE
CCMCONTACT.ASTALIN = [V]CST_AUPD
CCMCONTACT.CNT.ASTALIN = [V]CST_AUPD
[L]A_ASTALIN = CCMCONTACT.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet CCMCONTACT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AUPDATE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = CCMCONTACT.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet CCMCONTACT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AUPDATE_CONTROL
Gosub _AUPDATE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet CCMCONTACT._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet CCMCONTACT._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet CCMCONTACT._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AUPDATE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_BEFORE
If CCMCONTACT.CNT.ASTALIN = [V]CST_ANEWDEL : Return : Endif
CCMCONTACT.CNT.ASTALIN = [V]CST_AUPD
If [V]CST_ASTALIN(CCMCONTACT.CNT.ASTALIN)<>""
 [L]A_ASTALIN = CCMCONTACT.CNT.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet CCMCONTACT.CNT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
A_N2=1
If CCMCONTACT.CNT.CONTACTCRM(A_N2) <> null
& and CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN<>[V]CST_ANEWDEL
 If CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN<>[V]CST_ANEW & CCMCONTACT.CNT.ASTALIN=[V]CST_ADEL
  CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN = [V]CST_ADEL
 Endif
 If CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN=[V]CST_ANEW & find(CCMCONTACT.CNT.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL)>0
  CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN = [V]CST_ANEWDEL
 Endif
 If [V]CST_ASTALIN(CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN)<>""
  Case [V]CST_ASTALIN(CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN)
   When [V]CST_APRGAINSERT  : [L]ASTATUS = max([L]ASTATUS,fmet CCMCONTACT.CNT.CONTACTCRM(A_N2)._AINSERT_CONTROL_BEFORE)
   When [V]CST_APRGAUPDATE : [L]ASTATUS = max([L]ASTATUS,fmet CCMCONTACT.CNT.CONTACTCRM(A_N2)._AUPDATE_CONTROL_BEFORE)
   When [V]CST_APRGADELETE  : [L]ASTATUS = max([L]ASTATUS,fmet CCMCONTACT.CNT.CONTACTCRM(A_N2)._ADELETE_CONTROL_BEFORE)
  Endcase
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
A_N2=1
If CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN<>[V]CST_ADEL & CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN<>[V]CST_ANEWDEL
 [L]A_OK1 = 1
Endif
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(CCMCONTACT.CNT,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"CONTACTCRM:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_AFTER
A_N2=1
If CCMCONTACT.CNT.CONTACTCRM(A_N2) <> null
& and CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN<>[V]CST_ANEWDEL
 If [V]CST_ASTALIN(CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN)<>""
  Case [V]CST_ASTALIN(CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN)
   When [V]CST_APRGAINSERT  : [L]ASTATUS = max([L]ASTATUS,fmet CCMCONTACT.CNT.CONTACTCRM(A_N2)._AINSERT_CONTROL_AFTER)
   When [V]CST_APRGAUPDATE : [L]ASTATUS = max([L]ASTATUS,fmet CCMCONTACT.CNT.CONTACTCRM(A_N2)._AUPDATE_CONTROL_AFTER)
   When [V]CST_APRGADELETE  : [L]ASTATUS = max([L]ASTATUS,fmet CCMCONTACT.CNT.CONTACTCRM(A_N2)._ADELETE_CONTROL_AFTER)
  Endcase
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Endif
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
A_N2=1
If CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN<>[V]CST_ADEL & CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN<>[V]CST_ANEWDEL
 [L]A_OK1 = 1
Endif
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(CCMCONTACT.CNT,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"CONTACTCRM:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

If [V]CST_ASTALIN(CCMCONTACT.CNT.ASTALIN)<>""
 [L]A_ASTALIN = CCMCONTACT.CNT.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet CCMCONTACT.CNT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
Return

#-----------------------------------------------------#
$AUPDATE_TR_CCMCONTACT
Trbegin [F:CNT]
 Gosub AUPDATE_CCMCONTACT
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AUPDATE_AFTER
If find(CCMCONTACT.CNT.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 CCMCONTACT.CNT.ASTALIN = [V]CST_ALL
Endif
Local Integer ASTATUS2
A_N2=1
If CCMCONTACT.CNT.CONTACTCRM(A_N2) <> null
 [L]ASTATUS2 = fmet CCMCONTACT.CNT.CONTACTCRM(A_N2)._AUPDATE_AFTER
 If CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN=[V]CST_ADEL or CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN=[V]CST_ANEWDEL
  FreeInstance CCMCONTACT.CNT.CONTACTCRM(A_N2)
  CCMCONTACT.CNT.CONTACTCRM(A_N2) = null
 Endif
 [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
Endif
Return

#-----------------------------------------------------#
$AUPDATE_CCMCONTACT
[L]A_ASTALIN = CCMCONTACT.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet CCMCONTACT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CCMCONTACT.CNT._AUPDATE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = CCMCONTACT.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet CCMCONTACT.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AUPDATE_ABORT
Rollback
$_AUPDATE_ABORT
If CCMCONTACT.snapshotEnabled=1
 [L]A_RETIK = CCMCONTACT.revertUpdTick
Endif
Local Integer ASTATUS2
A_N2=1
If CCMCONTACT.CNT.CONTACTCRM(A_N2) <> null
 [L]ASTATUS2 = fmet CCMCONTACT.CNT.CONTACTCRM(A_N2)._AUPDATE_ABORT
 If CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN=[V]CST_ADEL or CCMCONTACT.CNT.CONTACTCRM(A_N2).ASTALIN=[V]CST_ANEWDEL
  FreeInstance CCMCONTACT.CNT.CONTACTCRM(A_N2)
  CCMCONTACT.CNT.CONTACTCRM(A_N2) = null
 Endif
 [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
Endif

[L]ASTATUS = max(fmet CCMCONTACT.ACTION("AUPDATE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



