#<AdxTL>@(#)0.0.0.0 $Revision$
# Supervisor
## BI-DIMENSION ## Synchronization rule POSCOD

$OUVRE
Local Char FILTRE(250)
OUVTAB = GDOSSIER+".POSCOD" : If clalev([F:POS])=0 : Local File =OUVTAB [POS] : Endif
OUVTAB = GDOSSIER+".POSCOD" : If clalev([F:A_])=0 : Local File =OUVTAB [A_] : Endif
OUVTAB = "Link [POS]"
Link [POS] With
& [A_]POS0=[POS]CRY;[POS]POSCOD;[POS]POSCTY;[POS]POSCTYCOD
& As [LNK_]
& Order By Key CLE = [POS]CRY;[POS]POSCOD;[POS]POSCTY;[POS]POSCTYCOD
FILTRE = ""
Return

$FERME
If clalev([F:POS]) : Close local File [POS] : Endif
If clalev([F:A_]) : Close local File [A_] : Endif
Return

$DCLE
Local Char    DCLE(GLONAVA)(1..3)
Local Integer DTYP(1..3)
Local Integer NBDCLE
NBDCLE = 3
DCLE(1) = "CRY"
DTYP(1) =  7
DCLE(2) = "POSCTY"
DTYP(2) =  7
DCLE(3) = "POSCOD"
DTYP(3) =  7
Return

$CHARGE_CLE
If dim([F:AAA_]CRY)>0
 [F:AAA_]CRY = [F:POS]CRY
Endif
If dim([F:AAA_]POSCTY)>0
 [F:AAA_]POSCTY = [F:POS]POSCTY
Endif
If dim([F:AAA_]POSCOD)>0
 [F:AAA_]POSCOD = vireblc([F:POS]POSCOD,1)
Endif
Return

########################################################################
# Return the filter necessary for incremental delete in synchroonization
Subprog GET_FLTDELINC(PFLT)
Variable Clbfile PFLT
Raz PFLT   # Key is not complete => impossible to define a filter for incrementale deletion
End

$MAJFLD
### CRY
[L]FLD="CRY"
[L]FORMULE='[F:POS]CRY'
If dim([F:AAA_]CRY)>0
 [F:AAA_]CRY = [F:POS]CRY
Endif

### POSCOD
[L]FLD="POSCOD"
[L]FORMULE='vireblc([F:POS]POSCOD,1)'
If dim([F:AAA_]POSCOD)>0
 [F:AAA_]POSCOD = vireblc([F:POS]POSCOD,1)
Endif

### POSCTY
[L]FLD="POSCTY"
[L]FORMULE='[F:POS]POSCTY'
If dim([F:AAA_]POSCTY)>0
 [F:AAA_]POSCTY = [F:POS]POSCTY
Endif

### POSCTYCOD
[L]FLD="POSCTYCOD"
[L]FORMULE='[F:POS]POSCTYCOD'
If dim([F:AAA_]POSCTYCOD)>0
 [F:AAA_]POSCTYCOD = [F:POS]POSCTYCOD
Endif

### SATCOD
[L]FLD="SATCOD"
[L]FORMULE='func TRTDIMBI.CODSDV2([F:POS]CRY,[F:POS]POSCOD)'
If dim([F:AAA_]SATCOD)>0
 [F:AAA_]SATCOD = func TRTDIMBI.CODSDV2([F:POS]CRY,[F:POS]POSCOD)
Endif

### SATDES
[L]FLD="SATDES"
[L]FORMULE='func TRTDIMBI.NAMSDV2([F:POS]CRY,[F:AAA_]SATCOD)'
If dim([F:AAA_]SATDES)>0
 [F:AAA_]SATDES = func TRTDIMBI.NAMSDV2([F:POS]CRY,[F:AAA_]SATCOD)
Endif

### DIVCOD
[L]FLD="DIVCOD"
[L]FORMULE='func TRTDIMBI.CODSDV1([F:POS]CRY,[F:POS]POSCOD)'
If dim([F:AAA_]DIVCOD)>0
 [F:AAA_]DIVCOD = func TRTDIMBI.CODSDV1([F:POS]CRY,[F:POS]POSCOD)
Endif

### DIVDES
[L]FLD="DIVDES"
[L]FORMULE='func TRTDIMBI.NAMSDV1([F:POS]CRY,[F:AAA_]DIVCOD)'
If dim([F:AAA_]DIVDES)>0
 [F:AAA_]DIVDES = func TRTDIMBI.NAMSDV1([F:POS]CRY,[F:AAA_]DIVCOD)
Endif

### GEOCOD
[L]FLD="GEOCOD"
[L]FORMULE='[F:POS]GEOCOD'
If dim([F:AAA_]GEOCOD)>0
 [F:AAA_]GEOCOD = [F:POS]GEOCOD
Endif


Return

