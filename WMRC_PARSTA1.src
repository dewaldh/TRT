#<AdxTL>@(#)0.0.0.0 $Revision$Class Statistical triggers
# Supervisor
## CRUD-CLASSE ## PARSTA1
# 2018-08-27 13:20:43 735


############################################################################################
### Subprog AINSERT
############################################################################################
Subprog AINSERT(PARSTA1,ASTATUS)
Variable Instance PARSTA1 Using R_PARSTA1
Variable Integer ASTATUS

If PARSTA1 = null : End : Endif

Gosub AVARIABLES From WMR00PARSTA1
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If fmet PARSTA1.ACTX.AGETAFCRIGHT(PARSTA1,"GESPS1",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END : Endif
If fmet PARSTA1.ACTX.AGETAFCRIGHTC(PARSTA1,"GESPS1",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AINSERT_END
Endif

Gosub AREPCONTROL_AINSERT
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif

If !adxlog
 Gosub AINSERT_TR_PARSTA1
Else
 Gosub AINSERT_PARSTA1
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_END : Return : Endif

Gosub _AINSERT_AFTER
$AINSERT_END
[L]A_I = PARSTA1.freeSnapshot
PARSTA1.snapshotEnabled = 1
End

#-----------------------------------------------------#
$AREPCONTROL_AINSERT
PARSTA1.ASTALIN = [V]CST_ANEW
PARSTA1.PS1.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet PARSTA1.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AINSERT_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PARSTA1.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AINSERT_CONTROL
Gosub _AINSERT_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet PARSTA1._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet PARSTA1._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet PARSTA1._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AINSERT_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_BEFORE
If PARSTA1.PS1.ASTALIN = [V]CST_ANEWDEL : Return : Endif
PARSTA1.PS1.ASTALIN = [V]CST_ANEW
[L]ASTATUS = max([L]ASTATUS,fmet PARSTA1.PS1.ACTION("AINSERT_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(PARSTA1.PS1.CRICOL)
 If PARSTA1.PS1.CRICOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet PARSTA1.PS1.CRICOL([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(PARSTA1.PS1.TBLCOL)
 If PARSTA1.PS1.TBLCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet PARSTA1.PS1.TBLCOL([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(PARSTA1.PS1.VARCOL)
 If PARSTA1.PS1.VARCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet PARSTA1.PS1.VARCOL([L]A_I).ACTION("AINSERT_CONTROL_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_AINSERT_CONTROL_AFTER

For [L]A_I=1 To maxtab(PARSTA1.PS1.CRICOL)
 If PARSTA1.PS1.CRICOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet PARSTA1.PS1.CRICOL([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(PARSTA1.PS1.TBLCOL)
 If PARSTA1.PS1.TBLCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet PARSTA1.PS1.TBLCOL([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For [L]A_I=1 To maxtab(PARSTA1.PS1.VARCOL)
 If PARSTA1.PS1.VARCOL([L]A_I)<>null
  [L]ASTATUS = max([L]ASTATUS,fmet PARSTA1.PS1.VARCOL([L]A_I).ACTION("AINSERT_CONTROL_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PARSTA1.PS1.ACTION("AINSERT_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_TR_PARSTA1
Trbegin [F:PS1]
 Gosub AINSERT_PARSTA1
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AINSERT_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AINSERT_AFTER
If find(PARSTA1.PS1.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 PARSTA1.PS1.ASTALIN = [V]CST_ALL
Endif
For [L]A_I=1 To maxtab(PARSTA1.PS1.CRICOL)
 If PARSTA1.PS1.CRICOL([L]A_I)<>null
  If PARSTA1.PS1.CRICOL([L]A_I).ASTALIN=[V]CST_ADEL or PARSTA1.PS1.CRICOL([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance PARSTA1.PS1.CRICOL([L]A_I)
   PARSTA1.PS1.CRICOL([L]A_I) = null
  Elsif PARSTA1.PS1.CRICOL([L]A_I).ASTALIN <> [V]CST_ALL
   PARSTA1.PS1.CRICOL([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
For [L]A_I=1 To maxtab(PARSTA1.PS1.TBLCOL)
 If PARSTA1.PS1.TBLCOL([L]A_I)<>null
  If PARSTA1.PS1.TBLCOL([L]A_I).ASTALIN=[V]CST_ADEL or PARSTA1.PS1.TBLCOL([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance PARSTA1.PS1.TBLCOL([L]A_I)
   PARSTA1.PS1.TBLCOL([L]A_I) = null
  Elsif PARSTA1.PS1.TBLCOL([L]A_I).ASTALIN <> [V]CST_ALL
   PARSTA1.PS1.TBLCOL([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
For [L]A_I=1 To maxtab(PARSTA1.PS1.VARCOL)
 If PARSTA1.PS1.VARCOL([L]A_I)<>null
  If PARSTA1.PS1.VARCOL([L]A_I).ASTALIN=[V]CST_ADEL or PARSTA1.PS1.VARCOL([L]A_I).ASTALIN=[V]CST_ANEWDEL
   FreeInstance PARSTA1.PS1.VARCOL([L]A_I)
   PARSTA1.PS1.VARCOL([L]A_I) = null
  Elsif PARSTA1.PS1.VARCOL([L]A_I).ASTALIN <> [V]CST_ALL
   PARSTA1.PS1.VARCOL([L]A_I).ASTALIN = [V]CST_ALL
  Endif
 Endif
Next
If [L]ASTATUS>=[V]CST_AERROR : Goto AINSERT_END : Endif
Return

#-----------------------------------------------------#
$AINSERT_PARSTA1
[L]ASTATUS = max([L]ASTATUS,fmet PARSTA1.ACTION("AINSERT_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PARSTA1.PS1._AINSERT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet PARSTA1.ACTION("AINSERT_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AINSERT_ABORT
Rollback
$_AINSERT_ABORT
If PARSTA1.snapshotEnabled=1
 [L]A_RETIK = PARSTA1.revertUpdTick
Endif
[L]ASTATUS = max(fmet PARSTA1.ACTION("AINSERT_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



