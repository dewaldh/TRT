#<AdxTL>@(#)0.0.0.0 $Revision$Class Reserved brackets
# Supervisor
## CRUD-CLASSE ## ACTLDEV
# 2018-08-27 12:19:29 325

Gosub TEST From WMCR_ACTLDEV : End

############################################################################################
## C : Subprog AINSERT(INSTANCE)
## D : Subprog ADELETE(INSTANCE)
## R : Subprog AREAD(INSTANCE,COD)
## U : Subprog AUPDATE(INSTANCE)
############################################################################################
# ACTLDEV : ACTLDEV
############################################################################################

############################################################################################
### AVARIABLES
############################################################################################
$AVARIABLES
[L]ASTATUS =max([L]ASTATUS,fmet ACTLDEV._ADELERRORS([V]CST_ALLERRORS))
$_AVARIABLES
Local    Integer     A_LEVEL,A_I,A_NEWCOL,A_N1
Local    Integer    ASTATUS,A_RETIK,A_TYPMAJ,A_ASTALIN
Local    Char        A_STRSITE(GLONFCY),A_STRACC(GLONACS),CURPRO(50),A_PARENT(50),A_PATH(200),A_ABR(GLONABR),A_ERROR(250)
Local    Uuident    A_UUID

[L]A_LEVEL    = ACTLDEV.ACTX.LEVWML
[L]ASTATUS  = 0

Onerrgo ERR_OPENTAB
If find(ACTLDEV.ACTX.AFOLDER,nomap,"")>0
 Local File ACTLDEV [ACD]
 Local File ACTLDEV [AAA_]
 Local File ATEXTRA [AXX]
Else
 Local File ACTLDEV [ACD]
 Local File ACTLDEV [AAA_]
 Local File =ACTLDEV.ACTX.AFOLDER+".ATEXTRA" [AXX]
Endif
Onerrgo
Return

$ERR_OPENTAB
[L]ASTATUS = max([L]ASTATUS,fmet ACTLDEV.ASETERROR("",errp+"("+num$(errl)+")"-mess(6,123,1)-num$(errn)-errmes$(errn)-errm,[V]CST_AERROR))
Resume

############################################################################################
### Link
############################################################################################
$AOPEN_LINK
Gosub AVARIABLES
Link [ACD] With
& [AAA_]ACD0 = COD
& As [LNK_]
Return

############################################################################################
### ACTLDEV(WACD)
############################################################################################
Funprog  _MAJSQL_ACTLDEV(WACD)
Variable Instance WACD Using C_ACTLDEV
Local Integer ASTATUS,A_I,A_J
Default File [F:ACD]
If WACD.ASTALIN=[V]CST_ANEW
 Call INICRE(WACD) From ASYRSUB
 SetInstance [F:ACD] With WACD
 For J=1 To maxtab(WACD.AXX)
  If WACD.AXX(J)<>null & WACD.AXX(J).PRO= "INTCOD" & WACD.AXX(J).FLG>0
   Call MAJTEXTRALAN(WACD,WACD.AXX(J).TEX,"ACTLDEV","INTCOD",WACD.AXX(J).LAN,WACD.COD,AVOID.ACHAR,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to dim([F:ACD]TYP)
  For [L]A_I=1 To maxtab(WACD.COLACD)
   If WACD.COLACD([L]A_I)<>null & !find(WACD.COLACD([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WACD.COLACD([L]A_I).AORDER=[L]A_J
    [F:ACD]TYP([L]A_J-1) = WACD.COLACD([L]A_I).TYP
    [F:ACD]RAN([L]A_J-1) = WACD.COLACD([L]A_I).RAN
    For J=1 To maxtab(WACD.COLACD([L]A_I).AXX)
     If WACD.COLACD([L]A_I).AXX(J)<>null & WACD.COLACD([L]A_I).AXX(J).PRO= "INTRAN" & WACD.COLACD([L]A_I).AXX(J).FLG>0
      Call MAJTEXTRALAN(WACD.COLACD([L]A_I),WACD.COLACD([L]A_I).AXX(J).TEX,"ACTLDEV","INTRAN",WACD.COLACD([L]A_I).AXX(J).LAN,WACD.COLACD([L]A_I).APARENT.COD,num$(WACD.COLACD([L]A_I).INTRANIDX),[L]ASTATUS) From ASYRSUB
      If [L]ASTATUS>=[V]CST_AERROR : Break 3 : Endif
     Endif
    Next J
    If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 Write [F:ACD]
 If fstat
  Call FSTA("ACD",WACD,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WACD.updTick = [F:ACD]updTick
Elsif WACD.ASTALIN=[V]CST_ALL or WACD.ASTALIN=[V]CST_AUPD
 Call INIUPD(WACD) From ASYRSUB
 SetInstance [F:ACD] With WACD
 For J=1 To maxtab(WACD.AXX)
  If WACD.AXX(J)<>null & WACD.AXX(J).PRO= "INTCOD" & WACD.AXX(J).FLG>0
   Call MAJTEXTRALAN(WACD,WACD.AXX(J).TEX,"ACTLDEV","INTCOD",WACD.AXX(J).LAN,WACD.COD,AVOID.ACHAR,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 For [L]A_J=1 to dim([F:ACD]TYP)
  For [L]A_I=1 To maxtab(WACD.COLACD)
   If WACD.COLACD([L]A_I)<>null & !find(WACD.COLACD([L]A_I).ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL) & WACD.COLACD([L]A_I).AORDER=[L]A_J
    [F:ACD]TYP([L]A_J-1) = WACD.COLACD([L]A_I).TYP
    [F:ACD]RAN([L]A_J-1) = WACD.COLACD([L]A_I).RAN
    For J=1 To maxtab(WACD.COLACD([L]A_I).AXX)
     If WACD.COLACD([L]A_I).AXX(J)<>null & WACD.COLACD([L]A_I).AXX(J).PRO= "INTRAN" & WACD.COLACD([L]A_I).AXX(J).FLG>0
      Call MAJTEXTRALAN(WACD.COLACD([L]A_I),WACD.COLACD([L]A_I).AXX(J).TEX,"ACTLDEV","INTRAN",WACD.COLACD([L]A_I).AXX(J).LAN,WACD.COLACD([L]A_I).APARENT.COD,num$(WACD.COLACD([L]A_I).INTRANIDX),[L]ASTATUS) From ASYRSUB
      If [L]ASTATUS>=[V]CST_AERROR : Break 3 : Endif
     Endif
    Next J
    If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
    Break
   Endif
  Next
 Next
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WACD,"ACTLDEV")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 RewriteByKey [F:ACD]ACD0 = [F:ACD]COD
 If fstat
  Call FSTA("ACD",WACD,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
 WACD.updTick = [F:ACD]updTick
Elsif WACD.ASTALIN=[V]CST_ADEL
 SetInstance [F:ACD] With WACD
 For J=1 To maxtab(WACD.AXX)
  If WACD.AXX(J)<>null & WACD.AXX(J).PRO= "INTCOD"
   Call SUPTEXTRA(WACD,WACD.AXX(J).TEX,"ACTLDEV","INTCOD",WACD.AXX(J).LAN,WACD.COD,AVOID.ACHAR,[L]ASTATUS) From ASYRSUB
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Next J
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 [L]ASTATUS = func ASYRFNC._ACONTROL_DATASTABLE(WACD,"ACTLDEV")
 If [L]ASTATUS>=[V]CST_AERROR : End [L]ASTATUS : Endif
 DeleteByKey [F:ACD]ACD0 = [F:ACD]COD
 If fstat
  Call FSTA("ACD",WACD,[L]ASTATUS) From ASYRSUB
  End [L]ASTATUS
 Endif
Endif
End [V]CST_AOK



