#<AdxTL>@(#)0.0.0.0 $Revision$Class Economic reason/BP groups
# Supervisor
## CRUD-CLASSE ## PBDBPGRPD
# 2018-08-27 12:37:19 328


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File PBDBPGRPD [PBDBPD_]

If !SILENCE : Call TRACE("2 --> Local Instance C_PBDBPGRPD") From ASYRCOM : Endif
Local Instance PBDBPGRPD Using C_PBDBPGRPD

If !SILENCE : Call TRACE("3 --> New Instance C_PBDBPGRPD") From ASYRCOM : Endif
PBDBPGRPD = NewInstance C_PBDBPGRPD AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [PBDBPD_]PBDBPD0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of PBDBPGRPD") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRPD.AREAD([PBDBPD_]COD,[PBDBPD_]LEG,[PBDBPD_]BPR))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("PBDBPGRPD.COD ="-num$(PBDBPGRPD.COD)) From ASYRCOM
 Call TRACE("PBDBPGRPD.LEG ="-num$(PBDBPGRPD.LEG)) From ASYRCOM
 Call TRACE("PBDBPGRPD.BPR ="-num$(PBDBPGRPD.BPR)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(PBDBPGRPD.AKEYS)
  Call TRACE("-"-num$(I)-":"-PBDBPGRPD.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [PBDBPD_]
FreeGroup PBDBPGRPD
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(PBDBPGRPD,ACLE,ASTATUS,_ETAG)
Variable Instance PBDBPGRPD Using C_PBDBPGRPD
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _COD(10)
Local Char _LEG(20)
Local Char _BPR(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_BPR = num$([L]CLE(3)) : Endif
Raz [L]_ETAG
Local File PBDBPGRPD [PBDBPD]
Default File [F:PBDBPD]
Read [F:PBDBPD]PBDBPD0 = [L]_COD;[L]_LEG;[L]_BPR
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:PBDBPD]UPDTICK)>0
 [L]_ETAG = num$([F:PBDBPD]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(PBDBPGRPD,ACLE,ASTATUS)
Variable Instance PBDBPGRPD Using C_PBDBPGRPD
Value Char ACLE
Variable Integer ASTATUS
Local Char _COD(10)
Local Char _LEG(20)
Local Char _BPR(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_COD = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_LEG = num$([L]CLE(2)) : Endif
If [L]CLE(3)<>"" : [L]_BPR = num$([L]CLE(3)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRPD.AREAD([L]_COD,[L]_LEG,[L]_BPR))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(PBDBPGRPD,_COD,_LEG,_BPR,ASTATUS)
Variable Instance PBDBPGRPD Using C_PBDBPGRPD
Value Char _COD
Value Char _LEG
Value Char _BPR
Variable Integer ASTATUS

If PBDBPGRPD = null : End : Endif

Gosub AVARIABLES From WMC00PBDBPGRPD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If PBDBPGRPD.APARENT=null
 [L]A_I = PBDBPGRPD.freeSnapshot
 PBDBPGRPD.snapshotEnabled = 0
 PBDBPGRPD.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & PBDBPGRPD.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRPD._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If PBDBPGRPD.APARENT=null
 PBDBPGRPD.snapshotEnabled = 1
 PBDBPGRPD.setAccessorEnabled = 1
Endif
LogicClose File [PBDBPD]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRPD._ACTION_PARAM("AREAD_BEFORE",[L]_COD,[L]_LEG,[L]_BPR))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:PBDBPD]
Read [F:PBDBPD]PBDBPD0 = [L]_COD;[L]_LEG;[L]_BPR
If fstat
[L]A_ERROR = [L]_COD+"~"+[L]_LEG+"~"+[L]_BPR
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(PBDBPGRPD,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:PBDBPD]AUUID)>0 & [F:PBDBPD]AUUID=NullUuid
 [F:PBDBPD]AUUID = getUuid
Endif
SetInstance PBDBPGRPD With [F:PBDBPD]
PBDBPGRPD.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet PBDBPGRPD.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



