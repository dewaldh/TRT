#<AdxTL>@(#)0.0.0.0 $Revision$Class Logistical tracking template
# Supervisor
## CRUD-CLASSE ## TRACKTPL
# 2018-08-27 13:45:56 629


############################################################################################
### Subprog AUPDATE
############################################################################################
Subprog AUPDATE(TRACKTPL,ASTATUS)
Variable Instance TRACKTPL Using R_TRACKTPL
Variable Integer ASTATUS

If TRACKTPL = null : End : Endif

Gosub AVARIABLES From WMR00TRACKTPL
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If fmet TRACKTPL.ACTX.AGETAFCRIGHT(TRACKTPL,"TRACKTPL",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AUPDATE_END : Endif
If fmet TRACKTPL.ACTX.AGETAFCRIGHTU(TRACKTPL,"TRACKTPL",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AUPDATE_END
Endif

Gosub AREPCONTROL_AUPDATE
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If !adxlog
 Gosub AUPDATE_TR_TRACKTPL
Else
 Gosub AUPDATE_TRACKTPL
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_END : Return : Endif

Gosub _AUPDATE_AFTER
[L]A_I = TRACKTPL.freeSnapshot
TRACKTPL.snapshotEnabled = 1
$AUPDATE_END
End

#-----------------------------------------------------#
$AREPCONTROL_AUPDATE
TRACKTPL.ASTALIN = [V]CST_AUPD
TRACKTPL.TKTH.ASTALIN = [V]CST_AUPD
[L]A_ASTALIN = TRACKTPL.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AUPDATE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = TRACKTPL.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AUPDATE_CONTROL
Gosub _AUPDATE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet TRACKTPL._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet TRACKTPL._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet TRACKTPL._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AUPDATE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_BEFORE
If TRACKTPL.TKTH.ASTALIN = [V]CST_ANEWDEL : Return : Endif
TRACKTPL.TKTH.ASTALIN = [V]CST_AUPD
If [V]CST_ASTALIN(TRACKTPL.TKTH.ASTALIN)<>""
 [L]A_ASTALIN = TRACKTPL.TKTH.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.TKTH.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
For A_N2=1 To maxtab(TRACKTPL.TKTH.TKTD) : # TRACKTPLD -- 2
 If TRACKTPL.TKTH.TKTD(A_N2) <> null
& and TRACKTPL.TKTH.TKTD(A_N2).ASTALIN<>[V]CST_ANEWDEL
  If TRACKTPL.TKTH.TKTD(A_N2).ASTALIN<>[V]CST_ANEW & TRACKTPL.TKTH.ASTALIN=[V]CST_ADEL
   TRACKTPL.TKTH.TKTD(A_N2).ASTALIN = [V]CST_ADEL
  Endif
  If TRACKTPL.TKTH.TKTD(A_N2).ASTALIN=[V]CST_ANEW & find(TRACKTPL.TKTH.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL)>0
   TRACKTPL.TKTH.TKTD(A_N2).ASTALIN = [V]CST_ANEWDEL
  Endif
  If [V]CST_ASTALIN(TRACKTPL.TKTH.TKTD(A_N2).ASTALIN)<>""
   Case [V]CST_ASTALIN(TRACKTPL.TKTH.TKTD(A_N2).ASTALIN)
    When [V]CST_APRGAINSERT  : [L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.TKTH.TKTD(A_N2)._AINSERT_CONTROL_BEFORE)
    When [V]CST_APRGAUPDATE : [L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.TKTH.TKTD(A_N2)._AUPDATE_CONTROL_BEFORE)
    When [V]CST_APRGADELETE  : [L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.TKTH.TKTD(A_N2)._ADELETE_CONTROL_BEFORE)
   Endcase
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(TRACKTPL.TKTH.TKTD)
 If TRACKTPL.TKTH.TKTD(A_N2)<>null
  If TRACKTPL.TKTH.TKTD(A_N2).ASTALIN<>[V]CST_ADEL & TRACKTPL.TKTH.TKTD(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TRACKTPL.TKTH,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"TRACKTPLD:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_AFTER
For A_N2=1 To maxtab(TRACKTPL.TKTH.TKTD) : # TRACKTPLD -- 2
 If TRACKTPL.TKTH.TKTD(A_N2) <> null
& and TRACKTPL.TKTH.TKTD(A_N2).ASTALIN<>[V]CST_ANEWDEL
  If [V]CST_ASTALIN(TRACKTPL.TKTH.TKTD(A_N2).ASTALIN)<>""
   Case [V]CST_ASTALIN(TRACKTPL.TKTH.TKTD(A_N2).ASTALIN)
    When [V]CST_APRGAINSERT  : [L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.TKTH.TKTD(A_N2)._AINSERT_CONTROL_AFTER)
    When [V]CST_APRGAUPDATE : [L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.TKTH.TKTD(A_N2)._AUPDATE_CONTROL_AFTER)
    When [V]CST_APRGADELETE  : [L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.TKTH.TKTD(A_N2)._ADELETE_CONTROL_AFTER)
   Endcase
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Local Integer A_OK1
For A_N2=1 to maxtab(TRACKTPL.TKTH.TKTD)
 If TRACKTPL.TKTH.TKTD(A_N2)<>null
  If TRACKTPL.TKTH.TKTD(A_N2).ASTALIN<>[V]CST_ADEL & TRACKTPL.TKTH.TKTD(A_N2).ASTALIN<>[V]CST_ANEWDEL
   [L]A_OK1 = 1 : Break
  Endif
 Endif
Next
If [L]A_OK1=0
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(TRACKTPL.TKTH,"",0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,"TRACKTPLD:"-mess(70,126,1)) : # Mandatory link
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

If [V]CST_ASTALIN(TRACKTPL.TKTH.ASTALIN)<>""
 [L]A_ASTALIN = TRACKTPL.TKTH.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.TKTH.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
Return

#-----------------------------------------------------#
$AUPDATE_TR_TRACKTPL
Trbegin [F:TKTH]
 Gosub AUPDATE_TRACKTPL
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AUPDATE_AFTER
If find(TRACKTPL.TKTH.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 TRACKTPL.TKTH.ASTALIN = [V]CST_ALL
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(TRACKTPL.TKTH.TKTD)
 If TRACKTPL.TKTH.TKTD(A_N2) <> null
  [L]ASTATUS2 = fmet TRACKTPL.TKTH.TKTD(A_N2)._AUPDATE_AFTER
  If TRACKTPL.TKTH.TKTD(A_N2).ASTALIN=[V]CST_ADEL or TRACKTPL.TKTH.TKTD(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance TRACKTPL.TKTH.TKTD(A_N2)
   TRACKTPL.TKTH.TKTD(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2
Return

#-----------------------------------------------------#
$AUPDATE_TRACKTPL
[L]A_ASTALIN = TRACKTPL.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.TKTH._AUPDATE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = TRACKTPL.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet TRACKTPL.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AUPDATE_ABORT
Rollback
$_AUPDATE_ABORT
If TRACKTPL.snapshotEnabled=1
 [L]A_RETIK = TRACKTPL.revertUpdTick
Endif
Local Integer ASTATUS2
For A_N2=1 To maxtab(TRACKTPL.TKTH.TKTD)
 If TRACKTPL.TKTH.TKTD(A_N2) <> null
  [L]ASTATUS2 = fmet TRACKTPL.TKTH.TKTD(A_N2)._AUPDATE_ABORT
  If TRACKTPL.TKTH.TKTD(A_N2).ASTALIN=[V]CST_ADEL or TRACKTPL.TKTH.TKTD(A_N2).ASTALIN=[V]CST_ANEWDEL
   FreeInstance TRACKTPL.TKTH.TKTD(A_N2)
   TRACKTPL.TKTH.TKTD(A_N2) = null
  Endif
  [L]ASTATUS = max([L]ASTATUS2,[L]ASTATUS)
 Endif
Next A_N2

[L]ASTATUS = max(fmet TRACKTPL.ACTION("AUPDATE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



