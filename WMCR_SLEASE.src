#<AdxTL>@(#)0.0.0.0 $Revision$Class Lease contracts
# Supervisor
## CRUD-CLASSE ## SLEASE
# 2018-08-27 12:47:08 065


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File LEASE [LEA_]

If !SILENCE : Call TRACE("2 --> Local Instance C_SLEASE") From ASYRCOM : Endif
Local Instance SLEASE Using C_SLEASE

If !SILENCE : Call TRACE("3 --> New Instance C_SLEASE") From ASYRCOM : Endif
SLEASE = NewInstance C_SLEASE AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [LEA_]LEA0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of SLEASE") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet SLEASE.AREAD([LEA_]LEAREF))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("SLEASE.LEAREF ="-num$(SLEASE.LEAREF)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(SLEASE.AKEYS)
  Call TRACE("-"-num$(I)-":"-SLEASE.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [LEA_]
FreeGroup SLEASE
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(SLEASE,ACLE,ASTATUS,_ETAG)
Variable Instance SLEASE Using C_SLEASE
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _LEAREF(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_LEAREF = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File LEASE [LEA]
Default File [F:LEA]
Read [F:LEA]LEA0 = [L]_LEAREF
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:LEA]UPDTICK)>0
 [L]_ETAG = num$([F:LEA]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(SLEASE,ACLE,ASTATUS)
Variable Instance SLEASE Using C_SLEASE
Value Char ACLE
Variable Integer ASTATUS
Local Char _LEAREF(20)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_LEAREF = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet SLEASE.AREAD([L]_LEAREF))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(SLEASE,_LEAREF,ASTATUS)
Variable Instance SLEASE Using C_SLEASE
Value Char _LEAREF
Variable Integer ASTATUS

If SLEASE = null : End : Endif

Gosub AVARIABLES From WMC00SLEASE
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If SLEASE.APARENT=null
 [L]A_I = SLEASE.freeSnapshot
 SLEASE.snapshotEnabled = 0
 SLEASE.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & SLEASE.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet SLEASE._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If SLEASE.APARENT=null
 SLEASE.snapshotEnabled = 1
 SLEASE.setAccessorEnabled = 1
Endif
LogicClose File [LEA] ,[LBB] ,[FAS]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet SLEASE._ACTION_PARAM("AREAD_BEFORE",[L]_LEAREF))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:LEA]
Read [F:LEA]LEA0 = [L]_LEAREF
If fstat
[L]A_ERROR = [L]_LEAREF
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(SLEASE,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = [F:LEA]FCY
[L]A_STRACC = ""
If dim([F:LEA]AUUID)>0 & [F:LEA]AUUID=NullUuid
 [F:LEA]AUUID = getUuid
Endif
SetInstance SLEASE With [F:LEA]
SLEASE.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:LBB]
 [L]A_N2=0
 For [F:LBB]LBB0 Where LEAREF=[F:LEA]LEAREF
  [L]A_N2 +=1
  SLEASE.LEABILBOOK(A_N2) = NewInstance  C_LEABILBOOK(SLEASE.ACTX,NullUuid,[L]A_N2,SLEASE,"LEABILBOOK") AllocGroup SLEASE
  [L]ASTATUS = max([L]ASTATUS,fmet SLEASE.LEABILBOOK(A_N2).ADDINSTANCE_BOUND)
  If dim([F:LBB]AUUID)>0 & [F:LBB]AUUID=NullUuid
   [F:LBB]AUUID = getUuid
  Endif
  SetInstance SLEASE.LEABILBOOK(A_N2) With [F:LBB]
  [L]ASTATUS = max([L]ASTATUS,fmet SLEASE.LEABILBOOK(A_N2).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  SLEASE.LEABILBOOK(A_N2).ASTALIN = [V]CST_ALL
 Next LBB
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
#-----------------------------------------------------#

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:FAS]
 [L]A_N2=0
 For [F:FAS]FAS12 Where LEAREF=[LEA]LEAREF
  [L]A_N2 +=1
  SLEASE.ASSETS(A_N2) = NewInstance  C_FXDASSETS(SLEASE.ACTX,NullUuid,[L]A_N2,SLEASE,"ASSETS") AllocGroup SLEASE
  [L]ASTATUS = max([L]ASTATUS,fmet SLEASE.ASSETS(A_N2).ADDINSTANCE_BOUND)
  If dim([F:FAS]AUUID)>0 & [F:FAS]AUUID=NullUuid
   [F:FAS]AUUID = getUuid
  Endif
  SetInstance SLEASE.ASSETS(A_N2) With [F:FAS]
  [L]A_NEWCOL = 0
  For [L]A_I=1 To 20
   If ([F:FAS]DIE([L]A_I-1)<>"" or [F:FAS]CCE([L]A_I-1)<>"")
    [L]A_NEWCOL += 1
    SLEASE.ASSETS(A_N2).ANA(A_NEWCOL) = NewInstance  C_FXDASSETS_ANA(SLEASE.ACTX,NullUuid,[L]A_I,SLEASE.ASSETS(A_N2),"ANA") AllocGroup SLEASE
    SLEASE.ASSETS(A_N2).ANA(A_NEWCOL).DIE = [F:FAS]DIE([L]A_I-1)
    SLEASE.ASSETS(A_N2).ANA(A_NEWCOL).CCE = [F:FAS]CCE([L]A_I-1)
    [L]ASTATUS = max([L]ASTATUS,fmet SLEASE.ASSETS(A_N2).ANA(A_NEWCOL).ACTION("AREAD_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   Endif
  Next
  [L]A_NEWCOL = 0
  For [L]A_I=1 To 15
   If ([F:FAS]ISSAMT([L]A_I-1)<>0 or [F:FAS]SHOGAL([L]A_I-1)<>0 or [F:FAS]LNGGAL([L]A_I-1)<>0 or [F:FAS]GAL([L]A_I-1)<>0
& or [F:FAS]IMLRVEISS([L]A_I-1)<>0)
    [L]A_NEWCOL += 1
    SLEASE.ASSETS(A_N2).CGAL(A_NEWCOL) = NewInstance  C_FXDASSETS_CGAL(SLEASE.ACTX,NullUuid,[L]A_I,SLEASE.ASSETS(A_N2),"CGAL") AllocGroup SLEASE
    SLEASE.ASSETS(A_N2).CGAL(A_NEWCOL).ISSAMT = [F:FAS]ISSAMT([L]A_I-1)
    SLEASE.ASSETS(A_N2).CGAL(A_NEWCOL).SHOGAL = [F:FAS]SHOGAL([L]A_I-1)
    SLEASE.ASSETS(A_N2).CGAL(A_NEWCOL).LNGGAL = [F:FAS]LNGGAL([L]A_I-1)
    SLEASE.ASSETS(A_N2).CGAL(A_NEWCOL).GAL = [F:FAS]GAL([L]A_I-1)
    SLEASE.ASSETS(A_N2).CGAL(A_NEWCOL).IMLRVEISS = [F:FAS]IMLRVEISS([L]A_I-1)
    [L]ASTATUS = max([L]ASTATUS,fmet SLEASE.ASSETS(A_N2).CGAL(A_NEWCOL).ACTION("AREAD_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   Endif
  Next
  [L]A_NEWCOL = 0
  For [L]A_I=1 To 11
   If ([F:FAS]FLGCNXCLC([L]A_I-1)<>0)
    [L]A_NEWCOL += 1
    SLEASE.ASSETS(A_N2).CNX(A_NEWCOL) = NewInstance  C_FXDASSETS_CNX(SLEASE.ACTX,NullUuid,[L]A_I,SLEASE.ASSETS(A_N2),"CNX") AllocGroup SLEASE
    SLEASE.ASSETS(A_N2).CNX(A_NEWCOL).FLGCNXCLC = [F:FAS]FLGCNXCLC([L]A_I-1)
    [L]ASTATUS = max([L]ASTATUS,fmet SLEASE.ASSETS(A_N2).CNX(A_NEWCOL).ACTION("AREAD_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   Endif
  Next
  [L]ASTATUS = max([L]ASTATUS,fmet SLEASE.ASSETS(A_N2).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  SLEASE.ASSETS(A_N2).ASTALIN = [V]CST_ALL
 Next FAS
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
#-----------------------------------------------------#

[L]A_NEWCOL = 0
For [L]A_I=1 To 20
 If ([F:LEA]DIE([L]A_I-1)<>"" or [F:LEA]CCE([L]A_I-1)<>"")
  [L]A_NEWCOL += 1
  SLEASE.ANA(A_NEWCOL) = NewInstance  C_SLEASE_ANA(SLEASE.ACTX,NullUuid,[L]A_I,SLEASE,"ANA") AllocGroup SLEASE
  SLEASE.ANA(A_NEWCOL).DIE = [F:LEA]DIE([L]A_I-1)
  SLEASE.ANA(A_NEWCOL).CCE = [F:LEA]CCE([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet SLEASE.ANA(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet SLEASE.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



