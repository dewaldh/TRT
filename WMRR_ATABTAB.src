#<AdxTL>@(#)0.0.0.0 $Revision$Class Definition of misc tables
# Supervisor
## CRUD-CLASSE ## ATABTAB
# 2018-08-27 13:03:21 580


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ATABTAB [ADV_]

If !SILENCE : Call TRACE("2 --> Local Instance R_ATABTAB") From ASYRCOM : Endif
Local Instance ATABTAB Using R_ATABTAB

If !SILENCE : Call TRACE("3 --> New Instance R_ATABTAB") From ASYRCOM : Endif
ATABTAB = NewInstance R_ATABTAB AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ADV_]CODE First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ATABTAB") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.AREAD([ADV_]NUMTAB))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ATABTAB.ADI.NUMTAB ="-num$(ATABTAB.ADI.NUMTAB)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ATABTAB.ADI.AKEYS)
  Call TRACE("-"-num$(I)-":"-ATABTAB.ADI.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ADV_]
FreeGroup ATABTAB
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ATABTAB,ACLE,ASTATUS,_ETAG)
Variable Instance ATABTAB Using R_ATABTAB
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Shortint _NUMTAB
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_NUMTAB = val([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File ATABTAB [ADV]
Default File [F:ADV]
Read [F:ADV]CODE = [L]_NUMTAB
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ADV]UPDTICK)>0
 [L]_ETAG = num$([F:ADV]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ATABTAB,ACLE,ASTATUS)
Variable Instance ATABTAB Using R_ATABTAB
Value Char ACLE
Variable Integer ASTATUS
Local Shortint _NUMTAB
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_NUMTAB = val([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.AREAD([L]_NUMTAB))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ATABTAB,_NUMTAB,ASTATUS)
Variable Instance ATABTAB Using R_ATABTAB
Value Shortint _NUMTAB
Variable Integer ASTATUS

If ATABTAB = null : End : Endif

Gosub AVARIABLES From WMR00ATABTAB
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ATABTAB.APARENT=null
 [L]A_I = ATABTAB.freeSnapshot
 ATABTAB.snapshotEnabled = 0
 ATABTAB.setAccessorEnabled = 0
Endif

If fmet ATABTAB.ACTX.AGETAFCRIGHT(ATABTAB,"GESADI",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:ADV]
Read [F:ADV]CODE = [L]_NUMTAB
If fstat
[L]A_ERROR = num$([L]_NUMTAB)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ATABTAB,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = [F:ADV]ACS
If fmet ATABTAB.ACTX.AGETAFCRIGHTR(ATABTAB,"GESADI",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet ATABTAB.ACTX.AGETACSRIGHTC(ATABTAB,[L]A_STRACC,[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR
 Goto AREAD_END
  Endif
If fmet ATABTAB.ACTX.ASTACRITROLE(ATABTAB,num$([L]_NUMTAB)
& ,"ADI","ADV",[V]CST_ATRUE)>=[V]CST_AERROR
   [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
  Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ACTION("AREAD_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  ATABTAB.ADI.setAccessorEnabled = 0
  [L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ADI.AREAD([L]_NUMTAB))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet ATABTAB.ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  If [L]ASTATUS<[V]CST_AERROR & ATABTAB.APARENT=null
   # Load Link
   [L]ASTATUS = max([L]ASTATUS,fmet ATABTAB._ALNKPRO)
   If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  Endif
  
  $AREAD_END
  If ATABTAB.APARENT=null
   ATABTAB.snapshotEnabled = 1
   ATABTAB.setAccessorEnabled = 1
  Endif
  LogicClose File [ADV]
  End
  


