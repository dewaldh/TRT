#<AdxTL>@(#)0.0.0.0 $Revision$Class Places  
# Supervisor
## CRUD-CLASSE ## TABPLACE
# 2018-08-27 12:52:21 527


############################################################################################
### Subprog _ADELETE
############################################################################################
Subprog _ADELETE(TABPLACE,ASTATUS)
Variable Instance TABPLACE Using C_TABPLACE
Variable Integer ASTATUS

If TABPLACE = null : End : Endif

Gosub _AVARIABLES From WMC00TABPLACE

[L]A_STRSITE = ""
[L]A_STRACC = ""
Local Instance ALNKDELTAB Using C_ALNKDELTAB
Gosub ADELETE_TABPLACE

End

############################################################################################
### Subprog ADELETE
############################################################################################
Subprog ADELETE(TABPLACE,ASTATUS)
Variable Instance TABPLACE Using C_TABPLACE
Variable Integer ASTATUS

If TABPLACE = null : End : Endif

Gosub AVARIABLES From WMC00TABPLACE
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

Local Instance ALNKDELTAB Using C_ALNKDELTAB

[L]A_STRSITE = ""
[L]A_STRACC = ""
Gosub ADELETE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Goto ADELETE_END : Endif

If !adxlog
 Gosub ADELETE_TR_TABPLACE
Else
 Gosub ADELETE_TABPLACE
Endif

$ADELETE_END
End


$ADELETE_CONTROL
Gosub _ADELETE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Verification delete
[L]ASTATUS = max([L]ASTATUS,func ASYRSUB.VERIFY_INSTANCE(TABPLACE,ALNKDELTAB))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _ADELETE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_BEFORE
If TABPLACE.ASTALIN = [V]CST_ANEWDEL : Return : Endif
TABPLACE.ASTALIN = [V]CST_ADEL
[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.ACTION("ADELETE_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
For A_N2=1 To maxtab(TABPLACE.BPA) : # BPADDRESS -- 2
 If TABPLACE.BPA(A_N2) <> null
& and TABPLACE.BPA(A_N2).ASTALIN<>[V]CST_ANEWDEL
  If TABPLACE.BPA(A_N2).ASTALIN<>[V]CST_ANEW
   TABPLACE.BPA(A_N2).ASTALIN = [V]CST_ADEL
   [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.BPA(A_N2)._ADELETE_CONTROL_BEFORE)
   If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
   For [L]A_I=1 To maxtab(TABPLACE.BPA(A_N2).COLTEL)
    If TABPLACE.BPA(A_N2).COLTEL([L]A_I)<>null
     [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.BPA(A_N2).COLTEL([L]A_I).ACTION("ADELETE_CONTROL_BEFORE"))
     If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
    Endif
   Next
   If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
   For [L]A_I=1 To maxtab(TABPLACE.BPA(A_N2).COLWEB)
    If TABPLACE.BPA(A_N2).COLWEB([L]A_I)<>null
     [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.BPA(A_N2).COLWEB([L]A_I).ACTION("ADELETE_CONTROL_BEFORE"))
     If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
    Endif
   Next
   If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
  Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Return

#-----------------------------------------------------#
$_ADELETE_CONTROL_AFTER
For A_N2=1 To maxtab(TABPLACE.BPA) : # BPADDRESS -- 2
 If TABPLACE.BPA(A_N2) <> null
& and TABPLACE.BPA(A_N2).ASTALIN<>[V]CST_ANEWDEL
  [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.BPA(A_N2)._ADELETE_CONTROL_AFTER)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  For [L]A_I=1 To maxtab(TABPLACE.BPA(A_N2).COLTEL)
   If TABPLACE.BPA(A_N2).COLTEL([L]A_I)<>null
    [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.BPA(A_N2).COLTEL([L]A_I).ACTION("ADELETE_CONTROL_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
  For [L]A_I=1 To maxtab(TABPLACE.BPA(A_N2).COLWEB)
   If TABPLACE.BPA(A_N2).COLWEB([L]A_I)<>null
    [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.BPA(A_N2).COLWEB([L]A_I).ACTION("ADELETE_CONTROL_AFTER"))
    If [L]ASTATUS>=[V]CST_AERROR : Break 2 : Endif
   Endif
  Next
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.ACTION("ADELETE_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_TR_TABPLACE
Trbegin [F:TPC]
 Gosub ADELETE_TABPLACE
 If [L]ASTATUS>=[V]CST_AERROR : Gosub ADELETE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
#-----------------------------------------------------#
$ADELETE_TABPLACE
[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.ACTION("ADELETE_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

#-----------------------------------------------------#
For A_N2=1 To maxtab(TABPLACE.BPA)
 If TABPLACE.BPA(A_N2) <> null
  [L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.BPA(A_N2)._ADELETE)
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
 Endif
Next A_N2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
#-----------------------------------------------------#

[L]ASTATUS = func ASYRSUB.DELETE_LINKS(TABPLACE,ALNKDELTAB)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,func WMC00TABPLACE._MAJSQL_TABPLACE(TABPLACE))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet TABPLACE.ACTION("ADELETE_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$ADELETE_ABORT
Rollback
$_ADELETE_ABORT
If TABPLACE.snapshotEnabled=1
 [L]A_RETIK = TABPLACE.revertUpdTick
Endif
[L]ASTATUS = max(fmet TABPLACE.ACTION("ADELETE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#

#-----------------------------------------------------#
$_ADELETE_AFTER
Return



