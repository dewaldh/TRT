#<AdxTL>@(#)0.0.0.0 $Revision$Class X3 connection properties
# Supervisor
## CRUD-CLASSE ## ACHGENVX3
# 2018-08-27 13:00:29 981


############################################################################################
### Subprog AUPDATE
############################################################################################
Subprog AUPDATE(ACHGENVX3,ASTATUS)
Variable Instance ACHGENVX3 Using R_ACHGENVX3
Variable Integer ASTATUS

If ACHGENVX3 = null : End : Endif

Gosub AVARIABLES From WMR00ACHGENVX3
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

Gosub AREPCONTROL_AUPDATE
If [L]ASTATUS>=[V]CST_AERROR : Goto AUPDATE_END : Endif

If !adxlog
 Gosub AUPDATE_TR_ACHGENVX3
Else
 Gosub AUPDATE_ACHGENVX3
Endif
If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_END : Return : Endif

Gosub _AUPDATE_AFTER
[L]A_I = ACHGENVX3.freeSnapshot
ACHGENVX3.snapshotEnabled = 1
$AUPDATE_END
End

#-----------------------------------------------------#
$AREPCONTROL_AUPDATE
ACHGENVX3.ASTALIN = [V]CST_AUPD
ACHGENVX3.ACHX3.ASTALIN = [V]CST_AUPD
[L]A_ASTALIN = ACHGENVX3.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ACHGENVX3.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Gosub AUPDATE_CONTROL
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = ACHGENVX3.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ACHGENVX3.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return


$AUPDATE_CONTROL
Gosub _AUPDATE_CONTROL_BEFORE
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
# Control mandatory
[L]ASTATUS =  max([L]ASTATUS,fmet ACHGENVX3._AMANDATORY)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control format
[L]ASTATUS =  max([L]ASTATUS,fmet ACHGENVX3._AFORMAT)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

# Control other
[L]ASTATUS =  max([L]ASTATUS,fmet ACHGENVX3._AOTHERS)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AUPDATE_CONTROL_AFTER
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_BEFORE
If ACHGENVX3.ACHX3.ASTALIN = [V]CST_ANEWDEL : Return : Endif
ACHGENVX3.ACHX3.ASTALIN = [V]CST_AUPD
If [V]CST_ASTALIN(ACHGENVX3.ACHX3.ASTALIN)<>""
 [L]A_ASTALIN = ACHGENVX3.ACHX3.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet ACHGENVX3.ACHX3.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_BEFORE"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif

Return

#-----------------------------------------------------#
$_AUPDATE_CONTROL_AFTER

If [V]CST_ASTALIN(ACHGENVX3.ACHX3.ASTALIN)<>""
 [L]A_ASTALIN = ACHGENVX3.ACHX3.ASTALIN
 [L]ASTATUS = max([L]ASTATUS,fmet ACHGENVX3.ACHX3.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_CONTROL_AFTER"))
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
Return

#-----------------------------------------------------#
$AUPDATE_TR_ACHGENVX3
Trbegin [F:__INT]
 Gosub AUPDATE_ACHGENVX3
 If [L]ASTATUS>=[V]CST_AERROR : Gosub AUPDATE_ABORT : Return : Endif
Commit
Return

#-----------------------------------------------------#
$_AUPDATE_AFTER
If find(ACHGENVX3.ACHX3.ASTALIN,[V]CST_ADEL,[V]CST_ANEWDEL,[V]CST_ALL)=0
 ACHGENVX3.ACHX3.ASTALIN = [V]CST_ALL
Endif
Return

#-----------------------------------------------------#
$AUPDATE_ACHGENVX3
[L]A_ASTALIN = ACHGENVX3.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ACHGENVX3.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ACHGENVX3.ACHX3._AUPDATE)
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

[L]A_ASTALIN = ACHGENVX3.ASTALIN
[L]ASTATUS = max([L]ASTATUS,fmet ACHGENVX3.ACTION([V]CST_ASTALIN([L]A_ASTALIN)+"_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

#-----------------------------------------------------#
$AUPDATE_ABORT
Rollback
$_AUPDATE_ABORT
If ACHGENVX3.snapshotEnabled=1
 [L]A_RETIK = ACHGENVX3.revertUpdTick
Endif

[L]ASTATUS = max(fmet ACHGENVX3.ACTION("AUPDATE_ABORT"),[L]ASTATUS)
Return
#-----------------------------------------------------#



