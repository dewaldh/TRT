#<AdxTL>@(#)0.0.0.0 $Revision$Class Detail return
# Supervisor
## ACLA-CLASSE ## PRETURND
# 2018-08-27 12:43:09 126

####################################################################
# Traitments
####################################################################
$_ADDTRT
this.AINF.TRT(1) = "PRETURND_CSTD"
this.AINF.TYP(1) = 1
this.AINF.PTH(1) = ""
this.AINF.NBTRT = 1
Return

####################################################################
#Declaration of variables
####################################################################

$DECLARE_VAR
Local Char    ACTION(50) , CURPRO(250) , VALPRO(250) , CURQRY(50) , CURPTH(250)
Local Char    AMETHOD(50) ,AOPERATION(50),AEVENT(50),ARULE(50)
Local Integer ALLSTAT,AISMET,ASTATUS
Return

####################################################################
# Methods of the class
####################################################################
# Fmethod Miscellaneous table loading
$INIT_TSICODADI
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "INIT_TSICODADI" : [L]ACTION = "INIT_TSICODADI" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Method AREAD
$AREAD
Gosub DECLARE_VAR
[L]AEVENT = "AREAD" : [L]ACTION = "AREAD" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return


####################################################################
# Global methods & standards
####################################################################
$AINIT
Gosub DECLARE_VAR
[L]AEVENT = "AINIT" : [L]ACTION = "AINIT" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# AERRORS
####################################################################

$_AERROR
Gosub DECLARE_VAR From WMC0PRETURND
Local Integer ALLSTAT
Call ALLERRORS(this,_CTX,_SUPP) From ASYRSUB
For AINDCLA=1 To 5
 If this.C_TSICOD(AINDCLA)<>null
  [L]ASTATUS = fmet this.C_TSICOD(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
If this.PNDCAL<>null
 [L]ASTATUS = fmet this.PNDCAL._AERROR(_CTX,_SUPP)
Endif
For AINDCLA=1 To maxtab(this.STJ)
 If this.STJ(AINDCLA)<>null
  [L]ASTATUS = fmet this.STJ(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
If this.PTD<>null
 [L]ASTATUS = fmet this.PTD._AERROR(_CTX,_SUPP)
Endif
Return

####################################################################
# Delete all errors
####################################################################

$_ADELERRORS
Gosub DECLARE_VAR From WMC0PRETURND
Local Integer ALLSTAT
[L]ASTATUS = fmet this.ADELETEERROR([L]_APARAM)
For AINDCLA=1 To 5
 If this.C_TSICOD(AINDCLA)<>null
  [L]ASTATUS = fmet this.C_TSICOD(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
If this.PNDCAL<>null
 [L]ASTATUS = fmet this.PNDCAL._ADELERRORS(_APARAM)
Endif
For AINDCLA=1 To maxtab(this.STJ)
 If this.STJ(AINDCLA)<>null
  [L]ASTATUS = fmet this.STJ(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
If this.PTD<>null
 [L]ASTATUS = fmet this.PTD._ADELERRORS(_APARAM)
Endif
Return

####################################################################
# _ASEARCHINFOS
####################################################################

$_ASEARCHINFOS
Gosub DECLARE_VAR From WMC0PRETURND
ASTATUS= func ASYRSUB.ASEARCHINFOS(this,[L]AINS_ORI,[L]ERR_TYPE,[L]PROPERTY,[L]ASTAT,[L]SELSTAT,[L]PATH)
If [L]ERR_TYPE=[V]CST_ACURRENT : Return : Endif
For AINDCLA=1 To 5
 If this.C_TSICOD(AINDCLA)<>null
  [L]ASTATUS = fmet this.C_TSICOD(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'C_TSICOD('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
If this.PNDCAL<>null
 [L]ASTATUS = fmet this.PNDCAL._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'PNDCAL')
Endif
For AINDCLA=1 To maxtab(this.STJ)
 If this.STJ(AINDCLA)<>null
  [L]ASTATUS = fmet this.STJ(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'STJ('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
If this.PTD<>null
 [L]ASTATUS = fmet this.PTD._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'PTD')
Endif
Return

####################################################################
# AGETERRORSFROM
####################################################################

$_AGETERRORSFROM
Gosub DECLARE_VAR From WMC0PRETURND
If AINS_FROM<>null
 [L]ASTATUS = fmet AINS_FROM.ASEARCHINFOS( [V]CST_ALL, "", [V]CST_AFATAL, 0)
Endif
Call AGETERRORSFROM(AINS_FROM,this,ENVIRONNEMENT) From ASYRSUB
Return

####################################################################
# RICH MEDIA
####################################################################
$AREAD_CLB
Case [L]_PRONAME
 When "CLALINTEX"
  If fmet this.AGETATTRIBUTE("CLALINTEX","$isLoaded")<>"true"
   Gosub READ_CLB_CLALINTEX
  Else
   [L]_CLB = this.CLALINTEX
  Endif
  If [L]_CNT=''
   [L]ASTATUS = fmet this.ASETATTRIBUTE("CLALINTEX","$contentType","text/rtf")
   [L]_CNT = "text/rtf"
  Endif
Endcase
Return

$READ_CLB_CLALINTEX
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File TEXCLOB [WTXC]
Else
Local File =this.ACTX.AFOLDER+".TEXCLOB" [WTXC]
Endif
Raz [L]_CLB
Raz [L]_CNT
Gosub DECODE_KEYVAL From ASYRLOB
[F:WTXC]CODE = [L]_KEYVALTAB(1)
Read [WTXC] =
If !fstat
 [L]_CLB = [F:WTXC]TEXTE
Endif
LogicClose File [WTXC]
Return

$READ_EXI_CLALINTEX
If this.ACTX.AFOLDER="" | this.ACTX.AFOLDER=nomap
Local File TEXCLOB [WTXC]
Else
Local File =this.ACTX.AFOLDER+".TEXCLOB" [WTXC]
Endif
Local Tinyint _EXI : [L]_EXI=1
[F:WTXC]CODE = this.LINTEX
Look [WTXC] =
If fstat
 [L]_EXI=0
Endif
LogicClose File [WTXC]
Return

####################################################################
$ACONTROL
####################################################################
Gosub DECLARE_VAR
[L]AEVENT = "ACONTROL" : [L]ACTION = "ACONTROL" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# ADELLINE
####################################################################
$ADELLINE
Case _ACOLLECTION
 When "C_TSICOD"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"C_TSICOD",this)
 When "PNDCAL"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"PNDCAL",this)
 When "PTD"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"PTD",this)
 When "STJ"
  [L]_ALINE =  func ASYRSUBTAB.ADELLINE([L]ALINE,"STJ",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# ADDLINE
####################################################################
$ADDLINE
Case _ACOLLECTION
 When "C_TSICOD"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"C_TSICOD","C_PRETURND_C_TSICOD",this)
 When "PNDCAL"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"PNDCAL","C_CPTANALIN",this)
 When "PTD"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"PTD","C_PRECEIPTD",this)
 When "STJ"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"STJ","C_STOJOU",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETDIM
####################################################################
$AGETDIM
Case _ACOLLECTION
 When "C_TSICOD"
  [L]_ALINE = 5
 When "PNDCAL"
  [L]_ALINE = 1
 When "PTD"
  [L]_ALINE = 1
 When "STJ"
  [L]_ALINE = 0
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETMIN
####################################################################
$AGETMIN
Case _ACOLLECTION
 When "C_TSICOD"
  [L]_ALINE = 3
 When "PNDCAL"
  [L]_ALINE = 2
 When "PTD"
  [L]_ALINE = 1
 When "STJ"
  [L]_ALINE = 1
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# _ADELINSTANCE
####################################################################
$_ADELINSTANCE
[L]ASTATUS = func ASYRSUBTAB._ADELINSTANCE(this)
Return

####################################################################
# ADDINSTANCE_BOUND
####################################################################
$ADDINSTANCE_BOUND
this.PNDCAL(1) = NewInstance C_CPTANALIN(this.ACTX,NullUuid,1,this,"PNDCAL") AllocGroup this
this.PNDCAL(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.PNDCAL(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
Return



