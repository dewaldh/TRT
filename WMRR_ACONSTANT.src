#<AdxTL>@(#)0.0.0.0 $Revision$Class Constants
# Supervisor
## CRUD-CLASSE ## ACONSTANT
# 2018-08-27 13:00:39 692


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ACONSTANT [ACST_]

If !SILENCE : Call TRACE("2 --> Local Instance R_ACONSTANT") From ASYRCOM : Endif
Local Instance ACONSTANT Using R_ACONSTANT

If !SILENCE : Call TRACE("3 --> New Instance R_ACONSTANT") From ASYRCOM : Endif
ACONSTANT = NewInstance R_ACONSTANT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ACST_]ACST0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ACONSTANT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ACONSTANT.AREAD([ACST_]CODVAR))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ACONSTANT.ACST.CODVAR ="-num$(ACONSTANT.ACST.CODVAR)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ACONSTANT.ACST.AKEYS)
  Call TRACE("-"-num$(I)-":"-ACONSTANT.ACST.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ACST_]
FreeGroup ACONSTANT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ACONSTANT,ACLE,ASTATUS,_ETAG)
Variable Instance ACONSTANT Using R_ACONSTANT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CODVAR(30)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODVAR = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File ACONSTANT [ACST]
Default File [F:ACST]
Read [F:ACST]ACST0 = [L]_CODVAR
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ACST]UPDTICK)>0
 [L]_ETAG = num$([F:ACST]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ACONSTANT,ACLE,ASTATUS)
Variable Instance ACONSTANT Using R_ACONSTANT
Value Char ACLE
Variable Integer ASTATUS
Local Char _CODVAR(30)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CODVAR = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ACONSTANT.AREAD([L]_CODVAR))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ACONSTANT,_CODVAR,ASTATUS)
Variable Instance ACONSTANT Using R_ACONSTANT
Value Char _CODVAR
Variable Integer ASTATUS

If ACONSTANT = null : End : Endif

Gosub AVARIABLES From WMR00ACONSTANT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ACONSTANT.APARENT=null
 [L]A_I = ACONSTANT.freeSnapshot
 ACONSTANT.snapshotEnabled = 0
 ACONSTANT.setAccessorEnabled = 0
Endif

If fmet ACONSTANT.ACTX.AGETAFCRIGHT(ACONSTANT,"GESACST",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:ACST]
Read [F:ACST]ACST0 = [L]_CODVAR
If fstat
[L]A_ERROR = [L]_CODVAR
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ACONSTANT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet ACONSTANT.ACTX.AGETAFCRIGHTR(ACONSTANT,"GESACST",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet ACONSTANT.ACTX.ASTACRITROLE(ACONSTANT,[L]_CODVAR
& ,"ACST","ACST",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet ACONSTANT.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

ACONSTANT.ACST.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet ACONSTANT.ACST.AREAD([L]_CODVAR))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet ACONSTANT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ACONSTANT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ACONSTANT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ACONSTANT.APARENT=null
 ACONSTANT.snapshotEnabled = 1
 ACONSTANT.setAccessorEnabled = 1
Endif
LogicClose File [ACST]
End



