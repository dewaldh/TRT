#<AdxTL>@(#)0.0.0.0 $Revision$Class 
# Sage X3 supervisor
## ACLA-CLASSE ## WMACACHEMAIN
# 2018-08-07 02:17:51 849

####################################################################
# Traitments
####################################################################
$_ADDTRT
this.AINF.TRT(1) = "WMACACHEMAIN_CSTD"
this.AINF.TYP(1) = 1
this.AINF.PTH(1) = ""
this.AINF.NBTRT = 1
Return

####################################################################
#Declaration of variables
####################################################################

$DECLARE_VAR
Local Char    ACTION(50) , CURPRO(250) , VALPRO(250) , CURQRY(50) , CURPTH(250)
Local Char    AMETHOD(50) ,AOPERATION(50),AEVENT(50),ARULE(50)
Local Integer ALLSTAT,AISMET,ASTATUS
Return

####################################################################
# Methods of the class
####################################################################
# Fmethod 
$ACLEAN
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "ACLEAN" : [L]ACTION = "ACLEAN" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return


####################################################################
# Global methods & standards
####################################################################
$AINIT
Gosub DECLARE_VAR
[L]AEVENT = "AINIT" : [L]ACTION = "AINIT" : [L]CURPRO = "" : Gosub ACTION From ASYRSUB
Return

####################################################################
# AERRORS
####################################################################

$_AERROR
Gosub DECLARE_VAR From WMC0WMACACHEMAIN
Local Integer ALLSTAT
Call ALLERRORS(this,_CTX,_SUPP) From ASYRSUB
For AINDCLA=1 To maxtab(this.ACPY)
 If this.ACPY(AINDCLA)<>null
  [L]ASTATUS = fmet this.ACPY(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ACRY)
 If this.ACRY(AINDCLA)<>null
  [L]ASTATUS = fmet this.ACRY(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ACUR)
 If this.ACUR(AINDCLA)<>null
  [L]ASTATUS = fmet this.ACUR(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.AFCY)
 If this.AFCY(AINDCLA)<>null
  [L]ASTATUS = fmet this.AFCY(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ALEG)
 If this.ALEG(AINDCLA)<>null
  [L]ASTATUS = fmet this.ALEG(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ATUN)
 If this.ATUN(AINDCLA)<>null
  [L]ASTATUS = fmet this.ATUN(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ATYP)
 If this.ATYP(AINDCLA)<>null
  [L]ASTATUS = fmet this.ATYP(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ATYPPRO)
 If this.ATYPPRO(AINDCLA)<>null
  [L]ASTATUS = fmet this.ATYPPRO(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CNX)
 If this.CNX(AINDCLA)<>null
  [L]ASTATUS = fmet this.CNX(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.COA)
 If this.COA(AINDCLA)<>null
  [L]ASTATUS = fmet this.COA(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CPYDIE)
 If this.CPYDIE(AINDCLA)<>null
  [L]ASTATUS = fmet this.CPYDIE(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.DIE)
 If this.DIE(AINDCLA)<>null
  [L]ASTATUS = fmet this.DIE(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.GGCM)
 If this.GGCM(AINDCLA)<>null
  [L]ASTATUS = fmet this.GGCM(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.LED)
 If this.LED(AINDCLA)<>null
  [L]ASTATUS = fmet this.LED(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
Return

####################################################################
# Delete all errors
####################################################################

$_ADELERRORS
Gosub DECLARE_VAR From WMC0WMACACHEMAIN
Local Integer ALLSTAT
[L]ASTATUS = fmet this.ADELETEERROR([L]_APARAM)
For AINDCLA=1 To maxtab(this.ACPY)
 If this.ACPY(AINDCLA)<>null
  [L]ASTATUS = fmet this.ACPY(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ACRY)
 If this.ACRY(AINDCLA)<>null
  [L]ASTATUS = fmet this.ACRY(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ACUR)
 If this.ACUR(AINDCLA)<>null
  [L]ASTATUS = fmet this.ACUR(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.AFCY)
 If this.AFCY(AINDCLA)<>null
  [L]ASTATUS = fmet this.AFCY(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ALEG)
 If this.ALEG(AINDCLA)<>null
  [L]ASTATUS = fmet this.ALEG(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ATUN)
 If this.ATUN(AINDCLA)<>null
  [L]ASTATUS = fmet this.ATUN(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ATYP)
 If this.ATYP(AINDCLA)<>null
  [L]ASTATUS = fmet this.ATYP(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ATYPPRO)
 If this.ATYPPRO(AINDCLA)<>null
  [L]ASTATUS = fmet this.ATYPPRO(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CNX)
 If this.CNX(AINDCLA)<>null
  [L]ASTATUS = fmet this.CNX(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.COA)
 If this.COA(AINDCLA)<>null
  [L]ASTATUS = fmet this.COA(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CPYDIE)
 If this.CPYDIE(AINDCLA)<>null
  [L]ASTATUS = fmet this.CPYDIE(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.DIE)
 If this.DIE(AINDCLA)<>null
  [L]ASTATUS = fmet this.DIE(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.GGCM)
 If this.GGCM(AINDCLA)<>null
  [L]ASTATUS = fmet this.GGCM(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.LED)
 If this.LED(AINDCLA)<>null
  [L]ASTATUS = fmet this.LED(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
Return

####################################################################
# _ASEARCHINFOS
####################################################################

$_ASEARCHINFOS
Gosub DECLARE_VAR From WMC0WMACACHEMAIN
ASTATUS= func ASYRSUB.ASEARCHINFOS(this,[L]AINS_ORI,[L]ERR_TYPE,[L]PROPERTY,[L]ASTAT,[L]SELSTAT,[L]PATH)
If [L]ERR_TYPE=[V]CST_ACURRENT : Return : Endif
For AINDCLA=1 To maxtab(this.ACPY)
 If this.ACPY(AINDCLA)<>null
  [L]ASTATUS = fmet this.ACPY(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'ACPY('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ACRY)
 If this.ACRY(AINDCLA)<>null
  [L]ASTATUS = fmet this.ACRY(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'ACRY('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ACUR)
 If this.ACUR(AINDCLA)<>null
  [L]ASTATUS = fmet this.ACUR(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'ACUR('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.AFCY)
 If this.AFCY(AINDCLA)<>null
  [L]ASTATUS = fmet this.AFCY(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'AFCY('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ALEG)
 If this.ALEG(AINDCLA)<>null
  [L]ASTATUS = fmet this.ALEG(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'ALEG('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ATUN)
 If this.ATUN(AINDCLA)<>null
  [L]ASTATUS = fmet this.ATUN(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'ATUN('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ATYP)
 If this.ATYP(AINDCLA)<>null
  [L]ASTATUS = fmet this.ATYP(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'ATYP('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.ATYPPRO)
 If this.ATYPPRO(AINDCLA)<>null
  [L]ASTATUS = fmet this.ATYPPRO(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'ATYPPRO('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CNX)
 If this.CNX(AINDCLA)<>null
  [L]ASTATUS = fmet this.CNX(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CNX('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.COA)
 If this.COA(AINDCLA)<>null
  [L]ASTATUS = fmet this.COA(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'COA('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.CPYDIE)
 If this.CPYDIE(AINDCLA)<>null
  [L]ASTATUS = fmet this.CPYDIE(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CPYDIE('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.DIE)
 If this.DIE(AINDCLA)<>null
  [L]ASTATUS = fmet this.DIE(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'DIE('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.GGCM)
 If this.GGCM(AINDCLA)<>null
  [L]ASTATUS = fmet this.GGCM(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'GGCM('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
For AINDCLA=1 To maxtab(this.LED)
 If this.LED(AINDCLA)<>null
  [L]ASTATUS = fmet this.LED(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'LED('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
Return

####################################################################
# AGETERRORSFROM
####################################################################

$_AGETERRORSFROM
Gosub DECLARE_VAR From WMC0WMACACHEMAIN
If AINS_FROM<>null
 [L]ASTATUS = fmet AINS_FROM.ASEARCHINFOS( [V]CST_ALL, "", [V]CST_AFATAL, 0)
Endif
Call AGETERRORSFROM(AINS_FROM,this,ENVIRONNEMENT) From ASYRSUB
Return

####################################################################
# _ADELINSTANCE
####################################################################
$_ADELINSTANCE
[L]ASTATUS = func ASYRSUBTAB._ADELINSTANCE(this)
Return

####################################################################
# ADDINSTANCE_BOUND
####################################################################
$ADDINSTANCE_BOUND
Return



