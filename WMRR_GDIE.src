#<AdxTL>@(#)0.0.0.0 $Revision$Class Dimension types
# Supervisor
## CRUD-CLASSE ## GDIE
# 2018-08-27 13:16:50 081


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File GDIE [DIE_]

If !SILENCE : Call TRACE("2 --> Local Instance R_GDIE") From ASYRCOM : Endif
Local Instance GDIE Using R_GDIE

If !SILENCE : Call TRACE("3 --> New Instance R_GDIE") From ASYRCOM : Endif
GDIE = NewInstance R_GDIE AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [DIE_]DIE0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of GDIE") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet GDIE.AREAD([DIE_]DIE))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("GDIE.DIE.DIE ="-num$(GDIE.DIE.DIE)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(GDIE.DIE.AKEYS)
  Call TRACE("-"-num$(I)-":"-GDIE.DIE.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [DIE_]
FreeGroup GDIE
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(GDIE,ACLE,ASTATUS,_ETAG)
Variable Instance GDIE Using R_GDIE
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _DIE(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_DIE = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File GDIE [DIE]
Default File [F:DIE]
Read [F:DIE]DIE0 = [L]_DIE
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:DIE]UPDTICK)>0
 [L]_ETAG = num$([F:DIE]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(GDIE,ACLE,ASTATUS)
Variable Instance GDIE Using R_GDIE
Value Char ACLE
Variable Integer ASTATUS
Local Char _DIE(3)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_DIE = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet GDIE.AREAD([L]_DIE))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(GDIE,_DIE,ASTATUS)
Variable Instance GDIE Using R_GDIE
Value Char _DIE
Variable Integer ASTATUS

If GDIE = null : End : Endif

Gosub AVARIABLES From WMR00GDIE
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If GDIE.APARENT=null
 [L]A_I = GDIE.freeSnapshot
 GDIE.snapshotEnabled = 0
 GDIE.setAccessorEnabled = 0
Endif

If fmet GDIE.ACTX.AGETAFCRIGHT(GDIE,"GESDIE",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:DIE]
Read [F:DIE]DIE0 = [L]_DIE
If fstat
[L]A_ERROR = [L]_DIE
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(GDIE,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = [F:DIE]ACS
If fmet GDIE.ACTX.AGETAFCRIGHTR(GDIE,"GESDIE",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet GDIE.ACTX.AGETACSRIGHTC(GDIE,[L]A_STRACC,[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR
 Goto AREAD_END
  Endif
If fmet GDIE.ACTX.ASTACRITROLE(GDIE,[L]_DIE
& ,"DIE","DIE",[V]CST_ATRUE)>=[V]CST_AERROR
   [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
  Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet GDIE.ACTION("AREAD_BEFORE"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  GDIE.DIE.setAccessorEnabled = 0
  [L]ASTATUS = max([L]ASTATUS,fmet GDIE.DIE.AREAD([L]_DIE))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  [L]ASTATUS = max([L]ASTATUS,fmet GDIE.ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  
  If [L]ASTATUS<[V]CST_AERROR & GDIE.APARENT=null
   # Load Link
   [L]ASTATUS = max([L]ASTATUS,fmet GDIE._ALNKPRO)
   If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
  Endif
  
  $AREAD_END
  If GDIE.APARENT=null
   GDIE.snapshotEnabled = 1
   GDIE.setAccessorEnabled = 1
  Endif
  LogicClose File [DIE]
  End
  


