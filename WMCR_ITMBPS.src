#<AdxTL>@(#)0.0.0.0 $Revision$Class Supplier product
# Supervisor
## CRUD-CLASSE ## ITMBPS
# 2018-08-27 12:34:05 361


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File ITMBPS [ITP_]

If !SILENCE : Call TRACE("2 --> Local Instance C_ITMBPS") From ASYRCOM : Endif
Local Instance ITMBPS Using C_ITMBPS

If !SILENCE : Call TRACE("3 --> New Instance C_ITMBPS") From ASYRCOM : Endif
ITMBPS = NewInstance C_ITMBPS AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [ITP_]ITP0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of ITMBPS") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet ITMBPS.AREAD([ITP_]ITMREF,[ITP_]BPSNUM))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("ITMBPS.ITMREF ="-num$(ITMBPS.ITMREF)) From ASYRCOM
 Call TRACE("ITMBPS.BPSNUM ="-num$(ITMBPS.BPSNUM)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(ITMBPS.AKEYS)
  Call TRACE("-"-num$(I)-":"-ITMBPS.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [ITP_]
FreeGroup ITMBPS
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(ITMBPS,ACLE,ASTATUS,_ETAG)
Variable Instance ITMBPS Using C_ITMBPS
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _ITMREF(20)
Local Char _BPSNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMREF = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_BPSNUM = num$([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File ITMBPS [ITP]
Default File [F:ITP]
Read [F:ITP]ITP0 = [L]_ITMREF;[L]_BPSNUM
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:ITP]UPDTICK)>0
 [L]_ETAG = num$([F:ITP]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(ITMBPS,ACLE,ASTATUS)
Variable Instance ITMBPS Using C_ITMBPS
Value Char ACLE
Variable Integer ASTATUS
Local Char _ITMREF(20)
Local Char _BPSNUM(15)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_ITMREF = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_BPSNUM = num$([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet ITMBPS.AREAD([L]_ITMREF,[L]_BPSNUM))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(ITMBPS,_ITMREF,_BPSNUM,ASTATUS)
Variable Instance ITMBPS Using C_ITMBPS
Value Char _ITMREF
Value Char _BPSNUM
Variable Integer ASTATUS

If ITMBPS = null : End : Endif

Gosub AVARIABLES From WMC00ITMBPS
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If ITMBPS.APARENT=null
 [L]A_I = ITMBPS.freeSnapshot
 ITMBPS.snapshotEnabled = 0
 ITMBPS.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & ITMBPS.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet ITMBPS._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If ITMBPS.APARENT=null
 ITMBPS.snapshotEnabled = 1
 ITMBPS.setAccessorEnabled = 1
Endif
LogicClose File [ITP]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet ITMBPS._ACTION_PARAM("AREAD_BEFORE",[L]_ITMREF,[L]_BPSNUM))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:ITP]
Read [F:ITP]ITP0 = [L]_ITMREF;[L]_BPSNUM
If fstat
[L]A_ERROR = [L]_ITMREF+"~"+[L]_BPSNUM
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(ITMBPS,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If dim([F:ITP]AUUID)>0 & [F:ITP]AUUID=NullUuid
 [F:ITP]AUUID = getUuid
Endif
SetInstance ITMBPS With [F:ITP]
ITMBPS.ASTALIN = [V]CST_ALL

[L]ASTATUS = max([L]ASTATUS,fmet ITMBPS.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif


Return



