#<AdxTL>@(#)0.0.0.0 $Revision$Class Contexts
# Supervisor
## CRUD-CLASSE ## CONTEXT
# 2018-08-27 13:14:12 804


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File CONTEXT [CNX_]

If !SILENCE : Call TRACE("2 --> Local Instance R_CONTEXT") From ASYRCOM : Endif
Local Instance CONTEXT Using R_CONTEXT

If !SILENCE : Call TRACE("3 --> New Instance R_CONTEXT") From ASYRCOM : Endif
CONTEXT = NewInstance R_CONTEXT AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [CNX_]CNX0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of CONTEXT") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet CONTEXT.AREAD([CNX_]CPY,[CNX_]CNX))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("CONTEXT.CNX.CPY ="-num$(CONTEXT.CNX.CPY)) From ASYRCOM
 Call TRACE("CONTEXT.CNX.CNX ="-num$(CONTEXT.CNX.CNX)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(CONTEXT.CNX.AKEYS)
  Call TRACE("-"-num$(I)-":"-CONTEXT.CNX.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [CNX_]
FreeGroup CONTEXT
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(CONTEXT,ACLE,ASTATUS,_ETAG)
Variable Instance CONTEXT Using R_CONTEXT
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _CPY(5)
Local Tinyint _CNX
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CPY = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CNX = val([L]CLE(2)) : Endif
Raz [L]_ETAG
Local File CONTEXT [CNX]
Default File [F:CNX]
Read [F:CNX]CNX0 = [L]_CPY;[L]_CNX
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:CNX]UPDTICK)>0
 [L]_ETAG = num$([F:CNX]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(CONTEXT,ACLE,ASTATUS)
Variable Instance CONTEXT Using R_CONTEXT
Value Char ACLE
Variable Integer ASTATUS
Local Char _CPY(5)
Local Tinyint _CNX
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_CPY = num$([L]CLE(1)) : Endif
If [L]CLE(2)<>"" : [L]_CNX = val([L]CLE(2)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet CONTEXT.AREAD([L]_CPY,[L]_CNX))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(CONTEXT,_CPY,_CNX,ASTATUS)
Variable Instance CONTEXT Using R_CONTEXT
Value Char _CPY
Value Tinyint _CNX
Variable Integer ASTATUS

If CONTEXT = null : End : Endif

Gosub AVARIABLES From WMR00CONTEXT
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If CONTEXT.APARENT=null
 [L]A_I = CONTEXT.freeSnapshot
 CONTEXT.snapshotEnabled = 0
 CONTEXT.setAccessorEnabled = 0
Endif

If fmet CONTEXT.ACTX.AGETAFCRIGHT(CONTEXT,"GESCNX",[V]CST_ATRUE)>=[V]CST_AERROR : [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END : Endif
Default File [F:CNX]
Read [F:CNX]CNX0 = [L]_CPY;[L]_CNX
If fstat
[L]A_ERROR = [L]_CPY+"~"+num$([L]_CNX)
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(CONTEXT,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = ""
If fmet CONTEXT.ACTX.AGETAFCRIGHTR(CONTEXT,"GESCNX",[L]A_STRSITE,[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END
Endif
If fmet CONTEXT.ACTX.ASTACRITROLE(CONTEXT,[L]_CPY+"~"+num$([L]_CNX)
& ,"CNX","CNX",[V]CST_ATRUE)>=[V]CST_AERROR
 [L]ASTATUS=[V]CST_AERROR : Goto AREAD_END 
Endif

[L]ASTATUS = max([L]ASTATUS,fmet CONTEXT.ACTION("AREAD_BEFORE"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

CONTEXT.CNX.setAccessorEnabled = 0
[L]ASTATUS = max([L]ASTATUS,fmet CONTEXT.CNX.AREAD([L]_CPY,[L]_CNX))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

[L]ASTATUS = max([L]ASTATUS,fmet CONTEXT.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & CONTEXT.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet CONTEXT._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If CONTEXT.APARENT=null
 CONTEXT.snapshotEnabled = 1
 CONTEXT.setAccessorEnabled = 1
Endif
LogicClose File [CNX] ,[FIS]
End



