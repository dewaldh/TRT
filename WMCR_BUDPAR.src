#<AdxTL>@(#)0.0.0.0 $Revision$Class Budget setup
# Supervisor
## CRUD-CLASSE ## BUDPAR
# 2018-08-27 12:27:45 732


Gosub TEST : End

############################################################################################
# Program TEST
############################################################################################
$TEST
Local Integer SILENCE
Call OUVRE_TRACE("Test program")From LECFIC

Gosub ATRT_TEST

Call LEC_TRACE From LECFIC
Call SUPP_TRACE From LECFIC


Return

#---------------------------------------------------------------#
$ATRT_TEST
Local Integer ASTATUS
If !SILENCE : Call TRACE("1 --> Open main table" ) From ASYRCOM : Endif
Local File BUDPAR [BUP_]

If !SILENCE : Call TRACE("2 --> Local Instance C_BUDPAR") From ASYRCOM : Endif
Local Instance BUDPAR Using C_BUDPAR

If !SILENCE : Call TRACE("3 --> New Instance C_BUDPAR") From ASYRCOM : Endif
BUDPAR = NewInstance C_BUDPAR AllocGroup null

If !SILENCE : Call TRACE("4 --> Reading main table, Read First") From ASYRCOM : Endif
Read [BUP_]BUP0 First
If !fstat
 If !SILENCE : Call TRACE("Call program read of BUDPAR") From ASYRCOM : Endif
 [L]ASTATUS = max([L]ASTATUS,fmet BUDPAR.AREAD([BUP_]BUD))
Endif

If !SILENCE
 Call TRACE("5 --> Check :"-num$([L]ASTATUS)) From ASYRCOM
 Call TRACE("BUDPAR.BUD ="-num$(BUDPAR.BUD)) From ASYRCOM
 Call TRACE("6 --> List of keys :") From ASYRCOM
 For I=1 To maxtab(BUDPAR.AKEYS)
  Call TRACE("-"-num$(I)-":"-BUDPAR.AKEYS(I)) From ASYRCOM
 Next
Endif
Close Local File [BUP_]
FreeGroup BUDPAR
Return

############################################################################################
### Funprog _AREADETAG
############################################################################################
Funprog _AREADETAG(BUDPAR,ACLE,ASTATUS,_ETAG)
Variable Instance BUDPAR Using C_BUDPAR
Value Char ACLE
Variable Integer ASTATUS
Variable Char _ETAG
[L]ASTATUS = [V]CST_AOK
Local Char _BUD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BUD = num$([L]CLE(1)) : Endif
Raz [L]_ETAG
Local File BUDPAR [BUP]
Default File [F:BUP]
Read [F:BUP]BUP0 = [L]_BUD
If fstat
 [L]ASTATUS = [V]CST_AERROR
Endif
If [L]ASTATUS=[V]CST_AOK and dim([F:BUP]UPDTICK)>0
 [L]_ETAG = num$([F:BUP]UPDTICK)
Endif
End [L]ASTATUS

############################################################################################
### Subprog _AREADSUP
############################################################################################
Subprog _AREADSUP(BUDPAR,ACLE,ASTATUS)
Variable Instance BUDPAR Using C_BUDPAR
Value Char ACLE
Variable Integer ASTATUS
Local Char _BUD(5)
Gosub SET_CLE From ASYRSUB
If [L]CLE(1)<>"" : [L]_BUD = num$([L]CLE(1)) : Endif
[L]ASTATUS = max([L]ASTATUS,fmet BUDPAR.AREAD([L]_BUD))
End

############################################################################################
### Subprog AREAD
############################################################################################
Subprog AREAD(BUDPAR,_BUD,ASTATUS)
Variable Instance BUDPAR Using C_BUDPAR
Value Char _BUD
Variable Integer ASTATUS

If BUDPAR = null : End : Endif

Gosub AVARIABLES From WMC00BUDPAR
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If BUDPAR.APARENT=null
 [L]A_I = BUDPAR.freeSnapshot
 BUDPAR.snapshotEnabled = 0
 BUDPAR.setAccessorEnabled = 0
Endif

Gosub ATRT_AREAD
If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif

If [L]ASTATUS<[V]CST_AERROR & BUDPAR.APARENT=null
 # Load Link
 [L]ASTATUS = max([L]ASTATUS,fmet BUDPAR._ALNKPRO)
 If [L]ASTATUS>=[V]CST_AERROR : Goto AREAD_END : Endif
Endif

$AREAD_END
If BUDPAR.APARENT=null
 BUDPAR.snapshotEnabled = 1
 BUDPAR.setAccessorEnabled = 1
Endif
LogicClose File [BUP] ,[BUV]
End

#-----------------------------------------------------#
$ATRT_AREAD
[L]ASTATUS = max([L]ASTATUS,fmet BUDPAR._ACTION_PARAM("AREAD_BEFORE",[L]_BUD))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

Default File [F:BUP]
Read [F:BUP]BUP0 = [L]_BUD
If fstat
[L]A_ERROR = [L]_BUD
& -":"-mess(23,100,1)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(BUDPAR,"",0,[L]ASTATUS,[V]CST_AHTTP_NOT_FOUND,[L]A_ERROR) : Goto AREAD_END
Endif
[L]A_STRSITE = ""
[L]A_STRACC = [F:BUP]ACS
If dim([F:BUP]AUUID)>0 & [F:BUP]AUUID=NullUuid
 [F:BUP]AUUID = getUuid
Endif
SetInstance BUDPAR With [F:BUP]
BUDPAR.ASTALIN = [V]CST_ALL

#-----------------------------------------------------#
If [L]A_LEVEL>=2
 Default File [F:BUV]
 [L]A_N2=0
 For [F:BUV]BUV0 Where BUD=[F:BUP]BUD
  [L]A_N2 +=1
  BUDPAR.BUV(A_N2) = NewInstance  C_BUDVER(BUDPAR.ACTX,NullUuid,[L]A_N2,BUDPAR,"BUV") AllocGroup BUDPAR
  [L]ASTATUS = max([L]ASTATUS,fmet BUDPAR.BUV(A_N2).ADDINSTANCE_BOUND)
  If dim([F:BUV]AUUID)>0 & [F:BUV]AUUID=NullUuid
   [F:BUV]AUUID = getUuid
  Endif
  SetInstance BUDPAR.BUV(A_N2) With [F:BUV]
  [L]ASTATUS = max([L]ASTATUS,fmet BUDPAR.BUV(A_N2).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Break  : Endif
  BUDPAR.BUV(A_N2).ASTALIN = [V]CST_ALL
  For [AXX] Where CODFIC="BUDVER" & ZONE="DESTRA" & IDENT1=BUDPAR.BUV(A_N2).BUD & IDENT2=BUDPAR.BUV(A_N2).VER
   Call ASETTEXTRA(BUDPAR.BUV(A_N2).AXX,BUDPAR.BUV(A_N2).AllocGrp(),"DESTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
   BUDPAR.BUV(A_N2).AXX(maxtab(BUDPAR.BUV(A_N2).AXX)).FLG = 0
  Next AXX
  If !len(fmet BUDPAR.BUV(A_N2).AGETTEXTRA("DESTRA"))
   Call ASETTEXTRA(BUDPAR.BUV(A_N2).AXX,BUDPAR.BUV(A_N2).AllocGrp(),"DESTRA",
& fmet BUDPAR.BUV(A_N2).AGETTEXTRALAN("DESTRA",BUDPAR.BUV(A_N2).ACTX.AFOLD.ALANGDEF),
& BUDPAR.BUV(A_N2).ACTX.LAN) From ASYRSUB
  Endif
  For [AXX] Where CODFIC="BUDVER" & ZONE="SHOTRA" & IDENT1=BUDPAR.BUV(A_N2).BUD & IDENT2=BUDPAR.BUV(A_N2).VER
   Call ASETTEXTRA(BUDPAR.BUV(A_N2).AXX,BUDPAR.BUV(A_N2).AllocGrp(),"SHOTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
   BUDPAR.BUV(A_N2).AXX(maxtab(BUDPAR.BUV(A_N2).AXX)).FLG = 0
  Next AXX
  If !len(fmet BUDPAR.BUV(A_N2).AGETTEXTRA("SHOTRA"))
   Call ASETTEXTRA(BUDPAR.BUV(A_N2).AXX,BUDPAR.BUV(A_N2).AllocGrp(),"SHOTRA",
& fmet BUDPAR.BUV(A_N2).AGETTEXTRALAN("SHOTRA",BUDPAR.BUV(A_N2).ACTX.AFOLD.ALANGDEF),
& BUDPAR.BUV(A_N2).ACTX.LAN) From ASYRSUB
  Endif
 Next BUV
 If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Endif
#-----------------------------------------------------#

[L]A_NEWCOL = 0
For [L]A_I=1 To 3
 If ([F:BUP]DIE([L]A_I-1)<>"" or [F:BUP]PYMCCE([L]A_I-1)<>"" or [F:BUP]PYMCCELEV([L]A_I-1)<>0)
  [L]A_NEWCOL += 1
  BUDPAR.LISDIE(A_NEWCOL) = NewInstance  C_BUDPAR_LISDIE(BUDPAR.ACTX,NullUuid,[L]A_I,BUDPAR,"LISDIE") AllocGroup BUDPAR
  BUDPAR.LISDIE(A_NEWCOL).DIE = [F:BUP]DIE([L]A_I-1)
  BUDPAR.LISDIE(A_NEWCOL).PYMCCE = [F:BUP]PYMCCE([L]A_I-1)
  BUDPAR.LISDIE(A_NEWCOL).PYMCCELEV = [F:BUP]PYMCCELEV([L]A_I-1)
  [L]ASTATUS = max([L]ASTATUS,fmet BUDPAR.LISDIE(A_NEWCOL).ACTION("AREAD_AFTER"))
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Endif
Next
[L]ASTATUS = max([L]ASTATUS,fmet BUDPAR.ACTION("AREAD_AFTER"))
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif

For [AXX] Where CODFIC="BUDPAR" & ZONE="DESTRA" & IDENT1=BUDPAR.BUD & IDENT2=AVOID.ACHAR
 Call ASETTEXTRA(BUDPAR.AXX,BUDPAR.AllocGrp(),"DESTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 BUDPAR.AXX(maxtab(BUDPAR.AXX)).FLG = 0
Next AXX
If !len(fmet BUDPAR.AGETTEXTRA("DESTRA"))
 Call ASETTEXTRA(BUDPAR.AXX,BUDPAR.AllocGrp(),"DESTRA",
& fmet BUDPAR.AGETTEXTRALAN("DESTRA",BUDPAR.ACTX.AFOLD.ALANGDEF),
& BUDPAR.ACTX.LAN) From ASYRSUB
Endif
For [AXX] Where CODFIC="BUDPAR" & ZONE="SHOTRA" & IDENT1=BUDPAR.BUD & IDENT2=AVOID.ACHAR
 Call ASETTEXTRA(BUDPAR.AXX,BUDPAR.AllocGrp(),"SHOTRA",[F:AXX]TEXTE,[F:AXX]LANGUE) From ASYRSUB
 BUDPAR.AXX(maxtab(BUDPAR.AXX)).FLG = 0
Next AXX
If !len(fmet BUDPAR.AGETTEXTRA("SHOTRA"))
 Call ASETTEXTRA(BUDPAR.AXX,BUDPAR.AllocGrp(),"SHOTRA",
& fmet BUDPAR.AGETTEXTRALAN("SHOTRA",BUDPAR.ACTX.AFOLD.ALANGDEF),
& BUDPAR.ACTX.LAN) From ASYRSUB
Endif

Return



