#<AdxTL>@(#)0.0.0.0 $Revision$Class Account core model
# Supervisor
## ACLA-CLASSE ## GACM_CTLLED
# 2018-08-27 12:32:43 624


####################################################################
# Labels of the main class and methods 
####################################################################

####################################################################
# 1 : LED1 Ledger 1 ( Field LED 3)
####################################################################

$SET_LED1
If [L]_AOLDVAL<>this.LED1
 Call _ASTATUSPARENT(this) From ASYRSUB
Endif
Gosub CONTROL_LED1
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
If [L]_AOLDVAL<>this.LED1
 Gosub PROPAGATE_LED1
Endif
Return

$INIT_LED1
Gosub DECLARE_VAR From WMC0GACM_CTLLED
[L]CURPRO = "LED1"
[L]ARULE = "INIT" : [L]ACTION = "INIT" : Gosub ACTION From ASYRSUB
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return
 
$CONTROL_LED1
Gosub DECLARE_VAR From WMC0GACM_CTLLED
[L]CURPRO = "LED1"
[L]ASTATUS = fmet this.ADELETEERROR([L]CURPRO)
Gosub _AFORMAT_LED1                  : If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AOTHERS_LED1                  : If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

$_AMANDATORY_LED1
[L]CURPRO = "LED1"
If fmet this.AGETATTRIBUTE([L]CURPRO,"$isMandatory")="true" & vireblc(this.LED1,2)=""
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(this,[L]CURPRO,0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,mess(10,123,1)) :  Return : # Mandatory field
Endif
Return

$_AFORMAT_LED1
[L]CURPRO = "LED1"
If vireblc(this.LED1,2)<>vireblc(format$("K:3c",this.LED1),2)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(this,[L]CURPRO,0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,mess(149,100,1)) :  Return : # Incorrect Format
Endif
Return

$_AOTHERS_LED1
[L]CURPRO = "LED1"
If vireblc(this.LED1,2)<>""
 If fmet this.AGETATTRIBUTE([L]CURPRO,"$namProParent")=""
  [L]ASTATUS =  func WMTYPLED.ACTRLREF(this,"LED1",this.LED1,this.LED1,"")
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Else
  If this.LED1<>evalue("this.APARENT."+fmet this.AGETATTRIBUTE([L]CURPRO,"$namProParent"))
   [L]ASTATUS = func ASYRSUB._ASETSTATUS(this,[L]CURPRO,0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,mess(83,123,1)) :  Return : # Invalid value
  Endif
 Endif
Endif
[L]ARULE = "CONTROL" : [L]ACTION = "CONTROL" : Gosub ACTION From ASYRSUB
Return

$_AOTHERS_REF_LED1
[L]CURPRO = "LED1"
Return

$PROPAGATE_LED1
this.isReadonly = 0
[L]CURPRO = "LED1"
Gosub _LNKPRO_LED1
[L]ARULE = "PROPAGATE" : [L]ACTION = "PROPAGATE" : Gosub ACTION From ASYRSUB
this.isReadonly = 1
Return

$LNKPRO_LED1
Gosub DECLARE_VAR From WMC0GACM_CTLLED
[L]CURPRO = "LED1"
$_LNKPRO_LED1
If vireblc(this.LED1,2)<>""
 # Link GLED
 Local File GLED [WLED]
 Read [F:WLED]LED0 = this.LED1
 If !fstat
  Local File ATEXTRA [WAXX]
  Local Char ILAN(GLONLAN)
  For ILAN=this.ACTX.LAN, this.ACTX.AFOLD.ALANGDEF
   For [F:WAXX] Where CODFIC="GLED" & ZONE="SHOTRA" & IDENT1=[F:WLED]LED & IDENT2="" & LANGUE = ILAN
    [L]ASTATUS = fmet this.ASETATTRIBUTE("LED1","$title",[WAXX]TEXTE)
    Break 2
   Next WAXX
  Next ILAN
  LogicClose File [WAXX]
  Local File ATEXTRA [WAXX]
  Local Char ILAN(GLONLAN)
  For ILAN=this.ACTX.LAN, this.ACTX.AFOLD.ALANGDEF
   For [F:WAXX] Where CODFIC="GLED" & ZONE="DESTRA" & IDENT1=[F:WLED]LED & IDENT2="" & LANGUE = ILAN
    [L]ASTATUS = fmet this.ASETATTRIBUTE("LED1","$description",[WAXX]TEXTE)
    Break 2
   Next WAXX
  Next ILAN
  LogicClose File [WAXX]
 Endif
 LogicClose File [WLED]
Endif
Return


####################################################################
# 2 : LED2 Ledger 2 ( Field LED 3)
####################################################################

$SET_LED2
If [L]_AOLDVAL<>this.LED2
 Call _ASTATUSPARENT(this) From ASYRSUB
Endif
Gosub CONTROL_LED2
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
If [L]_AOLDVAL<>this.LED2
 Gosub PROPAGATE_LED2
Endif
Return

$INIT_LED2
Gosub DECLARE_VAR From WMC0GACM_CTLLED
[L]CURPRO = "LED2"
[L]ARULE = "INIT" : [L]ACTION = "INIT" : Gosub ACTION From ASYRSUB
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return
 
$CONTROL_LED2
Gosub DECLARE_VAR From WMC0GACM_CTLLED
[L]CURPRO = "LED2"
[L]ASTATUS = fmet this.ADELETEERROR([L]CURPRO)
Gosub _AFORMAT_LED2                  : If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AOTHERS_LED2                  : If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

$_AMANDATORY_LED2
[L]CURPRO = "LED2"
If fmet this.AGETATTRIBUTE([L]CURPRO,"$isMandatory")="true" & vireblc(this.LED2,2)=""
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(this,[L]CURPRO,0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,mess(10,123,1)) :  Return : # Mandatory field
Endif
Return

$_AFORMAT_LED2
[L]CURPRO = "LED2"
If vireblc(this.LED2,2)<>vireblc(format$("K:3c",this.LED2),2)
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(this,[L]CURPRO,0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,mess(149,100,1)) :  Return : # Incorrect Format
Endif
Return

$_AOTHERS_LED2
[L]CURPRO = "LED2"
If vireblc(this.LED2,2)<>""
 If fmet this.AGETATTRIBUTE([L]CURPRO,"$namProParent")=""
  [L]ASTATUS =  func WMTYPLED.ACTRLREF(this,"LED2",this.LED2,this.LED2,"")
  If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
 Else
  If this.LED2<>evalue("this.APARENT."+fmet this.AGETATTRIBUTE([L]CURPRO,"$namProParent"))
   [L]ASTATUS = func ASYRSUB._ASETSTATUS(this,[L]CURPRO,0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,mess(83,123,1)) :  Return : # Invalid value
  Endif
 Endif
Endif
[L]ARULE = "CONTROL" : [L]ACTION = "CONTROL" : Gosub ACTION From ASYRSUB
Return

$_AOTHERS_REF_LED2
[L]CURPRO = "LED2"
Return

$PROPAGATE_LED2
this.isReadonly = 0
[L]CURPRO = "LED2"
Gosub _LNKPRO_LED2
[L]ARULE = "PROPAGATE" : [L]ACTION = "PROPAGATE" : Gosub ACTION From ASYRSUB
this.isReadonly = 1
Return

$LNKPRO_LED2
Gosub DECLARE_VAR From WMC0GACM_CTLLED
[L]CURPRO = "LED2"
$_LNKPRO_LED2
If vireblc(this.LED2,2)<>""
 # Link GLED
 Local File GLED [WLED]
 Read [F:WLED]LED0 = this.LED2
 If !fstat
  Local File ATEXTRA [WAXX]
  Local Char ILAN(GLONLAN)
  For ILAN=this.ACTX.LAN, this.ACTX.AFOLD.ALANGDEF
   For [F:WAXX] Where CODFIC="GLED" & ZONE="SHOTRA" & IDENT1=[F:WLED]LED & IDENT2="" & LANGUE = ILAN
    [L]ASTATUS = fmet this.ASETATTRIBUTE("LED2","$title",[WAXX]TEXTE)
    Break 2
   Next WAXX
  Next ILAN
  LogicClose File [WAXX]
  Local File ATEXTRA [WAXX]
  Local Char ILAN(GLONLAN)
  For ILAN=this.ACTX.LAN, this.ACTX.AFOLD.ALANGDEF
   For [F:WAXX] Where CODFIC="GLED" & ZONE="DESTRA" & IDENT1=[F:WLED]LED & IDENT2="" & LANGUE = ILAN
    [L]ASTATUS = fmet this.ASETATTRIBUTE("LED2","$description",[WAXX]TEXTE)
    Break 2
   Next WAXX
  Next ILAN
  LogicClose File [WAXX]
 Endif
 LogicClose File [WLED]
Endif
Return


####################################################################
# 3 : CTLTYP Control type ( Field A 5)
####################################################################

$SET_CTLTYP
If [L]_AOLDVAL<>this.CTLTYP
 Call _ASTATUSPARENT(this) From ASYRSUB
Endif
Gosub CONTROL_CTLTYP
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
If [L]_AOLDVAL<>this.CTLTYP
 Gosub PROPAGATE_CTLTYP
Endif
Return

$INIT_CTLTYP
Gosub DECLARE_VAR From WMC0GACM_CTLLED
[L]CURPRO = "CTLTYP"
[L]ARULE = "INIT" : [L]ACTION = "INIT" : Gosub ACTION From ASYRSUB
If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return
 
$CONTROL_CTLTYP
Gosub DECLARE_VAR From WMC0GACM_CTLLED
[L]CURPRO = "CTLTYP"
[L]ASTATUS = fmet this.ADELETEERROR([L]CURPRO)
Gosub _AFORMAT_CTLTYP                : If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Gosub _AOTHERS_CTLTYP                : If [L]ASTATUS>=[V]CST_AERROR : Return : Endif
Return

$_AMANDATORY_CTLTYP
[L]CURPRO = "CTLTYP"
If fmet this.AGETATTRIBUTE([L]CURPRO,"$isMandatory")="true" & vireblc(this.CTLTYP,2)=""
 [L]ASTATUS = func ASYRSUB._ASETSTATUS(this,[L]CURPRO,0,[V]CST_AERROR,[V]CST_AHTTP_BAD_REQUEST,mess(10,123,1)) :  Return : # Mandatory field
Endif
Return

$_AFORMAT_CTLTYP
[L]CURPRO = "CTLTYP"
Return

$_AOTHERS_CTLTYP
[L]CURPRO = "CTLTYP"
[L]ARULE = "CONTROL" : [L]ACTION = "CONTROL" : Gosub ACTION From ASYRSUB
Return

$_AOTHERS_REF_CTLTYP
[L]CURPRO = "CTLTYP"
Return

$PROPAGATE_CTLTYP
this.isReadonly = 0
[L]CURPRO = "CTLTYP"
[L]ARULE = "PROPAGATE" : [L]ACTION = "PROPAGATE" : Gosub ACTION From ASYRSUB
this.isReadonly = 1
Return

$LNKPRO_CTLTYP
Gosub DECLARE_VAR From WMC0GACM_CTLLED
[L]CURPRO = "CTLTYP"
$_LNKPRO_CTLTYP
Return




