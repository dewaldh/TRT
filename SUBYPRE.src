#<AdxTL>@(#)0.0.0.0 $Revision$ 
######################################################################################################################
# Script            : SUBYPRE                                                                                        #
# Creation date     : 28/08/2018                                                                                     #
# Version           : 1.0.0                                                                                          #
# Authors (Company) : MB (Leverage)                                                                                  #
# Module            : Land Development                                                                               #
# -------------------------------------------------------------------------------------------------------------------#
# Epic              : https://jira.leveragetech.com.au/browse/DFCX1-79                                               #
# Description       : DFCX1-79 Land Development -  Precinct                                                          #
#--------------------------------------------------------------------------------------------------------------------#
# Evolutions        :                                                                                                #
# DFCX1-169   Majid   Creation object rules                                                                          #
######################################################################################################################
$ACTION
Case ACTION
  When "OUVRE"        : Gosub OUVRE
  When "FERME"        : Gosub FERME
  When "RAZCRE"       : Gosub RAZCRE
  When "LIENS"        : Gosub LIENS
  When "VERIF_CRE"    : Gosub VERIF_CRE
  When "CREATION"     : Gosub CREATION
  When "APRES_CRE"    : Gosub APRES_CRE
  When "VERIF_MOD"    : Gosub VERIF_MOD
  When "MODIF"        : Gosub MODIF
  When "APRES_MOD"    : Gosub APRES_MOD
  When "RAZDUP"       : Gosub RAZDUP
  When "AV_ANNULE"    : Gosub AV_ANNULE
  When "ANNULE"       : Gosub ANNULE
  When Default
Endcase
Return

#------------------------------------------------------------------------------------#
#Open screen
#------------------------------------------------------------------------------------#
$OUVRE
#disable the regular Classic CUD operations
ANOWRITE = 1

#nstance for your class
Global Instance YPRE_INSTANCE Using C_YPRE

Return

#------------------------------------------------------------------------------------#
#Close screen
#------------------------------------------------------------------------------------#
$FERME
#When you are leaving the transaction, you have to free the instance.
If (YPRE_INSTANCE <> null) : FreeGroup YPRE_INSTANCE : Endif
Kill YPRE_INSTANCE

Return

#------------------------------------------------------------------------------------#
#Before Create
#------------------------------------------------------------------------------------#
$RAZCRE

Local Integer MY_STATUS

If (YPRE_INSTANCE <> null) : FreeGroup YPRE_INSTANCE : Endif
YPRE_INSTANCE = NewInstance C_YPRE AllocGroup null

#Then you have to initialize the class properties by calling the AINIT method and/or setting properties manually
[L]MY_STATUS = fmet YPRE_INSTANCE.AINIT()
If ([L]MY_STATUS >= [V]CST_AERROR)
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

#To finish you have to refresh the UI to display the values of initialized properties.
#Because it is not possible to directly transfer class property values into screen field values, you may use the file [F] as interface.
#Complete the process for properties and fields with non matching name

SetInstance [F:YPRC] With YPRE_INSTANCE
[M:YPRE]  = [F:YPRC]
[M:YPRE1] = [F:YPRC]


Affzo [M:YPRE]1-99
Affzo [M:YPRE1]1-99

Return

#------------------------------------------------------------------------------------#
#Read record
#------------------------------------------------------------------------------------#
$LIENS

If (YPRE_INSTANCE <> null) : FreeGroup YPRE_INSTANCE : Endif
YPRE_INSTANCE = NewInstance C_YPRE AllocGroup null
Local Integer MY_STATUS
[L]MY_STATUS = fmet YPRE_INSTANCE.AREAD([M:YPRE]YPREID)
If ([L]MY_STATUS >= [V]CST_AERROR)
Infbox num$([L]MY_STATUS)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif
Read [F:YPRC]YPRC0 =[M:YPRE]YPREID
[M:YPRE1] = [F:YPRC]

#------------------------------------------------------------------------------------#
#Upload Stage
Local Integer YKNOWN, YLOTACT

If !clalev([F:YSTA2])        :   Local File YSTAGE [YSTA2]   : Endif
If !clalev([F:YLOT2])        :   Local File YLOT [YLOT2]   : Endif

nolign = 1
YKNOWN = 0
For [F:YSTA2] Where [F:YSTA2]YPREID = [M:YPRE]YPREID
  [M:YPRE2] = [F:YSTA2]

  # Calculate total of Lot for all and Lot actual per Stage
  YLOTACT = 0
  For [F:YLOT2] Where YSTAID = [F:YSTA2]YSTAID
    YLOTACT += 1
    YKNOWN += 1
  Next
  [M:YPRE2]YLOTACT(nolign-1) = YLOTACT

  nolign += 1
Next
[M:YPRE2]NBLIG = nolign-1
[M:YPRE1]YKNO = YKNOWN      # Sum of the lots which is linked to Stage of Precinct
[M:YPRE1]YVARFOR = [M:YPRE1]YFRC - ([M:YPRE1]YFUT + [M:YPRE1]YKNO)
#------------------------------------------------------------------------------------#

#------------------------------------------------------------------------------------#
#Upload General Schema
If !clalev([F:YGGN2])        :   Local File YGSCGEN [YGGN2]   : Endif
Filter [F:YGGN2]  Where   YPREID = [M:YPRE]YPREID

nolign = 1
For [F:YGGN2] Where YPREID = [M:YPRE]YPREID
  [YPRE3] = [F:YGGN2]
  nolign += 1
Next
[YPRE3]NBLIG = nolign-1
#------------------------------------------------------------------------------------#

#------------------------------------------------------------------------------------#
#Upload Related tab
  nolign = 1
  For [F:YRMA]YRMA0 Where [F:YRMA]YGUID = [F:YPRC]YGUID
    [M:YPRE4] = [F:YRMA]
    nolign += 1
  Next
  [M:YPRE4]NBLIG = nolign - 1
#------------------------------------------------------------------------------------#

Return

#------------------------------------------------------------------------------------#
#Create record
#------------------------------------------------------------------------------------#
$CREATION
Local Integer MY_STATUS

#YOU CAN USE THE INSTRUCTION SetInstance WHICH WILL SET PROPERTIE's values from field'S VALUES
#For PROPERTIE's names that are identical to a field'S NAME OF THE [F] File.
SetInstance YPRE_INSTANCE With [F:YPRC]

#SET NEW GUID VALUE FOR NEW RECORD THAT IS CREATED
YPRE_INSTANCE.YGUID   = num$(getUuid)

YPRE_INSTANCE.YPREID = [M:YPRE]YPREID
If [M:YPRE]YPREID = "" and SEQCODE <> ""
  YPRE_INSTANCE.YPREID = SEQCODE
Endif

# create record in YGUID table for Code in misc. table 6012
If func AFNC.ACTIV("YOBJ") = 1
  Call SAVE_GUID("002",YPRE_INSTANCE.YPREID,YPRE_INSTANCE.YGUID) From SPEYGUID
Endif

YPRE_INSTANCE.YJOBCOD = [M:YPRE]YJOBCOD

# Related tab (Creation)
Local Integer I
For I=1 To maxtab(YPRE_INSTANCE.YRMA)
  If (fmet YPRE_INSTANCE.ADELLINE("YRMA", YPRE_INSTANCE.YRMA(I).AORDER) <> [V]CST_AOK)
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
    GOK = 0 :       GERR = 1
    Return
  Endif
Next

Local Integer I, INDEX
For I = 0 To [M:YPRE4]NBLIG - 1
  INDEX = fmet YPRE_INSTANCE.ADDLINE("YRMA", [V]CST_ALASTPOS)
  If (INDEX = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
    GOK = 0 :       GERR = 1
    Return
  Endif

  nolign = I + 1
  # Need to use [F] because it is impossible to set a class from [M]
  [F:YRMA] = [M:YPRE4]
  [F:YRMA]YGUID = YPRE_INSTANCE.YGUID
  [F:YRMA]YLIGID = num$(nolign)

  # Use the SetInstance
  SetInstance YPRE_INSTANCE.YRMA(INDEX) With [F:YRMA]
Next
If (GERR = 1) : Return : Endif
# Related tab (Creation)

#SETS THE FIELD VALUES, AS THIS FIELDS WOULD NOT SAVE WITH THE AINSERT FUNCTION
YPRE_INSTANCE.YVARFOR    = [M:YPRE1]YFRC - ([M:YPRE1]YFUT + [M:YPRE1]YKNO)
YPRE_INSTANCE.YESTID     = [M:YPRE1]YESTID
YPRE_INSTANCE.YJOBCOD     = num$([M:YPRE]YPREID)
[M:YPRE]YJOBCOD = num$([M:YPRE]YPREID)

[L]MY_STATUS = fmet YPRE_INSTANCE.AINSERT()
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

SetInstance [F:YPRC] With YPRE_INSTANCE
Affzo [M:YPRE]1-99
Affzo [M:YPRE1]1-99

Return

#------------------------------------------------------------------------------------#
#After create record
#------------------------------------------------------------------------------------#
$APRES_CRE

Gosub RELIT From GOBJSUB

Return

#------------------------------------------------------------------------------------#
#Modify record
#------------------------------------------------------------------------------------#
$MODIF
Local Integer MY_STATUS

Read [F:YPRC]YPRC0 = [M:YPRE]YPREID         # Without this It does not allow to delete last raw of Related

SetInstance YPRE_INSTANCE With [F:YPRC]


YPRE_INSTANCE.YESTID     = [M:YPRE1]YESTID


# Related tab (Modify)
Local Integer I, INDEX
For I = 0 To [M:YPRE4]NBLIG - 1
  nolign = I + 1
  Raz [F:YRMA]

  # Retrieve the element using the screen's AUUID. If AUUID is blank, then its a new row
  INDEX=0
  INDEX = fmet YPRE_INSTANCE.ADDLINE("YRMA", [V]CST_ALASTPOS)
  If (INDEX = [V]CST_ANOTDEFINED)
    # Error management
    GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
    GOK = 0 :      GERR = 1
    Break
  Endif

  # Need to use [F] because it's not possible to set a class from [M]
  [F:YRMA] = [M:YPRE4]
  [F:YRMA]YGUID = YPRE_INSTANCE.YGUID
  [F:YRMA]YLIGID = num$(nolign)


  # Use the SetInstance
  SetInstance YPRE_INSTANCE.YRMA(INDEX) With [F:YRMA]
Next
If (GERR = 1) : Return : Endif

# Now, all elements that don't have the status Updated or Created must be deleted, because it means they don't match with lines in the array
For I = 1 To maxtab(YPRE_INSTANCE.YRMA)
  If YPRE_INSTANCE.YRMA(I) <> null and find(YPRE_INSTANCE.YRMA(I).ASTALIN, [V]CST_ANEW, [V]CST_AUPD) = 0
    If (fmet YPRE_INSTANCE.ADELLINE("YRMA", YPRE_INSTANCE.YRMA(I).AORDER) <> [V]CST_AOK)
      # Error management
      GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
      GOK = 0
      GERR = 1
      Return
    Endif
  Endif
Next
If (GERR = 1) : Return : Endif
# Related tab (Modify)

[L]MY_STATUS = fmet YPRE_INSTANCE.AUPDATE()
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

Return

#------------------------------------------------------------------------------------#
#AFTER UPDATE
#------------------------------------------------------------------------------------#
$APRES_MOD

Gosub RELIT From GOBJSUB

Return

#------------------------------------------------------------------------------------#
#This action is called when a field of the primary key is changed
#------------------------------------------------------------------------------------#
$RAZDUP
Local Integer MY_STATUS

If (YPRE_INSTANCE <> null) : FreeGroup YPRE_INSTANCE : Endif
YPRE_INSTANCE = NewInstance C_YPRE AllocGroup null

[L]MY_STATUS = fmet YPRE_INSTANCE.AINIT()
If ([L]MY_STATUS >= [V]CST_AERROR)
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

Return

#------------------------------------------------------------------------------------#
#Begin delete record
#------------------------------------------------------------------------------------#
$AV_ANNULE
  Local Integer ANOWRITE
  ANOWRITE = 1
Return

#------------------------------------------------------------------------------------#
#Delete record
#------------------------------------------------------------------------------------#
$ANNULE

Local Integer MY_STATUS
[L]MY_STATUS = fmet YPRE_INSTANCE.ADELETE()
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

Return

#------------------------------------------------------------------------------------#
#Handle Classic Errors from Class
#------------------------------------------------------------------------------------#
Subprog RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)

  Variable Instance YPRE_INSTANCE Using C_YPRE

  Local Integer NI
  Local Char SMESSAGE(type(GMESSAGE)-10)
  Local Integer MY_STATUS
  Local Integer IMESSAGE

  IMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_UPPER_MESSAGE(YPRE_INSTANCE, SMESSAGE)
  If IMESSAGE = [V]CST_AWARNING Then
    GMESSAGE = SMESSAGE
    GERR = 2
  Elsif IMESSAGE = [V]CST_AERROR or IMESSAGE = [V]CST_AFATAL Then
    GMESSAGE = SMESSAGE
    GOK = 0
    GERR = 1
  Endif

  [L]MY_STATUS = [V]CST_AOK
End

#------------------------------------------------------------------------------------#
#Verificatio of create record
#------------------------------------------------------------------------------------#
$VERIF_CRE

  Local Char SEQCODE
  Local Integer STAT
  Call NUMERO("YPRE","",date$,"",SEQCODE,STAT) From SUBANM
  SEQCODE = vireblc(left$(SEQCODE,8),4)       #   First 8 digits and remove space

  [M:YPRE]YPREID = SEQCODE
  #[M:YPRE]YPREID = num$([M:YPRE1]YPRE) + "-7" + right$(SEQCODE,2)
  [M:YPRE]YJOBACTFLG = 2
  # DFCX1-169 MZ: Creation Rules
  Call VERIF_RULES()

Return

#------------------------------------------------------------------------------------#
#Verificatio of Modification record
#------------------------------------------------------------------------------------#
$VERIF_MOD

  # DFCX1-169 MZ: Creation Rules
  Call VERIF_RULES()

Return


#------------------------------------------------------------------------------------#
#
#------------------------------------------------------------------------------------#
Subprog VERIF_RULES()

# DFCX1-169 MZ: Creation Rules
If func AFNC.ACTIV("YLAND")

  If !clalev([F:YEST2])     : Local File  YESTA [YEST2]    : Endif

  # If Job Code is empty and the Job Active flag is set to true, create a dimension value in the Dimension Type

  Local Char YDIE
  YDIE = func AFNC.PARAM ("YDEVDTY","")   # Read dimension type from general parameter
  If !clalev([F:YCCE])      :   Local File CACCE [YCCE]     :   Endif
  If !clalev([F:YATX])      :   Local File ATEXTRA [YATX]   :  Endif

  Filter [F:YCCE] Where DIE = YDIE
  Filter [F:YATX] Where CODFIC = 'CACCE'

  If YDIE <> ""
    If [M:YPRE]YJOBCOD = ""

      If [M:YPRE]YJOBACTFLG = 2
        Local Char YNAMEFILE(255)
        YNAMEFILE = "YLAND_YCCELAND_" + [M:YPRE]YPREID
        Openo filpath('TMP',YNAMEFILE,"CSV") Using [F_YCCE]
        adxifs=','
        adxirs= chr$(13)+chr$(10)

        Read [F:YEST2]YEST0 = [M:YPRE1]YESTID
        If fstat = 0
        Wrseq YDIE , [M:YPRE]YPREID , [M:YPRE]YPREDES , [M:YPRE]YPREDES , [F:YEST2]YESTCPYGRP , [M:YPRE]YJOBACTFLG , "0,2,0" Using [F_YCCE]
        Openo Using [F_YCCE]

        Call OUVRE_TRACE("Job code Dimension import through Precinct") From LECFIC  # Open log file
        Call IMPORTSIL("YCCELAND", filpath('TMP',YNAMEFILE,"CSV")) From GIMPOBJ     # Import

        Read [F:YCCE]CCE0 = YDIE;[M:YPRE]YPREID
        If !fstat
          [M:YPRE]YJOBCOD = [M:YPRE]YPREID
        Else
          Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
          If GMESSAGE = AVOID.ACHAR Then
            GMESSAGE = mess(11,6255,1)       # Job code has not created successfully. Please create that manually and assign
            GERR = 2
          Endif
        Endif
        Endif
      Endif   # [M:YPRE]YJOBACTFLG = 2

    # If the Job Code is populated,
    # ensure the active flage of dimension value is same as job active flag and the Description is the same as the Estate Description.
    Else  # [M:YPRE]YJOBCOD <> ""
      Read [F:YCCE]CCE0 = YDIE;[M:YPRE]YJOBCOD
      Read [F:YATX]AXX0 = 'CACCE';'DESTRA';GLANGUE;YDIE;[M:YPRE]YJOBCOD

      If !fstat
        If [F:YCCE]ENAFLG <> [M:YPRE]YJOBACTFLG
          Trbegin [F:YCCE]
          [F:YCCE]ENAFLG = [M:YPRE]YJOBACTFLG
          Rewrite [F:YCCE]
          If !fstat
            Commit
            Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
            If GMESSAGE = AVOID.ACHAR Then
              GMESSAGE = mess(6,6255,1)       # Activate flag of Job code Dimesnion was different System updated dimension
              GERR = 2
            Endif
          Else
            Rollback
            Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
            If GMESSAGE = AVOID.ACHAR Then
              GMESSAGE = mess(7,6255,1)       # Activate flag of Job code Dimesnion was different System could not update that
              GERR = 2
            Endif
          Endif
        Endif # [F:YCCE]ENAFLG <> [M:YPRE]YJOBACTFLG

        If [F:YCCE]DES <> [M:YPRE]YPREDES
          Trbegin [F:YCCE]
          [F:YCCE]DES = [M:YPRE]YPREDES
          [F:YATX]TEXTE = [M:YPRE]YPREDES
          Rewrite [F:YCCE]
          Rewrite [F:YATX]
          If !fstat
            Commit
            Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
            If GMESSAGE = AVOID.ACHAR Then
              GMESSAGE = mess(8,6255,1)       # Description of Job code Dimesnion was different and system updated dimension.
              GERR = 2
            Endif
          Else
            Rollback
            Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
            If GMESSAGE = AVOID.ACHAR Then
              GMESSAGE = mess(9,6255,1)       # Description of Job code Dimesnion was different and system updated dimension.
              GERR = 2
            Endif
          Endif
        Endif   # [F:YCCE]DES <> [M:YPRE]YPRECPYGRP

      Else
        Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
        If GMESSAGE = AVOID.ACHAR Then
          GMESSAGE = mess(10,6255,1)       # Job code does not exists on Dimenstion list.
          GERR = 1
        Endif
      Endif #   Read [F:YCCE]CCE0 = YDIE;[M:YPRE]YJOBCOD

    Endif # [M:YPRE]YJOBCOD = ""

  Else  # YDIE = ""
    Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
    If GMESSAGE = AVOID.ACHAR Then
      GMESSAGE = mess(2,6255,1)       # Dimension type has not configured on General parameter.
      GERR = 1
    Endif
  Endif # YDIE <> ""

Endif
# DFCX1-169 MZ: Creation rules

End

