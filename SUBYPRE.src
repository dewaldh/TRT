#<AdxTL>@(#)0.0.0.0 $Revision$ 
######################################################################################################################
# Script            : SUBYPRE                                                                                        #
# Creation date     : 28/08/2018                                                                                     #
# Version           : 1.0.0                                                                                          #
# Authors (Company) : MB (Leverage)                                                                                  #
# Module            : Land Development                                                                               #
# -------------------------------------------------------------------------------------------------------------------#
# Epic              : https://jira.leveragetech.com.au/browse/DFCX1-79                                               #
# Description       : DFCX1-79 Land Development -  Precinct                                                          #
#--------------------------------------------------------------------------------------------------------------------#
# Evolutions        :                                                                                                #
# DFCX1-169   Majid   Creation object rules                                                                          #
######################################################################################################################
$ACTION
Case ACTION
  When "OUVRE"        : Gosub OUVRE
  When "FERME"        : Gosub FERME
  When "RAZCRE"       : Gosub RAZCRE
  When "LIENS"        : Gosub LIENS
  When "VERIF_CRE"    : Gosub VERIF_CRE
  When "CREATION"     : Gosub CREATION
  When "APRES_CRE"    : Gosub APRES_CRE
  When "MODIF"        : Gosub MODIF
  When "APRES_MOD"    : Gosub APRES_MOD
  When "RAZDUP"       : Gosub RAZDUP
  When "AV_ANNULE"    : Gosub AV_ANNULE
  When "ANNULE"       : Gosub ANNULE
  When Default
Endcase
Return

#------------------------------------------------------------------------------------#
#Open screen
#------------------------------------------------------------------------------------#
$OUVRE
#disable the regular Classic CUD operations
ANOWRITE = 1

#nstance for your class
Global Instance YPRE_INSTANCE Using C_YPRE

Return

#------------------------------------------------------------------------------------#
#Close screen
#------------------------------------------------------------------------------------#
$FERME
#When you are leaving the transaction, you have to free the instance.
If (YPRE_INSTANCE <> null) : FreeGroup YPRE_INSTANCE : Endif
Kill YPRE_INSTANCE

Return

#------------------------------------------------------------------------------------#
#Before Create
#------------------------------------------------------------------------------------#
$RAZCRE

Local Integer MY_STATUS

If (YPRE_INSTANCE <> null) : FreeGroup YPRE_INSTANCE : Endif
YPRE_INSTANCE = NewInstance C_YPRE AllocGroup null

#Then you have to initialize the class properties by calling the AINIT method and/or setting properties manually
[L]MY_STATUS = fmet YPRE_INSTANCE.AINIT()
If ([L]MY_STATUS >= [V]CST_AERROR)
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

#To finish you have to refresh the UI to display the values of initialized properties.
#Because it is not possible to directly transfer class property values into screen field values, you may use the file [F] as interface.
#Complete the process for properties and fields with non matching name

SetInstance [F:YPRC] With YPRE_INSTANCE
[M:YPRE]  = [F:YPRC]
[M:YPRE1] = [F:YPRC]

#[M:YPRE] = YEST_INSTANCE.PROPERTY

Affzo [M:YPRE]1-99
Affzo [M:YPRE1]1-99

Return

#------------------------------------------------------------------------------------#
#Read record
#------------------------------------------------------------------------------------#
$LIENS

If (YPRE_INSTANCE <> null) : FreeGroup YPRE_INSTANCE : Endif
YPRE_INSTANCE = NewInstance C_YPRE AllocGroup null
Local Integer MY_STATUS
[L]MY_STATUS = fmet YPRE_INSTANCE.AREAD(val([M:YPRE]YPREID))
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif
Read [F:YPRC]YPRC1 =[M:YPRE]YPREID
[M:YPRE1] = [F:YPRC]

Return

#------------------------------------------------------------------------------------#
#Create record
#------------------------------------------------------------------------------------#
$CREATION
Local Integer MY_STATUS

#YOU CAN USE THE INSTRUCTION SetInstance WHICH WILL SET PROPERTIE's values from field'S VALUES
#For PROPERTIE's names that are identical to a field'S NAME OF THE [F] File.
SetInstance YPRE_INSTANCE With [F:YPRC]

#SET NEW GUID VALUE FOR NEW RECORD THAT IS CREATED
YPRE_INSTANCE.YGUID   = num$(getUuid)

#JOBCODE - THIS FIELD IS ONLY BEING SET TO A VALUE AS THE SPEC DOES NOT SPECIFY EXACTLY WHAT IT NEEDS TO BE
YPRE_INSTANCE.YJOBCOD   = "001"

#SETS THE FIELD VALUES, AS THIS FIELDS WOULD NOT SAVE WITH THE AINSERT FUNCTION
YPRE_INSTANCE.YPREID     = [M:YPRE]YPREID
YPRE_INSTANCE.YVARFOR    = [M:YPRE1]YFUT + [M:YPRE1]YKNO
YPRE_INSTANCE.YESTID     = [M:YPRE1]YESTID

[L]MY_STATUS = fmet YPRE_INSTANCE.AINSERT()
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

SetInstance [F:YPRC] With YPRE_INSTANCE
Affzo [M:YPRE]1-99
Affzo [M:YPRE1]1-99

Return

#------------------------------------------------------------------------------------#
#After create record
#------------------------------------------------------------------------------------#
$APRES_CRE

Gosub RELIT From GOBJSUB

Return

#------------------------------------------------------------------------------------#
#Modify record
#------------------------------------------------------------------------------------#
$MODIF
Local Integer MY_STATUS

SetInstance YPRE_INSTANCE With [F:YPRC]

[L]MY_STATUS = fmet YPRE_INSTANCE.AUPDATE()
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

Return

#------------------------------------------------------------------------------------#
#AFTER UPDATE
#------------------------------------------------------------------------------------#
$APRES_MOD

Gosub RELIT From GOBJSUB

Return

#------------------------------------------------------------------------------------#
#This action is called when a field of the primary key is changed
#------------------------------------------------------------------------------------#
$RAZDUP
Local Integer MY_STATUS

If (YPRE_INSTANCE <> null) : FreeGroup YPRE_INSTANCE : Endif
YPRE_INSTANCE = NewInstance C_YPRE AllocGroup null

[L]MY_STATUS = fmet YPRE_INSTANCE.AINIT()
If ([L]MY_STATUS >= [V]CST_AERROR)
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

Return

#------------------------------------------------------------------------------------#
#Begin delete record
#------------------------------------------------------------------------------------#
$AV_ANNULE
  Local Integer ANOWRITE
  ANOWRITE = 1
Return

#------------------------------------------------------------------------------------#
#Delete record
#------------------------------------------------------------------------------------#
$ANNULE

Local Integer MY_STATUS
[L]MY_STATUS = fmet YPRE_INSTANCE.ADELETE()
If ([L]MY_STATUS >= [V]CST_AERROR)
  # Error management
  GMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_MAX_MESSAGE(YPRE_INSTANCE)
  GOK = 0 : GERR = 1
  Return
Endif

Return

#------------------------------------------------------------------------------------#
#Handle Classic Errors from Class
#------------------------------------------------------------------------------------#
Subprog RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)

  Variable Instance YPRE_INSTANCE Using C_YPRE

  Local Integer NI
  Local Char SMESSAGE(type(GMESSAGE)-10)
  Local Integer MY_STATUS
  Local Integer IMESSAGE

  IMESSAGE = func SYRSTACKTOOLS.MSGSTACK_GET_FIRST_UPPER_MESSAGE(YPRE_INSTANCE, SMESSAGE)
  If IMESSAGE = [V]CST_AWARNING Then
    GMESSAGE = SMESSAGE
    GERR = 2
  Elsif IMESSAGE = [V]CST_AERROR or IMESSAGE = [V]CST_AFATAL Then
    GMESSAGE = SMESSAGE
    GOK = 0
    GERR = 1
  Endif

  [L]MY_STATUS = [V]CST_AOK
End

#------------------------------------------------------------------------------------#
#Verificatio of create record
#------------------------------------------------------------------------------------#
$VERIF_CRE

# DFCX1-169 MZ: Create Company group
If func AFNC.ACTIV("YLAND")

  Local Tinyint YOK

  # If Job Code is empty and the Job Active flag is set to true, create a dimension value in the Dimension Type

  Local Char YDIE
  YDIE = func AFNC.PARAM ("YDEVDTY","")   # Read dimension type from general parameter
  If !clalev([F:YCCE])      :   Local File CACCE [YCCE]     :   Endif
  If !clalev([F:YATX])      :   Local File ATEXTRA [YATX]   :  Endif

  Filter [F:YCCE] Where DIE = YDIE
  Filter [F:YATX] Where CODFIC = 'CACCE'

  If YDIE <> ""
    If [M:YPRE]YJOBCOD = ""

      If [M:YPRE]YJOBACTFLG = 2
        Local Char YNAMEFILE(255)
        YNAMEFILE = "YLAND_YCCELAND_" + num$([M:YPRE]YPREID)
        Openo filpath('TMP',YNAMEFILE,"CSV") Using [F_YCCE]
        adxifs=','
        adxirs= chr$(13)+chr$(10)
        # MZ Company gorup field
        Wrseq YDIE , num$([M:YPRE]YPRENBR) , [M:YPRE]YPREDES , [M:YPRE]YPREDES , "", [M:YPRE]YJOBACTFLG , "0,2,0" Using [F_YCCE]
        Openo Using [F_YCCE]
        Call IMPORTSIL("YCCELAND", filpath('TMP',YNAMEFILE,"CSV")) From GIMPOBJ

        Look [F:YCCE]CCE0 = YDIE;num$([M:YPRE]YPRENBR)
        If !fstat
          [M:YPRE]YJOBCOD = num$([M:YPRE]YPRENBR)
        Else
          Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
          If GMESSAGE = AVOID.ACHAR Then
            GMESSAGE = mess(11,6255,1)       # Job code has not created successfully. Please create that manually and assign
            GERR = 2
          Endif
        Endif
      Endif   # [M:YPRE]YJOBACTFLG = 2

    # If the Job Code is populated,
    # ensure the active flage of dimension value is same as job active flag and the Description is the same as the Estate Description.
    Else  # [M:YPRE]YJOBCOD <> ""
      Read [F:YCCE]CCE0 = YDIE;[M:YPRE]YJOBCOD
      Read [F:YATX]AXX0 = 'CACCE';'DESTRA';'ENG';YDIE;[M:YPRE]YJOBCOD

      If !fstat
        If [F:YCCE]ENAFLG <> [M:YPRE]YJOBACTFLG
          Trbegin [F:YCCE]
          [F:YCCE]ENAFLG = [M:YPRE]YJOBACTFLG
          Rewrite [F:YCCE]
          If !fstat
            Commit
            Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
            If GMESSAGE = AVOID.ACHAR Then
              GMESSAGE = mess(6,6255,1)       # Activate flag of Job code Dimesnion was different System updated dimension
              GERR = 2
            Endif
          Else
            Rollback
            Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
            If GMESSAGE = AVOID.ACHAR Then
              GMESSAGE = mess(7,6255,1)       # Activate flag of Job code Dimesnion was different System could not update that
              GERR = 2
            Endif
          Endif
        Endif # [F:YCCE]ENAFLG <> [M:YPRE]YJOBACTFLG

        If [F:YCCE]DES <> [M:YPRE]YPREDES
          Trbegin [F:YCCE]
          [F:YCCE]DES = [M:YPRE]YPREDES
          [F:YATX]TEXTE = [M:YPRE]YPREDES
          Rewrite [F:YCCE]
          Rewrite [F:YATX]
          If !fstat
            Commit
            Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
            If GMESSAGE = AVOID.ACHAR Then
              GMESSAGE = mess(8,6255,1)       # Description of Job code Dimesnion was different and system updated dimension.
              GERR = 2
            Endif
          Else
            Rollback
            Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
            If GMESSAGE = AVOID.ACHAR Then
              GMESSAGE = mess(9,6255,1)       # Description of Job code Dimesnion was different and system updated dimension.
              GERR = 2
            Endif
          Endif
        Endif   # [F:YCCE]DES <> [M:YPRE]YPRECPYGRP

      Else
        Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
        If GMESSAGE = AVOID.ACHAR Then
          GMESSAGE = mess(10,6255,1)       # Job code does not exists on Dimenstion list.
          GERR = 1
        Endif
      Endif #   Read [F:YCCE]CCE0 = YDIE;[M:YPRE]YJOBCOD

    Endif # [M:YPRE]YJOBCOD = ""

  Else  # YDIE = ""
    Call RECOVERS_ERROR_IN_CLASSIC(YPRE_INSTANCE)
    If GMESSAGE = AVOID.ACHAR Then
      GMESSAGE = mess(2,6255,1)       # Dimension type has not configured on General parameter.
      GERR = 1
    Endif
  Endif # YDIE <> ""

Endif
# DFCX1-169 MZ: Delete records in the Company group as well

Return

