#<AdxTL>@(#)0.0.0.0 $Revision$Class Log
# Supervisor
## ACLA-CLASSE ## FXDLOG
# 2018-08-27 12:32:08 928

####################################################################
# Traitments
####################################################################
$_ADDTRT
this.AINF.TRT(1) = "FXDLOG_CSTD"
this.AINF.TYP(1) = 1
this.AINF.PTH(1) = ""
this.AINF.NBTRT = 1
Return

####################################################################
#Declaration of variables
####################################################################

$DECLARE_VAR
Local Char    ACTION(50) , CURPRO(250) , VALPRO(250) , CURQRY(50) , CURPTH(250)
Local Char    AMETHOD(50) ,AOPERATION(50),AEVENT(50),ARULE(50)
Local Integer ALLSTAT,AISMET,ASTATUS
Return

####################################################################
# Methods of the class
####################################################################
# Fmethod Creation
$LOG_CREATE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_CREATE" : [L]ACTION = "LOG_CREATE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Firm
$LOG_CLOSE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_CLOSE" : [L]ACTION = "LOG_CLOSE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Initialization
$LOG_SET_PARAMS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_SET_PARAMS" : [L]ACTION = "LOG_SET_PARAMS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Prepared
$LOG_ADD_COLUMN
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_ADD_COLUMN" : [L]ACTION = "LOG_ADD_COLUMN" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Prepared
$LOG_SET_COLUMN
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_SET_COLUMN" : [L]ACTION = "LOG_SET_COLUMN" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Replenishment
$LOG_PUT_COLUMN
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_PUT_COLUMN" : [L]ACTION = "LOG_PUT_COLUMN" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Replenishment
$LOG_PUT_STR_COLUMN
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_PUT_STR_COLUMN" : [L]ACTION = "LOG_PUT_STR_COLUMN" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Replenishment
$LOG_PUT_INT_COLUMN
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_PUT_INT_COLUMN" : [L]ACTION = "LOG_PUT_INT_COLUMN" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Replenishment
$LOG_PUT_DEC_COLUMN
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_PUT_DEC_COLUMN" : [L]ACTION = "LOG_PUT_DEC_COLUMN" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Replenishment
$LOG_PUT_DATE_COLUMN
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_PUT_DATE_COLUMN" : [L]ACTION = "LOG_PUT_DATE_COLUMN" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Returns the formatted line
$LOG_GET_LINE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_GET_LINE" : [L]ACTION = "LOG_GET_LINE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Entry
$LOG_WRITE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_WRITE" : [L]ACTION = "LOG_WRITE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Replenishment
$LOG_PUT_COLUMNS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_PUT_COLUMNS" : [L]ACTION = "LOG_PUT_COLUMNS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Replenishment
$LOG_PUT_COLUMNS_AND_WRITE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_PUT_COLUMNS_AND_WRITE" : [L]ACTION = "LOG_PUT_COLUMNS_AND_WRITE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Securities
$LOG_WRITE_TITLES
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_WRITE_TITLES" : [L]ACTION = "LOG_WRITE_TITLES" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Initialization
$LOG_INIT_LINE
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_INIT_LINE" : [L]ACTION = "LOG_INIT_LINE" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Totals
$LOG_WRITE_SUM
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_WRITE_SUM" : [L]ACTION = "LOG_WRITE_SUM" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Line flush in log
$LOG_FLUSH
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_FLUSH" : [L]ACTION = "LOG_FLUSH" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Entry
$LOG_WRITE_STRING
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_WRITE_STRING" : [L]ACTION = "LOG_WRITE_STRING" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Entry
$LOG_WRITE_STRING_WARNING
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_WRITE_STRING_WARNING" : [L]ACTION = "LOG_WRITE_STRING_WARNING" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Entry
$LOG_WRITE_STRING_ERROR
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_WRITE_STRING_ERROR" : [L]ACTION = "LOG_WRITE_STRING_ERROR" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Entry
$LOG_WRITE_STRING_STATUS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_WRITE_STRING_STATUS" : [L]ACTION = "LOG_WRITE_STRING_STATUS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Entry
$LOG_WRITE_STRING_SEPARATOR
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_WRITE_STRING_SEPARATOR" : [L]ACTION = "LOG_WRITE_STRING_SEPARATOR" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Entry
$LOG_WRITE_LINEFEED
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_WRITE_LINEFEED" : [L]ACTION = "LOG_WRITE_LINEFEED" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Header writing
$LOG_WRITE_HEADER
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_WRITE_HEADER" : [L]ACTION = "LOG_WRITE_HEADER" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Footer writing
$LOG_WRITE_FOOTER
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_WRITE_FOOTER" : [L]ACTION = "LOG_WRITE_FOOTER" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Deletes all columns
$LOG_REMOVE_ALL_COLUMNS
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_REMOVE_ALL_COLUMNS" : [L]ACTION = "LOG_REMOVE_ALL_COLUMNS" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Result
$LOG_NB_OK
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_NB_OK" : [L]ACTION = "LOG_NB_OK" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Replenishment
$LOG_PUT_COLUMNS_AND_WRITE_5
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_PUT_COLUMNS_AND_WRITE_5" : [L]ACTION = "LOG_PUT_COLUMNS_AND_WRITE_5" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Replenishment
$LOG_PUT_COLUMNS_AND_WRITE_10
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_PUT_COLUMNS_AND_WRITE_10" : [L]ACTION = "LOG_PUT_COLUMNS_AND_WRITE_10" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Log header
$LOG_SET_H_SIM
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_SET_H_SIM" : [L]ACTION = "LOG_SET_H_SIM" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Log header
$LOG_SET_H_USR
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_SET_H_USR" : [L]ACTION = "LOG_SET_H_USR" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Log header
$LOG_SET_H_CPY
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_SET_H_CPY" : [L]ACTION = "LOG_SET_H_CPY" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Log header
$LOG_SET_H_FCY
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_SET_H_FCY" : [L]ACTION = "LOG_SET_H_FCY" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return

# Fmethod Initialization
$LOG_INIT
Gosub DECLARE_VAR
[L]AISMET = [V]CST_AYES
[L]AMETHOD = "LOG_INIT" : [L]ACTION = "LOG_INIT" : [L]CURPRO = "" : Gosub ACTION_MET From ASYRSUB
Return


####################################################################
# AERRORS
####################################################################

$_AERROR
Gosub DECLARE_VAR From WMC0FXDLOG
Local Integer ALLSTAT
Call ALLERRORS(this,_CTX,_SUPP) From ASYRSUB
For AINDCLA=1 To maxtab(this.CEL_DEF)
 If this.CEL_DEF(AINDCLA)<>null
  [L]ASTATUS = fmet this.CEL_DEF(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
If this.TRC_CLASS<>null
 [L]ASTATUS = fmet this.TRC_CLASS._AERROR(_CTX,_SUPP)
Endif
For AINDCLA=1 To maxtab(this.CEL_VALUE)
 If this.CEL_VALUE(AINDCLA)<>null
  [L]ASTATUS = fmet this.CEL_VALUE(AINDCLA)._AERROR(_CTX,_SUPP)
 Endif
Next AINDCLA
Return

####################################################################
# Delete all errors
####################################################################

$_ADELERRORS
Gosub DECLARE_VAR From WMC0FXDLOG
Local Integer ALLSTAT
[L]ASTATUS = fmet this.ADELETEERROR([L]_APARAM)
For AINDCLA=1 To maxtab(this.CEL_DEF)
 If this.CEL_DEF(AINDCLA)<>null
  [L]ASTATUS = fmet this.CEL_DEF(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
If this.TRC_CLASS<>null
 [L]ASTATUS = fmet this.TRC_CLASS._ADELERRORS(_APARAM)
Endif
For AINDCLA=1 To maxtab(this.CEL_VALUE)
 If this.CEL_VALUE(AINDCLA)<>null
  [L]ASTATUS = fmet this.CEL_VALUE(AINDCLA)._ADELERRORS(_APARAM)
 Endif
Next AINDCLA
Return

####################################################################
# _ASEARCHINFOS
####################################################################

$_ASEARCHINFOS
Gosub DECLARE_VAR From WMC0FXDLOG
ASTATUS= func ASYRSUB.ASEARCHINFOS(this,[L]AINS_ORI,[L]ERR_TYPE,[L]PROPERTY,[L]ASTAT,[L]SELSTAT,[L]PATH)
If [L]ERR_TYPE=[V]CST_ACURRENT : Return : Endif
For AINDCLA=1 To maxtab(this.CEL_DEF)
 If this.CEL_DEF(AINDCLA)<>null
  [L]ASTATUS = fmet this.CEL_DEF(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CEL_DEF('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
If this.TRC_CLASS<>null
 [L]ASTATUS = fmet this.TRC_CLASS._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'TRC_CLASS')
Endif
For AINDCLA=1 To maxtab(this.CEL_VALUE)
 If this.CEL_VALUE(AINDCLA)<>null
  [L]ASTATUS = fmet this.CEL_VALUE(AINDCLA)._ASEARCHINFOS([L]AINS_ORI,ERR_TYPE,PROPERTY,ASTAT,SELSTAT,string$(PATH<>'',PATH+'.')+'CEL_VALUE('+num$(AINDCLA)+')')
 Endif
Next AINDCLA
Return

####################################################################
# AGETERRORSFROM
####################################################################

$_AGETERRORSFROM
Gosub DECLARE_VAR From WMC0FXDLOG
If AINS_FROM<>null
 [L]ASTATUS = fmet AINS_FROM.ASEARCHINFOS( [V]CST_ALL, "", [V]CST_AFATAL, 0)
Endif
Call AGETERRORSFROM(AINS_FROM,this,ENVIRONNEMENT) From ASYRSUB
Return

####################################################################
# ADELLINE
####################################################################
$ADELLINE
Case _ACOLLECTION
 When "CEL_DEF"
  If this.CEL_DEF([L]ALINE)<>null : FreeInstance this.CEL_DEF([L]ALINE) : this.CEL_DEF([L]ALINE) = null :Endif
 When "CEL_VALUE"
  If this.CEL_VALUE([L]ALINE)<>null : FreeInstance this.CEL_VALUE([L]ALINE) : this.CEL_VALUE([L]ALINE) = null :Endif
 When "TRC_CLASS"
  If this.TRC_CLASS([L]ALINE)<>null : FreeInstance this.TRC_CLASS([L]ALINE) : this.TRC_CLASS([L]ALINE) = null :Endif
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# ADDLINE
####################################################################
$ADDLINE
Case _ACOLLECTION
 When "CEL_DEF"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CEL_DEF","C_FXDLOG_CEL_DEF",this)
 When "CEL_VALUE"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"CEL_VALUE","C_FXDLOG_CEL_VALUE",this)
 When "TRC_CLASS"
  [L]_ALINE = func ASYRSUBTAB.ADDLINE([L]ALINE,"TRC_CLASS","C_ALOG",this)
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETDIM
####################################################################
$AGETDIM
Case _ACOLLECTION
 When "CEL_DEF"
  [L]_ALINE = 0
 When "CEL_VALUE"
  [L]_ALINE = 0
 When "TRC_CLASS"
  [L]_ALINE = 1
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# AGETMIN
####################################################################
$AGETMIN
Case _ACOLLECTION
 When "CEL_DEF"
  [L]_ALINE = 2
 When "CEL_VALUE"
  [L]_ALINE = 1
 When "TRC_CLASS"
  [L]_ALINE = 2
 When Default :
  [L]_ALINE = [V]CST_ANOTDEFINED
Endcase
Return

####################################################################
# _ADELINSTANCE
####################################################################
$_ADELINSTANCE
[L]ASTATUS = func ASYRSUBTAB._ADELINSTANCE(this)
Return

####################################################################
# ADDINSTANCE_BOUND
####################################################################
$ADDINSTANCE_BOUND
this.TRC_CLASS(1) = NewInstance C_ALOG(this.ACTX,NullUuid,1,this,"TRC_CLASS") AllocGroup this
this.TRC_CLASS(1).ASTALIN = [V]CST_ANEW
[L]ASTATUS = fmet this.TRC_CLASS(1).ACTION("ADDLINE_AFTER")
If [L]ASTATUS>=[V]CST_AERROR : [L]ASTATUS = [V]CST_ANOTDEFINED : Return : Endif
Return



